language: scala
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorial += n\n        factorial\
    \ += factorial(n-1)\n        factorial += factorial(n - 2)\n        factorial\
    \ += factorial(n - 3)\n        factorial += factorial(n - 4)\n        factorial\
    \ += factorial(n - 5)\n        factorial += factorial(n - 6)\n        factorial\
    \ += factorial(n - 7)\n        factorial += factorial(n - 8)\n        factorial\
    \ += factorial(n - 9)\n        factorial += factorial(n - 10)\n        factorial\
    \ += factorial(n - 11)\n        factorial += factorial(n - 12)\n        factorial\
    \ += factorial(n - 13)\n        factorial += factorial(n - 14)\n        factorial\
    \ += factorial(n - 15)\n        factorial += factorial(n - 16)\n        factorial\
    \ += factorial(n - 17)\n        factorial += factorial(n - 18)\n        factorial\
    \ += factorial(n - 19)\n        factorial += factorial(n - 20)\n        factorial\
    \ += factorial(n - 21)\n        factorial += factorial(n - 22)\n        factorial\
    \ += factorial(n - 23)\n        factorial += factorial(n - 24)\n        factorial\
    \ += factorial(n - 25)\n        factorial += factorial(n - 26)\n        factorial\
    \ += factorial(n - 27)\n        factorial += factorial(n - 28)\n        factorial\
    \ += factorial(n - 29)\n        factorial += factorial(n - 30)\n        factorial\
    \ += factorial(n - 31)\n        factorial += factorial(n - 32)\n        factorial\
    \ += factorial(n - 33)\n        factorial += factorial(n - 34)\n        factorial\
    \ += factorial(n - 35)\n        factorial += factorial(n - 36)\n        factorial\
    \ += factorial(n - 37)\n        factorial += factorial(n - 38)\n        factorial\
    \ += factorial(n - 39)\n        factorial += factorial(n - 40)\n        factorial\
    \ += factorial(n - 41)\n        factorial += factorial(n - 42)\n        factorial\
    \ += factorial(n - 43)\n        factorial += factorial(n - 44)\n        factorial\
    \ += factorial(n - 45)\n        factorial += factorial(n - 46)\n        factorial\
    \ += factorial(n - 47)\n        factorial += factorial(n - 48)\n        factorial\
    \ += factorial(n - 49)\n        factorial += factorial(n - 50)\n        factorial\
    \ += factorial(n - 51)\n        factorial += factorial(n - 52)\n        \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsc3lepmn.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7czzywd.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n - 1)\n        factorials += factorials(n - 2)\n        factorials\
    \ += factorials(n - 3)\n        factorials += factorials(n - 4)\n        factorials\
    \ += factorials(n - 5)\n        factorials += factorials(n - 6)\n        factorials\
    \ += factorials(n - 7)\n        factorials += factorials(n - 8)\n        factorials\
    \ += factorials(n - 9)\n        factorials += factorials(n - 10)\n        factorials\
    \ += factorials(n - 11)\n        factorials += factorials(n - 12)\n        factorials\
    \ += factorials(n - 13)\n        factorials += factorials(n - 14)\n        factorials\
    \ += factorials(n - 15)\n        factorials += factorials(n - 16)\n        factorials\
    \ += factorials(n - 17)\n        factorials += factorials(n - 18)\n        factorials\
    \ += factorials(n - 19)\n        factorials += factorials(n - 20)\n        factorials\
    \ += factorials(n - 21)\n        factorials += factorials(n - 22)\n        factorials\
    \ += factorials(n - 23)\n        factorials += factorials(n - 24)\n        factorials\
    \ += factorials(n - 25)\n        factorials += factorials(n - 26)\n        factorials\
    \ += factorials(n - 27)\n        factorials += factorials(n - 28)\n        factorials\
    \ += factorials(n - 29)\n        factorials += factorials(n - 30)\n        factorials\
    \ += factorials(n - 31)\n        factorials += factorials(n - 32)\n        factorials\
    \ += factorials(n - 33)\n        factorials += factorials(n - 34)\n        factorials\
    \ += factorials(n - 35)\n        factorials += factorials(n - 36)\n        factorials\
    \ += factorials(n - 37)\n        factorials += factorials(n - 38)\n        factorials\
    \ += factorials(n - 39)\n        factorials += factorials(n - 40)\n        factorials\
    \ += factorials(n - 41)\n        factorials += factorials(n - 42)\n        factorials\
    \ += factorials(n - 43)\n        factorials += factorials(n - 44)\n        factorials\
    \ += factorials(n - 45)\n        factorials += factorials(n - 46)\n        factorials\
    \ += factorials(n - 47)\n        factori\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr86puy_b.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr86puy_b.scala:62:8 -------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n) {\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpifz4f2a5.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpifz4f2a5.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpifz4f2a5.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        factorials\
    \ += factorial\n        factorials += factorial * (n - 1)\n        factorials\
    \ += factorial * (n - 2)\n        factorials += factorial * (n - 3)\n        factorials\
    \ += factorial * (n - 4)\n        factorials += factorial * (n - 5)\n        factorials\
    \ += factorial * (n - 6)\n        factorials += factorial * (n - 7)\n        factorials\
    \ += factorial * (n - 8)\n        factorials += factorial * (n - 9)\n        factorials\
    \ += factorial * (n - 10)\n        factorials += factorial * (n - 11)\n      \
    \  factorials += factorial * (n - 12)\n        factorials += factorial * (n -\
    \ 13)\n        factorials += factorial * (n - 14)\n        factorials += factorial\
    \ * (n - 15)\n        factorials += factorial * (n - 16)\n        factorials +=\
    \ factorial * (n - 17)\n        factorials += factorial * (n - 18)\n        factorials\
    \ += factorial * (n - 19)\n        factorials += factorial * (n - 20)\n      \
    \  factorials += factorial * (n - 21)\n        factorials += factorial * (n -\
    \ 22)\n        factorials += factorial * (n - 23)\n        factorials += factorial\
    \ * (n - 24)\n        factorials += factorial * (n - 25)\n        factorials +=\
    \ factorial * (n - 26)\n        factorials += factorial * (n - 27)\n        factorials\
    \ += factorial * (n - 28)\n        factorials += factorial * (n - 29)\n      \
    \  factorials += factorial * (n - 30)\n        factorials += factorial * (n -\
    \ 31)\n        factorials += factorial * (n - 32)\n        factorials += factorial\
    \ * (n - 33)\n        factorials += factorial * (n - 34)\n        factorials +=\
    \ factorial * (n - 35)\n        factorials += factorial * (n - 36)\n        factorials\
    \ += factorial * (n - 37)\n        factorials += factorial * (n - 38)\n      \
    \  factorials += factorial * (n - 39)\n        factorials += factorial * (n -\
    \ 40)\n        factorials += factorial * (n - 41)\n        factorials += factorial\
    \ * (n - 42)\n        factorials += factorial * (n - 43)\n        factorials +=\
    \ factorial * (n - 44)\n        factorials += factorial * (n - 45)\n        factorials\
    \ += factorial * (n - 46)\n        factorials += factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6d3zawlj.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += n\n        factorials\
    \ += factorials(0) * factorials(1)\n        factorials += factorials(0) * factorials(1)\
    \ * factorials(2)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3) * factorials(4)\n        factorials += factorials(0) * factorials(1)\
    \ * factorials(2) * factorials(3) * factorials(4) * factorials(5)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3) * factorials(4)\
    \ * factorials(5) * factorials(6)\n        factorials += factorials(0) * factorials(1)\
    \ * factorials(2) * factorials(3) * factorials(4) * factorials(5) * factorials(6)\
    \ * factorials(7)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3) * factorials(4) * factorials(5) * factorials(6) * factorials(7)\
    \ * factorials(8)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3) * factorials(4) * factorials(5) * factorials(6) * factorials(7)\
    \ * factorials(8) * factorials(9)\n        factorials += factorials(0) * factorials(1)\
    \ * factorials(2) * factorials(3) * factorials(4) * factorials(5) * factorials(6)\
    \ * factorials(7) * factorials(8) * factorials(9) * factorials(10)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3) * factorials(4)\
    \ * factorials(5) * factorials(6) * factorials(7) * factorials(8) * factorials(9)\
    \ * factorials(10) * factorials(11)\n        factorials += factorials(0) * factorials(1)\
    \ * factorials(2) * factorials(3) * factorials(4) * factorials(5) * factorials(6)\
    \ * factorials(7) * factorials(8) * factorials(9) * factorials(10) * factorials(11)\
    \ * factorials(12)\n        factorials += factorials(0) * factorials(1) * factorial\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy08wofeh.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += n\n        factorials\
    \ += factorials(0) * factorials(1)\n        factorials += factorials(0) * factorials(1)\n\
    \        factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjg_5d48c.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpjg_5d48c.scala:50:8 -------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n        }\n    \
    \    return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8hb9febq.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n        }\n    \
    \    return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8hb9febq.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7czzywd.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n        }\n   \
    \     return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1s2g7ywc.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7czzywd.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptpojhni5.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptpojhni5.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptpojhni5.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n) {\n            factorials += factorial\n            factorial *=\
    \ i\n        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxti02l0d.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxti02l0d.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxti02l0d.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkr0rea42.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkr0rea42.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr0rea42.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 0 until n) {\n            factorial *= i\n        }\n\
    \        return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph5pj1ak_.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n) {\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1jhn0ea.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu1jhn0ea.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu1jhn0ea.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for (i <- 1 to n) {\n            factorial *= i\n        }\n  \
    \      return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcudoaulu.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi3p0f7fq.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi3p0f7fq.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7czzywd.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = 1 // 1! = 1\n        var factorial5 = 1 // 1! = 1\n        var factorial6\
    \ = 1 // 1! = 1\n        var factorial7 = 1 // 1! = 1\n        var factorial8\
    \ = 1 // 1! = 1\n        var factorial9 = 1 // 1! = 1\n        var factorial10\
    \ = 1 // 1! = 1\n        var factorial11 = 1 // 1! = 1\n        var factorial12\
    \ = 1 // 1! = 1\n        var factorial13 = 1 // 1! = 1\n        var factorial14\
    \ = 1 // 1! = 1\n        var factorial15 = 1 // 1! = 1\n        var factorial16\
    \ = 1 // 1! = 1\n        var factorial17 = 1 // 1! = 1\n        var factorial18\
    \ = 1 // 1! = 1\n        var factorial19 = 1 // 1! = 1\n        var factorial20\
    \ = 1 // 1! = 1\n        var factorial21 = 1 // 1! = 1\n        var factorial22\
    \ = 1 // 1! = 1\n        var factorial23 = 1 // 1! = 1\n        var factorial24\
    \ = 1 // 1! = 1\n        var factorial25 = 1 // 1! = 1\n        var factorial26\
    \ = 1 // 1! = 1\n        var factorial27 = 1 // 1! = 1\n        var factorial28\
    \ = 1 // 1! = 1\n        var factorial29 = 1 // 1! = 1\n        var factorial30\
    \ = 1 // 1! = 1\n        var factorial31 = 1 // 1! = 1\n        var factorial32\
    \ = 1 // 1! = 1\n        var factorial33 = 1 // 1! = 1\n        var factorial34\
    \ = 1 // 1! = 1\n        var factorial35 = 1 // 1! = 1\n        var factorial36\
    \ = 1 // 1! = 1\n        var factorial37 = 1 // 1! = 1\n        var factorial38\
    \ = 1 // 1! = 1\n        var factorial39 = 1 // 1! = 1\n        var factorial40\
    \ = 1 // 1! = 1\n        var factorial41 = 1 // 1! = 1\n        var factorial42\
    \ = 1 // 1! = 1\n        var factorial43 = 1 // 1! = 1\n        var factorial44\
    \ = 1 // 1! = 1\n        var factorial45 = 1 // 1! = 1\n        var factorial46\
    \ = 1 // 1! = 1\n        var factorial47 = 1 // 1! = 1\n        var factorial48\
    \ = 1 // 1! = 1\n        var factorial49 = 1 // 1! = 1\n        var factorial50\
    \ = 1 // 1! = 1\n        var factorial51 = 1 // 1! = 1\n        var factorial52\
    \ = 1 // 1\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm515bzeh.scala:65:5\
    \ ---------------------\e[0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6is0wfzi.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6is0wfzi.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6is0wfzi.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiumz0_f9.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiumz0_f9.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorials += factorial\n            factorial *= i\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ojmzgd4.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3ojmzgd4.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ojmzgd4.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorials += factorial\n            factorial *=\
    \ i\n        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2y70mwlv.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2y70mwlv.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2y70mwlv.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n        }\n   \
    \     return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1s2g7ywc.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorials += factorial\n            factorial *=\
    \ i\n        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2y70mwlv.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2y70mwlv.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2y70mwlv.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n        }\n   \
    \     return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1s2g7ywc.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpio09at8d.scala:17)\n\tat Problem.main(tmpio09at8d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.ArrayBuffer(1L)\n        val factorials = mutable.ArrayBuffer(1L)\n\
    \        val factorials_2 = mutable.ArrayBuffer(1L)\n        val factorials_3\
    \ = mutable.ArrayBuffer(1L)\n        val factorials_4 = mutable.ArrayBuffer(1L)\n\
    \        val factorials_5 = mutable.ArrayBuffer(1L)\n        val factorials_6\
    \ = mutable.ArrayBuffer(1L)\n        val factorials_7 = mutable.ArrayBuffer(1L)\n\
    \        val factorials_8 = mutable.ArrayBuffer(1L)\n        val factorials_9\
    \ = mutable.ArrayBuffer(1L)\n        val factorials_10 = mutable.ArrayBuffer(1L)\n\
    \        val factorials_11 = mutable.ArrayBuffer(1L)\n        val factorials_12\
    \ = mutable.ArrayBuffer(1L)\n        val factorials_13 = mutable.ArrayBuffer(1L)\n\
    \        val factorials_14 = mutable.ArrayBuffer(1L)\n        val factorials_15\
    \ = mutable.ArrayBuffer(1L)\n        val factorials_16 = mutable.ArrayBuffer(1L)\n\
    \        val factorials_17 = mutable.ArrayBuffer(1L)\n        val factorials_18\
    \ = mutable.ArrayBuffer(1L)\n        val factorials_19 = mutable.ArrayBuffer(1L)\n\
    \        val factorials_20 = mutable.ArrayBuffer(1L)\n        val factorials_21\
    \ = mutable.ArrayBuffer(1L)\n        val factorials_22 = mutable.ArrayBuffer(1L)\n\
    \        val factorials_23 = mutable.ArrayBuffer(1L)\n        val factorials_24\
    \ = mutable.ArrayBuffer(1L)\n        val factorials_25 = mutable.ArrayBuffer(1L)\n\
    \        val factorials_26 = mutable.ArrayBuffer(1L)\n        val factorials_27\
    \ = mutable.ArrayBuffer(1L)\n        val factorials_28 = mutable.ArrayBuffer(1L)\n\
    \        val factorials_29 = mutable.ArrayBuffer(1L)\n        val factorials_30\
    \ = mutable.ArrayBuffer(1L)\n        val factorials_31 = mutable.ArrayBuffer(1L)\n\
    \        val factorials_32 = mutable.ArrayBuffer(1L)\n        val factorials_33\
    \ = mutable.ArrayBuffer(1L)\n        val factorials_34 = mutable.ArrayBuffer(1L)\n\
    \        val factorials_35 = mutable.ArrayBuffer(1L)\n        val factorials_36\
    \ = mutable.ArrayBuffer(1L)\n        val factorials_37 = mutable.Array\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkupn_62n.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.ArrayBuffer(\e\
    [31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpkupn_62n.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer(\e\
    [31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpkupn_62n.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials_2\e[0m = mutable.ArrayBuffer(\e\
    [31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkupn_62n.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorials_3\e[0m = mutable.ArrayBuffer(\e\
    [31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkupn_62n.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorials_4\e[0m = mutable.ArrayBuffer(\e\
    [31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkupn_62n.scala:18:27 ------------------------\e\
    [0"
  stdout: ''
  timestamp: 1659794452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n        }\n   \
    \     return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1s2g7ywc.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkr0rea42.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkr0rea42.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr0rea42.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += n\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp06ghwics.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n        }\n    \
    \    return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8hb9febq.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += n\n        factorials\
    \ += factorials(n - 1)\n        factorials += factorials(n - 2)\n        factorials\
    \ += factorials(n - 3)\n        factorials += factorials(n - 4)\n        factorials\
    \ += factorials(n - 5)\n        factorials += factorials(n - 6)\n        factorials\
    \ += factorials(n - 7)\n        factorials += factorials(n - 8)\n        factorials\
    \ += factorials(n - 9)\n        factorials += factorials(n - 10)\n        factorials\
    \ += factorials(n - 11)\n        factorials += factorials(n - 12)\n        factorials\
    \ += factorials(n - 13)\n        factorials += factorials(n - 14)\n        factorials\
    \ += factorials(n - 15)\n        factorials += factorials(n - 16)\n        factorials\
    \ += factorials(n - 17)\n        factorials += factorials(n - 18)\n        factorials\
    \ += factorials(n - 19)\n        factorials += factorials(n - 20)\n        factorials\
    \ += factorials(n - 21)\n        factorials += factorials(n - 22)\n        factorials\
    \ += factorials(n - 23)\n        factorials += factorials(n - 24)\n        factorials\
    \ += factorials(n - 25)\n        factorials += factorials(n - 26)\n        factorials\
    \ += factorials(n - 27)\n        factorials += factorials(n - 28)\n        factorials\
    \ += factorials(n - 29)\n        factorials += factorials(n - 30)\n        factorials\
    \ += factorials(n - 31)\n        factorials += factorials(n - 32)\n        factorials\
    \ += factorials(n - 33)\n        factorials += factorials(n - 34)\n        factorials\
    \ += factorials(n - 35)\n        factorials += factorials(n - 36)\n        factorials\
    \ += factorials(n - 37)\n        factorials += factorials(n - 38)\n        factorials\
    \ += factorials(n - 39)\n        factorials += factorials(n - 40)\n        factorials\
    \ += factorials(n - 41)\n        factorials += factorials(n - 42)\n        factorials\
    \ += factorials(n - 43)\n        factorials += factorials(n - 44)\n        factorials\
    \ += factorials(n - 45)\n        factorials += factorials(n - 46)\n        factorials\
    \ += factorials(n - 47)\n        factori\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2b09ltgm.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2b09ltgm.scala:62:8 -------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n) {\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpifz4f2a5.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpifz4f2a5.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpifz4f2a5.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxgvog9nk.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:19:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659794454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 0 until n){\n            factorial *= i\n        }\n \
    \       return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmveobep.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * (n-1) * (n-2) * ... * 1\n        factorials.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpor6ygqrl.scala:15:42 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        factorials += n * (n-\e[31m1\e[0m) * (n-\e[31m2\e\
    [0m) * ... * \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                             \
    \             ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpor6ygqrl.scala:13:25 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794450
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpio09at8d.scala:17)\n\tat Problem.main(tmpio09at8d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var counter = 1\n        while (counter <= n) {\n            factorial\
    \ *= counter\n            counter += 1\n        }\n        return factorial\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphoxlu83d.scala:22)\n\tat Problem.main(tmphoxlu83d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxgvog9nk.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:19:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659794454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += n\n        factorials\
    \ += factorials(0) * factorials(1)\n        factorials += factorials(0) * factorials(1)\n\
    \        factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjg_5d48c.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpjg_5d48c.scala:50:8 -------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorials += factorial\n            factorial *=\
    \ i\n        }\n        factorials.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1nz_sviv.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1nz_sviv.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1nz_sviv.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorials += factorial\n            factorial *= i\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ojmzgd4.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3ojmzgd4.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ojmzgd4.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorial += n\n        factorial\
    \ += n-1\n        factorial += n-2\n        factorial += n-3\n        factorial\
    \ += n-4\n        factorial += n-5\n        factorial += n-6\n        factorial\
    \ += n-7\n        factorial += n-8\n        factorial += n-9\n        factorial\
    \ += n-10\n        factorial += n-11\n        factorial += n-12\n        factorial\
    \ += n-13\n        factorial += n-14\n        factorial += n-15\n        factorial\
    \ += n-16\n        factorial += n-17\n        factorial += n-18\n        factorial\
    \ += n-19\n        factorial += n-20\n        factorial += n-21\n        factorial\
    \ += n-22\n        factorial += n-23\n        factorial += n-24\n        factorial\
    \ += n-25\n        factorial += n-26\n        factorial += n-27\n        factorial\
    \ += n-28\n        factorial += n-29\n        factorial += n-30\n        factorial\
    \ += n-31\n        factorial += n-32\n        factorial += n-33\n        factorial\
    \ += n-34\n        factorial += n-35\n        factorial += n-36\n        factorial\
    \ += n-37\n        factorial += n-38\n        factorial += n-39\n        factorial\
    \ += n-40\n        factorial += n-41\n        factorial += n-42\n        factorial\
    \ += n-43\n        factorial += n-44\n        factorial += n-45\n        factorial\
    \ += n-46\n        factorial += n-47\n        factorial += n-48\n        factorial\
    \ += n-49\n        factorial += n-50\n        factorial += n-51\n        factorial\
    \ += n-52\n        factorial += n-53\n        factorial += n-54\n        factorial\
    \ += n-55\n        factorial += n-56\n        factorial += n-57\n        factorial\
    \ += n-58\n        factorial += n-59\n        factorial += n-60\n        factorial\
    \ += n-61\n        factorial += n-62\n        factorial += n-63\n        factorial\
    \ += n-64\n        factorial += n-65\n        factorial += n-66\n        factorial\
    \ += n-67\n        factorial += n-68\n        factorial += n-69\n        factorial\
    \ += n-70\n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp266zbru7.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcqgn_vhs.scala:17)\n\tat Problem.main(tmpcqgn_vhs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n        }\n   \
    \     return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1s2g7ywc.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpio09at8d.scala:17)\n\tat Problem.main(tmpio09at8d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        for(i\
    \ <- 1 to n) {\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbb12gahv.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbb12gahv.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n        }\n    \
    \    return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8hb9febq.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n        }\n   \
    \     return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1s2g7ywc.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxgvog9nk.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:19:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659794454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += n\n        factorials\
    \ += factorials(n - 1)\n        factorials += factorials(n - 2)\n        factorials\
    \ += factorials(n - 3)\n        factorials += factorials(n - 4)\n        factorials\
    \ += factorials(n - 5)\n        factorials += factorials(n - 6)\n        factorials\
    \ += factorials(n - 7)\n        factorials += factorials(n - 8)\n        factorials\
    \ += factorials(n - 9)\n        factorials += factorials(n - 10)\n        factorials\
    \ += factorials(n - 11)\n        factorials += factorials(n - 12)\n        factorials\
    \ += factorials(n - 13)\n        factorials += factorials(n - 14)\n        factorials\
    \ += factorials(n - 15)\n        factorials += factorials(n - 16)\n        factorials\
    \ += factorials(n - 17)\n        factorials += factorials(n - 18)\n        factorials\
    \ += factorials(n - 19)\n        factorials += factorials(n - 20)\n        factorials\
    \ += factorials(n - 21)\n        factorials += factorials(n - 22)\n        factorials\
    \ += factorials(n - 23)\n        factorials += factorials(n - 24)\n        factorials\
    \ += factorials(n - 25)\n        factorials += factorials(n - 26)\n        factorials\
    \ += factorials(n - 27)\n        factorials += factorials(n - 28)\n        factorials\
    \ += factorials(n - 29)\n        factorials += factorials(n - 30)\n        factorials\
    \ += factorials(n - 31)\n        factorials += factorials(n - 32)\n        factorials\
    \ += factorials(n - 33)\n        factorials += factorials(n - 34)\n        factorials\
    \ += factorials(n - 35)\n        factorials += factorials(n - 36)\n        factorials\
    \ += factorials(n - 37)\n        factorials += factorials(n - 38)\n        factorials\
    \ += factorials(n - 39)\n        factorials += factorials(n - 40)\n        factorials\
    \ += factorials(n - 41)\n        factorials += factorials(n - 42)\n        factorials\
    \ += factorials(n - 43)\n        factorials += factorials(n - 44)\n        factorials\
    \ += factorials(n - 45)\n        factorials += factorials(n - 46)\n        factorials\
    \ += factorials(n - 47)\n        factori\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2b09ltgm.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2b09ltgm.scala:62:8 -------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += n\n        factorials\
    \ += factorials(0) * factorials(1)\n        factorials += factorials(0) * factorials(1)\n\
    \        factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjg_5d48c.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpjg_5d48c.scala:50:8 -------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7czzywd.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiumz0_f9.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiumz0_f9.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkr0rea42.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkr0rea42.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr0rea42.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpio09at8d.scala:17)\n\tat Problem.main(tmpio09at8d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += n\n        factorials\
    \ += factorials(0) * factorials(1)\n        factorials += factorials(0) * factorials(1)\n\
    \        factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjg_5d48c.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpjg_5d48c.scala:50:8 -------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorial += n\n        factorial\
    \ += n-1\n        factorial += n-2\n        factorial += n-3\n        factorial\
    \ += n-4\n        factorial += n-5\n        factorial += n-6\n        factorial\
    \ += n-7\n        factorial += n-8\n        factorial += n-9\n        factorial\
    \ += n-10\n        factorial += n-11\n        factorial += n-12\n        factorial\
    \ += n-13\n        factorial += n-14\n        factorial += n-15\n        factorial\
    \ += n-16\n        factorial += n-17\n        factorial += n-18\n        factorial\
    \ += n-19\n        factorial += n-20\n        factorial += n-21\n        factorial\
    \ += n-22\n        factorial += n-23\n        factorial += n-24\n        factorial\
    \ += n-25\n        factorial += n-26\n        factorial += n-27\n        factorial\
    \ += n-28\n        factorial += n-29\n        factorial += n-30\n        factorial\
    \ += n-31\n        factorial += n-32\n        factorial += n-33\n        factorial\
    \ += n-34\n        factorial += n-35\n        factorial += n-36\n        factorial\
    \ += n-37\n        factorial += n-38\n        factorial += n-39\n        factorial\
    \ += n-40\n        factorial += n-41\n        factorial += n-42\n        factorial\
    \ += n-43\n        factorial += n-44\n        factorial += n-45\n        factorial\
    \ += n-46\n        factorial += n-47\n        factorial += n-48\n        factorial\
    \ += n-49\n        factorial += n-50\n        factorial += n-51\n        factorial\
    \ += n-52\n        factorial += n-53\n        factorial += n-54\n        factorial\
    \ += n-55\n        factorial += n-56\n        factorial += n-57\n        factorial\
    \ += n-58\n        factorial += n-59\n        factorial += n-60\n        factorial\
    \ += n-61\n        factorial += n-62\n        factorial += n-63\n        factorial\
    \ += n-64\n        factorial += n-65\n        factorial += n-66\n        factorial\
    \ += n-67\n        factorial += n-68\n        factorial += n-69\n        factorial\
    \ += n-70\n        \n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxm34vhs4.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n) {\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpifz4f2a5.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpifz4f2a5.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpifz4f2a5.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkr0rea42.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkr0rea42.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr0rea42.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkr0rea42.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkr0rea42.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr0rea42.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkr0rea42.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkr0rea42.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr0rea42.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 0 until n){\n            factorial *= i\n        }\n \
    \       return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmveobep.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpio09at8d.scala:17)\n\tat Problem.main(tmpio09at8d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += n\n        factorials\
    \ += factorials(0) * factorials(1)\n        factorials += factorials(0) * factorials(2)\n\
    \        factorials += factorials(0) * factorials(3)\n        factorials += factorials(0)\
    \ * factorials(4)\n        factorials += factorials(0) * factorials(5)\n     \
    \   factorials += factorials(0) * factorials(6)\n        factorials += factorials(0)\
    \ * factorials(7)\n        factorials += factorials(0) * factorials(8)\n     \
    \   factorials += factorials(0) * factorials(9)\n        factorials += factorials(0)\
    \ * factorials(10)\n        factorials += factorials(0) * factorials(11)\n   \
    \     factorials += factorials(0) * factorials(12)\n        factorials += factorials(0)\
    \ * factorials(13)\n        factorials += factorials(0) * factorials(14)\n   \
    \     factorials += factorials(0) * factorials(15)\n        factorials += factorials(0)\
    \ * factorials(16)\n        factorials += factorials(0) * factorials(17)\n   \
    \     factorials += factorials(0) * factorials(18)\n        factorials += factorials(0)\
    \ * factorials(19)\n        factorials += factorials(0) * factorials(20)\n   \
    \     factorials += factorials(0) * factorials(21)\n        factorials += factorials(0)\
    \ * factorials(22)\n        factorials += factorials(0) * factorials(23)\n   \
    \     factorials += factorials(0) * factorials(24)\n        factorials += factorials(0)\
    \ * factorials(25)\n        factorials += factorials(0) * factorials(26)\n   \
    \     factorials += factorials(0) * factorials(27)\n        factorials += factorials(0)\
    \ * factorials(28)\n        factorials += factorials(0) * factorials(29)\n   \
    \     factorials += factorials(0) * factorials(30)\n        factorials += factorials(0)\
    \ * factorials(31)\n        factorials += factorials(0) * factorials(32)\n   \
    \     factorials += factorials(0) * factorials(33)\n        factorials += factorials(0)\
    \ * factorials(34)\n        factorials += factorials(\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxw9bilxe.scala:49:33 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        factorials += factorials(\n\e[31m\e[31m   |\e\
    [0m                                 ^\e[0m\n\e[31m   |\e[0m                  \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxw9bilxe.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794452
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcqgn_vhs.scala:17)\n\tat Problem.main(tmpcqgn_vhs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for (i <- 1 to n) {\n            factorial *= i\n        }\n  \
    \      return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcudoaulu.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxgvog9nk.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:19:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659794454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = n\n        while (factorial4 > 1) {\n            factorial *= factorial4\n\
    \            factorial2 *= factorial4\n            factorial3 *= factorial4\n\
    \            factorial4 -= 1\n        }\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvzt8tc76.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            factorial *= factorial4\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpvzt8tc76.scala:19:23 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            factorial2 *= factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvzt8tc76.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            factorial3 *=\
    \ factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value *= is not a member of Int - did you mean Int.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxgvog9nk.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:19:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659794454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxgvog9nk.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:19:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659794454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkr0rea42.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkr0rea42.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr0rea42.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n        }\n    \
    \    return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8hb9febq.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorial += n\n        factorial\
    \ += n-1\n        factorial += n-2\n        factorial += n-3\n        factorial\
    \ += n-4\n        factorial += n-5\n        factorial += n-6\n        factorial\
    \ += n-7\n        factorial += n-8\n        factorial += n-9\n        factorial\
    \ += n-10\n        factorial += n-11\n        factorial += n-12\n        factorial\
    \ += n-13\n        factorial += n-14\n        factorial += n-15\n        factorial\
    \ += n-16\n        factorial += n-17\n        factorial += n-18\n        factorial\
    \ += n-19\n        factorial += n-20\n        factorial += n-21\n        factorial\
    \ += n-22\n        factorial += n-23\n        factorial += n-24\n        factorial\
    \ += n-25\n        factorial += n-26\n        factorial += n-27\n        factorial\
    \ += n-28\n        factorial += n-29\n        factorial += n-30\n        factorial\
    \ += n-31\n        factorial += n-32\n        factorial += n-33\n        factorial\
    \ += n-34\n        factorial += n-35\n        factorial += n-36\n        factorial\
    \ += n-37\n        factorial += n-38\n        factorial += n-39\n        factorial\
    \ += n-40\n        factorial += n-41\n        factorial += n-42\n        factorial\
    \ += n-43\n        factorial += n-44\n        factorial += n-45\n        factorial\
    \ += n-46\n        factorial += n-47\n        factorial += n-48\n        factorial\
    \ += n-49\n        factorial += n-50\n        factorial += n-51\n        factorial\
    \ += n-52\n        factorial += n-53\n        factorial += n-54\n        factorial\
    \ += n-55\n        factorial += n-56\n        factorial += n-57\n        factorial\
    \ += n-58\n        factorial += n-59\n        factorial += n-60\n        factorial\
    \ += n-61\n        factorial += n-62\n        factorial += n-63\n        factorial\
    \ += n-64\n        factorial += n-65\n        factorial += n-66\n        factorial\
    \ += n-67\n        factorial += n-68\n        factorial += n-69\n        factorial\
    \ += n-70\n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp266zbru7.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorials += factorial\n            factorial *= i\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ojmzgd4.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3ojmzgd4.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ojmzgd4.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.Stack[Long]()\n        factorial += n\n        factorial += n-1\n\
    \        factorial += n-2\n        factorial += n-3\n        factorial += n-4\n\
    \        factorial += n-5\n        factorial += n-6\n        factorial += n-7\n\
    \        factorial += n-8\n        factorial += n-9\n        factorial += n-10\n\
    \        factorial += n-11\n        factorial += n-12\n        factorial += n-13\n\
    \        factorial += n-14\n        factorial += n-15\n        factorial += n-16\n\
    \        factorial += n-17\n        factorial += n-18\n        factorial += n-19\n\
    \        factorial += n-20\n        factorial += n-21\n        factorial += n-22\n\
    \        factorial += n-23\n        factorial += n-24\n        factorial += n-25\n\
    \        factorial += n-26\n        factorial += n-27\n        factorial += n-28\n\
    \        factorial += n-29\n        factorial += n-30\n        factorial += n-31\n\
    \        factorial += n-32\n        factorial += n-33\n        factorial += n-34\n\
    \        factorial += n-35\n        factorial += n-36\n        factorial += n-37\n\
    \        factorial += n-38\n        factorial += n-39\n        factorial += n-40\n\
    \        factorial += n-41\n        factorial += n-42\n        factorial += n-43\n\
    \        factorial += n-44\n        factorial += n-45\n        factorial += n-46\n\
    \        factorial += n-47\n        factorial += n-48\n        factorial += n-49\n\
    \        factorial += n-50\n        factorial += n-51\n        factorial += n-52\n\
    \        factorial += n-53\n        factorial += n-54\n        factorial += n-55\n\
    \        factorial += n-56\n        factorial += n-57\n        factorial += n-58\n\
    \        factorial += n-59\n        factorial += n-60\n        factorial += n-61\n\
    \        factorial += n-62\n        factorial += n-63\n        factorial += n-64\n\
    \        factorial += n-65\n        factorial += n-66\n        factorial += n-67\n\
    \        factorial += n-68\n        factorial += n-69\n        factorial += n-70\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppb7kmwzl.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcqgn_vhs.scala:17)\n\tat Problem.main(tmpcqgn_vhs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794269
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcqgn_vhs.scala:17)\n\tat Problem.main(tmpcqgn_vhs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        while(n\
    \ > 1) {\n            factorial *= n\n            factorials += factorial\n  \
    \          n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgse1rdpk.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpgse1rdpk.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgse1rdpk.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorials += factorial\n            factorial *= i\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ojmzgd4.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3ojmzgd4.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ojmzgd4.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        factorials\
    \ += factorial\n        for(i <- 1 to n){\n            factorial *= i\n      \
    \      factorials += factorial\n        }\n        factorials.last\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphu516w2e.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphu516w2e.scala:16:22 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphu516w2e.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkr0rea42.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkr0rea42.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr0rea42.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * (n - 1) * (n - 2)\n        factorials += n * factorials(n - 1)\n    \
    \    factorials += factorials(n - 1) * factorials(n - 2)\n        factorials +=\
    \ factorials(n - 1) * factorials(n - 2) * factorials(n - 3)\n        factorials\
    \ += factorials(n - 1) * factorials(n - 2) * factorials(n - 3) * factorials(n\
    \ - 4)\n        factorials += factorials(n - 1) * factorials(n - 2) * factorials(n\
    \ - 3) * factorials(n - 4) * factorials(n - 5)\n        factorials += factorials(n\
    \ - 1) * factorials(n - 2) * factorials(n - 3) * factorials(n - 4) * factorials(n\
    \ - 5) * factorials(n - 6)\n        factorials += factorials(n - 1) * factorials(n\
    \ - 2) * factorials(n - 3) * factorials(n - 4) * factorials(n - 5) * factorials(n\
    \ - 6) * factorials(n - 7)\n        factorials += factorials(n - 1) * factorials(n\
    \ - 2) * factorials(n - 3) * factorials(n - 4) * factorials(n - 5) * factorials(n\
    \ - 6) * factorials(n - 7) * factorials(n - 8)\n        factorials += factorials(n\
    \ - 1) * factorials(n - 2) * factorials(n - 3) * factorials(n - 4) * factorials(n\
    \ - 5) * factorials(n - 6) * factorials(n - 7) * factorials(n - 8) * factorials(n\
    \ - 9)\n        factorials += factorials(n - 1) * factorials(n - 2) * factorials(n\
    \ - 3) * factorials(n - 4) * factorials(n - 5) * factorials(n - 6) * factorials(n\
    \ - 7) * factorials(n - 8) * factorials(n - 9) * factorials(n - 10)\n        factorials\
    \ += factorials(n - 1) * factorials(n - 2) * factorials(n - 3) * factorials(n\
    \ - 4) * factorials(n - 5) * factorials(n - 6) * factorials(n - 7) * factorials(n\
    \ - 8) * factorials(n - 9) * factorials(n - 10) * factorials(n - 11)\n       \
    \ factorials += factorials(n - 1) * factorials(n - 2) * factorials(n - 3) * factorials(n\
    \ - 4) * factorials(n - 5) * factorials(n - 6) * factorials(n - 7) * factorials(n\
    \ - 8) * factorials(n - 9) * factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmmixiz_o.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 0 until n){\n            factorial *= i\n        }\n \
    \       return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmveobep.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcqgn_vhs.scala:17)\n\tat Problem.main(tmpcqgn_vhs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorials += factorial\n            factorial *=\
    \ i\n        }\n        factorials.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1nz_sviv.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1nz_sviv.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1nz_sviv.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n) {\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpifz4f2a5.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpifz4f2a5.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpifz4f2a5.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxgvog9nk.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:19:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659794454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.Stack[Long]()\n        factorial.push(n)\n        while (factorial.nonEmpty)\
    \ {\n            factorial.push(factorial.last * factorial.last)\n           \
    \ factorial.pop()\n        }\n        factorial.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq5d5jf_r.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkr0rea42.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkr0rea42.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr0rea42.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = 1 \n        var factorial5 = 1 \n        var factorial6 = 1 \n        var\
    \ factorial7 = 1 \n        var factorial8 = 1 \n        var factorial9 = 1 \n\
    \        var factorial10 = 1 \n        var factorial11 = 1 \n        var factorial12\
    \ = 1 \n        var factorial13 = 1 \n        var factorial14 = 1 \n        var\
    \ factorial15 = 1 \n        var factorial16 = 1 \n        var factorial17 = 1\
    \ \n        var factorial18 = 1 \n        var factorial19 = 1 \n        var factorial20\
    \ = 1 \n        var factorial21 = 1 \n        var factorial22 = 1 \n        var\
    \ factorial23 = 1 \n        var factorial24 = 1 \n        var factorial25 = 1\
    \ \n        var factorial26 = 1 \n        var factorial27 = 1 \n        var factorial28\
    \ = 1 \n        var factorial29 = 1 \n        var factorial30 = 1 \n        var\
    \ factorial31 = 1 \n        var factorial32 = 1 \n        var factorial33 = 1\
    \ \n        var factorial34 = 1 \n        var factorial35 = 1 \n        var factorial36\
    \ = 1 \n        var factorial37 = 1 \n        var factorial38 = 1 \n        var\
    \ factorial39 = 1 \n        var factorial40 = 1 \n        var factorial41 = 1\
    \ \n        var factorial42 = 1 \n        var factorial43 = 1 \n        var factorial44\
    \ = 1 \n        var factorial45 = 1 \n        var factorial46 = 1 \n        var\
    \ factorial47 = 1 \n        var factorial48 = 1 \n        var factorial49 = 1\
    \ \n        var factorial50 = 1 \n        var factorial51 = 1 \n        var factorial52\
    \ = 1 \n        var factorial53 = 1 \n        var factorial54 = 1 \n        var\
    \ factorial55 = 1 \n        var factorial56 = 1 \n        var factorial57 = 1\
    \ \n        var factorial58 = 1 \n        var factorial59 = 1 \n        var factorial60\
    \ = 1 \n        var factorial61 = 1 \n        var factorial62 = 1 \n        var\
    \ factorial63 = 1 \n        var factorial64 = 1 \n        var factorial65 = 1\
    \ \n        var factorial66 = 1 \n        var factorial67 = 1 \n        var factorial68\
    \ = 1 \n        var factorial69 = 1 \n        var factorial70 = 1 \n        var\
    \ factorial71 = 1 \n        var factorial72 = 1 \n        var factorial73 = 1\
    \ \n        var factorial74 = 1 \n        var factorial75 = 1 \n        var factorial76\
    \ = 1 \n        var factorial77 = 1 \n        var factorial78 = 1 \n        var\
    \ factorial79 = 1 \n        var factorial80 = 1 \n        var factorial81 = 1\
    \ \n        var factorial82 = 1 \n        var factori\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoib0p6o0.scala:96:4 ----------------------------\e\
    [0m\e[0m\n\e[31m96 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpoib0p6o0.scala:96:5 ---------------------\e[0m\e[0m\n\e[31m96 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7czzywd.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkr0rea42.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkr0rea42.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr0rea42.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkr0rea42.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkr0rea42.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr0rea42.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        while(n\
    \ > 1) {\n            factorial *= n\n            factorials += factorial\n  \
    \          n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgse1rdpk.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpgse1rdpk.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgse1rdpk.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n - 1)\n        factorials += factorials(n - 2)\n        factorials\
    \ += factorials(n - 3)\n        factorials += factorials(n - 4)\n        factorials\
    \ += factorials(n - 5)\n        factorials += factorials(n - 6)\n        factorials\
    \ += factorials(n - 7)\n        factorials += factorials(n - 8)\n        factorials\
    \ += factorials(n - 9)\n        factorials += factorials(n - 10)\n        factorials\
    \ += factorials(n - 11)\n        factorials += factorials(n - 12)\n        factorials\
    \ += factorials(n - 13)\n        factorials += factorials(n - 14)\n        factorials\
    \ += factorials(n - 15)\n        factorials += factorials(n - 16)\n        factorials\
    \ += factorials(n - 17)\n        factorials += factorials(n - 18)\n        factorials\
    \ += factorials(n - 19)\n        factorials += factorials(n - 20)\n        factorials\
    \ += factorials(n - 21)\n        factorials += factorials(n - 22)\n        factorials\
    \ += factorials(n - 23)\n        factorials += factorials(n - 24)\n        factorials\
    \ += factorials(n - 25)\n        factorials += factorials(n - 26)\n        factorials\
    \ += factorials(n - 27)\n        factorials += factorials(n - 28)\n        factorials\
    \ += factorials(n - 29)\n        factorials += factorials(n - 30)\n        factorials\
    \ += factorials(n - 31)\n        factorials += factorials(n - 32)\n        factorials\
    \ += factorials(n - 33)\n        factorials += factorials(n - 34)\n        factorials\
    \ += factorials(n - 35)\n        factorials += factorials(n - 36)\n        factorials\
    \ += factorials(n - 37)\n        factorials += factorials(n - 38)\n        factorials\
    \ += factorials(n - 39)\n        factorials += factorials(n - 40)\n        factorials\
    \ += factorials(n - 41)\n        factorials += factorials(n - 42)\n        factorials\
    \ += factorials(n - 43)\n        factorials += factorials(n - 44)\n        factorials\
    \ += factorials(n - 45)\n        factorials += factorials(n - 46)\n        factorials\
    \ += factorials(n - 47)\n        factori\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr86puy_b.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr86puy_b.scala:62:8 -------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorials += factorial\n            factorial *= i\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ojmzgd4.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3ojmzgd4.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ojmzgd4.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 0 until n) {\n            factorial *= i\n        }\n\
    \        return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph5pj1ak_.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorials += factorial\n            factorial *= i\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ojmzgd4.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3ojmzgd4.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ojmzgd4.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorials += factorial\n            factorial *=\
    \ i\n        }\n        factorials.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1nz_sviv.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1nz_sviv.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1nz_sviv.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n        }\n    \
    \    return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8hb9febq.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6is0wfzi.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6is0wfzi.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6is0wfzi.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 0 until n){\n            factorial *= i\n        }\n \
    \       return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmveobep.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxgvog9nk.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:19:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659794454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorials += factorial\n            factorial *=\
    \ i\n        }\n        factorials.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1nz_sviv.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1nz_sviv.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1nz_sviv.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkr0rea42.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkr0rea42.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr0rea42.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n        }\n   \
    \     return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1s2g7ywc.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n        }\n    \
    \    return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8hb9febq.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += n\n        factorials\
    \ += factorials(0) * factorials(1)\n        factorials += factorials(0) * factorials(1)\n\
    \        factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjg_5d48c.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpjg_5d48c.scala:50:8 -------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        while\
    \ (n > 0) {\n            factorials += factorial\n            factorial *= n\n\
    \            n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9q22jz9.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpp9q22jz9.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean factorial.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpp9q22jz9.scala:18:14 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcqgn_vhs.scala:17)\n\tat Problem.main(tmpcqgn_vhs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7czzywd.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorials += factorial\n            factorial *=\
    \ i\n        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2y70mwlv.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2y70mwlv.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2y70mwlv.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 0 until n){\n            factorial *= i\n        }\n \
    \       return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmveobep.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        while\
    \ (n > 1) {\n            factorials += factorial\n            factorial *= n\n\
    \            n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6jfpy3ad.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp6jfpy3ad.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean factorial.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp6jfpy3ad.scala:18:14 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorials += factorial\n            factorial *=\
    \ i\n        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2y70mwlv.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2y70mwlv.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2y70mwlv.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa5v_egkf.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5v_egkf.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa5v_egkf.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5v_egkf.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += n\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(0\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzkorzzyo.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzkorzzyo.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n        }\n   \
    \     return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1s2g7ywc.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxgvog9nk.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:19:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659794454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var i = 2\n        while (i <= n) {\n            factorial *= i\n\
    \            i += 1\n        }\n        return factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8uf7uewz.scala:22)\n\tat Problem.main(tmp8uf7uewz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for(i <- 1 to n){\n            result *= i\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6pzzzvm8.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkr0rea42.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkr0rea42.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr0rea42.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcqgn_vhs.scala:17)\n\tat Problem.main(tmpcqgn_vhs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial * (n - 1)\n        factorials += factorial * (n - 2)\n\
    \        factorials += factorial * (n - 3)\n        factorials += factorial *\
    \ (n - 4)\n        factorials += factorial * (n - 5)\n        factorials += factorial\
    \ * (n - 6)\n        factorials += factorial * (n - 7)\n        factorials +=\
    \ factorial * (n - 8)\n        factorials += factorial * (n - 9)\n        factorials\
    \ += factorial * (n - 10)\n        factorials += factorial * (n - 11)\n      \
    \  factorials += factorial * (n - 12)\n        factorials += factorial * (n -\
    \ 13)\n        factorials += factorial * (n - 14)\n        factorials += factorial\
    \ * (n - 15)\n        factorials += factorial * (n - 16)\n        factorials +=\
    \ factorial * (n - 17)\n        factorials += factorial * (n - 18)\n        factorials\
    \ += factorial * (n - 19)\n        factorials += factorial * (n - 20)\n      \
    \  factorials += factorial * (n - 21)\n        factorials += factorial * (n -\
    \ 22)\n        factorials += factorial * (n - 23)\n        factorials += factorial\
    \ * (n - 24)\n        factorials += factorial * (n - 25)\n        factorials +=\
    \ factorial * (n - 26)\n        factorials += factorial * (n - 27)\n        factorials\
    \ += factorial * (n - 28)\n        factorials += factorial * (n - 29)\n      \
    \  factorials += factorial * (n - 30)\n        factorials += factorial * (n -\
    \ 31)\n        factorials += factorial * (n - 32)\n        factorials += factorial\
    \ * (n - 33)\n        factorials += factorial * (n - 34)\n        factorials +=\
    \ factorial * (n - 35)\n        factorials += factorial * (n - 36)\n        factorials\
    \ += factorial * (n - 37)\n        factorials += factorial * (n - 38)\n      \
    \  factorials += factorial * (n - 39)\n        factorials += factorial * (n -\
    \ 40)\n        factorials += factorial * (n - 41)\n        factorials += factorial\
    \ * (n - 42)\n        factorials += factorial * (n - 43)\n        factorials +=\
    \ factorial * (n - 44)\n        factorials += factorial * (n - 45)\n        factorial\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwo3ts6bc.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpwo3ts6bc.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 0 until n) {\n            factorial *= i\n        }\n\
    \        return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph5pj1ak_.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorialFactorial = n\n    \
    \    factorialFactorial = 1\n        factorial += factorialFactorial\n       \
    \ factorialFactorial *= factorialFactorial\n        factorialFactorial *= factorialFactorial\n\
    \        factorialFactorial *= factorialFactorial\n        factorialFactorial\
    \ *= factorialFactorial\n        factorialFactorial *= factorialFactorial\n  \
    \      factorialFactorial *= factorialFactorial\n        factorialFactorial *=\
    \ factorialFactorial\n        factorialFactorial *= factorialFactorial\n     \
    \   factorialFactorial *= factorialFactorial\n        factorialFactorial *= factorialFactorial\n\
    \        factorialFactorial *= factorialFactorial\n        factorialFactorial\
    \ *= factorialFactorial\n        factorialFactorial *= factorialFactorial\n  \
    \      factorialFactorial *= factorialFactorial\n        factorialFactorial *=\
    \ factorialFactorial\n        factorialFactorial *= factorialFactorial\n     \
    \   factorialFactorial *= factorialFactorial\n        factorialFactorial *= factorialFactorial\n\
    \        factorialFactorial *= factorialFactorial\n        factorialFactorial\
    \ *= factorialFactorial\n        factorialFactorial *= factorialFactorial\n  \
    \      factorialFactorial *= factorialFactorial\n        factorialFactorial *=\
    \ factorialFactorial\n        factorialFactorial *= factorialFactorial\n     \
    \   factorialFactorial *= factorialFactorial\n        factorialFactorial *= factorialFactorial\n\
    \        factorialFactorial *= factorialFactorial\n        factorialFactorial\
    \ *= factorialFactorial\n        factorialFactorial *= factorialFactorial\n  \
    \      factorialFactorial *= factorialFactorial\n        factorialFactorial *=\
    \ factorialFactorial\n        factorialFactorial *= factorialFactorial\n     \
    \   factorialFactorial *= factorialFactorial\n        factorialFactorial *= factorialFactorial\n\
    \        factorialFactorial *= factorialFactorial\n        factorialFactorial\
    \ *= factorialFactorial\n        factorialFactori\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn76qr5f6.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpn76qr5f6.scala:53:8 -------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        factorialFactori\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: factorialFactori\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = 1 // We will use this to calculate the factorial of n!\n        var factorial5\
    \ = 1 // We will use this to calculate the factorial of (n-1)!\n        var factorial6\
    \ = 1 // We will use this to calculate the factorial of (n-2)!\n        var factorial7\
    \ = 1 // We will use this to calculate the factorial of (n-3)!\n        var factorial8\
    \ = 1 // We will use this to calculate the factorial of (n-4)!\n        var factorial9\
    \ = 1 // We will use this to calculate the factorial of (n-5)!\n        var factorial10\
    \ = 1 // We will use this to calculate the factorial of (n-6)!\n        var factorial11\
    \ = 1 // We will use this to calculate the factorial of (n-7)!\n        var factorial12\
    \ = 1 // We will use this to calculate the factorial of (n-8)!\n        var factorial13\
    \ = 1 // We will use this to calculate the factorial of (n-9)!\n        var factorial14\
    \ = 1 // We will use this to calculate the factorial of (n-10)!\n        var factorial15\
    \ = 1 // We will use this to calculate the factorial of (n-11)!\n        var factorial16\
    \ = 1 // We will use this to calculate the factorial of (n-12)!\n        var factorial17\
    \ = 1 // We will use this to calculate the factorial of (n-13)!\n        var factorial18\
    \ = 1 // We will use this to calculate the factorial of (n-14)!\n        var factorial19\
    \ = 1 // We will use this to calculate the factorial of (n-15)!\n        var factorial20\
    \ = 1 // We will use this to calculate the factorial of (n-16)!\n        var factorial21\
    \ = 1 // We will use this to calculate the factorial of (n-17)!\n        var factorial22\
    \ = 1 // We will use this to calculate the factorial of (n-18)!\n        var factorial23\
    \ = 1 // We will use this to calculate the factorial of (n-19)!\n        var factorial24\
    \ = 1 // We will use this to calculate the factorial of (n-20)!\n        var factorial25\
    \ = 1 // We will use this to calculate the factorial of (n-21)!\n        var factorial26\
    \ = 1 // We will use this to calculate the factorial of (n-22)!\n        var factorial27\
    \ = 1 // We will use this to calculate the factorial of (n-23)!\n        var factorial28\
    \ = 1 // We will use this to calculate the factorial of (n-24)!\n        var factorial29\
    \ = 1 // We will use this to calculate the factorial of (n-25)!\n        var factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpochur5om.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpochur5om.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkr0rea42.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkr0rea42.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr0rea42.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorial\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorial += n\n        factorial\
    \ += n-1\n        factorial += n-2\n        factorial += n-3\n        factorial\
    \ += n-4\n        factorial += n-5\n        factorial += n-6\n        factorial\
    \ += n-7\n        factorial += n-8\n        factorial += n-9\n        factorial\
    \ += n-10\n        factorial += n-11\n        factorial += n-12\n        factorial\
    \ += n-13\n        factorial += n-14\n        factorial += n-15\n        factorial\
    \ += n-16\n        factorial += n-17\n        factorial += n-18\n        factorial\
    \ += n-19\n        factorial += n-20\n        factorial += n-21\n        factorial\
    \ += n-22\n        factorial += n-23\n        factorial += n-24\n        factorial\
    \ += n-25\n        factorial += n-26\n        factorial += n-27\n        factorial\
    \ += n-28\n        factorial += n-29\n        factorial += n-30\n        factorial\
    \ += n-31\n        factorial += n-32\n        factorial += n-33\n        factorial\
    \ += n-34\n        factorial += n-35\n        factorial += n-36\n        factorial\
    \ += n-37\n        factorial += n-38\n        factorial += n-39\n        factorial\
    \ += n-40\n        factorial += n-41\n        factorial += n-42\n        factorial\
    \ += n-43\n        factorial += n-44\n        factorial += n-45\n        factorial\
    \ += n-46\n        factorial += n-47\n        factorial += n-48\n        factorial\
    \ += n-49\n        factorial += n-50\n        factorial += n-51\n        factorial\
    \ += n-52\n        factorial += n-53\n        factorial += n-54\n        factorial\
    \ += n-55\n        factorial += n-56\n        factorial += n-57\n        factorial\
    \ += n-58\n        factorial += n-59\n        factorial += n-60\n        factorial\
    \ += n-61\n        factorial += n-62\n        factorial += n-63\n        factorial\
    \ += n-64\n        factorial += n-65\n        factorial += n-66\n        factorial\
    \ += n-67\n        factorial += n-68\n        factorial += n-69\n        factorial\
    \ += n-70\n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp266zbru7.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var factorial2 = 1\n        var factorial3 = 1\n        var factorial4\
    \ = 1\n        var factorial5 = 1\n        var factorial6 = 1\n        var factorial7\
    \ = 1\n        var factorial8 = 1\n        var factorial9 = 1\n        var factorial10\
    \ = 1\n        var factorial11 = 1\n        var factorial12 = 1\n        var factorial13\
    \ = 1\n        var factorial14 = 1\n        var factorial15 = 1\n        var factorial16\
    \ = 1\n        var factorial17 = 1\n        var factorial18 = 1\n        var factorial19\
    \ = 1\n        var factorial20 = 1\n        var factorial21 = 1\n        var factorial22\
    \ = 1\n        var factorial23 = 1\n        var factorial24 = 1\n        var factorial25\
    \ = 1\n        var factorial26 = 1\n        var factorial27 = 1\n        var factorial28\
    \ = 1\n        var factorial29 = 1\n        var factorial30 = 1\n        var factorial31\
    \ = 1\n        var factorial32 = 1\n        var factorial33 = 1\n        var factorial34\
    \ = 1\n        var factorial35 = 1\n        var factorial36 = 1\n        var factorial37\
    \ = 1\n        var factorial38 = 1\n        var factorial39 = 1\n        var factorial40\
    \ = 1\n        var factorial41 = 1\n        var factorial42 = 1\n        var factorial43\
    \ = 1\n        var factorial44 = 1\n        var factorial45 = 1\n        var factorial46\
    \ = 1\n        var factorial47 = 1\n        var factorial48 = 1\n        var factorial49\
    \ = 1\n        var factorial50 = 1\n        var factorial51 = 1\n        var factorial52\
    \ = 1\n        var factorial53 = 1\n        var factorial54 = 1\n        var factorial55\
    \ = 1\n        var factorial56 = 1\n        var factorial57 = 1\n        var factorial58\
    \ = 1\n        var factorial59 = 1\n        var factorial60 = 1\n        var factorial61\
    \ = 1\n        var factorial62 = 1\n        var factorial63 = 1\n        var factorial64\
    \ = 1\n        var factorial65 = 1\n        var factorial66 = 1\n        var factorial67\
    \ = 1\n        var factorial68 = 1\n        var factorial69 = 1\n        var factorial70\
    \ = 1\n        var factorial71 = 1\n        var factorial72 = 1\n        var factorial73\
    \ = 1\n        var factorial74 = 1\n        var factorial75 = 1\n        var factorial76\
    \ = 1\n        var factorial77 = 1\n        var factorial78 = 1\n        var factorial79\
    \ = 1\n        var factorial80 = 1\n        var factorial81 = 1\n        var factorial82\
    \ = 1\n        var factori\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdx4tjkrt.scala:96:4 ----------------------------\e\
    [0m\e[0m\n\e[31m96 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpdx4tjkrt.scala:96:5 ---------------------\e[0m\e[0m\n\e[31m96 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += n\n        factorials\
    \ += factorials(0) * factorials(1)\n        factorials += factorials(0) * factorials(1)\
    \ * factorials(2)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3) * factorials(4)\n        factorials += factorials(0) * factorials(1)\
    \ * factorials(2) * factorials(3) * factorials(4) * factorials(5)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3) * factorials(4)\
    \ * factorials(5) * factorials(6)\n        factorials += factorials(0) * factorials(1)\
    \ * factorials(2) * factorials(3) * factorials(4) * factorials(5) * factorials(6)\
    \ * factorials(7)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3) * factorials(4) * factorials(5) * factorials(6) * factorials(7)\
    \ * factorials(8)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3) * factorials(4) * factorials(5) * factorials(6) * factorials(7)\
    \ * factorials(8) * factorials(9)\n        factorials += factorials(0) * factorials(1)\
    \ * factorials(2) * factorials(3) * factorials(4) * factorials(5) * factorials(6)\
    \ * factorials(7) * factorials(8) * factorials(9) * factorials(10)\n        factorials\
    \ += factorials(0) * factorials(1) * factorials(2) * factorials(3) * factorials(4)\
    \ * factorials(5) * factorials(6) * factorials(7) * factorials(8) * factorials(9)\
    \ * factorials(10) * factorials(11)\n        factorials += factorials(0) * factorials(1)\
    \ * factorials(2) * factorials(3) * factorials(4) * factorials(5) * factorials(6)\
    \ * factorials(7) * factorials(8) * factorials(9) * factorials(10) * factorials(11)\
    \ * factorials(12)\n        factorials += factorials(0) * factorials(1) * factorial\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy08wofeh.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 0 until n){\n            factorial *= i\n        }\n \
    \       return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmveobep.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxgvog9nk.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:19:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659794454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6is0wfzi.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6is0wfzi.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6is0wfzi.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n        }\n   \
    \     return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1s2g7ywc.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n) {\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpifz4f2a5.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpifz4f2a5.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpifz4f2a5.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7czzywd.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 0 until n) {\n            factorials += factorial\n            factorial\
    \ *= i\n        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx93pw2hq.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx93pw2hq.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx93pw2hq.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        while\
    \ (n > 1) {\n            factorials += factorial\n            factorial *= n\n\
    \            n -= 1\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6jfpy3ad.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp6jfpy3ad.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean factorial.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp6jfpy3ad.scala:18:14 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n        }\n    \
    \    return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8hb9febq.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += n\n        factorials\
    \ += n-1\n        factorials += n-2\n        factorials += n-3\n        factorials\
    \ += n-4\n        factorials += n-5\n        factorials += n-6\n        factorials\
    \ += n-7\n        factorials += n-8\n        factorials += n-9\n        factorials\
    \ += n-10\n        factorials += n-11\n        factorials += n-12\n        factorials\
    \ += n-13\n        factorials += n-14\n        factorials += n-15\n        factorials\
    \ += n-16\n        factorials += n-17\n        factorials += n-18\n        factorials\
    \ += n-19\n        factorials += n-20\n        factorials += n-21\n        factorials\
    \ += n-22\n        factorials += n-23\n        factorials += n-24\n        factorials\
    \ += n-25\n        factorials += n-26\n        factorials += n-27\n        factorials\
    \ += n-28\n        factorials += n-29\n        factorials += n-30\n        factorials\
    \ += n-31 \n        factorials.foldLeft(1L)((acc, x) => acc * x)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl23fd8hq.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6is0wfzi.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6is0wfzi.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6is0wfzi.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7czzywd.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpio09at8d.scala:17)\n\tat Problem.main(tmpio09at8d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += n * factorials(n - 1)\n        factorials += n * factorials(n - 2)\n    \
    \    factorials += n * factorials(n - 3)\n        factorials += n * factorials(n\
    \ - 4)\n        factorials += n * factorials(n - 5)\n        factorials += n *\
    \ factorials(n - 6)\n        factorials += n * factorials(n - 7)\n        factorials\
    \ += n * factorials(n - 8)\n        factorials += n * factorials(n - 9)\n    \
    \    factorials += n * factorials(n - 10)\n        factorials += n * factorials(n\
    \ - 11)\n        factorials += n * factorials(n - 12)\n        factorials += n\
    \ * factorials(n - 13)\n        factorials += n * factorials(n - 14)\n       \
    \ factorials += n * factorials(n - 15)\n        factorials += n * factorials(n\
    \ - 16)\n        factorials += n * factorials(n - 17)\n        factorials += n\
    \ * factorials(n - 18)\n        factorials += n * factorials(n - 19)\n       \
    \ factorials += n * factorials(n - 20)\n        factorials += n * factorials(n\
    \ - 21)\n        factorials += n * factorials(n - 22)\n        factorials += n\
    \ * factorials(n - 23)\n        factorials += n * factorials(n - 24)\n       \
    \ factorials += n * factorials(n - 25)\n        factorials += n * factorials(n\
    \ - 26)\n        factorials += n * factorials(n - 27)\n        factorials += n\
    \ * factorials(n - 28)\n        factorials += n * factorials(n - 29)\n       \
    \ factorials += n * factorials(n - 30)\n        factorials += n * factorials(n\
    \ - 31)\n        factorials += n * factorials(n - 32)\n        factorials += n\
    \ * factorials(n - 33)\n        factorials += n * factorials(n - 34)\n       \
    \ factorials += n * factorials(n - 35)\n        factorials += n * factorials(n\
    \ - 36)\n        factorials += n * factorials(n - 37)\n        factorials += n\
    \ * factorials(n - 38)\n        factorials += n * factorials(n - 39)\n       \
    \ factorials += n * factorials(n - 40)\n        factorials += n * factorials(n\
    \ - 41)\n        factorials += n * factorials(n - 42)\n        factorials += n\
    \ * factorials(n - 43)\n        factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ucisen6.scala:58:8 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 0 until n){\n            factorials += factorial\n            factorial *=\
    \ i\n        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2y70mwlv.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2y70mwlv.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2y70mwlv.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7czzywd.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        for (i <- 1 to n) {\n            factorial *= i\n        }\n  \
    \      return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcudoaulu.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpio09at8d.scala:17)\n\tat Problem.main(tmpio09at8d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        for(i\
    \ <- 1 to n){\n            factorial *= i\n            factorials += factorial\n\
    \        }\n        factorials.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwc6vv8v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwc6vv8v.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwc6vv8v.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7czzywd.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += factorial\n       \
    \ factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factori\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkr0rea42.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkr0rea42.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr0rea42.scala:84:8 -------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1\n        var i = 0\n        while (i < n) {\n            factorial *= i\n\
    \            i += 1\n        }\n        return factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbubnbr4r.scala:22)\n\tat Problem.main(tmpbubnbr4r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials(n-1)\n        factorials += factorials(n-2)\n        factorials\
    \ += factorials(n-3)\n        factorials += factorials(n-4)\n        factorials\
    \ += factorials(n-5)\n        factorials += factorials(n-6)\n        factorials\
    \ += factorials(n-7)\n        factorials += factorials(n-8)\n        factorials\
    \ += factorials(n-9)\n        factorials += factorials(n-10)\n        factorials\
    \ += factorials(n-11)\n        factorials += factorials(n-12)\n        factorials\
    \ += factorials(n-13)\n        factorials += factorials(n-14)\n        factorials\
    \ += factorials(n-15)\n        factorials += factorials(n-16)\n        factorials\
    \ += factorials(n-17)\n        factorials += factorials(n-18)\n        factorials\
    \ += factorials(n-19)\n        factorials += factorials(n-20)\n        factorials\
    \ += factorials(n-21)\n        factorials += factorials(n-22)\n        factorials\
    \ += factorials(n-23)\n        factorials += factorials(n-24)\n        factorials\
    \ += factorials(n-25)\n        factorials += factorials(n-26)\n        factorials\
    \ += factorials(n-27)\n        factorials += factorials(n-28)\n        factorials\
    \ += factorials(n-29)\n        factorials += factorials(n-30)\n        factorials\
    \ += factorials(n-31)\n        factorials += factorials(n-32)\n        factorials\
    \ += factorials(n-33)\n        factorials += factorials(n-34)\n        factorials\
    \ += factorials(n-35)\n        factorials += factorials(n-36)\n        factorials\
    \ += factorials(n-37)\n        factorials += factorials(n-38)\n        factorials\
    \ += factorials(n-39)\n        factorials += factorials(n-40)\n        factorials\
    \ += factorials(n-41)\n        factorials += factorials(n-42)\n        factorials\
    \ += factorials(n-43)\n        factorials += factorials(n-44)\n        factorials\
    \ += factorials(n-45)\n        factorials += factorials(n-46)\n        factorials\
    \ += factorials(n-47)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7czzywd.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxgvog9nk.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgvog9nk.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgvog9nk.scala:19:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659794454
