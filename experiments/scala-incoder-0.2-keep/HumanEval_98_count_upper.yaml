name: HumanEval_98_count_upper
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s, count the number of uppercase vowels in even indices.\n\
  \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
  \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
  )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
  dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
  U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
  EEEE\")) == (2l));\n    }\n\n}\n"
completions: ["        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s take _).map(s\
    \ take _).filter(vowels.contains).size", "        val vowels = \"aeiouAEIOU\"\n\
    \        val evenIndices = mutable.ListBuffer[Int]()\n        val upperIndices\
    \ = mutable.ListBuffer[Int]()\n        for(i <- 0 until s.length){\n         \
    \   if(s(i).isUpper){\n                upperIndices += i\n            }\n    \
    \        if(s(i).isUpper){\n                evenIndices += i\n            }\n\
    \        }\n        evenIndices.filter(_ % 2 == 0).count(vowels.indexOf(_) > 0)",
  "        val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.find(_ % 2 == 0).map(_ => vowels.count(s.charAt(_)))", " \
    \       val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until\
    \ s.length\n        evenIndices.filter(_ % 2 == 0).count(vowels.contains(_))",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.filter(_ % 2 == 0).map(vowels.indexOf(_)).sum", "       \
    \ val vowels = \"AEIOUaeiou\"\n        var count = 0\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n             \
    \   count += 1\n        count", "        var count = 0L\n        for (i <- 0 until\
    \ s.length)\n            if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i)\
    \ == 'O' || s(i) == 'U')\n                count += 1\n            else\n     \
    \           break\n        \n        return count", "        val vowels = \"aeiouAEIOU\"\
    .toSet\n        val evenIndices = 0 until s.length\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n", "  \
    \      val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.toList.flatMap { i =>\n            if (i % 2 == 0) {\n  \
    \              vowels.contains(s.charAt(i))\n            } else {\n          \
    \      false\n            }\n        }.sum", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        val evenIndices = 0 until s.length\n        evenIndices.map(i\
    \ => if (s(i).isUpper) 1 else 0).sum", "        val vowels = \"AEIOUaeiou\".toList\n\
    \        val evenIndices = 0 until s.length\n        val upperCounts = mutable.Map[Int,\
    \ Long]()\n        for (i <- evenIndices) {\n            if (vowels(i).isUpper)\
    \ {\n                val index = vowels.indexOf(i)\n                upperCounts(index)\
    \ = upperCounts(index).orElse(0) + 1\n            }\n        }\n        evenIndices.toList.foldLeft(0)((acc,\
    \ i) => acc + upperCounts(i))", "        val vowels = \"aeiouAEIOU\"\n       \
    \ val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (s(i).isUpper)\n                if (vowels.indexOf(s(i)) >= 0)\n\
    \                    evenIndices += i\n        evenIndices.toList.count(_ % 2\
    \ == 0)", "        val vowels = \"AEIOUaeiou\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    evenIndices += i\n     \
    \   evenIndices.size", "        val vowels = \"aeiouAEIOU\".toList\n        val\
    \ evenIndices = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s\
    \ take _).filter(vowels.contains).length", "        val vowels = \"AEIOUaeiou\"\
    .toList\n        val evenIndices = 0 until s.length\n        evenIndices.filter(_\
    \ % 2 == 0).map(_ / 2).count(vowels.contains)", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        val evenIndices = 0 until s.length\n        evenIndices.filter(_\
    \ % 2 == 0).map(_ / 2).count(vowels.contains)", "        val vowels = \"AEIOUaeiou\"\
    .toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n        for\
    \ (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n             \
    \   evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc, i) => acc +\
    \ s.count(_ == vowels(i)))", "        val vowels = \"AEIOUaeiou\".toSet\n    \
    \    val evenIndices = 0 until s.length\n        val evenIndices_count = evenIndices.count(i\
    \ => vowels(s(i).toChar))\n        evenIndices_count * evenIndices.count(i =>\
    \ vowels(s(i).toChar))", "        val vowels = \"aeiouAEIOU\".toSet\n        val\
    \ evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n    \
    \        if (vowels(s(i)))\n                if (s(i) % 2 == 0)\n             \
    \       evenIndices += i\n        evenIndices.size", "        val vowels = \"\
    AEIOUaeiou\"\n        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (vowels.indexOf(s.charAt(i)) >= 0)\n                count += 1\n\
    \        count"]
stop_tokens:
- "\n    }\n"
