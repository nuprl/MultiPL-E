name: HumanEval_98_count_upper
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s, count the number of uppercase vowels in even indices.\n\
  \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
  \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
  )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
  dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
  U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
  EEEE\")) == (2l));\n    }\n\n}\n"
completions: ["        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s take _).map(s\
    \ take _).filter(vowels.contains).size", "        val vowels = \"aeiouAEIOU\"\n\
    \        val evenIndices = mutable.ListBuffer[Int]()\n        val upperIndices\
    \ = mutable.ListBuffer[Int]()\n        for(i <- 0 until s.length){\n         \
    \   if(s(i).isUpper){\n                upperIndices += i\n            }\n    \
    \        if(s(i).isUpper){\n                evenIndices += i\n            }\n\
    \        }\n        evenIndices.filter(_ % 2 == 0).count(vowels.indexOf(_) > 0)",
  "        val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.find(_ % 2 == 0).map(_ => vowels.count(s.charAt(_)))", " \
    \       val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until\
    \ s.length\n        evenIndices.filter(_ % 2 == 0).count(vowels.contains(_))",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.filter(_ % 2 == 0).map(vowels.indexOf(_)).sum", "       \
    \ val vowels = \"AEIOUaeiou\"\n        var count = 0\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n             \
    \   count += 1\n        count", "        var count = 0L\n        for (i <- 0 until\
    \ s.length)\n            if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i)\
    \ == 'O' || s(i) == 'U')\n                count += 1\n            else\n     \
    \           break\n        \n        return count", "        val vowels = \"aeiouAEIOU\"\
    .toSet\n        val evenIndices = 0 until s.length\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n", "  \
    \      val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.toList.flatMap { i =>\n            if (i % 2 == 0) {\n  \
    \              vowels.contains(s.charAt(i))\n            } else {\n          \
    \      false\n            }\n        }.sum", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        val evenIndices = 0 until s.length\n        evenIndices.map(i\
    \ => if (s(i).isUpper) 1 else 0).sum", "        val vowels = \"AEIOUaeiou\".toList\n\
    \        val evenIndices = 0 until s.length\n        val upperCounts = mutable.Map[Int,\
    \ Long]()\n        for (i <- evenIndices) {\n            if (vowels(i).isUpper)\
    \ {\n                val index = vowels.indexOf(i)\n                upperCounts(index)\
    \ = upperCounts(index).orElse(0) + 1\n            }\n        }\n        evenIndices.toList.foldLeft(0)((acc,\
    \ i) => acc + upperCounts(i))", "        val vowels = \"aeiouAEIOU\"\n       \
    \ val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (s(i).isUpper)\n                if (vowels.indexOf(s(i)) >= 0)\n\
    \                    evenIndices += i\n        evenIndices.toList.count(_ % 2\
    \ == 0)", "        val vowels = \"AEIOUaeiou\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    evenIndices += i\n     \
    \   evenIndices.size", "        val vowels = \"aeiouAEIOU\".toList\n        val\
    \ evenIndices = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s\
    \ take _).filter(vowels.contains).length", "        val vowels = \"AEIOUaeiou\"\
    .toList\n        val evenIndices = 0 until s.length\n        evenIndices.filter(_\
    \ % 2 == 0).map(_ / 2).count(vowels.contains)", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        val evenIndices = 0 until s.length\n        evenIndices.filter(_\
    \ % 2 == 0).map(_ / 2).count(vowels.contains)", "        val vowels = \"AEIOUaeiou\"\
    .toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n        for\
    \ (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n             \
    \   evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc, i) => acc +\
    \ s.count(_ == vowels(i)))", "        val vowels = \"AEIOUaeiou\".toSet\n    \
    \    val evenIndices = 0 until s.length\n        val evenIndices_count = evenIndices.count(i\
    \ => vowels(s(i).toChar))\n        evenIndices_count * evenIndices.count(i =>\
    \ vowels(s(i).toChar))", "        val vowels = \"aeiouAEIOU\".toSet\n        val\
    \ evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n    \
    \        if (vowels(s(i)))\n                if (s(i) % 2 == 0)\n             \
    \       evenIndices += i\n        evenIndices.size", "        val vowels = \"\
    AEIOUaeiou\"\n        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (vowels.indexOf(s.charAt(i)) >= 0)\n                count += 1\n\
    \        count", "        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.foreach(i => if (s(i).isUpper) vowels.count(_\
    \ == s(i)) else 0)", "        val vowels = \"aeiouAEIOU\".toList\n        val\
    \ evenIndices = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s.length).count(_\
    \ == s.toUpperCase)", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (s(i).isUpper) evenIndices += i\n        evenIndices.toList.count(_ % 2\
    \ == 0)", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.toList.map(i => if (s(i).isUpper) 1\
    \ else 0).sum", "        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (s(i) == 'A' || s(i) == 'a') count += 1\n            if (s(i)\
    \ == 'E' || s(i) == 'e') count += 1\n            if (s(i) == 'I' || s(i) == 'i')\
    \ count += 1\n            if (s(i) == 'O' || s(i) == 'o') count += 1\n       \
    \     if (s(i) == 'U' || s(i) == 'u') count += 1\n            if (s(i) == 'a'\
    \ || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count += 1\n  \
    \      if (count == 0) 0\n        else count", "        var count = 0\n      \
    \  for (i <- 0 until s.length)\n            if (s(i) == 'A' || s(i) == 'a') count\
    \ += 1\n            if (s(i) == 'B' || s(i) == 'b') count += 1\n            if\
    \ (s(i) == 'C' || s(i) == 'c') count += 1\n            if (s(i) == 'D' || s(i)\
    \ == 'd') count += 1\n            if (s(i) == 'E' || s(i) == 'e') count += 1\n\
    \            if (s(i) == 'F' || s(i) == 'f') count += 1\n            if (s(i)\
    \ == 'G' || s(i) == 'g') count += 1\n        if (count % 2 == 0)\n           \
    \ count\n        else\n            0", "        val vowels = \"aeiouAEIOU\".toList\n\
    \        val evenIndices = 0 until s.length\n        evenIndices.filter(_ % 2\
    \ == 0).map(s.length).count(_ == s.charAt(_))", "        val vowels = \"AEIOUaeiou\"\
    .toList\n        val evenIndices = 0 until s.length\n        evenIndices.toList.map(i\
    \ => if (i % 2 == 0) vowels(i) else 0).sum", "        val vowels = \"AEIOUaeiou\"\
    .toSet\n        val evenIndices = s zip (s drop 1 toList) filter { case (v, c)\
    \ => c % 2 == 0 } map { case (v, c) => c }\n        evenIndices.count(vowels.contains)",
  "        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.filter(_ % 2 == 0).map(s take _).filter(vowels.contains).size",
  "        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.filter(i => vowels(i).isUpper).count(i => s(i).toUpperCase\
    \ == s(i))", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n  \
    \      val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (i % 2 == 0)\n                evenIndices += i\n \
    \       evenIndices.toList.map(i => vowels(s(i).toChar)).count(_ == 'U')", " \
    \       val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0)((acc, i) => acc + i)", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.map(_.toLong).sum", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        val evenIndices = 0 until s.length\n        val evenIndices_vowels\
    \ = evenIndices.filter(i => vowels(i) % 2 == 0)\n        val evenIndices_vowels_count\
    \ = evenIndices_vowels.map(i => vowels(i)).count(_ == 'U')\n        evenIndices_vowels_count.toLong",
  "        var count = 0L\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        if (s(i) == 'a' && s(i+1) == 'a' && s(i+2) == 'a')\n                count\
    \ += 1\n            if (s(i) == 'B' && s(i+1) == 'B' && s(i+2) == 'B')\n     \
    \           count += 1\n            if (s(i) == 'b' && s(i+1) == 'b' && s(i+2)\
    \ == 'b')\n                count += 1\n            if (s(i) == 'C' && s(i+1) ==\
    \ 'C' && s(i+2) == 'C')\n                count += 1\n            if (s(i) == 'c'\
    \ && s(i+1) == 'c' && s(i+2) == 'c')\n                count += 1\n           \
    \ if (s(i) == 'D' && s(i+1) == 'D' && s(i+2) == 'D')\n                count +=\
    \ 1\n            if (s(i) == 'd' && s(i+1) == 'd' && s(i+2) == 'd')\n        \
    \        count += 1\n            if (s(i) == 'E' && s(i+1) == 'E' && s(i+2) ==\
    \ 'E')\n                count += 1\n            if (s(i) == 'e' && s(i+1) == 'e'\
    \ && s(i+2) == 'e')\n                count += 1\n            if (s(i) == 'F' &&\
    \ s(i+1) == 'F' && s(i+2) == 'F')\n                count += 1\n            if\
    \ (s(i) == 'f' && s(i+1) == 'f' && s(i+2) == 'f')\n                count += 1\n\
    \            if (s(i) == 'G' && s(i+1) == 'G' && s(i+2) == 'G')\n            \
    \    count += 1\n            if (s(i) == 'g' && s(i+1) == 'g' && s(i+2) == 'g')\n\
    \                count += 1\n            if (s(i) == 'H' && s(i+1) == 'H' && s(i+2)\
    \ == 'H')\n                count += 1\n            if (s(i) == 'h' && s(i+1) ==\
    \ 'h' && s(i+2) == 'h')\n                count += 1\n            if (s(i) == 'I'\
    \ && s(i+1) == 'I' && s(i+2) == 'I')\n                count += 1\n           \
    \ if (s(i) == 'i' && s(i+1) == 'i' && s(i+2) == 'i')\n                count +=\
    \ 1\n            if (s(i) == 'J' && s(i+1) == 'J' && s(i+2) == 'J')\n        \
    \        count += 1\n            if (s(i) == 'j' && s(i+1) == 'j' && s(i+2) ==\
    \ 'j')\n                count += 1\n            if (s(i) == 'K' && s(i+1) == 'K'\
    \ && s(i+2) == 'K')\n                count += 1\n            if (s(i) == 'k' &&\
    \ s(i+1) == 'k' && s(i+2) == 'k')\n                count += 1\n            if\
    \ (s(i) == 'L' && s(i+1) == 'L' && s(i+2) == 'L')\n                count += 1",
  "        val vowels = \"aeiouAEIOU\".toList\n        var count = 0\n        for\
    \ (i <- 0 until s.length)\n            if (vowels(i).equals(s.charAt(i)))\n  \
    \              if (i % 2 == 0)\n                    count += 1\n             \
    \   else\n                    count -= 1\n        count", "        var count =\
    \ 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' || s(i)\
    \ == 'a') count += 1\n            if (s(i) == 'E' || s(i) == 'e') count += 1\n\
    \            if (s(i) == 'I' || s(i) == 'i') count += 1\n            if (s(i)\
    \ == 'O' || s(i) == 'o') count += 1\n            if (s(i) == 'U' || s(i) == 'u')\
    \ count += 1\n            if (s(i) == 'a' || s(i) == 'A') count += 1\n       \
    \     if (s(i) == 'e' || s(i) == 'E') count += 1\n            if (s(i) == 'i'\
    \ || s(i) == 'I') count += 1\n            if (s(i) == 'o' || s(i) == 'O') count\
    \ += 1\n            if (s(i) == 'u' || s(i) == 'U') count += 1\n            if\
    \ (s(i) == 'B' || s(i) == 'b') count += 1\n            if (s(i) == 'C' || s(i)\
    \ == 'c') count += 1\n            if (s(i) == 'D' || s(i) == 'd') count += 1\n\
    \            if (s(i) == 'F' || s(i) == 'f') count += 1\n            if (s(i)\
    \ == 'G' || s(i) == 'g') count += 1\n            if (s(i) == 'H' || s(i) == 'h')\
    \ count += 1\n            if (s(i) == 'J' || s(i) == 'j') count += 1\n       \
    \     if (s(i) == 'K' || s(i) == 'k') count += 1\n            if (s(i) == 'L'\
    \ || s(i) == 'l') count += 1\n            if (s(i) == 'M' || s(i) == 'm') count\
    \ += 1\n            if (s(i) == 'N' || s(i) == 'n') count += 1\n            if\
    \ (s(i) == 'P' || s(i) == 'p') count += 1\n            if (s(i) == 'Q' || s(i)\
    \ == 'q') count += 1\n            if (s(i) == 'R' || s(i) == 'r') count += 1\n\
    \            if (s(i) == 'S' || s(i) == 's') count += 1\n            if (s(i)\
    \ == 'T' || s(i) == 't') count += 1\n            if (s(i) == 'V' || s(i) == 'v')\
    \ count += 1\n            if (s(i) == 'W' || s(i) == 'w') count += 1\n       \
    \     if (s(i) == 'X' || s(i) == 'x') count += 1\n            if (s(i) == 'Y'\
    \ || s(i) == 'y') count += 1\n            if (s(i) == 'Z' || s(i) == 'z') count\
    \ += 1\n        return count", "        val vowels = \"AEIOUaeiou\".toList\n \
    \       val evenIndices = 0 until s.length\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val upperIndices = evenIndices.filter(_ % 2 == 1)\n     \
    \   val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices\
    \ = evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n", "        var count = 0L\n\
    \        for (i <- 0 until s.length)\n            if (s(i) == 'A' || s(i) == 'E'\
    \ || s(i) == 'I' || s(i) == 'O' || s(i) == 'U')\n                count += 1\n\
    \            else\n                break\n        count", "        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  val evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndice",
  "        var count = 0L\n        var i = 0\n        while (i < s.length) {\n   \
    \         if (s(i) == 'A' || s(i) == 'a') {\n                count += 1\n    \
    \        }\n            i += 1\n        }\n        count", "        val vowels\
    \ = \"aeiouAEIOU\".toSet\n        val evenIndices = 0 until s.length\n       \
    \ evenIndices.filter(i => vowels(s(i)))", "        var count = 0L\n        var\
    \ evenIndex = 0\n        for (i <- 0 until s.length)\n            if (s(i) ==\
    \ 'A')\n                count += 1\n            else if (s(i) == 'a') {\n    \
    \            if (evenIndex % 2 == 0)\n                    count += 1\n       \
    \         evenIndex += 1\n            }\n            else if (s(i) == 'B')\n \
    \               count += 1\n            else if (s(i) == 'b') {\n            \
    \    if (evenIndex % 2 == 0)\n                    count += 1\n               \
    \ evenIndex += 1\n            }\n            else if (s(i) == 'C')\n         \
    \       count += 1\n            else if (s(i) == 'c') {\n                if (evenIndex\
    \ % 2 == 0)\n                    count += 1\n                evenIndex += 1\n\
    \            }\n            else if (s(i) == 'D')\n                count += 1\n\
    \            else if (s(i) == 'd') {\n                if (evenIndex % 2 == 0)\n\
    \                    count += 1\n                evenIndex += 1\n            }\n\
    \            else if (s(i) == 'E')\n                count += 1\n            else\
    \ if (s(i) == 'e') {\n                if (evenIndex % 2 == 0)\n              \
    \      count += 1\n                evenIndex += 1\n            }\n           \
    \ else if (s(i) == 'F')\n                count += 1\n            else if (s(i)\
    \ == 'f') {\n                if (evenIndex % 2 == 0)\n                    count\
    \ += 1\n                evenIndex += 1\n            }\n            else if (s(i)\
    \ == 'G')\n                count += 1\n            else if (s(i) == 'g') {\n \
    \               if (evenIndex % 2 == 0)\n                    count += 1\n    \
    \            evenIndex += 1\n            }\n            else if (s(i) == 'H')\n\
    \                count += 1\n            else if (s(i) == 'h') {\n           \
    \     if (evenIndex % 2 == 0)\n                    count += 1\n              \
    \  evenIndex += 1\n            }\n            else if (s(i) == 'I')\n        \
    \        count += 1\n            else if (s(i) == 'i') {\n                if (evenIndex\
    \ % 2 == 0)\n                    count += 1\n                evenIndex += 1\n\
    \            }\n            else if (s(i) == 'J')\n                count += 1\n\
    \            else if (s(i) == 'j') {\n                if (evenIndex % 2 == 0)\n\
    \                    count += 1\n                evenIndex += 1\n            }\n\
    \            else if (s(i) == 'K')\n                count += 1\n            else\
    \ if (s(i) == 'k') {\n                if (evenIndex % 2 == 0)\n              \
    \      count += 1\n                evenIndex += 1\n            }\n           \
    \ else if (s(i) == 'L')\n                count += 1\n            else if (s(i)\
    \ == 'l') {\n                if (evenIndex % 2 == 0)\n                    count\
    \ += 1\n                evenIndex += 1\n            }\n            else if (s(i)\
    \ == 'M')\n                count += 1\n            else if (s(i) == 'm') {\n \
    \               if (evenIndex % 2 == 0)\n                    count += 1\n    \
    \            evenIndex += 1\n            }\n            else if (s(i) == 'N')\n\
    \                count += 1\n            else if (s(i) == 'n') {\n           \
    \     if (evenIndex % 2 == 0)\n                    count += 1", "        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' || s(i)\
    \ == 'a') count += 1\n            if (s(i) == 'E' || s(i) == 'e') count += 1\n\
    \            if (s(i) == 'I' || s(i) == 'i') count += 1\n            if (s(i)\
    \ == 'O' || s(i) == 'o') count += 1\n            if (s(i) == 'U' || s(i) == 'u')\
    \ count += 1\n            if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i)\
    \ == 'o' || s(i) == 'u') count += 1\n            if (s(i) == 'B' || s(i) == 'b')\
    \ count += 1\n            if (s(i) == 'C' || s(i) == 'c') count += 1\n       \
    \     if (s(i) == 'D' || s(i) == 'd') count += 1\n            if (s(i) == 'F'\
    \ || s(i) == 'f') count += 1\n            if (s(i) == 'G' || s(i) == 'g') count\
    \ += 1\n            if (s(i) == 'H' || s(i) == 'h') count += 1\n            if\
    \ (s(i) == 'J' || s(i) == 'j') count += 1\n            if (s(i) == 'K' || s(i)\
    \ == 'k') count += 1\n            if (s(i) == 'L' || s(i) == 'l') count += 1\n\
    \            if (s(i) == 'M' || s(i) == 'm') count += 1\n            if (s(i)\
    \ == 'N' || s(i) == 'n') count += 1\n            if (s(i) == 'P' || s(i) == 'p')\
    \ count += 1\n            if (s(i) == 'Q' || s(i) == 'q') count += 1\n       \
    \     if (s(i) == 'R' || s(i) == 'r') count += 1\n            if (s(i) == 'S'\
    \ || s(i) == 's') count += 1\n            if (s(i) == 'T' || s(i) == 't') count\
    \ += 1\n            if (s(i) == 'V' || s(i) == 'v') count += 1\n            if\
    \ (s(i) == 'W' || s(i) == 'w') count += 1\n            if (s(i) == 'X' || s(i)\
    \ == 'x') count += 1\n            if (s(i) == 'Y' || s(i) == 'y') count += 1\n\
    \            if (s(i) == 'Z' || s(i) == 'z') count += 1\n        if (count % 2\
    \ == 0) count else 0", "        var count = 0L\n        for (i <- 0 until s.length)\n\
    \            if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n        count", "        var count = 0L\n\
    \        var evenIndex = 0\n        for (i <- 0 until s.length)\n            if\
    \ (s(i).isUpper)\n                if (evenIndex % 2 == 0)\n                  \
    \  count += 1\n                evenIndex += 1\n        count", "        var count\
    \ = 0L\n        var even = 0\n        for (i <- 0 until s.length)\n          \
    \  if (s(i) == 'A' || s(i) == 'a') even = even + 1\n            if (s(i) == 'B'\
    \ || s(i) == 'b') even = even + 1\n            if (s(i) == 'C' || s(i) == 'c')\
    \ even = even + 1\n            if (s(i) == 'D' || s(i) == 'd') even = even + 1\n\
    \            if (s(i) == 'E' || s(i) == 'e') even = even + 1\n            if (s(i)\
    \ == 'F' || s(i) == 'f') even = even + 1\n            if (s(i) == 'G' || s(i)\
    \ == 'g') even = even + 1\n            if (s(i) == 'H' || s(i) == 'h') even =\
    \ even + 1\n            if (s(i) == 'I' || s(i) == 'i') even = even + 1\n    \
    \        if (s(i) == 'J' || s(i) == 'j') even = even + 1\n            if (s(i)\
    \ == 'K' || s(i) == 'k') even = even + 1\n            if (s(i) == 'L' || s(i)\
    \ == 'l') even = even + 1\n            if (s(i) == 'M' || s(i) == 'm') even =\
    \ even + 1\n            if (s(i) == 'N' || s(i) == 'n') even = even + 1\n    \
    \        if (s(i) == 'O' || s(i) == 'o') even = even + 1\n            if (s(i)\
    \ == 'P' || s(i) == 'p') even = even + 1\n            if (s(i) == 'Q' || s(i)\
    \ == 'q') even = even + 1\n            if (s(i) == 'R' || s(i) == 'r') even =\
    \ even + 1\n            if (s(i) == 'S' || s(i) == 's') even = even + 1\n    \
    \        if (s(i) == 'T' || s(i) == 't') even = even + 1\n            if (s(i)\
    \ == 'U' || s(i) == 'u') even = even + 1\n            if (s(i) == 'V' || s(i)\
    \ == 'v') even = even + 1\n            if (s(i) == 'W' || s(i) == 'w') even =\
    \ even + 1\n            if (s(i) == 'X' || s(i) == 'x') even = even + 1\n    \
    \        if (s(i) == 'Y' || s(i) == 'y') even = even + 1\n            if (s(i)\
    \ == 'Z' || s(i) == 'z') even = even + 1\n            if (even % 2 == 0) count\
    \ = count + 1\n        return count", "        val vowels = \"AEIOUaeiou\".toSet\n\
    \        val evenIndices = 0 until s.length\n        evenIndices.filter(_ % 2\
    \ == 0).map(s.length).count(vowels.contains)", "        val vowels = Set(\"a\"\
    , \"e\", \"i\", \"o\", \"u\")\n        var count = 0\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(s(i)) && s(i) % 2 == 0)\n                count\
    \ += 1\n        count", "        val vowels = \"AEIOUaeiou\".toList\n        val\
    \ evenIndices = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(_\
    \ / 2).foldLeft(0)((acc, i) => acc + (vowels(i).toString.toUpperCase == vowels(i).toString.toUpperCase))",
  "        val vowels = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0\
    \ until s.length)\n            if (vowels(i).equals(s.charAt(i)) && s.charAt(i)\
    \ != 'A')\n                count += 1\n        count", "        val vowels = \"\
    aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n        evenIndices.filter(_\
    \ % 2 == 0).map(vowels.indexOf(_)).sum", "        val vowels = \"AEIOUaeiou\"\n\
    \        var count = 0\n        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    count += 1\n   \
    \     count", "        var count = 0L\n        for (i <- 0 until s.length)\n \
    \           if (s(i) == 'A' || s(i) == 'a' || s(i) == 'E' || s(i) == 'e' || s(i)\
    \ == 'I' || s(i) == 'i' || s(i) == 'O' || s(i) == 'o' || s(i) == 'U' || s(i) ==\
    \ 'u')\n                count += 1\n        count", "        val vowels = \"aeiouAEIOU\"\
    .toSet\n        val evenIndices = 0 until s.length\n        evenIndices.toList.flatMap(i\
    \ => if (s(i).isUpper) 1 else 0).sum", "        val vowels = \"aeiouAEIOU\"\n\
    \        var count = 0\n        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    count += 1\n   \
    \     count", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s contains _).count(_)",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.filter(_ % 2 == 0).map(s take _).count(vowels.contains)",
  "        var count = 0\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' || s(i) == 'a' || s(i) == 'E' || s(i) == 'e' || s(i) == 'I' || s(i) ==\
    \ 'i' || s(i) == 'O' || s(i) == 'o' || s(i) == 'U' || s(i) == 'u')\n         \
    \       count += 1\n            else\n                break\n        count * 2",
  "        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices_vowels = evenIndices.filter(_ % 2 == 0).map(vowels.indexOf(_))\n\
    \        evenIndices_vowels.count(_ > -1)", "        var count = 0\n        for\
    \ (i <- 0 until s.length) if (s(i) == 'A' || s(i) == 'a') count += 1\n       \
    \ for (i <- 0 until s.length) if (s(i) == 'E' || s(i) == 'e') count += 1\n   \
    \     for (i <- 0 until s.length) if (s(i) == 'I' || s(i) == 'i') count += 1\n\
    \        for (i <- 0 until s.length) if (s(i) == 'O' || s(i) == 'o') count +=\
    \ 1\n        for (i <- 0 until s.length) if (s(i) == 'U' || s(i) == 'u') count\
    \ += 1\n        for (i <- 0 until s.length) if (s(i) == 'a' || s(i) == 'e' ||\
    \ s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count += 1\n        count", "   \
    \     val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices\
    \ = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n\
    \                if (s(i) % 2 == 0)\n                    evenIndices += i\n  \
    \      evenIndices.toList.filter(x => s(x) % 2 == 0).length", "        val vowels\
    \ = \"AEIOUaeiou\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.indexOf(s(i)) >= 0)\n\
    \                if (s(i) % 2 == 0)\n                    evenIndices += i\n  \
    \      evenIndices.sum", "        val vowels = \"aeiouAEIOU\"\n        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (vowels(i).equals(s.charAt(i)))\
    \ {\n                if (i % 2 == 0)\n                    count += 1L\n      \
    \      }\n        count", "        val vowels = \"aeiouAEIOU\".toList\n      \
    \  val evenIndices = 0 until s.length\n        evenIndices.filter(i => vowels(i).isUpper).count(i\
    \ => s(i).toUpperCase == s(i))", "        val vowels = \"AEIOUaeiou\".toCharArray\n\
    \        val evenIndices = mutable.ArrayBuffer.empty[Int]\n        for (i <- 0\
    \ until s.length)\n            if (vowels(i) % 2 == 0)\n                evenIndices\
    \ += i\n        evenIndices.toList.foldLeft(0)((acc, i) => acc + s.length - i)",
  "        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.filter(_ % 2 == 0).map(_ / 2).map(vowels.indexOf(_)).sum",
  "        var count = 0\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' || s(i) == 'a') count += 1\n            if (s(i) == 'E' || s(i) == 'e')\
    \ count += 1\n            if (s(i) == 'I' || s(i) == 'i') count += 1\n       \
    \     if (s(i) == 'O' || s(i) == 'o') count += 1\n            if (s(i) == 'U'\
    \ || s(i) == 'u') count += 1\n            if (s(i) == 'a' || s(i) == 'e' || s(i)\
    \ == 'i' || s(i) == 'o' || s(i) == 'u') count += 1\n            if (s(i) == 'B'\
    \ || s(i) == 'b') count += 1\n            if (s(i) == 'C' || s(i) == 'c') count\
    \ += 1\n            if (s(i) == 'D' || s(i) == 'd') count += 1\n            if\
    \ (s(i) == 'F' || s(i) == 'f') count += 1\n            if (s(i) == 'G' || s(i)\
    \ == 'g') count += 1\n            if (s(i) == 'H' || s(i) == 'h') count += 1\n\
    \            if (s(i) == 'J' || s(i) == 'j') count += 1\n            if (s(i)\
    \ == 'K' || s(i) == 'k') count += 1\n            if (s(i) == 'L' || s(i) == 'l')\
    \ count += 1\n            if (s(i) == 'M' || s(i) == 'm') count += 1\n       \
    \     if (s(i) == 'N' || s(i) == 'n') count += 1\n            if (s(i) == 'P'\
    \ || s(i) == 'p') count += 1\n            if (s(i) == 'Q' || s(i) == 'q') count\
    \ += 1\n            if (s(i) == 'R' || s(i) == 'r') count += 1\n            if\
    \ (s(i) == 'S' || s(i) == 's') count += 1\n            if (s(i) == 'T' || s(i)\
    \ == 't') count += 1\n            if (s(i) == 'V' || s(i) == 'v') count += 1\n\
    \            if (s(i) == 'W' || s(i) == 'w') count += 1\n            if (s(i)\
    \ == 'X' || s(i) == 'x') count += 1\n            if (s(i) == 'Y' || s(i) == 'y')\
    \ count += 1\n            if (s(i) == 'Z' || s(i) == 'z') count += 1\n       \
    \ return count", "        val vowels = \"aeiouAEIOU\"\n        val vowelsSet =\
    \ vowels.toSet\n        val evenIndices = 0 until s.length\n        val evenIndices_Set\
    \ = evenIndices.toSet\n        val evenIndices_Set2 = evenIndices.toSet\n    \
    \    val evenIndices_Set3 = evenIndices.toSet\n        val evenIndices_Set4 =\
    \ evenIndices.toSet\n        val evenIndices_Set5 = evenIndices.toSet\n      \
    \  val evenIndices_Set6 = evenIndices.toSet\n        val evenIndices_Set7 = evenIndices.toSet\n\
    \        val evenIndices_Set8 = evenIndices.toSet\n        val evenIndices_Set9\
    \ = evenIndices.toSet\n        val evenIndices_Set10 = evenIndices.toSet\n   \
    \     val evenIndices_Set11 = evenIndices.toSet\n        val evenIndices_Set12\
    \ = evenIndices.toSet\n        val evenIndices_Set13 = evenIndices.toSet\n   \
    \     val evenIndices_Set14 = evenIndices.toSet\n        val evenIndices_Set15\
    \ = evenIndices.toSet\n        val evenIndices_Set16 = evenIndices.toSet\n   \
    \     val evenIndices_Set17 = evenIndices.toSet\n        val evenIndices_Set18\
    \ = evenIndices.toSet\n        val evenIndices_Set19 = evenIndices.toSet\n   \
    \     val evenIndices_Set20 = evenIndices.toSet\n        val evenIndices_Set21\
    \ = evenIndices.toSet\n        val evenIndices_Set22 = evenIndices.toSet\n   \
    \     val evenIndices_Set23 = evenIndices.toSet\n        val evenIndices_Set24\
    \ = evenIndices.toSet\n        val evenIndices_Set25 = evenIndices.toSet\n   \
    \     val evenIndices_Set26 = evenIndices.toSet\n        val evenIndices_Set27\
    \ = evenIndices.toSet\n        val evenIndices_Set28 = evenIndices.toSet\n   \
    \     val evenIndices_Set29 = evenIndices.toSet\n        val evenIndices_Set30\
    \ = evenIndices.toSet\n        val evenIndices_Set31 = evenIndices.toSet\n   \
    \     val evenIndices_Set32 = evenIndices.toSet\n        val evenIndices_Set33\
    \ = evenIndices.toSet\n        val evenIndices_Set34 = evenIndices.toSet\n   \
    \     val evenIndices_Set35 = evenIndices.toSet\n        val even", "        val\
    \ vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.filter(_ % 2 == 0).map(vowels.indexOf(_)).sum", "       \
    \ val vowels = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices_vowels = evenIndices.filter(_ % 2 == 0).map(vowels.indexOf(_))\n\
    \        evenIndices_vowels.sum", "        val vowels = \"AEIOUaeiou\".toList\n\
    \        val evenIndices = 0 until s.length\n        evenIndices.filter(_ % 2\
    \ == 0).map { i => vowels(i) }.toSet.size ", "        val vowels = \"aeiouAEIOU\"\
    \n        val vowelsSet = vowels.toSet\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length) if (i % 2 == 0) evenIndices += i\n      \
    \  evenIndices.toList.map(i => vowelsSet(s.charAt(i)))\n            .count(vowelsSet.contains)",
  "        val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val evenIndices\
    \ = mutable.Set[Int]()\n        for(i <- 0 until s.length)\n            if(vowels(s(i))\
    \ && s(i) % 2 == 0)\n                evenIndices += i\n        evenIndices.toList.size",
  "        val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length) evenIndices += i\n        evenIndices.filter(_\
    \ % 2 == 0).map(evenIndices.indexOf(_)).count(vowels.contains)", "        val\
    \ vowels = \"AEIOUaeiou\".toSet\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.filter(i => vowels(s(i)) != 'u').count(i => s(i) == 'u')",
  "        val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        var count\
    \ = 0\n        for (i <- 0 until s.length)\n            if (vowels(s(i)) && s(i)\
    \ % 2 == 0)\n                count += 1\n        count", "        var count =\
    \ 0\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' || s(i)\
    \ == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U')\n                count\
    \ += 1\n            else\n                break\n        \n        count * 2",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.sum", "        val vowels = \"AEIOUaeiou\".toList\n     \
    \   var count = 0L\n        for (i <- 0 until s.length)\n            if (vowels(i).equals(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    count += 1\n        count",
  "        val vowels = \"AEIOUaeiou\".toList\n        var count = 0\n        for\
    \ (i <- 0 until s.length)\n            if (vowels(i).isUpper)\n              \
    \  count += 1\n            else\n                if (i % 2 == 0)\n           \
    \         count += 1\n                else\n                    count += 0\n \
    \       count", "        val vowels = \"aeiouAEIOU\"\n        val vowelsSet =\
    \ vowels.toSet\n        val evenIndices = 0 until s.length\n        evenIndices.toList.map(i\
    \ => if (i % 2 == 0) vowelsSet(s.charAt(i)) else 0).sum", "        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = s filter (_ % 2 == 0)\n \
    \       val evenIndices_vowels = evenIndices filter (vowels.contains)\n      \
    \  evenIndices_vowels.size match {\n            case 0 => 0\n            case\
    \ 1 => vowels.count(_ == evenIndices_vowels(0))\n            case _ => vowels.count(_\
    \ == evenIndices_vowels(0)) + vowels.count(_ == evenIndices_vowels(1))\n     \
    \   }", "        var count = 0L\n        var i = 0\n        while (i < s.length())\
    \ {\n            if (s(i) == 'A' || s(i) == 'a') {\n                if (s(i) ==\
    \ 'A') {\n                    count += 1\n                }\n                i\
    \ += 1\n            } else if (s(i) == 'B' || s(i) == 'b') {\n               \
    \ if (s(i) == 'B') {\n                    count += 1\n                }\n    \
    \            i += 1\n            } else if (s(i) == 'C' || s(i) == 'c') {\n  \
    \              if (s(i) == 'C') {\n                    count += 1\n          \
    \      }\n                i += 1\n            } else if (s(i) == 'D' || s(i) ==\
    \ 'd') {\n                if (s(i) == 'D') {\n                    count += 1\n\
    \                }\n                i += 1\n            } else if (s(i) == 'E'\
    \ || s(i) == 'e') {\n                if (s(i) == 'E') {\n                    count\
    \ += 1\n                }\n                i += 1\n            } else if (s(i)\
    \ == 'F' || s(i) == 'f') {\n                if (s(i) == 'F') {\n             \
    \       count += 1\n                }\n                i += 1\n            } else\
    \ if (s(i) == 'G' || s(i) == 'g') {\n                if (s(i) == 'G') {\n    \
    \                count += 1\n                }\n                i += 1\n     \
    \       } else if (s(i) == 'H' || s(i) == 'h') {\n                if (s(i) ==\
    \ 'H') {\n                    count += 1\n                }\n                i\
    \ += 1\n            } else if (s(i) == 'I' || s(i) == 'i') {\n               \
    \ if (s(i) == 'I') {\n                    count += 1\n                }\n    \
    \            i += 1\n            } else if (s(i) == 'J' || s(i) == 'j') {\n  \
    \              if (s(i) == 'J') {\n                    count += 1\n          \
    \      }\n                i += 1\n            } else if (s(i) == 'K' || s(i) ==\
    \ 'k') {\n                if (s(i) == 'K') {\n                    count += 1\n\
    \                }\n                i += 1\n            } else if (s(i) == 'L'\
    \ || s(i) == 'l') {\n                if (s(i) == 'L') {\n                    count\
    \ += 1\n                }\n                i += 1\n            } else if (s(i)\
    \ == 'M' || s(i) == 'm') {\n                if (s(i) == 'M') {\n             \
    \       count += 1\n                }\n                i += 1\n            } else\
    \ if (s(i) == 'N' || s(i) == 'n') {\n                if (s(i) == 'N') {\n    \
    \                count += 1\n                }\n                i += 1\n     \
    \       } else if (s(i) == 'O' || s(i) == 'o') {\n                if (s(i) ==\
    \ 'O') {\n                    count += 1\n                }\n                i\
    \ += 1\n            } else if (s(i) == 'P' || s(i) == 'p') {\n               \
    \ if (s(i) == 'P') {\n                    count += 1\n                }\n    \
    \            i += 1\n            } else if (s(i) == 'Q' || s(i) == 'q') {\n  \
    \              if (s(i) == 'Q') {\n                    count += 1\n          \
    \      }\n                i += 1\n            } else if (s(i) == 'R' || s(i) ==\
    \ 'r') {\n                if (s(i) == 'R') {\n                    count += 1\n\
    \                }\n                i += 1\n            } else if (s(i) == 'S'\
    \ || s(i) == 's') {\n                if (s(", "        val vowels = \"AEIOUaeiou\"\
    .toSet\n        val evenIndices = 0 until s.length\n        evenIndices.filter(_\
    \ % 2 == 0).map(s.length).count(s => vowels.contains(s.charAt(_)))", "       \
    \ val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.toList.map(i => if (i % 2 == 0) vowels.contains(s(i)) else\
    \ 0)\n            .sum", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels.indexOf(s.charAt(i)) >= 0)\n                if (i % 2 == 0)\n \
    \                   evenIndices += i\n        evenIndices.toList.count(_ % 2 ==\
    \ 0)", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ > -1)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0)((acc, i) => acc + i)", "        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.filter(_ % 2 == 0).map(_ / 2).count(vowels.contains)", "      \
    \  var count = 0L\n        for (i <- 0 until s.length)\n            if (s(i) ==\
    \ 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U')\n         \
    \       count += 1\n            else if (s(i) == 'B')\n                count +=\
    \ 1\n            else if (s(i) == 'C')\n                count += 1\n         \
    \   else if (s(i) == 'D')\n                count += 1\n            else if (s(i)\
    \ == 'F')\n                count += 1\n            else if (s(i) == 'G')\n   \
    \             count += 1\n            else if (s(i) == 'H')\n                count\
    \ += 1\n            else if (s(i) == 'J')\n                count += 1\n      \
    \      else if (s(i) == 'K')\n                count += 1\n            else if\
    \ (s(i) == 'L')\n                count += 1\n            else if (s(i) == 'M')\n\
    \                count += 1\n            else if (s(i) == 'N')\n             \
    \   count += 1\n            else if (s(i) == 'P')\n                count += 1\n\
    \            else if (s(i) == 'Q')\n                count += 1\n            else\
    \ if (s(i) == 'R')\n                count += 1\n            else if (s(i) == 'S')\n\
    \                count += 1\n            else if (s(i) == 'T')\n             \
    \   count += 1\n            else if (s(i) == 'V')\n                count += 1\n\
    \            else if (s(i) == 'W')\n                count += 1\n            else\
    \ if (s(i) == 'X')\n                count += 1\n            else if (s(i) == 'Y')\n\
    \                count += 1\n            else if (s(i) == 'Z')\n             \
    \   count += 1\n            else if (s(i) == 'a')\n                count += 1\n\
    \            else if (s(i) == 'b')\n                count += 1\n            else\
    \ if (s(i) == 'c')\n                count += 1\n            else if (s(i) == 'd')\n\
    \                count += 1\n            else if (s(i) == 'e')\n             \
    \   count += 1\n            else if (s(i) == 'f')\n                count += 1\n\
    \            else if (s(i) == 'g')\n                count += 1\n            else\
    \ if (s(i) == 'h')\n                count += 1\n            else if (s(i) == 'j')\n\
    \                count += 1\n            else if (s(i) == 'k')\n             \
    \   count += 1\n            else if (s(i) == 'l')\n                count += 1\n\
    \            else if (s(i) == 'm')\n                count += 1\n            else\
    \ if (s(i) == 'n')\n                count += 1\n            else if (s(i) == 'p')\n\
    \                count += 1\n            else if (s(i) == 'q')\n             \
    \   count += 1\n            else if (s(i) == 'r')\n                count += 1\n\
    \            else if (s(i) == 's')\n                count += 1\n            else\
    \ if (s(i) == 't')\n                count += 1\n            else if (s(i) == 'v')\n\
    \                count += 1\n            else if (s(i) == 'w')\n             \
    \   count += 1\n            else if (s(i) == 'x')\n                count += 1\n\
    \            else if (s(i) == 'y')\n                count += 1\n            else\
    \ if (s(i) == 'z')", "        var count = 0L\n        for (i <- 0 until s.length)\n\
    \            if (s(i) == 'A' || s(i) == 'a' || s(i) == 'E' || s(i) == 'e' || s(i)\
    \ == 'I' || s(i) == 'i' || s(i) == 'O' || s(i) == 'o' || s(i) == 'U' || s(i) ==\
    \ 'u')\n                count += 1\n        count", "        var count = 0L\n\
    \        for (i <- 0 until s.length)\n            if (s(i) == 'A' || s(i) == 'a'\
    \ || s(i) == 'E' || s(i) == 'e' || s(i) == 'I' || s(i) == 'i' || s(i) == 'O' ||\
    \ s(i) == 'o' || s(i) == 'U' || s(i) == 'u')\n                count += 1\n   \
    \     count", "        val vowels = \"AEIOUaeiou\".toSet\n        var count =\
    \ 0L\n        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n   \
    \             if (s(i) % 2 == 0)\n                    count += 1\n        count",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0)((acc, i) => acc + i)", "        val vowels\
    \ = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_\
    \ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_\
    \ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ %\
    \ 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ /\
    \ 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2\
    \ == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_\
    \ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_\
    \ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ %\
    \ 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ /\
    \ 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2\
    \ == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_\
    \ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_\
    \ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ %\
    \ 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ /\
    \ 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2\
    \ == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_\
    \ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_\
    \ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ %\
    \ 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ /\
    \ 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2\
    \ == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).",
  "        var count = 0\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U')\n      \
    \          count += 1\n            else\n                break\n        count",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i).equals(s.charAt(i))\
    \ && i % 2 == 0)\n                evenIndices += i\n        evenIndices.toList.sum",
  "        val vowels = \"AEIOUaeiou\"\n        val vowelsSet = vowels.toSet\n   \
    \     val vowelsCount = s.toCharArray.zipWithIndex.filter(_._1 == vowelsSet).map(_._2).length\n\
    \        vowelsCount / s.length", "        var count = 0L\n        for (i <- 0\
    \ until s.length)\n            if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' ||\
    \ s(i) == 'O' || s(i) == 'U')\n                count += 1\n            else\n\
    \                break\n        count", "        val vowels = \"aeiouAEIOU\"\n\
    \        val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i)) >= 0)\n                if (i % 2\
    \ == 0)\n                    evenIndices += i\n        evenIndices.size", "  \
    \      val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val evenIndices\
    \ = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until s.length)\n     \
    \       if (i % 2 == 0)\n                evenIndices += i\n        evenIndices.toSet.count(vowels.contains)",
  "        val vowels = \"AEIOUaeiou\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.map(evenIndices.indexOf(_)).sum", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0)((acc, i) => acc + i)", "        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' || s(i)\
    \ == 'a' || s(i) == 'E' || s(i) == 'e' || s(i) == 'I' || s(i) == 'i' || s(i) ==\
    \ 'O' || s(i) == 'o' || s(i) == 'U' || s(i) == 'u')\n                count +=\
    \ 1\n        count", "        var count = 0L\n        for (i <- 0 until s.length)\n\
    \            if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n        count", "        val vowels = \"\
    AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n        evenIndices.filter(_\
    \ % 2 == 0).map(s.length).count(_ == s.length)", "        val vowels = Array(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (i % 2 == 0)\n          \
    \      evenIndices += i\n        evenIndices.toList.filter(i => vowels(i).equals(s.charAt(i))).length",
  "        var count = 0\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'a' && s(i+1) == 'b' && s(i+2) == 'c')\n           \
    \     count += 1\n            else if (s(i) == 'd' && s(i+1) == 'b' && s(i+2)\
    \ == 'e')\n                count += 1\n            else if (s(i) == 'e' && s(i+1)\
    \ == 'f' && s(i+2) == 'g')\n                count += 1\n            else if (s(i)\
    \ == 'd' && s(i+1) == 'B' && s(i+2) == 'E')\n                count += 1\n    \
    \        else if (s(i) == 'e' && s(i+1) == 'f' && s(i+2) == 'G')\n           \
    \     count += 1\n            else if (s(i) == 'd' && s(i+1) == 'b' && s(i+2)\
    \ == 'E')\n                count += 1\n            else if (s(i) == 'e' && s(i+1)\
    \ == 'f' && s(i+2) == 'G')\n                count += 1\n            else if (s(i)\
    \ == 'd' && s(i+1) == 'B' && s(i+2) == 'E')\n                count += 1\n    \
    \        else if (s(i) == 'e' && s(i+1) == 'f' && s(i+2) == 'G')\n           \
    \     count += 1\n            else if (s(i) == 'd' && s(i+1) == 'B' && s(i+2)\
    \ == 'E')\n                count += 1\n            else if (s(i) == 'e' && s(i+1)\
    \ == 'f' && s(i+2) == 'G')\n                count += 1\n            else if (s(i)\
    \ == 'd' && s(i+1) == 'B' && s(i+2) == 'E')\n                count += 1\n    \
    \        else if (s(i) == 'e' && s(i+1) == 'f' && s(i+2) == 'G')\n           \
    \     count += 1\n            else if (s(i) == 'd' && s(i+1) == 'B' && s(i+2)\
    \ == 'E')\n                count += 1\n            else if (s(i) == 'e' && s(i+1)\
    \ == 'f' && s(i+2) == 'G')\n                count += 1\n            else if (s(i)\
    \ == 'd' && s(i+1) == 'B' && s(i+2) == 'E')\n                count += 1\n    \
    \        else if (s(i) == 'e' && s(i+1) == 'f' && s(i+2) == 'G')\n           \
    \     count += 1\n            else if (s(i) == 'd' && s(i+1) == 'B' && s(i+2)\
    \ == 'E')\n                count += 1\n            else if (s(i) == 'e' && s(i+1)\
    \ == 'f' && s(i+2) == 'G')\n                count += 1\n            else if (s(i)\
    \ == 'd' && s(i+1) == 'B' && s(i+2) == 'E')\n                count += 1\n    \
    \        else if (s(i) == 'e' && s(i+1) == 'f' && s(i+2) == 'G')\n", "       \
    \ val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices_count = evenIndices.count(i => vowels(s(i)))\n      \
    \  evenIndices_count * evenIndices.count(i => vowels(s(i)))", "        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' || s(i)\
    \ == 'a' || s(i) == 'E' || s(i) == 'e' || s(i) == 'I' || s(i) == 'i' || s(i) ==\
    \ 'O' || s(i) == 'o' || s(i) == 'U' || s(i) == 'u')\n                count +=\
    \ 1\n        count", "        val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"\
    U\")\n        var count = 0\n        for (i <- 0 until s.length)\n           \
    \ if (vowels(s(i)) && s(i) % 2 == 0)\n                count += 1\n        count",
  "        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.filter(_ % 2 == 0).map(s take _).filter(vowels.contains).size",
  "        val vowels = \"AEIOUaeiou\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        val upperIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.contains(s.charAt(i)))\n                if (i % 2 == 0)\n\
    \                    evenIndices += i\n                else\n                \
    \    upperIndices += i\n        evenIndices.toSet.size + (upperIndices.toSet -\
    \ evenIndices.toSet)", "        var count = 0L\n        for (i <- 0 until s.length)\n\
    \            if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n            else if (s(i) == 'B' || s(i)\
    \ == 'C' || s(i) == 'D' || s(i) == 'F' || s(i) == 'G')\n                count\
    \ += 1\n            else\n                count += 1\n        count", "      \
    \  val vowels = \"aeiouAEIOU\".toList\n        var count = 0\n        for (i <-\
    \ 0 until s.length)\n            if (vowels(i).isUpper)\n                if (s(i).isUpper)\n\
    \                    count += 1\n        count", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        val evenIndices = 0 until s.length\n        evenIndices.foreach\
    \ { i =>\n            if (s.charAt(i).toUpperCase == vowels(i)) {\n          \
    \      evenIndices -= 1\n            }\n        }\n        evenIndices.toLong",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0)((acc, i) => acc + i)", "        val vowels\
    \ = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.filter(_ % 2 == 0).map(s.length).count(_ == s.length)", "     \
    \   var count = 0\n        for (i <- 0 until s.length)\n            if (s(i) ==\
    \ 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U')\n         \
    \       count += 1\n            else\n                break\n        count", " \
    \       val vowels = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until\
    \ s.length\n        evenIndices.foldLeft(0){ (count, index) =>\n            if\
    \ (index % 2 == 0) count + vowels(index.toInt)\n            else count\n     \
    \   }", "        val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices =\
    \ 0 until s.length\n        evenIndices.foldLeft(0)((acc, i) => acc + (if (i %\
    \ 2 == 0) vowels(s(i)) else 0))", "        var count = 0\n        for (i <- 0\
    \ until s.length)\n            if (s(i) == 'A' || s(i) == 'a') count += 2\n  \
    \          if (s(i) == 'B' || s(i) == 'b') count += 2\n            if (s(i) ==\
    \ 'C' || s(i) == 'c') count += 2\n            if (s(i) == 'D' || s(i) == 'd')\
    \ count += 2\n            if (s(i) == 'E' || s(i) == 'e') count += 2\n       \
    \     if (s(i) == 'F' || s(i) == 'f') count += 2\n            if (s(i) == 'G'\
    \ || s(i) == 'g') count += 2\n            if (s(i) == 'H' || s(i) == 'h') count\
    \ += 2\n            if (s(i) == 'I' || s(i) == 'i') count += 2\n            if\
    \ (s(i) == 'J' || s(i) == 'j') count += 2\n            if (s(i) == 'K' || s(i)\
    \ == 'k') count += 2\n            if (s(i) == 'L' || s(i) == 'l') count += 2\n\
    \            if (s(i) == 'M' || s(i) == 'm') count += 2\n            if (s(i)\
    \ == 'N' || s(i) == 'n') count += 2\n            if (s(i) == 'O' || s(i) == 'o')\
    \ count += 2\n            if (s(i) == 'P' || s(i) == 'p') count += 2\n       \
    \     if (s(i) == 'Q' || s(i) == 'q') count += 2\n            if (s(i) == 'R'\
    \ || s(i) == 'r') count += 2\n            if (s(i) == 'S' || s(i) == 's') count\
    \ += 2\n            if (s(i) == 'T' || s(i) == 't') count += 2\n            if\
    \ (s(i) == 'U' || s(i) == 'u') count += 2\n            if (s(i) == 'V' || s(i)\
    \ == 'v') count += 2\n            if (s(i) == 'W' || s(i) == 'w') count += 2\n\
    \            if (s(i) == 'X' || s(i) == 'x') count += 2\n            if (s(i)\
    \ == 'Y' || s(i) == 'y') count += 2\n            if (s(i) == 'Z' || s(i) == 'z')\
    \ count += 2\n        return count", "        val vowels = \"aeiouAEIOU\".toList\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices_vowels =\
    \ evenIndices.filter(i => vowels(i) % 2 == 0)\n        evenIndices_vowels.count(i\
    \ => s(i) == 'A')", "        var count = 0L\n        var index = 0\n        while\
    \ (index < s.length()) {\n            if (s(index).isUpper) {\n              \
    \  count += 1\n            }\n            index += 1\n        }\n        count",
  "        var count = 0\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' || s(i) == 'a') count += 1\n            if (s(i) == 'E' || s(i) == 'e')\
    \ count += 1\n            if (s(i) == 'I' || s(i) == 'i') count += 1\n       \
    \     if (s(i) == 'O' || s(i) == 'o') count += 1\n            if (s(i) == 'U'\
    \ || s(i) == 'u') count += 1\n        if (count % 2 == 0)\n            count\n\
    \        else\n            0", "        val vowels = \"AEIOUaeiou\".toList\n \
    \       val evenIndices = 0 until s.length\n        val upperCounts = mutable.Map[Int,\
    \ Long]()\n        evenIndices.foreach { i =>\n            val c = s.charAt(i)\n\
    \            if (vowels.contains(c)) {\n                upperCounts(i) = upperCounts.getOrElse(i,\
    \ 0) + 1\n            }\n        }\n        upperCounts.values.sum", "       \
    \ var count = 0L\n        for (i <- 0 until s.length)\n            if (s(i) ==\
    \ 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U')\n         \
    \       count += 1\n            else if (s(i) == 'B' || s(i) == 'C' || s(i) ==\
    \ 'D' || s(i) == 'F' || s(i) == 'G')\n                count += 1\n           \
    \ else\n                count += 0\n        return count", "        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' || s(i)\
    \ == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U')\n                count\
    \ += 1\n            else\n                break\n        count", "        var\
    \ count = 0\n        for (i <- 0 until s.length)\n            if (s(i) == 'A'\
    \ || s(i) == 'a') count += 1\n            if (s(i) == 'B' || s(i) == 'b') count\
    \ += 1\n            if (s(i) == 'C' || s(i) == 'c') count += 1\n            if\
    \ (s(i) == 'D' || s(i) == 'd') count += 1\n            if (s(i) == 'E' || s(i)\
    \ == 'e') count += 1\n            if (s(i) == 'F' || s(i) == 'f') count += 1\n\
    \            if (s(i) == 'G' || s(i) == 'g') count += 1\n            if (s(i)\
    \ == 'H' || s(i) == 'h') count += 1\n            if (s(i) == 'I' || s(i) == 'i')\
    \ count += 1\n            if (s(i) == 'J' || s(i) == 'j') count += 1\n       \
    \     if (s(i) == 'K' || s(i) == 'k') count += 1\n            if (s(i) == 'L'\
    \ || s(i) == 'l') count += 1\n            if (s(i) == 'M' || s(i) == 'm') count\
    \ += 1\n            if (s(i) == 'N' || s(i) == 'n') count += 1\n            if\
    \ (s(i) == 'O' || s(i) == 'o') count += 1\n            if (s(i) == 'P' || s(i)\
    \ == 'p') count += 1\n            if (s(i) == 'Q' || s(i) == 'q') count += 1\n\
    \            if (s(i) == 'R' || s(i) == 'r') count += 1\n            if (s(i)\
    \ == 'S' || s(i) == 's') count += 1\n            if (s(i) == 'T' || s(i) == 't')\
    \ count += 1\n            if (s(i) == 'U' || s(i) == 'u') count += 1\n       \
    \     if (s(i) == 'V' || s(i) == 'v') count += 1\n            if (s(i) == 'W'\
    \ || s(i) == 'w') count += 1\n            if (s(i) == 'X' || s(i) == 'x') count\
    \ += 1\n            if (s(i) == 'Y' || s(i) == 'y') count += 1\n            if\
    \ (s(i) == 'Z' || s(i) == 'z') count += 1\n        if (count % 2 == 0)\n     \
    \       count\n        else\n            0", "        val vowels = Set(\"a\",\
    \ \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.Set[Int]()\n\
    \        val upperIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels(s(i)))\n                if (s(i) % 2 == 0)\n         \
    \           evenIndices += i\n                else\n                    upperIndices\
    \ += i\n        evenIndices.toSet.size + (upperIndices.toSet.size - evenIndices.toSet.size)\
    \ * vowels.size", "        val vowels = mutable.Set[Char]('a', 'e', 'i', 'o',\
    \ 'u')\n        val evenIndices = mutable.Set[Int](0, 2, 4, 6)\n        val upperIndices\
    \ = mutable.Set[Int](0, 2, 4, 6)\n        val evenIndices_count = mutable.Set[Int]()\n\
    \        val upperIndices_count = mutable.Set[Int]()\n        val evenIndices_count_set\
    \ = mutable.Set[Int]()\n        val upperIndices_count_set = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s(i)))\n\
    \                if (evenIndices.contains(i))\n                    evenIndices_count\
    \ += evenIndices_count_set\n                else\n                    evenIndices_count\
    \ += evenIndices_count_set + evenIndices(i)\n                upperIndices_count\
    \ += upperIndices_count_set\n                upperIndices_count += upperIndices(i)\n\
    \            else\n                if (evenIndices.contains(i))\n            \
    \        evenIndices_count_set += evenIndices(i)\n                else\n     \
    \               evenIndices_count_set += evenIndices(i) + evenIndices(i)\n   \
    \             upperIndices_count_set += upperIndices(i)\n                upperIndices_count_set\
    \ += upperIndices(i)\n        evenIndices_count.toSet.size + (evenIndices_count_set\
    \ - evenIndices_count).toSet.size + (upperIndices_count - upperIndices_count_set).toSet.size",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices\
    \ = evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n", "        val vowels = \"AEIOUaeiou\"\n        val evenIndices\
    \ = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    evenIndices += i\n     \
    \   evenIndices.toList.count(_ % 2 == 0)", "        val vowels = \"AEIOUaeiou\"\
    .toList\n        val evenIndices = 0 until s.length\n        evenIndices.filter(_\
    \ % 2 == 0).map(s => vowels.count(_ == s.charAt(_)))", "        val vowels = \"\
    aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n        val evenIndices_vowels\
    \ = evenIndices.filter(_ % 2 == 0).map(vowels.indexOf(_))\n        evenIndices_vowels.sum",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = s grouped\
    \ 2 map (_._1)\n        val evenIndices_vowels = evenIndices filter vowels.contains\
    \ (_)\n        evenIndices_vowels size filter vowels.contains (_) map (_ + 1)\
    \ sum", "        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices =\
    \ 0 until s.length\n        evenIndices.foreach(i => if (s(i).isUpper) vowels.count(_\
    \ == s(i)))", "        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s => vowels.indexOf(s.charAt(0))\
    \ + 1)", "        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices =\
    \ mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n           \
    \ if (vowels(s(i)))\n                if (s(i) % 2 == 0)\n                    evenIndices\
    \ += i\n        evenIndices.sum", "        var count = 0L\n        for (i <- 0\
    \ until s.length)\n            if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' ||\
    \ s(i) == 'O' || s(i) == 'U')\n                count += 1\n        count", " \
    \       var count = 0\n        var index = 0\n        while (index < s.length())\
    \ {\n            if (s(index).isUpper) {\n                if (index % 2 == 0)\
    \ {\n                    count += 1\n                }\n            }\n      \
    \      index += 1\n        }\n        count", "        var count = 0L\n      \
    \  for (i <- 0 until s.length)\n            if (s(i) == 'A' || s(i) == 'a') count\
    \ += 1\n            if (s(i) == 'B' || s(i) == 'b') count += 1\n            if\
    \ (s(i) == 'C' || s(i) == 'c') count += 1\n            if (s(i) == 'D' || s(i)\
    \ == 'd') count += 1\n            if (s(i) == 'E' || s(i) == 'e') count += 1\n\
    \            if (s(i) == 'F' || s(i) == 'f') count += 1\n            if (s(i)\
    \ == 'G' || s(i) == 'g') count += 1\n            if (s(i) == 'H' || s(i) == 'h')\
    \ count += 1\n            if (s(i) == 'I' || s(i) == 'i') count += 1\n       \
    \     if (s(i) == 'J' || s(i) == 'j') count += 1\n            if (s(i) == 'K'\
    \ || s(i) == 'k') count += 1\n            if (s(i) == 'L' || s(i) == 'l') count\
    \ += 1\n            if (s(i) == 'M' || s(i) == 'm') count += 1\n            if\
    \ (s(i) == 'N' || s(i) == 'n') count += 1\n            if (s(i) == 'O' || s(i)\
    \ == 'o') count += 1\n            if (s(i) == 'P' || s(i) == 'p') count += 1\n\
    \            if (s(i) == 'Q' || s(i) == 'q') count += 1\n            if (s(i)\
    \ == 'R' || s(i) == 'r') count += 1\n            if (s(i) == 'S' || s(i) == 's')\
    \ count += 1\n            if (s(i) == 'T' || s(i) == 't') count += 1\n       \
    \     if (s(i) == 'U' || s(i) == 'u') count += 1\n            if (s(i) == 'V'\
    \ || s(i) == 'v') count += 1\n            if (s(i) == 'W' || s(i) == 'w') count\
    \ += 1\n            if (s(i) == 'X' || s(i) == 'x') count += 1\n            if\
    \ (s(i) == 'Y' || s(i) == 'y') count += 1\n            if (s(i) == 'Z' || s(i)\
    \ == 'z') count += 1\n        return count", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        val evenIndices = 0 until s.length\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n", "  \
    \      val vowels = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.filter(_ % 2 == 0).map(s => vowels.indexOf(s.charAt(0)) +\
    \ 1).sum", "        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(_ / 2).foreach(i\
    \ => vowels.count(s.charAt(i).toUpperCase == 1))", "        val vowels = \"aeiouAEIOU\"\
    .toSet\n        val evenIndices = 0 until s.length\n        val evenIndices_count\
    \ = evenIndices.count(_ % 2 == 0)\n        val evenIndices_count_upper = evenIndices_count.filter(vowels.contains)\n\
    \        evenIndices_count_upper.sum", "        val vowels = \"AEIOUaeiou\".toSet\n\
    \        var count = 0L\n        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n\
    \                if (s(i) % 2 == 0)\n                    count += 1\n        count",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = s grouped\
    \ 2 map (_._2) filter (_ % 2 == 0)\n        val evenIndices_count = evenIndices.count(_\
    \ == vowels)\n        evenIndices_count * vowels.size", "        var count = 0\n\
    \        for (i <- 0 until s.length)\n            if (s(i) == 'A' || s(i) == 'a')\
    \ count += 1\n            if (s(i) == 'E' || s(i) == 'e') count += 1\n       \
    \     if (s(i) == 'I' || s(i) == 'i') count += 1\n            if (s(i) == 'O'\
    \ || s(i) == 'o') count += 1\n            if (s(i) == 'U' || s(i) == 'u') count\
    \ += 1\n        if (count % 2 == 0) 1 else 0", "        val vowels = \"aeiouAEIOU\"\
    \n        var count = 0\n        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    count += 1\n   \
    \     count", "        val vowels = \"AEIOUaeiou\"\n        val evenIndices =\
    \ mutable.Set[Int]()\n        val upperIndices = mutable.Set[Int]()\n        for\
    \ (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n   \
    \             if (i % 2 == 0)\n                    evenIndices += i\n        \
    \        else\n                    upperIndices += i\n        evenIndices.toList.map(evenIndices.contains(_)).count(_\
    \ == true)", "        val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n  \
    \      val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (i % 2 == 0)\n                evenIndices += i\n        evenIndices.toList.count(vowels.contains)",
  "        var count = 0\n        var even = 0\n        var odd = 0\n        for (i\
    \ <- 0 until s.length)\n            if (s(i).isUpper)\n                count +=\
    \ 1\n            if (s(i).isUpper)\n                even += 1\n            if\
    \ (s(i).isUpper)\n                odd += 1\n        if (even % 2 == 0)\n     \
    \       count\n        else\n            0", "        var count = 0\n        for\
    \ (i <- 0 until s.length)\n            if (s(i) == 'A' || s(i) == 'E' || s(i)\
    \ == 'I' || s(i) == 'O' || s(i) == 'U')\n                count += 1\n        \
    \    else\n                if (s(i) == 'B')\n                    count -= 1\n\
    \                else\n                    count += 0\n        count", "     \
    \   var count = 0L\n        var even = 0\n        var upper = 0\n        for(i\
    \ <- 0 until s.length){\n            if(s.charAt(i) == 'A' || s.charAt(i) == 'E'\
    \ || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U'){\n      \
    \          count += 1\n            }\n            if(s.charAt(i) == 'a' || s.charAt(i)\
    \ == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u'){\n\
    \                even += 1\n            }\n            if(s.charAt(i) == 'B' ||\
    \ s.charAt(i) == 'D' || s.charAt(i) == 'F' || s.charAt(i) == 'G'){\n         \
    \       upper += 1\n            }\n        }\n        if(even % 2 == 0){\n   \
    \         count += upper\n        }\n        return count", "        val vowels\
    \ = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n      \
    \  evenIndices.filter(_ % 2 == 0).map(s.length(_) - 1).foldLeft(0)((acc, i) =>\
    \ acc + (vowels(i).toString.toUpperCase == vowels(i).toString.toUpperCase))",
  "        val vowels = \"AEIOUaeiou\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    evenIndices += i\n     \
    \   evenIndices.toList.filter(x => x % 2 == 0).length", "        val vowels =\
    \ \"aeiouAEIOU\".toList\n        val evenIndices = s filter (_ % 2 == 0) map (_.toInt)\n\
    \        evenIndices map { i => vowels.count(vowels.indexOf(_, i)) }", "     \
    \   var count = 0L\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U')\n      \
    \          count += 1\n            else\n                break\n        count",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.map(i => if (s(i).isUpper) 1 else 0).sum", "        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' || s(i)\
    \ == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U')\n                count\
    \ += 1\n        count", "        val vowels = \"AEIOUaeiou\"\n        val evenIndices\
    \ = mutable.Set[Int]()\n        val upperIndices = mutable.Set[Int]()\n      \
    \  for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    evenIndices += i\n     \
    \           else\n                    upperIndices += i\n        evenIndices.toSet.size\
    \ + (upperIndices.toSet - evenIndices).toSet.size", "        var count = 0L\n\
    \        for (i <- 0 until s.length)\n            if (s(i) == 'A' || s(i) == 'a'\
    \ || s(i) == 'E' || s(i) == 'e' || s(i) == 'I' || s(i) == 'i' || s(i) == 'O' ||\
    \ s(i) == 'o' || s(i) == 'U' || s(i) == 'u')\n                count += 1\n   \
    \     count", "        val vowels = \"AEIOUaeiou\".toCharArray\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.toList.flatMap { i =>\n            if\
    \ (i % 2 == 0) {\n                vowels.find(_ == s.charAt(i))\n            }\
    \ else {\n                None\n            }\n        }.count(_ == true)", " \
    \       val vowels = \"AEIOUaeiou\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    evenIndices += i\n     \
    \   evenIndices.toList.sum", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i)) >= 0)\n                if (i % 2\
    \ == 0)\n                    evenIndices += i\n        evenIndices.toList.map(_.toLong).sum",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until s.length)\n            if(s(i).isUpper)\n          \
    \      if(vowels.indexOf(s(i)) >= 0)\n                    evenIndices += i\n \
    \       evenIndices.toList.sum", "        val vowels = \"aeiouAEIOU\".toList\n\
    \        val evenIndices = 0 until s.length\n        val upperCaseIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val upperCaseIndices_withVowels = upperCaseIndices.filter(_\
    \ => vowels.contains(s(_)))\n        upperCaseIndices_withVowels.length", "  \
    \      var count = 0\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' || s(i) == 'a' || s(i) == 'E' || s(i) == 'e' || s(i) == 'I' || s(i) ==\
    \ 'i' || s(i) == 'O' || s(i) == 'o' || s(i) == 'U' || s(i) == 'u')\n         \
    \       count += 1\n            else\n                break\n        count", " \
    \       var count = 0\n        var index = 0\n        while (index < s.length)\n\
    \            if (s(index) match {\n                case 'A' | 'a' => count +=\
    \ 1\n                case 'B' | 'b' => count += 1\n                case 'C' |\
    \ 'c' => count += 1\n                case 'D' | 'd' => count += 1\n          \
    \      case 'E' | 'e' => count += 1\n                case 'F' | 'f' => count +=\
    \ 1\n                case 'G' | 'g' => count += 1\n                case 'H' |\
    \ 'h' => count += 1\n                case 'I' | 'i' => count += 1\n          \
    \      case 'J' | 'j' => count += 1\n                case 'K' | 'k' => count +=\
    \ 1\n                case 'L' | 'l' => count += 1\n                case 'M' |\
    \ 'm' => count += 1\n                case 'N' | 'n' => count += 1\n          \
    \      case 'O' | 'o' => count += 1\n                case 'P' | 'p' => count +=\
    \ 1\n                case 'Q' | 'q' => count += 1\n                case 'R' |\
    \ 'r' => count += 1\n                case 'S' | 's' => count += 1\n          \
    \      case 'T' | 't' => count += 1\n                case 'U' | 'u' => count +=\
    \ 1\n                case 'V' | 'v' => count += 1\n                case 'W' |\
    \ 'w' => count += 1\n                case 'X' | 'x' => count += 1\n          \
    \      case 'Y' | 'y' => count += 1\n                case 'Z' | 'z' => count +=\
    \ 1\n                case _ => count += 1\n            }) index += 1\n       \
    \ count", "        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map { i =>\n    \
    \        vowels.find(vowels.contains(s(i)))\n        }.count(_ != None)", "  \
    \      val vowels = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices\
    \ = evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = List(0,2)\n        val evenIndices_map = evenIndices.map(i => vowels(i) ->\
    \ i)\n        val evenIndices_map_reversed = evenIndices_map.reverse\n       \
    \ val evenIndices_map_reversed_map = evenIndices_map_reversed.toMap\n        val\
    \ evenIndices_map_reversed_map_reversed = evenIndices_map_reversed_map.reverse\n\
    \        val evenIndices_map_reversed_map_reversed_map = evenIndices_map_reversed_map_reversed.toMap\n\
    \        val evenIndices_map_reversed_map_reversed_map_reversed = evenIndices_map_reversed_map_reversed_map.reverse\n\
    \        val evenIndices_map_reversed_map_reversed_map_reversed_map = evenIndices_map_reversed_map_reversed_map_reversed.toMap\n\
    \        val evenIndices_map_reversed_map_reversed_map_reversed_map_reversed =\
    \ evenIndices_map_reversed_map_reversed_map_reversed_map.reverse\n        val\
    \ evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map = evenIndices_map_reversed_map_reversed_map_reversed_map_reversed.toMap\n\
    \        val evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed\
    \ = evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map.reverse\n\
    \        val evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map\
    \ = evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed.toMap\n\
    \        val evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed\
    \ = evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map.reverse\n\
    \        val evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map\
    \ = evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed.toMap\n\
    \        val evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed\
    \ = evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map.reverse\n\
    \        val evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed\
    \ = evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_",
  "        val vowels = \"AEIOUaeiou\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    evenIndices += i\n     \
    \   evenIndices.sum", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"\
    u\")\n        var count = 0\n        for (i <- 0 until s.length)\n           \
    \ if (vowels(s(i)) && s(i) % 2 == 0)\n                count += 1\n        count",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n\
    \        val upperCounts = mutable.Map[Int, Long]()\n        for (i <- evenIndices)\
    \ {\n            val c = s.charAt(i)\n            if (vowels.contains(c)) {\n\
    \                val count = upperCounts.getOrElse(i, 0) + 1\n               \
    \ upperCounts = upperCounts + (i -> count)\n            }\n        }\n       \
    \ upperCounts.values.sum", "        val vowels = \"aeiouAEIOU\".toList\n     \
    \   val evenIndices = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).count(vowels.contains)",
  "        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.foreach(i => if (s(i).isUpper) vowels.count(s(i)) else 0)",
  "        var count = 0\n        var evenIndex = 0\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) == 'A' || s.charAt(i) == 'a') evenIndex += 1\n  \
    \          if (s.charAt(i) == 'B' || s.charAt(i) == 'b') evenIndex += 1\n    \
    \        if (s.charAt(i) == 'C' || s.charAt(i) == 'c') evenIndex += 1\n      \
    \      if (s.charAt(i) == 'D' || s.charAt(i) == 'd') evenIndex += 1\n        \
    \    if (s.charAt(i) == 'E' || s.charAt(i) == 'e') evenIndex += 1\n          \
    \  if (s.charAt(i) == 'F' || s.charAt(i) == 'f') evenIndex += 1\n            if\
    \ (s.charAt(i) == 'G' || s.charAt(i) == 'g') evenIndex += 1\n            if (s.charAt(i)\
    \ == 'H' || s.charAt(i) == 'h') evenIndex += 1\n            if (s.charAt(i) ==\
    \ 'I' || s.charAt(i) == 'i') evenIndex += 1\n            if (s.charAt(i) == 'J'\
    \ || s.charAt(i) == 'j') evenIndex += 1\n            if (s.charAt(i) == 'K' ||\
    \ s.charAt(i) == 'k') evenIndex += 1\n            if (s.charAt(i) == 'L' || s.charAt(i)\
    \ == 'l') evenIndex += 1\n            if (s.charAt(i) == 'M' || s.charAt(i) ==\
    \ 'm') evenIndex += 1\n            if (s.charAt(i) == 'N' || s.charAt(i) == 'n')\
    \ evenIndex += 1\n            if (s.charAt(i) == 'O' || s.charAt(i) == 'o') evenIndex\
    \ += 1\n            if (s.charAt(i) == 'P' || s.charAt(i) == 'p') evenIndex +=\
    \ 1\n            if (s.charAt(i) == 'Q' || s.charAt(i) == 'q') evenIndex += 1\n\
    \            if (s.charAt(i) == 'R' || s.charAt(i) == 'r') evenIndex += 1\n  \
    \          if (s.charAt(i) == 'S' || s.charAt(i) == 's') evenIndex += 1\n    \
    \        if (s.charAt(i) == 'T' || s.charAt(i) == 't') evenIndex += 1\n      \
    \      if (s.charAt(i) == 'U' || s.charAt(i) == 'u') evenIndex += 1\n        \
    \    if (s.charAt(i) == 'V' || s.charAt(i) == 'v') evenIndex += 1\n          \
    \  if (s.charAt(i) == 'W' || s.charAt(i) == 'w') evenIndex += 1\n            if\
    \ (s.charAt(i) == 'X' || s.charAt(i) == 'x') evenIndex += 1\n            if (s.charAt(i)\
    \ == 'Y' || s.charAt(i) == 'y') evenIndex += 1\n            if (s.charAt(i) ==\
    \ 'Z' || s.charAt(i) == 'z') evenIndex += 1\n            if (evenIndex % 2 ==\
    \ 0)\n                count += 1\n            evenIndex = 0\n        return count",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.filter(x => x % 2 == 0).length", "        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  val evenIndices_vowels = evenIndices.filter(_ % 2 == 0).map(vowels.indexOf(_))\n\
    \        evenIndices_vowels.sum", "        val vowels = \"AEIOUaeiou\".toList\n\
    \        val evenIndices = 0 until s.length\n        evenIndices.filter(i => s(i).isUpper).count(i\
    \ => vowels.contains(s(i)))", "        val vowels = \"AEIOUaeiou\"\n        val\
    \ vowelsSet = vowels.toSet\n        val evenIndices = mutable.Set[Int]()\n   \
    \     for (i <- 0 until s.length)\n            if (vowelsSet(s(i))) evenIndices\
    \ += i\n        evenIndices.toList.count(_ % 2 == 0)", "        var count = 0L\n\
    \        var evenIndex = -1\n        var oddIndex = -1\n        var evenChar =\
    \ ' '\n        var oddChar = ' '\n        for(i <- 0 until s.length){\n      \
    \      evenIndex = i % 2\n            oddIndex = i / 2\n            evenChar =\
    \ s.charAt(evenIndex)\n            oddChar = s.charAt(oddIndex)\n            if(evenChar\
    \ == 'A' && oddChar == 'a'){\n                count += 1\n            }\n    \
    \    }\n        count", "        var count = 0L\n        for (i <- 0 until s.length)\n\
    \            if (s(i) == 'A' || s(i) == 'a' || s(i) == 'E' || s(i) == 'e' || s(i)\
    \ == 'I' || s(i) == 'i' || s(i) == 'O' || s(i) == 'o' || s(i) == 'U' || s(i) ==\
    \ 'u')\n                count += 1\n        count", "        var count = 0L\n\
    \        var evenIndices = mutable.ArrayBuffer.empty[Int]\n        for (i <- 0\
    \ until s.length)\n            if (s(i) == 'A' || s(i) == 'a') evenIndices +=\
    \ i\n        for (i <- 0 until evenIndices.length)\n            if (s(evenIndices(i))\
    \ == 'A' || s(evenIndices(i)) == 'a') count += 1\n        count", "        var\
    \ count = 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A'\
    \ || s(i) == 'a' || s(i) == 'E' || s(i) == 'e' || s(i) == 'I' || s(i) == 'i' ||\
    \ s(i) == 'O' || s(i) == 'o' || s(i) == 'U' || s(i) == 'u')\n                count\
    \ += 1\n        count", "        val vowels = \"AEIOUaeiou\".toList\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndice", "        val\
    \ vowels = \"aeiouAEIOU\".toSet\n        var count = 0\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(s(i)))\n                count += 1\n     \
    \       else\n                count += 0\n        count / 2", "        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1)\
    \ == 'a' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'a' && s(i+1) == 'A' && s(i+2) == 'a')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'a' && s(i+2) == 'a')\n           \
    \     count += 1\n            else if (s(i) == 'a' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'a' && s(i+1)\
    \ == 'a' && s(i+2) == 'a')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'a' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'a' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'a' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'a')\n                count += 1\n    \
    \        else if (s(i) == 'a' && s(i+1) == 'A' && s(i+2) == 'a')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'a' && s(i+2)\
    \ == 'a')\n                count += 1\n            else if (s(i) == 'a' && s(i+1)\
    \ == 'A' && s(i+2) == 'a')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'a' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'a' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'a' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'a')\n                count += 1\n    \
    \        else if (s(i) == 'a' && s(i+1) == 'A' && s(i+2) == 'a')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'a' && s(i+2)\
    \ == 'a')\n                count += 1\n            else if (s(i) == 'a' && s(i+1)\
    \ == 'A' && s(i+2) == 'a')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'a", "        var count = 0L\n        var evenIndex\
    \ = 0\n        for (i <- 0 until s.length)\n            if (s(i).isUpper)\n  \
    \              if (evenIndex % 2 == 0)\n                    count += 1\n     \
    \           evenIndex += 1\n        count ", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        val evenIndices = s grouped 2 map (_._1)\n        val upperIndices\
    \ = evenIndices filter (_ % 2 == 0) map (_ / 2)\n        upperIndices map vowels.indexOf",
  "        var count = 0\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' || s(i) == 'a') count += 1\n            if (s(i) == 'B' || s(i) == 'b')\
    \ count += 1\n            if (s(i) == 'C' || s(i) == 'c') count += 1\n       \
    \     if (s(i) == 'D' || s(i) == 'd') count += 1\n            if (s(i) == 'E'\
    \ || s(i) == 'e') count += 1\n            if (s(i) == 'F' || s(i) == 'f') count\
    \ += 1\n            if (s(i) == 'G' || s(i) == 'g') count += 1\n            if\
    \ (s(i) == 'H' || s(i) == 'h') count += 1\n            if (s(i) == 'I' || s(i)\
    \ == 'i') count += 1\n            if (s(i) == 'J' || s(i) == 'j') count += 1\n\
    \            if (s(i) == 'K' || s(i) == 'k') count += 1\n            if (s(i)\
    \ == 'L' || s(i) == 'l') count += 1\n            if (s(i) == 'M' || s(i) == 'm')\
    \ count += 1\n            if (s(i) == 'N' || s(i) == 'n') count += 1\n       \
    \     if (s(i) == 'O' || s(i) == 'o') count += 1\n            if (s(i) == 'P'\
    \ || s(i) == 'p') count += 1\n            if (s(i) == 'Q' || s(i) == 'q') count\
    \ += 1\n            if (s(i) == 'R' || s(i) == 'r') count += 1\n            if\
    \ (s(i) == 'S' || s(i) == 's') count += 1\n            if (s(i) == 'T' || s(i)\
    \ == 't') count += 1\n            if (s(i) == 'U' || s(i) == 'u') count += 1\n\
    \            if (s(i) == 'V' || s(i) == 'v') count += 1\n            if (s(i)\
    \ == 'W' || s(i) == 'w') count += 1\n            if (s(i) == 'X' || s(i) == 'x')\
    \ count += 1\n            if (s(i) == 'Y' || s(i) == 'y') count += 1\n       \
    \     if (s(i) == 'Z' || s(i) == 'z') count += 1\n        if (count % 2 == 0)\n\
    \            count\n        else\n            0", "        val vowels = \"AEIOUaeiou\"\
    .toSet\n        val evenIndices = mutable.ListBuffer.empty[Int]\n        for (i\
    \ <- 0 until s.length)\n            if (vowels(s(i)))\n                if (s(i)\
    \ % 2 == 0)\n                    evenIndices += i\n        evenIndices.toList.size",
  "        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.filter(_ % 2 == 0).map(s.length).count(_ == s.charAt(_))",
  "        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i).isUpper)\n   \
    \             if (i % 2 == 0)\n                    evenIndices += i\n        evenIndices.sum",
  "        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.toList.flatMap {\n            i => if (i % 2 == 0) s.charAt(i).toUpperCase\
    \ in vowels else 0\n        }.sum", "        val vowels = \"AEIOUaeiou\".toList\n\
    \        val evenIndices = 0 until s.length\n        evenIndices.filter(_ % 2\
    \ == 0).map(s take _).map(s take _).filter(vowels.contains).size", "        var\
    \ count = 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A'\
    \ || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U')\n             \
    \   count += 1\n        count"]
stop_tokens:
- "\n    }\n"
