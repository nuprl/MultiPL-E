name: HumanEval_82_prime_length
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes a string and returns True if the string\n  \
  \  // length is a prime number or False otherwise\n    // Examples\n    // prime_length('Hello')\
  \ == True\n    // prime_length('abcdcba') == True\n    // prime_length('kittens')\
  \ == True\n    // prime_length('orange') == False\n    def primeLength(string :\
  \ String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(primeLength((\"Hello\"\
  )) == (true));\n    assert(primeLength((\"abcdcba\")) == (true));\n    assert(primeLength((\"\
  kittens\")) == (true));\n    assert(primeLength((\"orange\")) == (false));\n   \
  \ assert(primeLength((\"wow\")) == (true));\n    assert(primeLength((\"world\"))\
  \ == (true));\n    assert(primeLength((\"MadaM\")) == (true));\n    assert(primeLength((\"\
  Wow\")) == (true));\n    assert(primeLength((\"\")) == (false));\n    assert(primeLength((\"\
  HI\")) == (true));\n    assert(primeLength((\"go\")) == (true));\n    assert(primeLength((\"\
  gogo\")) == (false));\n    assert(primeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n\
  \    assert(primeLength((\"Madam\")) == (true));\n    assert(primeLength((\"M\"\
  )) == (false));\n    assert(primeLength((\"0\")) == (false));\n    }\n\n}\n"
completions: ["        val primes = mutable.Set[Int]()\n        val length = string.length\n\
    \        var prime = True\n        for (i <- 2 to length) {\n            if (string.charAt(i)\
    \ == string.charAt(i-1)) {\n                prime = False\n                break\n\
    \            }\n            if (primes.contains(i)) {\n                prime =\
    \ False\n                break\n            }\n            primes.add(i)\n   \
    \     }\n        prime", "        val primes = mutable.Set[Int]()\n        for(i\
    \ <- 2 to string.length-1){\n            if(!primes.contains(string.length-i)){\n\
    \                primes += string.length-i\n            }\n        }\n       \
    \ primes.contains(string.length-1)", "        val primes = mutable.Set[Int]()\n\
    \        for (i <- 1 to string.length) primes += i\n        primes.forall(x =>\
    \ string.contains(x.toString))", "        val primes = mutable.ArrayBuffer(2)\n\
    \        val length = string.length\n        var index = 0\n        while (index\
    \ < length) {\n            val num = string.charAt(index)\n            if (primes.contains(num))\
    \ {\n                primes = primes.filter(_ != num)\n            } else {\n\
    \                primes = primes + num\n            }\n            index += 1\n\
    \        }\n        primes.size == length", "        val primes = mutable.Set[Int]()\n\
    \        for(i <- 1 to string.length){\n            val prime = string.charAt(i).toInt\n\
    \            if(primes.contains(prime)){\n                return false\n     \
    \       }\n            primes += prime\n        }\n        return true", "   \
    \     val primes = mutable.Set[Int]()\n        for (i <- 1 to string.length) primes\
    \ += i\n        primes.size == string.length", "        val primes = mutable.Set[Int]()\n\
    \        for(i <- 2 to string.length){\n            if(string.charAt(i) == string.charAt(i-1)){\n\
    \                primes.add(i)\n            }\n        }\n        primes.size\
    \ == string.length", "        val primes = mutable.Set[Int]()\n        for(i <-\
    \ 1 to string.length){\n            val str = string.substring(i,i+1)\n      \
    \      if(primes.contains(str)){\n                primes.remove(str)\n       \
    \     }else{\n                primes.add(str)\n            }\n        }\n    \
    \    primes.isEmpty", "        val primes = mutable.Set[Int]()\n        for(i\
    \ <- 1 to string.length){\n            val str = string.substring(0, i)\n    \
    \        val prime = str.filter(_ <= 1).filter(_ % 2 == 0).length\n          \
    \  if(prime > 0){\n                primes += prime\n            }\n        }\n\
    \        primes.size == string.length", "        var isPrime = true\n        var\
    \ prime = 0\n        var length = 0\n        for(i <- 0 until string.length){\n\
    \            length += 1\n            prime += 1\n            for(j <- 0 until\
    \ prime){\n                if(string.charAt(i) == string.charAt(j)){\n       \
    \             isPrime = false\n                    break\n                }\n\
    \            }\n        }\n        if(isPrime){\n            length\n        }else{\n\
    \            0\n        }", "        val primes = mutable.Set[Int]()\n       \
    \ val length = string.length\n        for (i<-0 until length) {\n            if\
    \ (primes.contains(length)) {\n                return false\n            }\n \
    \           val prime = string.charAt(i)\n            if (prime == 0) {\n    \
    \            return false\n            }\n            if (prime > 1) {\n     \
    \           primes += prime\n            }\n        }\n        return true", " \
    \       val primes = mutable.Set[Int]()\n        val length = string.length\n\
    \        for (i <- 2 to length) {\n            if (string.charAt(i) == string.charAt(length\
    \ - i - 1)) {\n                primes += i\n            }\n        }\n       \
    \ primes.size == length", "        val primes = mutable.Set[Int]()\n        for\
    \ (i <- 1 to string.length)\n            if (string.charAt(i) == string.charAt(i).toInt)\n\
    \                primes += string.charAt(i).toInt\n        primes.size == string.length",
  "        val primes = mutable.Set[Int]()\n        for (i <- 1 to string.length)\n\
    \            if (string.charAt(i) == string.charAt(i).toInt)\n               \
    \ primes += string.charAt(i).toInt\n        primes.size == string.length", " \
    \       val primes = mutable.Set[Int]()\n        for(i <- 2 to string.length-1){\n\
    \            val isPrime = string.charAt(i) == string.charAt(i-1)\n          \
    \  if(isPrime){\n                primes += i\n            }\n        }\n     \
    \   primes.size == string.length", "        val primes = mutable.Set[Int]()\n\
    \        for (i <- 1 to string.length)\n            if (string.charAt(i) != 'a'\
    \ && string.charAt(i) != 'e' && string.charAt(i) != 'i' && string.charAt(i) !=\
    \ 'o' && string.charAt(i) != 'u')\n                primes += string.charAt(i)\n\
    \        primes.size == string.length", "        val primes = mutable.Set[Int]()\n\
    \        for(i <- 2 to string.length-1){\n            if(string.charAt(i) == string.charAt(i+1)){\n\
    \                primes.add(i)\n            }\n        }\n        primes.size\
    \ == string.length", "        val primes = mutable.Set[Int]()\n        val length\
    \ = string.length\n        for(i <- 0 until length) {\n            val remainder\
    \ = math.mod(i, length)\n            if(remainder == 0) {\n                primes\
    \ += i\n            }\n        }\n        primes.size == length", "        val\
    \ primes = mutable.Set[Int]()\n        val length = string.length\n        for(i\
    \ <- 1 to length) {\n            val isPrime = string.charAt(i).toInt % 2 == 0\n\
    \            if(isPrime) {\n                primes += string.charAt(i)\n     \
    \       }\n        }\n        primes.size == length", "        val primes = mutable.Set[Int]()\n\
    \        for (i <- 1 to string.length)\n            if (string.charAt(i) == string.charAt(i).toInt)\n\
    \                primes += string.charAt(i).toInt\n        primes.size == string.length"]
stop_tokens:
- "\n    }\n"
