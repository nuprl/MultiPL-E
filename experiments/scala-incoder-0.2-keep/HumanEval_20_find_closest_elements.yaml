name: HumanEval_20_find_closest_elements
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n    // other and return them in order (smaller\
  \ number, larger number).\n    // >>> find_closest_elements([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2])\n    // (2.0, 2.2)\n    // >>> find_closest_elements([1.0, 2.0, 3.0,\
  \ 4.0, 5.0, 2.0])\n    // (2.0, 2.0)\n    def findClosestElements(numbers : List[Float])\
  \ : Tuple2[Float, Float] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
  \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
  \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
  \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
  \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
completions: ["        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestToLeft = sortedNumbers.head\n        val closestToRight\
    \ = sortedNumbers.last\n        (closestToLeft, closestToRight)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallest = sortedNumbers.head\n\
    \        val largest = sortedNumbers.last\n        (smallest, largest)", "   \
    \     val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).map(_._2)\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortBy(math.abs)\n\
    \        val firstClosestIndex = sortedNumbers.indexWhere(x => x < sortedNumbers(0))\n\
    \        val secondClosestIndex = sortedNumbers.indexWhere(x => x > sortedNumbers(0))\n\
    \        (sortedNumbers(firstClosestIndex), sortedNumbers(secondClosestIndex))",
  "        val mins = numbers.minBy(_)\n        val maxs = numbers.maxBy(_)\n    \
    \    (mins, maxs)", "        val sortedNumbers = numbers.sortWith(_ < _)\n   \
    \     val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1 < _._1)\n\
    \        closestPair._1.toFloat -> closestPair._2.toFloat", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val firstClosest = sortedNumbers.head\n \
    \       val secondClosest = sortedNumbers.last\n        (firstClosest, secondClosest)",
  "        val minDistance = math.abs(numbers(0) - numbers(1))\n        val minIndex\
    \ = -1\n        numbers.zipWithIndex.foreach { case (number, index) =>\n     \
    \       if (math.abs(number - numbers(index)) < minDistance) {\n             \
    \   minDistance = math.abs(number - numbers(index))\n                minIndex\
    \ = index\n            }\n        }\n        (numbers(minIndex), numbers(minIndex\
    \ + 1))", "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo\
    \ = sortedNumbers.zipWithIndex.filter(_._2 < sortedNumbers.size - 1).map(_._1)\n\
    \        val closestTo2 = sortedNumbers.zipWithIndex.filter(_._2 < sortedNumbers.size\
    \ - 2).map(_._1)\n        closestTo.toList match {\n            case Nil => (sortedNumbers.last,\
    \ sortedNumbers.last)\n            case x :: xs => (x._1, x._2)\n        }", " \
    \       val mins = numbers.minBy(_.abs)\n        val maxs = numbers.maxBy(_.abs)\n\
    \        (mins, maxs)", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val closestPairs = sortedNumbers.sliding(2).map {\n            n => (n,\
    \ sortedNumbers.find(_ == n))\n        }.toList\n        closestPairs.sortBy(_._1).take(2)",
  "        val min1 = numbers.min\n        val min2 = numbers.min\n        val min3\
    \ = numbers.min\n        val min4 = numbers.min\n        val min5 = numbers.min\n\
    \        val min6 = numbers.min\n        val min7 = numbers.min\n        val min8\
    \ = numbers.min\n        val min9 = numbers.min\n        val min10 = numbers.min\n\
    \        val min11 = numbers.min\n        val min12 = numbers.min\n        val\
    \ min13 = numbers.min\n        val min14 = numbers.min\n        val min15 = numbers.min\n\
    \        val min16 = numbers.min\n        val min17 = numbers.min\n        val\
    \ min18 = numbers.min\n        val min19 = numbers.min\n        val min20 = numbers.min\n\
    \        val min21 = numbers.min\n        val min22 = numbers.min\n        val\
    \ min23 = numbers.min\n        val min24 = numbers.min\n        val min25 = numbers.min\n\
    \        val min26 = numbers.min\n        val min27 = numbers.min\n        val\
    \ min28 = numbers.min\n        val min29 = numbers.min\n        val min30 = numbers.min\n\
    \        val min31 = numbers.min\n        val min32 = numbers.min\n        val\
    \ min33 = numbers.min\n        val min34 = numbers.min\n        val min35 = numbers.min\n\
    \        val min36 = numbers.min\n        val min37 = numbers.min\n        val\
    \ min38 = numbers.min\n        val min39 = numbers.min\n        val min40 = numbers.min\n\
    \        val min41 = numbers.min\n        val min42 = numbers.min\n        val\
    \ min43 = numbers.min\n        val min44 = numbers.min\n        val min45 = numbers.min\n\
    \        val min46 = numbers.min\n        val min47 = numbers.min\n        val\
    \ min48 = numbers.min\n        val min49 = numbers.min\n        val min50 = numbers.min\n\
    \        val min51 = numbers.min\n        val min52 = numbers.min\n        val\
    \ min53 = numbers.min\n        val min54 = numbers.min\n        val min55 = numbers.min\n\
    \        val min56 = numbers.min\n        val min57 = numbers.min\n        val\
    \ min58 = numbers.min\n        val min59 = numbers.min\n        val min60 = numbers.min\n\
    \        val min61 = numbers.min\n        val min62 = numbers.min\n        val\
    \ min63 = numbers.min\n        val min64 = numbers.min\n        val min65 = numbers.min\n\
    \        val min66", "        val smallest = math.min(numbers)\n        val largest\
    \ = math.max(numbers)\n        (smallest, largest)", "        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        (smallest, largest)", "    \
    \    val smallest = math.min(numbers)\n        val largest = math.max(numbers)\n\
    \        (smallest, largest)", "        val smallest = numbers.min\n        val\
    \ largest = numbers.max\n        val smallestIndex = numbers.indexOf(smallest)\n\
    \        val largestIndex = numbers.indexOf(largest)\n        (smallest, largest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallest = sortedNumbers.head\n\
    \        val largest = sortedNumbers.last\n        (smallest, largest)", "   \
    \     val smallest = math.min(numbers)\n        val largest = math.max(numbers)\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.zipWithIndex.filter(_._2 < sortedNumbers.length\
    \ / 2)\n        closestTo.sortBy(_._1).reverse", "        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        (smallest, largest)", "    \
    \    val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPairs = sortedNumbers.zip(sortedNumbers.tail).filter(_._1\
    \ < _._1).map(_._2)\n        closestPairs.headOption.toList match {\n        \
    \    case Nil => closestPairs.lastOption.toList\n            case head :: tail\
    \ => head :: findClosestElements(tail)\n        }", "        val smallest = numbers.min\n\
    \        val largest = numbers.max\n        val smallestIndex = numbers.indexOf(smallest)\n\
    \        val largestIndex = numbers.indexOf(largest)\n        (smallest, largest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).find(_._1 < _._1)\n        (closestPair._1,\
    \ closestPair._2)", "        val sortedNumbers = numbers.sortWith(_ < _)\n   \
    \     val smallest = sortedNumbers.head\n        val largest = sortedNumbers.last\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallest = sortedNumbers.head\n        val largest = sortedNumbers.last\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).getOrElse(sortedNumbers.last)\n\
    \        val closestPairIndex = sortedNumbers.indexOf(closestPair._1)\n      \
    \  (closestPair._1, closestPair._2)", "        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val index = numbers.indexWhere(x\
    \ => x == smallest || x == largest)\n        (numbers(index), numbers(index+1))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPairs =\
    \ sortedNumbers.sliding(2).map { x =>\n            val y = x.last\n          \
    \  val z = x.init\n            (y, z)\n        }\n        closestPairs.minBy(_._1)._1\
    \ -> closestPairs.maxBy(_._1)._1", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n\
    \        val largestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n\
    \        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))", "     \
    \   val smallest = math.min(numbers)\n        val largest = math.max(numbers)\n\
    \        val smallestIndex = numbers.indexOf(smallest)\n        val largestIndex\
    \ = numbers.indexOf(largest)\n        (smallest, largest)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val first = sortedNumbers.head\n        val second = sortedNumbers.last\n\
    \        (first, second)", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val firstClosestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.min)\
    \ match {\n            case Some(index) => index\n            case None => 0\n\
    \        }\n        val secondClosestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.min)\
    \ match {\n            case Some(index) => index\n            case None => sortedNumbers.length\
    \ - 1\n        }\n        (sortedNumbers(firstClosestIndex), sortedNumbers(secondClosestIndex))",
  "        val mins = numbers.map(math.min)\n        val maxs = numbers.map(math.max)\n\
    \        val minsIndex = mins.zipWithIndex.minBy(_._1)._2\n        val maxsIndex\
    \ = maxs.zipWithIndex.maxBy(_._1)._2\n        (mins(minsIndex), maxs(maxsIndex))",
  "        val smallest = numbers.min\n        val largest = numbers.max\n       \
    \ val smallestIndex = numbers.indexOf(smallest)\n        val largestIndex = numbers.indexOf(largest)\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestIndex = sortedNumbers.indexOf(0)\n        val largestIndex\
    \ = sortedNumbers.lastIndex\n        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest =\
    \ sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n       \
    \ (firstClosest, secondClosest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestDifference = sortedNumbers.head - sortedNumbers.last\n\
    \        val largestDifference = sortedNumbers.last - sortedNumbers.head\n   \
    \     (smallestDifference, largestDifference)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).get\n\
    \        (closestPair._1, closestPair._2)", "        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val smallestIndex = numbers.indexOf(smallest)\n\
    \        val largestIndex = numbers.indexOf(largest)\n        (smallest, largest)",
  "        val minDistance = math.abs(numbers.min() - numbers.max())\n        val\
    \ minIndex = 0\n        val maxIndex = numbers.length - 1\n        numbers.zipWithIndex.foreach\
    \ { case (number, index) =>\n            val distance = math.abs(number - numbers.min())\n\
    \            if (distance < minDistance) {\n                minDistance = distance\n\
    \                minIndex = index\n            } else if (distance > minDistance)\
    \ {\n                minDistance = distance\n                maxIndex = index\n\
    \            }\n        }\n        (numbers.min, numbers.max)", "        val smallest\
    \ = numbers.min\n        val largest = numbers.max\n        val middle = numbers.size\
    \ / 2\n        val smallerThanMiddle = numbers.take(middle).zip(numbers.drop(middle)).map\
    \ {\n            case (smaller, larger) => smaller < middle\n        }\n     \
    \   val largerThanMiddle = numbers.take(middle).zip(numbers.drop(middle)).map\
    \ {\n            case (smaller, larger) => larger > middle\n        }\n      \
    \  val smallerThanSmallest = numbers.take(middle).zip(numbers.drop(middle)).map\
    \ {\n            case (smaller, larger) => smaller < smallest\n        }\n   \
    \     val largerThanSmallest = numbers.take(middle).zip(numbers.drop(middle)).map\
    \ {\n            case (smaller, larger) => larger > smallest\n        }\n    \
    \    val smallerThanLargest = numbers.take(middle).zip(numbers.drop(middle)).map\
    \ {\n            case (smaller, larger) => smaller < largest\n        }\n    \
    \    val largerThanLargest = numbers.take(middle).zip(numbers.drop(middle)).map\
    \ {\n            case (smaller, larger) => larger > largest\n        }\n     \
    \   val smallerThanSmallestAndLarger = numbers.take(middle).zip(numbers.drop(middle)).map\
    \ {\n            case (smaller, larger) => smaller < smallest && larger > middle\n\
    \        }\n        val largerThanSmallestAndLarger = numbers.take(middle).zip(numbers.drop(middle)).map\
    \ {\n            case (smaller, larger) => larger > smallest && smaller < middle\n\
    \        }\n        val smallerThanLargestAndSmaller = numbers.take(middle).zip(numbers.drop(middle)).map\
    \ {\n            case (smaller, larger) => smaller < largest && larger > middle\n\
    \        }\n        val largerThanLargestAndSmaller = numbers.take(middle).zip(numbers.drop(middle)).map\
    \ {\n            case (smaller, larger) => larger > largest && smaller < middle\n\
    \        }\n        val smallerThanSmallestAndLargerAndSmaller = numbers.take(middle).zip(numbers.drop(middle)).map\
    \ {\n            case (smaller, larger) => smaller < smallest && larger > middle\
    \ && smaller < middle\n        }\n        val largerThanSmallestAndLargerAndSmaller\
    \ = numbers.take(middle).zip(numbers.drop(middle)).map {\n            case (smaller,\
    \ larger) => larger > smallest && smaller < middle && larger > middle\n      \
    \  }\n        val smallerThan", "        val smallest = numbers.min\n        val\
    \ largest = numbers.max\n        val smallest_index = numbers.indexOf(smallest)\n\
    \        val largest_index = numbers.indexOf(largest)\n        (smallest, largest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).find(_._1 < _._1)\n        closestPair._1",
  "        val smallest = math.min(numbers)\n        val largest = math.max(numbers)\n\
    \        (smallest, largest)", "        val smallest: Float = numbers.min\n  \
    \      val largest: Float = numbers.max\n        val smallest_index: Int = numbers.indexWhere(x\
    \ => x < smallest)\n        val largest_index: Int = numbers.indexWhere(x => x\
    \ > largest)\n        (smallest, largest)", "        val minDistance = math.abs(numbers.min()\
    \ - numbers.max())\n        val minIndex = 0\n        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        numbers.zipWithIndex.foreach { case\
    \ (number, index) =>\n            val currentDistance = math.abs(number - maxValue)\n\
    \            if (currentDistance < minDistance) {\n                minDistance\
    \ = currentDistance\n                minIndex = index\n                minValue\
    \ = number\n            } else if (currentDistance == minDistance) {\n       \
    \         if (number < minValue) {\n                    minValue = number\n  \
    \              }\n            }\n        }\n        (minValue, numbers(minIndex))",
  "        val smallest = numbers.min\n        val largest = numbers.max\n       \
    \ val smallestIndex = numbers.indexOf(smallest)\n        val largestIndex = numbers.indexOf(largest)\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).getOrElse(sortedNumbers.last)\n\
    \        (closestPair._1, closestPair._2)", "        val min1 = numbers.min\n\
    \        val min2 = numbers.min\n        val minDiff = math.abs(min1 - min2)\n\
    \        val minIndex = numbers.indexOf(min1)\n        val minIndex2 = numbers.indexOf(min2)\n\
    \        val minDiff2 = math.abs(minIndex - minIndex2)\n        if (minDiff <\
    \ minDiff2) {\n            (min1, min2)\n        } else {\n            (min2,\
    \ min1)\n        }", "        val smallest = math.min(numbers)\n        val largest\
    \ = math.max(numbers)\n        val minIndex: Int = numbers.indexWhere(x => x ==\
    \ smallest)\n        val maxIndex: Int = numbers.indexWhere(x => x == largest)\n\
    \        val result: Tuple2[Float, Float] = smallest, largest\n        result.updated(minIndex,\
    \ largest)\n        result.updated(maxIndex, smallest)\n        result", "   \
    \     val smallest = numbers.min\n        val largest = numbers.max\n        val\
    \ smallestIndex = numbers.indexOf(smallest)\n        val largestIndex = numbers.indexOf(largest)\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallest = sortedNumbers.head\n        val largest = sortedNumbers.last\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortBy(math.abs)\n\
    \        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1 < _._1)\n\
    \        closestPair.getOrElse(sortedNumbers.head,sortedNumbers.last)", "    \
    \    val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        closestPair.getOrElse(sortedNumbers.last, sortedNumbers.head)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallest = sortedNumbers.head\n\
    \        val largest = sortedNumbers.last\n        (smallest, largest)", "   \
    \     val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).getOrElse(sortedNumbers.last)\n\
    \        (closestPair._1, closestPair._2)", "        val min = math.min(numbers)\n\
    \        val max = math.max(numbers)\n        val closest = (min, max)\n     \
    \   val closestIndexes = numbers.indexWhere(x => x == closest._1)\n        val\
    \ closestIndexes2 = numbers.indexWhere(x => x == closest._2)\n        val closestIndexes3\
    \ = numbers.indexWhere(x => x == closest._3)\n        val closestIndexes4 = numbers.indexWhere(x\
    \ => x == closest._4)\n        val closestIndexes5 = numbers.indexWhere(x => x\
    \ == closest._5)\n        val closestIndexes6 = numbers.indexWhere(x => x == closest._6)\n\
    \        val closestIndexes7 = numbers.indexWhere(x => x == closest._7)\n    \
    \    val closestIndexes8 = numbers.indexWhere(x => x == closest._8)\n        val\
    \ closestIndexes9 = numbers.indexWhere(x => x == closest._9)\n        val closestIndexes10\
    \ = numbers.indexWhere(x => x == closest._10)\n        val closestIndexes11 =\
    \ numbers.indexWhere(x => x == closest._11)\n        val closestIndexes12 = numbers.indexWhere(x\
    \ => x == closest._12)\n        val closestIndexes13 = numbers.indexWhere(x =>\
    \ x == closest._13)\n        val closestIndexes14 = numbers.indexWhere(x => x\
    \ == closest._14)\n        val closestIndexes15 = numbers.indexWhere(x => x ==\
    \ closest._15)\n        val closestIndexes16 = numbers.indexWhere(x => x == closest._16)\n\
    \        val closestIndexes17 = numbers.indexWhere(x => x == closest._17)\n  \
    \      val closestIndexes18 = numbers.indexWhere(x => x == closest._18)\n    \
    \    val closestIndexes19 = numbers.indexWhere(x => x == closest._19)\n      \
    \  val closestIndexes20 = numbers.indexWhere(x => x == closest._20)\n        val\
    \ closestIndexes21 = numbers.indexWhere(x => x == closest._21)\n        val closestIndexes22\
    \ = numbers.indexWhere(x => x == closest._22)\n        val closestIndexes23 =\
    \ numbers.indexWhere(x => x == closest._23)\n        val closestIndexes24 = numbers.indexWhere(x\
    \ => x == closest._24)\n        val closestIndexes25 = numbers.indexWhere(x =>\
    \ x == closest._25)\n        val closestIndexes26 = numbers.indexWhere(x => x\
    \ == closest._26)\n        val closestIndexes27 = numbers.indexWhere(x => x ==\
    \ closest._27)\n        val closestIndexes28 = numbers.indexWhere(x ", "     \
    \   val smallest = math.min(numbers)\n        val largest = math.max(numbers)\n\
    \        val smallestIndex = numbers.indexOf(smallest)\n        val largestIndex\
    \ = numbers.indexOf(largest)\n        (smallest, largest)", "        val sortedNumbers\
    \ = numbers.sortBy(math.abs(_))\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        (closestPair._1, closestPair._2)", "        val smallest =\
    \ math.min(numbers)\n        val largest = math.max(numbers)\n        (smallest,\
    \ largest)", "        val smallest = math.min(numbers)\n        val largest =\
    \ math.max(numbers)\n        val index = numbers.indexWhere(x => x == smallest\
    \ || x == largest)\n        (numbers(index), numbers(index+1))", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).getOrElse(sortedNumbers.last)\n\
    \        val closestPairIndex = sortedNumbers.indexOf(closestPair._1)\n      \
    \  (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.zipWithIndex.filter(_._2 < sortedNumbers.size\
    \ - 1).map(_._1)\n        val closestTo2 = sortedNumbers.zipWithIndex.filter(_._2\
    \ < sortedNumbers.size - 2).map(_._1)\n        (closestTo.head, closestTo2.head)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestIndex\
    \ = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n        val largestIndex\
    \ = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n        (sortedNumbers(smallestIndex),\
    \ sortedNumbers(largestIndex))", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).map(_._2)\n\
    \        (closestPair, closestPair)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.take(2)\n        val closestTo2\
    \ = sortedNumbers.takeRight(2)\n        (closestTo, closestTo2)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallest = sortedNumbers.head\n\
    \        val largest = sortedNumbers.last\n        (smallest, largest)", "   \
    \     val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestIndex =\
    \ sortedNumbers.indexOf(0)\n        val largestIndex = sortedNumbers.lastIndex\n\
    \        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))", "     \
    \   val minDiff = math.abs(numbers.head - numbers.last)\n        val minIndex\
    \ = 0\n        val minValue = numbers.head\n        numbers.zipWithIndex.foreach\
    \ { case (number, index) =>\n            val diff = math.abs(number - minValue)\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minIndex = index\n                minValue = number\n            }\n \
    \       }\n        (minValue, numbers(minIndex))", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).getOrElse(sortedNumbers.last)\n\
    \        (closestPair._1, closestPair._2)", "        val min1 = math.min(numbers)\n\
    \        val min2 = math.min(numbers)\n        val max1 = math.max(numbers)\n\
    \        val max2 = math.max(numbers)\n        (min1, min2)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val first = sortedNumbers.head\n        val\
    \ second = sortedNumbers.last\n        (first, second)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val first = sortedNumbers.head\n        val\
    \ second = sortedNumbers.last\n        (first, second)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallest = sortedNumbers.head\n     \
    \   val largest = sortedNumbers.last\n        (smallest, largest)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val first = sortedNumbers.head\n\
    \        val second = sortedNumbers.last\n        (first, second)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest = sortedNumbers.head\n\
    \        val secondClosest = sortedNumbers.last\n        (firstClosest, secondClosest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallest = sortedNumbers.head\n\
    \        val largest = sortedNumbers.last\n        (smallest, largest)", "   \
    \     val sortedNumbers = numbers.sortWith(_ < _)\n        val first = sortedNumbers.head\n\
    \        val last = sortedNumbers.last\n        (first, last)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo2 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo3 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo4 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo5 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo6 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo7 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo8 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo9 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo10 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo11 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo12 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo13 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo14 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo15 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo16 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo17 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo18 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo19 = sorted", " \
    \       val min1 = numbers.min\n        val min2 = numbers.min\n        val min3\
    \ = numbers.min\n        val min4 = numbers.min\n        val min5 = numbers.min\n\
    \        val min6 = numbers.min\n        val min7 = numbers.min\n        val min8\
    \ = numbers.min\n        val min9 = numbers.min\n        val min10 = numbers.min\n\
    \        val min11 = numbers.min\n        val min12 = numbers.min\n        val\
    \ min13 = numbers.min\n        val min14 = numbers.min\n        val min15 = numbers.min\n\
    \        val min16 = numbers.min\n        val min17 = numbers.min\n        val\
    \ min18 = numbers.min\n        val min19 = numbers.min\n        val min20 = numbers.min\n\
    \        val min21 = numbers.min\n        val min22 = numbers.min\n        val\
    \ min23 = numbers.min\n        val min24 = numbers.min\n        val min25 = numbers.min\n\
    \        val min26 = numbers.min\n        val min27 = numbers.min\n        val\
    \ min28 = numbers.min\n        val min29 = numbers.min\n        val min30 = numbers.min\n\
    \        val min31 = numbers.min\n        val min32 = numbers.min\n        val\
    \ min33 = numbers.min\n        val min34 = numbers.min\n        val min35 = numbers.min\n\
    \        val min36 = numbers.min\n        val min37 = numbers.min\n        val\
    \ min38 = numbers.min\n        val min39 = numbers.min\n        val min40 = numbers.min\n\
    \        val min41 = numbers.min\n        val min42 = numbers.min\n        val\
    \ min43 = numbers.min\n        val min44 = numbers.min\n        val min45 = numbers.min\n\
    \        val min46 = numbers.min\n        val min47 = numbers.min\n        val\
    \ min48 = numbers.min\n        val min49 = numbers.min\n        val min50 = numbers.min\n\
    \        val min51 = numbers.min\n        val min52 = numbers.min\n        val\
    \ min53 = numbers.min\n        val min54 = numbers.min\n        val min55 = numbers.min\n\
    \        val min56 = numbers.min\n        val min57 = numbers.min\n        val\
    \ min58 = numbers.min\n        val min59 = numbers.min\n        val min60 = numbers.min\n\
    \        val min61 = numbers.min\n        val min62 = numbers.min\n        val\
    \ min63 = numbers.min\n        val min64 = numbers.min\n        val min65 = numbers.min\n\
    \        val min66", "        val sortedNumbers = numbers.sortWith(_ < _)\n  \
    \      val closestTo = sortedNumbers.take(2)\n        val closestTo2 = sortedNumbers.drop(2).take(2)\n\
    \        (closestTo, closestTo2)", "        val minDistance = math.abs(numbers.min()\
    \ - numbers.max())\n        val maxDistance = math.abs(numbers.max() - numbers.min())\n\
    \        val minIndex = numbers.indexWhere(x => math.abs(x - numbers.min()) <\
    \ minDistance)\n        val maxIndex = numbers.indexWhere(x => math.abs(x - numbers.max())\
    \ < maxDistance)\n        (numbers(minIndex), numbers(maxIndex))", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest =\
    \ sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n       \
    \ (firstClosest, secondClosest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.take(2)\n        val closestTo2\
    \ = sortedNumbers.drop(2).take(2)\n        closestTo.zip(closestTo2).map { case\
    \ (a, b) => a -> b }.toMap", "        val mins = numbers.minBy(_).map(_ - _)\n\
    \        val maxs = numbers.maxBy(_).map(_ - _)\n        val minsIndex = numbers.indexOf(mins.head)\n\
    \        val maxsIndex = numbers.indexOf(maxs.head)\n        val minsValue = mins(minsIndex)\n\
    \        val maxsValue = maxs(maxsIndex)\n        (minsValue, maxsValue)", " \
    \       val smallest = numbers.min\n        val largest = numbers.max\n      \
    \  val smallestIndex = numbers.indexOf(smallest)\n        val largestIndex = numbers.indexOf(largest)\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallest = sortedNumbers.head\n        val largest = sortedNumbers.last\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestDifference = sortedNumbers.head - sortedNumbers.last\n\
    \        val largestDifference = sortedNumbers.last - sortedNumbers.head\n   \
    \     (smallestDifference, largestDifference)", "        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        (smallest, largest)", "    \
    \    val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestTo2 = sortedNumbers.drop(2).take(2)\n        (closestTo, closestTo2)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).find(_._1 < _._1)\n        closestPair._1.toFloat\
    \ -> closestPair._2.toFloat", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        closestPair._1.toFloat -> closestPair._2.toFloat", "      \
    \  val sortedNumbers = numbers.sortWith(_ < _)\n        val first = sortedNumbers.head\n\
    \        val second = sortedNumbers.last\n        (first, second)", "        val\
    \ smallest = numbers.min\n        val largest = numbers.max\n        val smallest_index\
    \ = numbers.indexWhere(x => x == smallest)\n        val largest_index = numbers.indexWhere(x\
    \ => x == largest)\n        (smallest, largest)", "        val sortedNumbers =\
    \ numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n \
    \       val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).map(_._2)\n        (closestPair._1,\
    \ closestPair._2)", "        val minDiff = math.abs(numbers.head - numbers.last)\n\
    \        val minDiffIndex = numbers.indexOf(minDiff)\n        val minDiffIndex\
    \ = minDiffIndex - 1\n        val minDiffIndex = minDiffIndex - 1\n        val\
    \ minDiff = numbers.take(minDiffIndex).last\n        val minDiff = numbers.take(minDiffIndex).last\n\
    \        val minDiff = numbers.take(minDiffIndex).last\n        val minDiff =\
    \ numbers.take(minDiffIndex).last\n        val minDiff = numbers.take(minDiffIndex).last\n\
    \        val minDiff = numbers.take(minDiffIndex).last\n        val minDiff =\
    \ numbers.take(minDiffIndex).last\n        val minDiff = numbers.take(minDiffIndex).last\n\
    \        val minDiff = numbers.take(minDiffIndex).last\n        val minDiff =\
    \ numbers.take(minDiffIndex).last\n        val minDiff = numbers.take(minDiffIndex).last\n\
    \        val minDiff = numbers.take(minDiffIndex).last\n        val minDiff =\
    \ numbers.take(minDiffIndex).last\n        val minDiff = numbers.take(minDiffIndex).last\n\
    \        val minDiff = numbers.take(minDiffIndex).last\n        val minDiff =\
    \ numbers.take(minDiffIndex).last\n        val minDiff = numbers.take(minDiffIndex).last\n\
    \        val minDiff = numbers.take(minDiffIndex).last\n        val minDiff =\
    \ numbers.take(minDiffIndex).last\n        val minDiff = numbers.take(minDiffIndex).last\n\
    \        val minDiff = numbers.take(minDiffIndex).last\n        val minDiff =\
    \ numbers.take(minDiffIndex).last\n        val minDiff = numbers.take(minDiffIndex).last\n\
    \        val minDiff = numbers.take(minDiffIndex).last\n        val minDiff =\
    \ numbers.take(minDiffIndex).last\n        val minDiff = numbers.take(minDiffIndex).last\n\
    \        val minDiff = numbers.take(minDiffIndex).last\n        val minDiff =\
    \ numbers.take(minDiffIndex).last\n        val minDiff = numbers.take(minDiffIndex).last\n\
    \        val minDiff = numbers.take(minDiffIndex).last\n        val minDiff =\
    \ numbers.take(minDiffIndex).last\n        val minDiff = numbers.take(minDiffIndex).last\n\
    \        val minDiff = numbers.take(minDiffIndex).last\n        val minDiff =\
    \ numbers.take(minDiffIndex).last\n        val minDiff = numbers.take(minDiffIndex).last\n\
    \        val minDiff = numbers.take(minDiffIndex).last", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestPairs = sortedNumbers.sliding(2).map\
    \ {\n            n => (n, sortedNumbers.find(_ == n))\n        }.toList\n    \
    \    closestPairs.sortBy(_._1).take(2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallest = sortedNumbers.head\n        val largest = sortedNumbers.last\n\
    \        (smallest, largest)", "        val smallest = numbers.min\n        val\
    \ largest = numbers.max\n        val smallestIndex = numbers.indexOf(smallest)\n\
    \        val largestIndex = numbers.indexOf(largest)\n        (smallest, largest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallest = sortedNumbers.head\n\
    \        val largest = sortedNumbers.last\n        (smallest, largest)", "   \
    \     val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest =\
    \ sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n       \
    \ (firstClosest, secondClosest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ smallest = math.min(numbers)\n        val largest = math.max(numbers)\n    \
    \    (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1 < _._1)\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ smallest: Float = numbers.min\n        val largest: Float = numbers.max\n  \
    \      val smallest_index: Int = numbers.indexWhere(x => x == smallest)\n    \
    \    val largest_index: Int = numbers.indexWhere(x => x == largest)\n        (smallest,\
    \ largest)", "        val sortedNumbers = numbers.sortWith(_ < _)\n        val\
    \ smallest = sortedNumbers.head\n        val largest = sortedNumbers.last\n  \
    \      (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_ <\
    \ _)\n        val closestTo = sortedNumbers.take(2)\n        val closestTo2 =\
    \ sortedNumbers.drop(2).take(2)\n        closestTo.zip(closestTo2).map { case\
    \ (a, b) => a -> b }", "        val min = math.min(numbers)\n        val max =\
    \ math.max(numbers)\n        val minIndex = numbers.indexOf(min)\n        val\
    \ maxIndex = numbers.indexOf(max)\n        (numbers(minIndex), numbers(maxIndex))",
  "        val mins = numbers.minBy(_).map(_ - _)\n        val maxs = numbers.maxBy(_).map(_\
    \ - _)\n        val minsIndex = numbers.indexOf(mins)\n        val maxsIndex =\
    \ numbers.indexOf(maxs)\n        (mins, maxs)", "        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val difference = largest - smallest\n\
    \        val differences = numbers.map(x => x - smallest)\n        val smallests\
    \ = differences.min\n        val largests = differences.max\n        (smallests,\
    \ largests)", "        val sortedNumbers = numbers.sortWith(_ < _)\n        val\
    \ closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy { case (first, second)\
    \ => math.abs(first - second) }\n        (closestPair._1, closestPair._2)", " \
    \       val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ smallest = numbers.min\n        val largest = numbers.max\n        val smallest_index\
    \ = numbers.indexOf(smallest)\n        val largest_index = numbers.indexOf(largest)\n\
    \        (smallest, largest)", "        val min1 = numbers.min\n        val min2\
    \ = numbers.min\n        val minDiff = math.abs(min1 - min2)\n        val minIndex\
    \ = numbers.indexOf(min1)\n        val minIndex2 = numbers.indexOf(min2)\n   \
    \     if (minIndex == minIndex2) {\n            (min1, min2)\n        } else {\n\
    \            val minDiff2 = math.abs(min1 - min2)\n            val minDiffIndex\
    \ = numbers.indexOf(minDiff2)\n            if (minDiffIndex == minIndex) {\n \
    \               val minDiffIndex2 = numbers.indexOf(minDiff)\n               \
    \ if (minDiffIndex2 == minIndex2) {\n                    (min1, min2)\n      \
    \          } else {\n                    val minDiffIndex3 = numbers.indexOf(minDiff2)\n\
    \                    if (minDiffIndex3 == minIndex) {\n                      \
    \  val minDiffIndex4 = numbers.indexOf(minDiff)\n                        if (minDiffIndex4\
    \ == minIndex2) {\n                            (min1, min2)\n                \
    \        } else {\n                            val minDiffIndex5 = numbers.indexOf(minDiff2)\n\
    \                            if (minDiffIndex5 == minIndex) {\n              \
    \                  val minDiffIndex6 = numbers.indexOf(minDiff)\n            \
    \                    if (minDiffIndex6 == minIndex2) {\n                     \
    \               (min1, min2)\n                                } else {\n     \
    \                               val minDiffIndex7 = numbers.indexOf(minDiff2)\n\
    \                                    if (minDiffIndex7 == minIndex) {\n      \
    \                                  val minDiffIndex8 = numbers.indexOf(minDiff)\n\
    \                                        if (minDiffIndex8 == minIndex2) {\n \
    \                                           (min1, min2)\n                   \
    \                     } else {\n                                            (min1,\
    \ min2)\n                                        }\n                         \
    \           } else {\n                                        val minDiffIndex9\
    \ = numbers.indexOf(minDiff2)\n                                        if (minDiffIndex9\
    \ == minIndex) {\n                                            val minDiffIndex10\
    \ = numbers.indexOf(minDiff)\n                                            if (minDiffIndex10\
    \ == minIndex2) {\n                                                (min1, min2)\n\
    \                                            } else {\n                      \
    \                          (min1, min2)\n                                    \
    \        }\n                                        } else {\n               \
    \                             val minDiffIndex11 = numbers.indexOf(minDiff2)\n\
    \                                            if (minDiffIndex11 == minIndex) {\n\
    \                                                val minDiffIndex12 = numbers.indexOf(minDiff)\n\
    \                                                if (minDiffIndex12 == minIndex2)\
    \ {\n                                                    (min1, min2)\n      \
    \                                          } else {\n                        \
    \                            (min1, min2)\n                                  \
    \              }\n                                            } else {\n     \
    \                                           val minDiffIndex13 = numbers.indexOf(minDiff2)\n\
    \                                                if (minDiffIndex13 == minIndex)\
    \ {\n                                                    val minDiffIndex14 =\
    \ numbers.indexOf(minDiff)\n                                                 \
    \   if (minDiffIndex14 == minIndex2) {\n                                     \
    \                   (min1, min2)\n                                           \
    \         } else {\n                                                        (min1,\
    \ min2)\n                                                    }\n             \
    \                                   } else {\n                               \
    \                     val minDiffIndex15 = numbers.indexOf(minDiff2)\n       \
    \                                             if (minDiffIndex", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestTo2 = sortedNumbers.drop(2).take(2)\n        (closestTo, closestTo2)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).getOrElse(sortedNumbers.last)\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.take(2)\n        val closestTo2\
    \ = sortedNumbers.drop(2).take(2)\n        (closestTo, closestTo2)", "       \
    \ val sortedNumbers = numbers.sortWith(_ < _)\n        val smallest = sortedNumbers.head\n\
    \        val largest = sortedNumbers.last\n        (smallest, largest)", "   \
    \     val smallest = math.min(numbers)\n        val largest = math.max(numbers)\n\
    \        val smallest_index = numbers.indexOf(smallest)\n        val largest_index\
    \ = numbers.indexOf(largest)\n        (smallest, largest)", "        val minDistance\
    \ = numbers.min\n        val maxDistance = numbers.max\n        val minIndex =\
    \ numbers.indexOf(minDistance)\n        val maxIndex = numbers.indexOf(maxDistance)\n\
    \        (minDistance, maxDistance)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestDifference = sortedNumbers.last - sortedNumbers.head\n\
    \        val largestDifference = sortedNumbers.last - sortedNumbers.head\n   \
    \     (smallestDifference, largestDifference)", "        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        (smallest, largest)", "    \
    \    val smallest = numbers.min\n        val largest = numbers.max\n        val\
    \ smallestIndex = numbers.indexOf(smallest)\n        val largestIndex = numbers.indexOf(largest)\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val first = sortedNumbers.head\n        val second = sortedNumbers.last\n\
    \        (first, second)", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val smallestDifference = sortedNumbers.head - sortedNumbers.last\n  \
    \      val smallestIndex = sortedNumbers.indexOfFirst { _ == smallestDifference\
    \ }\n        val largestDifference = sortedNumbers.last - sortedNumbers.head\n\
    \        val largestIndex = sortedNumbers.indexOfLast { _ == largestDifference\
    \ }\n        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))", " \
    \       val smallest = numbers.min\n        val largest = numbers.max\n      \
    \  val smallestIndex = numbers.indexOf(smallest)\n        val largestIndex = numbers.indexOf(largest)\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).getOrElse(sortedNumbers.last)\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestDifference = sortedNumbers.head - sortedNumbers.last\n\
    \        val largestDifference = sortedNumbers.last - sortedNumbers.head\n   \
    \     (smallestDifference, largestDifference)", "        val minDistance = math.abs(numbers.min()\
    \ - numbers.max())\n        val minIndex = numbers.indexWhere(x => math.abs(x\
    \ - numbers.min()) < minDistance)\n        val maxIndex = numbers.indexWhere(x\
    \ => math.abs(x - numbers.max()) < minDistance)\n        (numbers(minIndex), numbers(maxIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestIndex\
    \ = sortedNumbers.indexOfMin\n        val largestIndex = sortedNumbers.indexOfMax\n\
    \        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))", "     \
    \   val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestToIndex = sortedNumbers.indexWhere(_ == closestTo._1)\n  \
    \      (closestTo._1, closestTo._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestDifference = sortedNumbers.head\
    \ - sortedNumbers.last\n        val largestDifference = sortedNumbers.last - sortedNumbers.head\n\
    \        (smallestDifference, largestDifference)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val first = sortedNumbers.head\n        val\
    \ second = sortedNumbers.last\n        (first, second)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        closestPair._1.toFloat -> closestPair._2.toFloat", "      \
    \  val smallest = math.min(numbers)\n        val largest = math.max(numbers)\n\
    \        val smallest_index = numbers.indexOf(smallest)\n        val largest_index\
    \ = numbers.indexOf(largest)\n        (smallest, largest)", "        val min1\
    \ = math.min(numbers)\n        val max1 = math.max(numbers)\n        val min2\
    \ = math.min(min1, max1)\n        val max2 = math.max(min1, max1)\n        (min2,\
    \ max2)", "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair\
    \ = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).getOrElse(sortedNumbers.last)\n\
    \        (closestPair._1, closestPair._2)", "        val smallest = numbers.min\n\
    \        val largest = numbers.max\n        val smallestIndex = numbers.indexOf(smallest)\n\
    \        val largestIndex = numbers.indexOf(largest)\n        (smallest, largest)",
  "        val minDistance = math.abs(numbers.min() - numbers.max())\n        val\
    \ minIndex = 0\n        val maxIndex = numbers.length - 1\n        while (maxIndex\
    \ >= minIndex) {\n            val currentDistance = math.abs(numbers(minIndex)\
    \ - numbers(maxIndex))\n            if (currentDistance < minDistance) {\n   \
    \             minDistance = currentDistance\n                minIndex = maxIndex\n\
    \            } else if (currentDistance > minDistance) {\n                maxIndex\
    \ = minIndex - 1\n            } else {\n                minIndex = maxIndex\n\
    \            }\n        }\n        (numbers(minIndex), numbers(maxIndex))", " \
    \       val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestTo2 = sortedNumbers.drop(2).take(2)\n        (closestTo, closestTo2)",
  "        val smallest = numbers.min\n        val largest = numbers.max\n       \
    \ val smallestIndex = numbers.indexOf(smallest)\n        val largestIndex = numbers.indexOf(largest)\n\
    \        (smallest, largest)", "        val minDistance = math.abs(numbers.min()\
    \ - numbers.max())\n        val minIndex = numbers.indexWhere(x => math.abs(x\
    \ - numbers.min()) < minDistance)\n        val maxIndex = numbers.indexWhere(x\
    \ => math.abs(x - numbers.max()) < minDistance)\n        (numbers.apply(minIndex),\
    \ numbers.apply(maxIndex))", "        val sortedNumbers = numbers.sortWith(_ <\
    \ _)\n        val closestPairs = sortedNumbers.zip(sortedNumbers.tail)\n     \
    \   val closestPairsSorted = closestPairs.sortWith(_._1 < _._1)\n        closestPairsSorted.head",
  "        val minDistance = math.abs(numbers.min() - numbers.max())\n        val\
    \ minIndex = 0\n        val minValue = numbers.min\n        val maxValue = numbers.max\n\
    \        val maxIndex = numbers.size - 1\n        val maxDistance = math.abs(maxValue\
    \ - numbers.max)\n        val maxIndexOfMinValue = numbers.indexOf(minValue)\n\
    \        val maxIndexOfMaxValue = numbers.indexOf(maxValue)\n        val minIndexOfMaxValue\
    \ = numbers.indexOf(minValue)\n        val minIndexOfMinValue = numbers.indexOf(maxValue)\n\
    \        val minIndexOfMinValue2 = numbers.indexOf(minValue)\n        val minIndexOfMinValue3\
    \ = numbers.indexOf(minValue)\n        val minIndexOfMinValue4 = numbers.indexOf(minValue)\n\
    \        val minIndexOfMinValue5 = numbers.indexOf(minValue)\n        val minIndexOfMinValue6\
    \ = numbers.indexOf(minValue)\n        val minIndexOfMinValue7 = numbers.indexOf(minValue)\n\
    \        val minIndexOfMinValue8 = numbers.indexOf(minValue)\n        val minIndexOfMinValue9\
    \ = numbers.indexOf(minValue)\n        val minIndexOfMinValue10 = numbers.indexOf(minValue)\n\
    \        val minIndexOfMinValue11 = numbers.indexOf(minValue)\n        val minIndexOfMinValue12\
    \ = numbers.indexOf(minValue)\n        val minIndexOfMinValue13 = numbers.indexOf(minValue)\n\
    \        val minIndexOfMinValue14 = numbers.indexOf(minValue)\n        val minIndexOfMinValue15\
    \ = numbers.indexOf(minValue)\n        val minIndexOfMinValue16 = numbers.indexOf(minValue)\n\
    \        val minIndexOfMinValue17 = numbers.indexOf(minValue)\n        val minIndexOfMinValue18\
    \ = numbers.indexOf(minValue)\n        val minIndexOfMinValue19 = numbers.indexOf(minValue)\n\
    \        val minIndexOfMinValue20 = numbers.indexOf(minValue)\n        val minIndexOfMinValue21\
    \ = numbers.indexOf(minValue)\n        val minIndexOfMinValue22 = numbers.indexOf(minValue)\n\
    \        val minIndexOfMinValue23 = numbers.indexOf(minValue)\n        val minIndexOfMinValue24\
    \ = numbers.indexOf(minValue)\n        val minIndexOfMinValue25 = numbers.indexOf(minValue)\n\
    \        val minIndexOfMinValue26 = numbers.indexOf(minValue)\n        val minIndexOfMinValue27\
    \ = numbers.indexOf(minValue)\n        val minIndexOfMinValue28 = numbers.indexOf(minValue)\n\
    \        val minIndexOfMinValue29 = numbers.indexOf(minValue)\n        val minIndexOfMinValue30\
    \ = numbers.indexOf(minValue)\n        val minIndexOfMinValue31 = numbers.indexOf(minValue)\n",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.zip(sortedNumbers.tail).filter(_._1\
    \ < _._1).map(_._1)\n        val closestToTail = sortedNumbers.zip(sortedNumbers.tail).filter(_._1\
    \ < _._1).map(_._2)\n        (closestTo, closestToTail)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.zip(sortedNumbers.tail).map\
    \ {\n            case (first, second) => (first - second).abs\n        }.min\n\
    \        val closestToIndex = sortedNumbers.zipWithIndex.map {\n            case\
    \ (number, index) => (index - 1).abs if number == closestTo else 0\n        }.min\n\
    \        val closestToPair = sortedNumbers.zipWithIndex.map {\n            case\
    \ (number, index) => (index - 1).abs if number == closestTo\n        }.min\n \
    \       (closestToPair._1, closestToPair._2)", "        val minDistance = math.abs(numbers.min()\
    \ - numbers.max())\n        val minIndex = numbers.indexWhere(x => math.abs(x\
    \ - numbers.min()) < minDistance)\n        val maxIndex = numbers.indexWhere(x\
    \ => math.abs(x - numbers.max()) < minDistance)\n        (numbers(minIndex), numbers(maxIndex))",
  "        val smallest = math.min(numbers)\n        val largest = math.max(numbers)\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        closestPair._1", "        val minDistance = math.abs(numbers(0)\
    \ - numbers(1))\n        val minIndex = math.abs(numbers.indexOf(0) - numbers.indexOf(1))\n\
    \        val minValue = numbers(minIndex)\n        val maxDistance = math.abs(numbers(0)\
    \ - numbers(numbers.size - 1))\n        val maxIndex = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(numbers.size - 1))\n        val maxValue = numbers(maxIndex)\n\
    \        (minValue, maxValue)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.zip(sortedNumbers.tail).map {\n\
    \            case (first, second) => (first - second).abs }\n        val smallest\
    \ = closestTo.min\n        val largest = closestTo.max\n        (smallest, largest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).find(_._1 < _._1)\n        (closestPair._1,\
    \ closestPair._2)", "        val sortedNumbers = numbers.sortWith(_ < _)\n   \
    \     val smallestDifference = sortedNumbers.head - sortedNumbers.last\n     \
    \   val smallestElement = sortedNumbers.head\n        val largestElement = sortedNumbers.last\n\
    \        (smallestElement, largestElement)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.head\n        val closestTo2 = sortedNumbers.last\n\
    \        (closestTo, closestTo2)", "        val smallest = numbers.min\n     \
    \   val largest = numbers.max\n        val smallestIndex = numbers.indexOf(smallest)\n\
    \        val largestIndex = numbers.indexOf(largest)\n        (smallest, largest)",
  "        val minDistance = math.abs(numbers.min() - numbers.max())\n        val\
    \ minIndex = numbers.indexWhere(x => math.abs(x - numbers.min()) < minDistance)\n\
    \        val maxIndex = numbers.indexWhere(x => math.abs(x - numbers.max()) <\
    \ minDistance)\n        (numbers.min(), numbers.max())", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n \
    \       val closestTo2 = sortedNumbers.drop(2).take(2)\n        (closestTo, closestTo2)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestTo2 = sortedNumbers.takeRight(2)\n        (closestTo, closestTo2)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val first = sortedNumbers.head\n\
    \        val second = sortedNumbers.last\n        (first, second)", "        val\
    \ min1 = math.min(numbers)\n        val min2 = math.min(numbers)\n        val\
    \ max1 = math.max(numbers)\n        val max2 = math.max(numbers)\n        (min1,\
    \ min2) match {\n            case (max1, max2) => \n                (max1, max2)\n\
    \            case _ => \n                (min1, max2)\n        }", "        val\
    \ min = math.min(numbers)\n        val max = math.max(numbers)\n        val mid\
    \ = (min + max) / 2\n        val closest = (min + max) / 2\n        val closest2\
    \ = math.abs(mid - closest)\n        val closest3 = math.abs(mid - closest2)\n\
    \        val closest4 = math.abs(mid - closest3)\n        val closest5 = math.abs(mid\
    \ - closest4)\n        val closest6 = math.abs(mid - closest5)\n        val closest7\
    \ = math.abs(mid - closest6)\n        val closest8 = math.abs(mid - closest7)\n\
    \        val closest9 = math.abs(mid - closest8)\n        val closest10 = math.abs(mid\
    \ - closest9)\n        val closest11 = math.abs(mid - closest10)\n        val\
    \ closest12 = math.abs(mid - closest11)\n        val closest13 = math.abs(mid\
    \ - closest12)\n        val closest14 = math.abs(mid - closest13)\n        val\
    \ closest15 = math.abs(mid - closest14)\n        val closest16 = math.abs(mid\
    \ - closest15)\n        val closest17 = math.abs(mid - closest16)\n        val\
    \ closest18 = math.abs(mid - closest17)\n        val closest19 = math.abs(mid\
    \ - closest18)\n        val closest20 = math.abs(mid - closest19)\n        val\
    \ closest21 = math.abs(mid - closest20)\n        val closest22 = math.abs(mid\
    \ - closest21)\n        val closest23 = math.abs(mid - closest22)\n        val\
    \ closest24 = math.abs(mid - closest23)\n        val closest25 = math.abs(mid\
    \ - closest24)\n        val closest26 = math.abs(mid - closest25)\n        val\
    \ closest27 = math.abs(mid - closest26)\n        val closest28 = math.abs(mid\
    \ - closest27)\n        val closest29 = math.abs(mid - closest28)\n        val\
    \ closest30 = math.abs(mid - closest29)\n        val closest31 = math.abs(mid\
    \ - closest30)\n        val closest32 = math.abs(mid - closest31)\n        val\
    \ closest33 = math.abs(mid - closest32)\n        val closest34 = math.abs(mid\
    \ - closest33)\n        val closest35 = math.abs(mid - closest34)\n        val\
    \ closest36 = math.abs(mid - closest35)\n        val closest37 = math.abs(mid\
    \ - closest36)\n        val closest38 = math.abs(mid - ", "        val minDistance\
    \ = numbers.min\n        val maxDistance = numbers.max\n        val minIndex :\
    \ Int = numbers.indexWhere(x => x == minDistance)\n        val maxIndex : Int\
    \ = numbers.indexWhere(x => x == maxDistance)\n        (numbers(minIndex), numbers(maxIndex))",
  "        val smallest = math.min(numbers)\n        val largest = math.max(numbers)\n\
    \        val smallestIndex = numbers.indexOf(smallest)\n        val largestIndex\
    \ = numbers.indexOf(largest)\n        (smallest, largest)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1)\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestDifference = sortedNumbers.last - sortedNumbers.head\n\
    \        val smallestElement = sortedNumbers.head\n        val largestDifference\
    \ = sortedNumbers.last - sortedNumbers.head\n        val largestElement = sortedNumbers.last\n\
    \        (smallestElement, smallestDifference), (largestElement, largestDifference)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPairs =\
    \ sortedNumbers.sliding(2).map { x =>\n            val closestToLeft = x.headOption.filter(_\
    \ < x.last)\n            val closestToRight = x.tail.filter(_ < x.head)\n    \
    \        (closestToLeft.get, closestToRight.get)\n        }\n        closestPairs.minBy(_._1).getOrElse(closestPairs.maxBy(_._1).get)",
  "        val smallest = numbers.min\n        val largest = numbers.max\n       \
    \ val smallestIndex = numbers.indexOf(smallest)\n        val largestIndex = numbers.indexOf(largest)\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1)._2\n\
    \        val closestTo2 = sortedNumbers.zip(sortedNumbers.tail).minBy(_._2)._2\n\
    \        (closestTo, closestTo2)", "        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        (smallest, largest)", "    \
    \    val min1 = numbers.min\n        val max1 = numbers.max\n        val min2\
    \ = numbers.min\n        val max2 = numbers.max\n        val minDiff = math.abs(max1\
    \ - min1)\n        val maxDiff = math.abs(max2 - min2)\n        if (minDiff <\
    \ maxDiff) {\n            (min1, min2)\n        } else {\n            (max1, max2)\n\
    \        }", "        val sortedNumbers = numbers.sortWith(_ < _)\n        val\
    \ closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).map(_._2)\n\
    \        (closestPair._1, closestPair._2)", "        val min = math.min(numbers)\n\
    \        val max = math.max(numbers)\n        val minIndex = numbers.indexOf(min)\n\
    \        val maxIndex = numbers.indexOf(max)\n        (min, max)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest = sortedNumbers.head\n\
    \        val secondClosest = sortedNumbers.last\n        (firstClosest, secondClosest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.zip(sortedNumbers.tail).map\
    \ {\n            case (first, second) => (first - second).abs.min\n        }\n\
    \        val closestToPair = closestTo.min\n        val closestToPairIndex = closestTo.indexOfMin\n\
    \        val closestToPairs = closestTo.take(2).map(_ - closestToPairIndex)\n\
    \        (closestToPairs.min, closestToPairs.max)", "        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        (smallest, largest)", "    \
    \    val smallest = numbers.min\n        val largest = numbers.max\n        val\
    \ smallest_index = numbers.indexOf(smallest)\n        val largest_index = numbers.indexOf(largest)\n\
    \        val smallest_element = numbers(smallest_index)\n        val largest_element\
    \ = numbers(largest_index)\n        (smallest_element, largest_element)", "  \
    \      val minDistance = math.abs(numbers.min() - numbers.max())\n        val\
    \ maxDistance = math.abs(numbers.max() - numbers.min())\n        val minIndex\
    \ = numbers.indexWhere(x => math.abs(x - numbers.min()) < minDistance)\n     \
    \   val maxIndex = numbers.indexWhere(x => math.abs(x - numbers.max()) < maxDistance)\n\
    \        (numbers(minIndex), numbers(maxIndex))", "        val sortedNumbers =\
    \ numbers.sortWith(_ < _)\n        val smallest = sortedNumbers.head\n       \
    \ val largest = sortedNumbers.last\n        (smallest, largest)", "        val\
    \ minDiff = math.abs(numbers(0) - numbers(1))\n        val minDiffIndex = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(1))\n        val minDiffIndex2 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(2))\n        val minDiffIndex3 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(3))\n        val minDiffIndex4 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(4))\n        val minDiffIndex5 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(5))\n        val minDiffIndex6 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(6))\n        val minDiffIndex7 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(7))\n        val minDiffIndex8 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(8))\n        val minDiffIndex9 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(9))\n        val minDiffIndex10 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(10))\n        val minDiffIndex11 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(11))\n        val minDiffIndex12 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(12))\n        val minDiffIndex13 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(13))\n        val minDiffIndex14 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(14))\n        val minDiffIndex15 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(15))\n        val minDiffIndex16 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(16))\n        val minDiffIndex17 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(17))\n        val minDiffIndex18 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(18))\n        val minDiffIndex19 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(19))\n        val minDiffIndex20 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(20))\n        val minDiffIndex21 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(21))\n        val minDiffIndex22 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(22))\n        val minDiffIndex23 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(23))\n        val minDiffIndex24 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(24))\n        val minDiffIndex25 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(25))\n        val minDiffIndex26 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(26))\n        val minDiffIndex27 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(27))\n        val minDiffIndex28 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(28))\n        val minDiffIndex29 = math.abs(numbers.indexOf(0)\
    \ - numbers.indexOf(29))", "        val smallest = numbers.min\n        val largest\
    \ = numbers.max\n        val smallestIndex = numbers.indexOf(smallest)\n     \
    \   val largestIndex = numbers.indexOf(largest)\n        if (smallestIndex ==\
    \ largestIndex) {\n            (smallest, largest)\n        } else {\n       \
    \     (smallest, largest)\n        }", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallest = sortedNumbers.head\n\
    \        val largest = sortedNumbers.last\n        (smallest, largest)", "   \
    \     val minDiff = math.abs(numbers.head - numbers.last)\n        val minIndex\
    \ = numbers.indexWhere(x => math.abs(x - numbers.last) < minDiff)\n        (numbers.take(minIndex),\
    \ numbers.drop(minIndex))", "        val smallest = numbers.min\n        val largest\
    \ = numbers.max\n        val smallestIndex = numbers.indexOf(smallest)\n     \
    \   val largestIndex = numbers.indexOf(largest)\n        (smallest, largest)",
  "        val smallest = math.min(numbers)\n        val largest = math.max(numbers)\n\
    \        val smallest_index = numbers.indexOf(smallest)\n        val largest_index\
    \ = numbers.indexOf(largest)\n        (smallest, largest)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val minDistance = math.abs(numbers.min() - numbers.max())\n        val\
    \ minIndex = numbers.indexWhere(x => math.abs(x - numbers.min()) < minDistance)\n\
    \        val maxIndex = numbers.indexWhere(x => math.abs(x - numbers.max()) <\
    \ minDistance)\n        (numbers(minIndex), numbers(maxIndex))", "        val\
    \ smallest = math.min(numbers)\n        val largest = math.max(numbers)\n    \
    \    val smallestIndex = numbers.indexOf(smallest)\n        val largestIndex =\
    \ numbers.indexOf(largest)\n        (smallest, largest)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).getOrElse((sortedNumbers.head,sortedNumbers.last))\n\
    \        (closestPair._1, closestPair._2)", "        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val smallestIndex = numbers.indexOf(smallest)\n\
    \        val largestIndex = numbers.indexOf(largest)\n        (smallest, largest)"]
stop_tokens:
- "\n    }\n"
