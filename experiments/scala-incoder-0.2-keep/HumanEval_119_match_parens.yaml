name: HumanEval_119_match_parens
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of two strings, both strings consist of open\n    //\
  \ parentheses '(' or close parentheses ')' only.\n    // Your job is to check if\
  \ it is possible to concatenate the two strings in\n    // some order, that the\
  \ resulting string will be good.\n    // A string S is considered to be good if\
  \ and only if all parentheses in S\n    // are balanced. For example: the string\
  \ '(())()' is good, while the string\n    // '())' is not.\n    // Return 'Yes'\
  \ if there's a way to make a good string, and return 'No' otherwise.\n    // Examples:\n\
  \    // match_parens(['()(', ')']) == 'Yes'\n    // match_parens([')', ')']) ==\
  \ 'No'\n    def matchParens(lst : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(matchParens((List[String](\"\
  ()(\", \")\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\")\"\
  , \")\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(())\"\
  , \"())())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")())\"\
  , \"(()()(\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"(())))\"\
  , \"(()())((\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"()\"\
  , \"())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(\",\
  \ \"()))()\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"((((\"\
  , \"((())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(()\"\
  , \"(()(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(\", \"\
  )(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(\", \")\"))).equals((\"\
  Yes\")));\n    assert(matchParens((List[String](\")\", \"(\"))).equals((\"Yes\"\
  )));\n    }\n\n}\n"
completions: ["        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer[String]()\n        lst.foreach(x => if (x == \"(\") stack\
    \ += x else stack.pop())\n        val stackSize = stack.size\n        if (stackSize\
    \ == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n \
    \       val result = mutable.ListBuffer.empty[String]\n        lst.foreach(x =>\
    \ if (x == \"(\") stack.push(x) else stack.pop())\n        if (stack.size == 0)\
    \ \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n       \
    \ val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach { s =>\n     \
    \       s match {\n                case \")\" =>\n                    close.add\
    \ (stack.last)\n                    stack.pop\n                case \")(\"  =>\n\
    \                    stack.push (s)\n                case \")(\"  =>\n       \
    \             stack.push (s)\n                case \")(\" =>\n               \
    \     stack.push (s)\n                case \")\" =>\n                    close.add\
    \ (stack.last)\n                    stack.pop\n                case _ =>\n   \
    \                 open += s\n            }\n        }\n        if (stack.size\
    \ < 2) \"No\"\n        else {\n            val open1 = open.toList\n         \
    \   val close1 = close.toList\n            val open2 = open1.filterNot(close1.contains)\n\
    \            if (open2.size == 0) \"No\"\n            else {\n               \
    \ val open3 = open2.filterNot(open1.contains)\n                if (open3.size\
    \ == 0) \"No\"\n                else {\n                    val open4 = open3.filterNot(open1.contains)\n\
    \                    if (open4.size == 0) \"No\"\n                    else {\n\
    \                        val open5 = open4.filterNot(open1.contains)\n       \
    \                 if (open5.size == 0) \"No\"\n                        else {\n\
    \                            val open6 = open5.filterNot(open1.contains)\n   \
    \                         if (open6.size == 0) \"No\"\n                      \
    \      else {\n                                val open7 = open6.filterNot(open1.contains)\n\
    \                                if (open7.size == 0) \"No\"\n               \
    \                 else {\n                                    val open8 = open7.filterNot(open1.contains)\n\
    \                                    if (open8.size == 0) \"No\"\n           \
    \                         else {\n                                        val\
    \ open9 = open8.filterNot(open1.contains)\n                                  \
    \      if (open9.size == 0) \"No\"\n                                        else\
    \ {\n                                            val open10 = open9.filterNot(open1.contains)\n\
    \                                            if (open10.size == 0) \"No\"\n  \
    \                                          else {\n                          \
    \                      val open11 = open10.filterNot(open1.contains)\n       \
    \                                         if (open11.size == 0) \"No\"\n     \
    \                                           else {\n                         \
    \                           val open12 = open11.filterNot(open1.contains)\n  \
    \                                                  if (open12.size == 0) \"No\"\
    \n                                                    else {\n               \
    \                                         val open13 = open12.filterNot(open1.contains)\n\
    \                                                        if (open13.size == 0)\
    \ \"No\"\n                                                        else {\n   \
    \                                                         val open14 = open13.filterNot(open1.contains)\n\
    \                                                            if (open14.", " \
    \       val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        for(i <- 0 until stackSize) {\n   \
    \         val str = lst(i)\n            val open = str.indexOf(\"(\")\n      \
    \      val close = str.indexOf(\")\")\n            if(open < 0 || close < 0) {\n\
    \                result += \"No\"\n                return result.toString\n  \
    \          }\n            val openCount = stack.length\n            val closeCount\
    \ = openCount - 1\n            val openParen = str.indexOf(\"(\", open)\n    \
    \        val closeParen = str.indexOf(\")\", close)\n            val openParenCount\
    \ = openParen - open\n            val closeParenCount = closeParen - close\n \
    \           val openParenCount = openParenCount - 1\n            val closeParenCount\
    \ = closeParenCount - 1\n            val openCount = openParenCount + closeParenCount\n\
    \            val closeCount = closeParenCount + openParenCount\n            if(openCount\
    \ > closeCount) {\n                result += \"No\"\n                return result.toString\n\
    \            }\n            val openParenIndex = stack.indexOf(\"(\", openParen)\n\
    \            val closeParenIndex = stack.indexOf(\")\", closeParen)\n        \
    \    val openParenIndex = openParenIndex + 1\n            val closeParenIndex\
    \ = closeParenIndex + 1\n            val openParenCount = openParenIndex - openParen\n\
    \            val closeParenCount = closeParenIndex - closeParen\n            val\
    \ openParenCount = openParenCount - 1\n            val closeParenCount = closeParenCount\
    \ - 1\n            val openCount = openParenCount + closeParenCount\n        \
    \    val closeCount = closeParenCount + openParenCount\n            if(openCount\
    \ > closeCount) {\n                result += \"No\"\n                return result.toString\n\
    \            }\n            val openParenIndex = stack.indexOf(\"(\", openParen)\n\
    \            val closeParenIndex = stack.indexOf(\")\", closeParen)\n        \
    \    val openParenIndex = openParenIndex + 1\n            val closeParenIndex\
    \ = closeParenIndex + 1\n            val openParenCount = openParenIndex - openParen\n\
    \            val closeParenCount = closeParenIndex - closeParen\n            val\
    \ openParenCount = openParenCount - 1\n            val closeParenCount = closeParenCount\
    \ - 1\n            val openCount = openParenCount + closeParenCount\n        \
    \    val closeCount = closeParenCount + openParenCount\n            if(openCount\
    \ > closeCount) {\n                result += \"No\"\n                return result.toString\n\
    \            }\n            val openParenIndex = stack.indexOf(\"(\", openParen)\n\
    \            val closeParenIndex = stack.indexOf(\")\", closeParen)\n        \
    \    ", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            val newStr = str.substring(open + 1, close)\n            val newStack\
    \ = stack.dropRight(1)\n            val newResult = result.dropRight(1)\n    \
    \        val newStackPush = stack.push(\"(\")\n            val newResultPush =\
    \ result.push(\"(\")\n            val newStackPop = stack.pop()\n            val\
    \ newResultPop = result.pop()\n            if(newStack.isEmpty && newResult.isEmpty)\
    \ {\n                val newStackPush2 = stack.push(\"(\")\n                val\
    \ newResultPush2 = result.push(\"(\")\n                val newStackPop2 = stack.pop()\n\
    \                val newResultPop2 = result.pop()\n                if(newStackPush2\
    \ != newStackPop2 && newResultPush2 != newResultPop2) {\n                    return\
    \ \"No\"\n                }\n            }\n            if(newStackPush != newStackPop\
    \ && newResultPush != newResultPop) {\n                return \"No\"\n       \
    \     }\n            stack.push(newStr)\n            result.push(newStr)\n   \
    \     }\n        if(stack.size == 0) {\n            return \"Yes\"\n        }\n\
    \        return \"No\"", "        val stack = mutable.Stack[String]()\n      \
    \  val result = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        val openCount = mutable.ListBuffer[Int]()\n\
    \        val closeCount = mutable.ListBuffer[Int]()\n        lst.foreach { s =>\n\
    \            if (s.startsWith(\"(\")) {\n                open += s\n         \
    \       openCount += 1 \n            } else if (s.startsWith(\")\")) {\n     \
    \           close += s\n                closeCount += 1 \n            } else {\n\
    \                stack += s\n            }\n        }\n        if (openCount.sum\
    \ != closeCount.sum) {\n            return \"No\"\n        }\n        val openCount\
    \ = openCount.toList\n        val closeCount = closeCount.toList\n        val\
    \ open = open.toList\n        val close = close.toList\n        val stack = stack.toList\n\
    \        val stackSize = stack.size\n        val stackSize = stackSize.toInt\n\
    \        val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        val open = open.toList\n        val close = close.toList\n        val\
    \ stack = stack.toList\n        val stackSize = stack.size\n        val stackSize\
    \ = stackSize.toInt\n        val openCount = openCount.toList\n        val closeCount\
    \ = closeCount.toList\n        val openCount = openCount.toList\n        val closeCount\
    \ = closeCount.toList\n        val open = open.toList\n        val close = close.toList\n\
    \        val stack = stack.toList\n        val stackSize = stack.size\n      \
    \  val stackSize = stackSize.toInt\n        val openCount = openCount.toList\n\
    \        val closeCount = closeCount.toList\n        val openCount = openCount.toList\n\
    \        val closeCount = closeCount.toList\n        val open = open.toList\n\
    \        val close = close.toList\n        val stack = stack.toList\n        val\
    \ stackSize = stack.size\n        val stackSize = stackSize.toInt\n        val\
    \ openCount = openCount.toList\n        val closeCount = closeCount.toList\n \
    \       val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        val open = open.toList\n        val close = close.toList\n        val\
    \ stack = stack", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            x match {\n                case \")\" => {\n                    close.push(x)\n\
    \                }\n                case \")(\" => {\n                    open.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")\" => {\n                    val str\
    \ = stack.pop()\n                    val openStr = open.pop()\n              \
    \      val closeStr = close.pop()\n                    val newStr = str + openStr\
    \ + closeStr\n                    result.add(newStr)\n                }\n    \
    \            case _ => {\n                    stack.push(x)\n                }\n\
    \            }\n        })\n        if (close.isEmpty) {\n            return \"\
    No\"\n        }\n        if (open.isEmpty) {\n            return \"Yes\"\n   \
    \     }\n        if (close.size == open.size) {\n            return \"Yes\"\n\
    \        }\n        return \"No\"", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.length){\n            val str = lst(i)\n            if(str == \"(\"){\n\
    \                stack.push(str)\n            }else if(str == \")\"){\n      \
    \          val top = stack.pop()\n                if(top == str){\n          \
    \          result += \"Yes\"\n                }else{\n                    result\
    \ += \"No\"\n                }\n            }else{\n                result +=\
    \ \"No\"\n            }\n        }\n        result.mkString(\",\")", "       \
    \ val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        lst.foreach(x => x\
    \ match {\n            case x if x.startsWith(\"(\") => stack += x\n         \
    \   case x if x.startsWith(\")\") => queue += x\n            case x => result\
    \ += x\n        })\n        val stackSize = stack.size\n        val queueSize\
    \ = queue.size\n        val isGood = stackSize == queueSize\n        if (isGood)\
    \ {\n            val stack = stack.drop(stackSize)\n            val queue = queue.drop(queueSize)\n\
    \            val stackStr = stack.toList\n            val queueStr = queue.toList\n\
    \            val stackStrSize = stackStr.size\n            val queueStrSize =\
    \ queueStr.size\n            val isGood = stackStrSize == queueStrSize\n     \
    \       if (isGood) {\n                val stackStr = stackStr.drop(stackStrSize\
    \ - 1)\n                val queueStr = queueStr.drop(queueStrSize - 1)\n     \
    \           val stackStrSize = stackStr.size\n                val queueStrSize\
    \ = queueStr.size\n                val isGood = stackStrSize == queueStrSize\n\
    \                if (isGood) {\n                    val stackStr = stackStr.drop(stackStrSize\
    \ - 1)\n                    val queueStr = queueStr.drop(queueStrSize - 1)\n \
    \                   val stackStrSize = stackStr.size\n                    val\
    \ queueStrSize = queueStr.size\n                    val isGood = stackStrSize\
    \ == queueStrSize\n                    if (isGood) {\n                       \
    \ val stackStr = stackStr.drop(stackStrSize - 1)\n                        val\
    \ queueStr = queueStr.drop(queueStrSize - 1)\n                        val stackStrSize\
    \ = stackStr.size\n                        val queueStrSize = queueStr.size\n\
    \                        val isGood = stackStrSize == queueStrSize\n         \
    \               if (isGood) {\n                            val stackStr = stackStr.drop(stackStrSize\
    \ - 1)\n                            val queueStr = queueStr.drop(queueStrSize\
    \ - 1)\n                            val stackStrSize = stackStr.size\n       \
    \                     val queueStrSize = queueStr.size\n                     \
    \       val isGood = stackStrSize == queueStrSize\n                          \
    \  if (isGood) {\n                                val stackStr = stackStr.drop(stackStrSize\
    \ - 1)\n                                val queueStr = queueStr.drop(queueStrSize\
    \ - 1)\n                                val stackStrSize = stackStr.size\n   \
    \                             val queueStrSize = queueStr.size\n             \
    \                   val isGood = stackStrSize == queueStrSize\n              \
    \                  if (is", "        val stack = mutable.Stack[String]()\n   \
    \     val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => close.push(x)\n                case \")(\"  => open.push(x)\n           \
    \     case \")()\" => stack.push(x)\n                case \")()()\" => stack.push(x)\n\
    \                case \")(\" => close.push(x)\n                case \")()\" =>\
    \ open.push(x)\n                case _ => stack.push(x)\n            }\n     \
    \   })\n        val openCount = open.size\n        val closeCount = close.size\n\
    \        if (openCount == closeCount) {\n            val openStack = stack.take(openCount)\n\
    \            val closeStack = stack.drop(closeCount)\n            val openStackSize\
    \ = openStack.size\n            val closeStackSize = closeStack.size\n       \
    \     if (openStackSize == closeStackSize) {\n                val openStack =\
    \ stack.take(openStackSize)\n                val closeStack = stack.drop(closeStackSize)\n\
    \                val openStackSize = openStack.size\n                val closeStackSize\
    \ = closeStack.size\n                if (openStackSize == closeStackSize) {\n\
    \                    val openStack = stack.take(openStackSize)\n             \
    \       val closeStack = stack.drop(closeStackSize)\n                    val openStackSize\
    \ = openStack.size\n                    val closeStackSize = closeStack.size\n\
    \                    if (openStackSize == closeStackSize) {\n                \
    \        val openStack = stack.take(openStackSize)\n                        val\
    \ closeStack = stack.drop(closeStackSize)\n                        val openStackSize\
    \ = openStack.size\n                        val closeStackSize = closeStack.size\n\
    \                        if (openStackSize == closeStackSize) {\n            \
    \                val openStack = stack.take(openStackSize)\n                 \
    \           val closeStack = stack.drop(closeStackSize)\n                    \
    \        val openStackSize = openStack.size\n                            val closeStackSize\
    \ = closeStack.size\n                            if (openStackSize == closeStackSize)\
    \ {\n                                val openStack = stack.take(openStackSize)\n\
    \                                val closeStack = stack.drop(closeStackSize)\n\
    \                                val openStackSize = openStack.size\n        \
    \                        val closeStackSize = closeStack.size\n              \
    \                  if (openStackSize == closeStackSize) {\n                  \
    \                  val openStack = stack.take(openStackSize)\n               \
    \                     val closeStack = stack.drop(closeStackSize)\n          \
    \                          val openStackSize = openStack.size\n              \
    \                      val closeStack", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       if (x == \"(\") open += x\n            else if (x == \")\") close += x\n\
    \            else stack += x\n        })\n        if (open.size == 0 && close.size\
    \ == 0) \"No\"\n        else if (open.size == 0 && close.size > 0) \"Yes\"\n \
    \       else if (open.size > 0 && close.size == 0) \"No\"\n        else if (open.size\
    \ > 0 && close.size > 0) \"Yes\"\n        else matchParens(stack.toList)", " \
    \       val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open < 0 || close < 0) {\n                result.append(\"No\"\
    )\n            } else {\n                val openCount = stack.length\n      \
    \          val closeCount = stack.length\n                stack.push(str)\n  \
    \              while(openCount > 0 && closeCount > 0) {\n                    val\
    \ open = stack.pop()\n                    val close = stack.pop()\n          \
    \          if(open != close) {\n                        result.append(\"No\")\n\
    \                        return\n                    }\n                    openCount\
    \ -= 1\n                    closeCount -= 1\n                }\n             \
    \   result.append(\"Yes\")\n            }\n        }\n        result.mkString(\"\
    ,\")", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            if (x == \"(\") stack.push(x)\n     \
    \       if (x == \"(\") stack += x\n            if (x == \")\") stack -= x\n \
    \           if (x == \")\") result += stack.toList\n        })\n        if (result.size\
    \ == lst.length) result.mkString(\"(\", \")\")\n        else result.mkString(\"\
    (\", \")\", \"(\", \")\")", "        val stack = mutable.Stack[String]()\n   \
    \     val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stackSize2 = stackSize * stackSize\n        val stackSize3 = stackSize2\
    \ * stackSize\n        val stackSize4 = stackSize3 * stackSize\n        val stackSize5\
    \ = stackSize4 * stackSize\n        val stackSize6 = stackSize5 * stackSize\n\
    \        val stackSize7 = stackSize6 * stackSize\n        val stackSize8 = stackSize7\
    \ * stackSize\n        val stackSize9 = stackSize8 * stackSize\n        val stackSize10\
    \ = stackSize9 * stackSize\n        val stackSize11 = stackSize10 * stackSize\n\
    \        val stackSize12 = stackSize11 * stackSize\n        val stackSize13 =\
    \ stackSize12 * stackSize\n        val stackSize14 = stackSize13 * stackSize\n\
    \        val stackSize15 = stackSize14 * stackSize\n        val stackSize16 =\
    \ stackSize15 * stackSize\n        val stackSize17 = stackSize16 * stackSize\n\
    \        val stackSize18 = stackSize17 * stackSize\n        val stackSize19 =\
    \ stackSize18 * stackSize\n        val stackSize20 = stackSize19 * stackSize\n\
    \        val stackSize21 = stackSize20 * stackSize\n        val stackSize22 =\
    \ stackSize21 * stackSize\n        val stackSize23 = stackSize22 * stackSize\n\
    \        val stackSize24 = stackSize23 * stackSize\n        val stackSize25 =\
    \ stackSize24 * stackSize\n        val stackSize26 = stackSize25 * stackSize\n\
    \        val stackSize27 = stackSize26 * stackSize\n        val stackSize28 =\
    \ stackSize27 * stackSize\n        val stackSize29 = stackSize28 * stackSize\n\
    \        val stackSize30 = stackSize29 * stackSize\n        val stackSize31 =\
    \ stackSize30 * stackSize\n        val stackSize32 = stackSize31 * stackSize\n\
    \        val stackSize33 = stackSize32 * stackSize\n        val stackSize34 =\
    \ stackSize33 * stackSize\n        val stackSize35 = stackSize34 * stackSize\n\
    \        val stackSize36 = stackSize35 * stackSize\n        val stackSize37 =\
    \ stackSize36 * stackSize\n        val stackSize38 = stackSize37 * stackSize\n\
    \        val stackSize39 = stackSize38 * stackSize\n        val stackSize", " \
    \       val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            val len = open - close\n            if(len > 0) {\n           \
    \     stack.push(str)\n                while(stack.size > 0 && stack.head != str)\
    \ {\n                    val top = stack.pop()\n                    if(top.length\
    \ == len) {\n                        result += (top + str.substring(close+1))\n\
    \                    }\n                }\n            }\n        }\n        if(result.size\
    \ == lst.size) {\n            val str = result.mkString\n            if(str.contains(\"\
    (\") && str.contains(\")\")) {\n                return \"Yes\"\n            }\
    \ else {\n                return \"No\"\n            }\n        } else {\n   \
    \         return \"No\"\n        }", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stackSize2 = stackSize * stackSize\n        val stackSize3 = stackSize2\
    \ * stackSize\n        val stackSize4 = stackSize3 * stackSize\n        val stackSize5\
    \ = stackSize4 * stackSize\n        val stackSize6 = stackSize5 * stackSize\n\
    \        val stackSize7 = stackSize6 * stackSize\n        val stackSize8 = stackSize7\
    \ * stackSize\n        val stackSize9 = stackSize8 * stackSize\n        val stackSize10\
    \ = stackSize9 * stackSize\n        val stackSize11 = stackSize10 * stackSize\n\
    \        val stackSize12 = stackSize11 * stackSize\n        val stackSize13 =\
    \ stackSize12 * stackSize\n        val stackSize14 = stackSize13 * stackSize\n\
    \        val stackSize15 = stackSize14 * stackSize\n        val stackSize16 =\
    \ stackSize15 * stackSize\n        val stackSize17 = stackSize16 * stackSize\n\
    \        val stackSize18 = stackSize17 * stackSize\n        val stackSize19 =\
    \ stackSize18 * stackSize\n        val stackSize20 = stackSize19 * stackSize\n\
    \        val stackSize21 = stackSize20 * stackSize\n        val stackSize22 =\
    \ stackSize21 * stackSize\n        val stackSize23 = stackSize22 * stackSize\n\
    \        val stackSize24 = stackSize23 * stackSize\n        val stackSize25 =\
    \ stackSize24 * stackSize\n        val stackSize26 = stackSize25 * stackSize\n\
    \        val stackSize27 = stackSize26 * stackSize\n        val stackSize28 =\
    \ stackSize27 * stackSize\n        val stackSize29 = stackSize28 * stackSize\n\
    \        val stackSize30 = stackSize29 * stackSize\n        val stackSize31 =\
    \ stackSize30 * stackSize\n        val stackSize32 = stackSize31 * stackSize\n\
    \        val stackSize33 = stackSize32 * stackSize\n        val stackSize34 =\
    \ stackSize33 * stackSize\n        val stackSize35 = stackSize34 * stackSize\n\
    \        val stackSize36 = stackSize35 * stackSize\n        val stackSize37 =\
    \ stackSize36 * stackSize\n        val stackSize38 = stackSize37 * stackSize\n\
    \        val stackSize39 = stackSize38 * stackSize\n        val stackSize", " \
    \       val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4"]
stop_tokens:
- "\n    }\n"
