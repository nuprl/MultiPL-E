name: HumanEval_119_match_parens
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of two strings, both strings consist of open\n    //\
  \ parentheses '(' or close parentheses ')' only.\n    // Your job is to check if\
  \ it is possible to concatenate the two strings in\n    // some order, that the\
  \ resulting string will be good.\n    // A string S is considered to be good if\
  \ and only if all parentheses in S\n    // are balanced. For example: the string\
  \ '(())()' is good, while the string\n    // '())' is not.\n    // Return 'Yes'\
  \ if there's a way to make a good string, and return 'No' otherwise.\n    // Examples:\n\
  \    // match_parens(['()(', ')']) == 'Yes'\n    // match_parens([')', ')']) ==\
  \ 'No'\n    def matchParens(lst : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(matchParens((List[String](\"\
  ()(\", \")\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\")\"\
  , \")\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(())\"\
  , \"())())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")())\"\
  , \"(()()(\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"(())))\"\
  , \"(()())((\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"()\"\
  , \"())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(\",\
  \ \"()))()\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"((((\"\
  , \"((())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(()\"\
  , \"(()(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(\", \"\
  )(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(\", \")\"))).equals((\"\
  Yes\")));\n    assert(matchParens((List[String](\")\", \"(\"))).equals((\"Yes\"\
  )));\n    }\n\n}\n"
completions: ["        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer[String]()\n        lst.foreach(x => if (x == \"(\") stack\
    \ += x else stack.pop())\n        val stackSize = stack.size\n        if (stackSize\
    \ == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n \
    \       val result = mutable.ListBuffer.empty[String]\n        lst.foreach(x =>\
    \ if (x == \"(\") stack.push(x) else stack.pop())\n        if (stack.size == 0)\
    \ \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n       \
    \ val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach { s =>\n     \
    \       s match {\n                case \")\" =>\n                    close.add\
    \ (stack.last)\n                    stack.pop\n                case \")(\"  =>\n\
    \                    stack.push (s)\n                case \")(\"  =>\n       \
    \             stack.push (s)\n                case \")(\" =>\n               \
    \     stack.push (s)\n                case \")\" =>\n                    close.add\
    \ (stack.last)\n                    stack.pop\n                case _ =>\n   \
    \                 open += s\n            }\n        }\n        if (stack.size\
    \ < 2) \"No\"\n        else {\n            val open1 = open.toList\n         \
    \   val close1 = close.toList\n            val open2 = open1.filterNot(close1.contains)\n\
    \            if (open2.size == 0) \"No\"\n            else {\n               \
    \ val open3 = open2.filterNot(open1.contains)\n                if (open3.size\
    \ == 0) \"No\"\n                else {\n                    val open4 = open3.filterNot(open1.contains)\n\
    \                    if (open4.size == 0) \"No\"\n                    else {\n\
    \                        val open5 = open4.filterNot(open1.contains)\n       \
    \                 if (open5.size == 0) \"No\"\n                        else {\n\
    \                            val open6 = open5.filterNot(open1.contains)\n   \
    \                         if (open6.size == 0) \"No\"\n                      \
    \      else {\n                                val open7 = open6.filterNot(open1.contains)\n\
    \                                if (open7.size == 0) \"No\"\n               \
    \                 else {\n                                    val open8 = open7.filterNot(open1.contains)\n\
    \                                    if (open8.size == 0) \"No\"\n           \
    \                         else {\n                                        val\
    \ open9 = open8.filterNot(open1.contains)\n                                  \
    \      if (open9.size == 0) \"No\"\n                                        else\
    \ {\n                                            val open10 = open9.filterNot(open1.contains)\n\
    \                                            if (open10.size == 0) \"No\"\n  \
    \                                          else {\n                          \
    \                      val open11 = open10.filterNot(open1.contains)\n       \
    \                                         if (open11.size == 0) \"No\"\n     \
    \                                           else {\n                         \
    \                           val open12 = open11.filterNot(open1.contains)\n  \
    \                                                  if (open12.size == 0) \"No\"\
    \n                                                    else {\n               \
    \                                         val open13 = open12.filterNot(open1.contains)\n\
    \                                                        if (open13.size == 0)\
    \ \"No\"\n                                                        else {\n   \
    \                                                         val open14 = open13.filterNot(open1.contains)\n\
    \                                                            if (open14.", " \
    \       val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        for(i <- 0 until stackSize) {\n   \
    \         val str = lst(i)\n            val open = str.indexOf(\"(\")\n      \
    \      val close = str.indexOf(\")\")\n            if(open < 0 || close < 0) {\n\
    \                result += \"No\"\n                return result.toString\n  \
    \          }\n            val openCount = stack.length\n            val closeCount\
    \ = openCount - 1\n            val openParen = str.indexOf(\"(\", open)\n    \
    \        val closeParen = str.indexOf(\")\", close)\n            val openParenCount\
    \ = openParen - open\n            val closeParenCount = closeParen - close\n \
    \           val openParenCount = openParenCount - 1\n            val closeParenCount\
    \ = closeParenCount - 1\n            val openCount = openParenCount + closeParenCount\n\
    \            val closeCount = closeParenCount + openParenCount\n            if(openCount\
    \ > closeCount) {\n                result += \"No\"\n                return result.toString\n\
    \            }\n            val openParenIndex = stack.indexOf(\"(\", openParen)\n\
    \            val closeParenIndex = stack.indexOf(\")\", closeParen)\n        \
    \    val openParenIndex = openParenIndex + 1\n            val closeParenIndex\
    \ = closeParenIndex + 1\n            val openParenCount = openParenIndex - openParen\n\
    \            val closeParenCount = closeParenIndex - closeParen\n            val\
    \ openParenCount = openParenCount - 1\n            val closeParenCount = closeParenCount\
    \ - 1\n            val openCount = openParenCount + closeParenCount\n        \
    \    val closeCount = closeParenCount + openParenCount\n            if(openCount\
    \ > closeCount) {\n                result += \"No\"\n                return result.toString\n\
    \            }\n            val openParenIndex = stack.indexOf(\"(\", openParen)\n\
    \            val closeParenIndex = stack.indexOf(\")\", closeParen)\n        \
    \    val openParenIndex = openParenIndex + 1\n            val closeParenIndex\
    \ = closeParenIndex + 1\n            val openParenCount = openParenIndex - openParen\n\
    \            val closeParenCount = closeParenIndex - closeParen\n            val\
    \ openParenCount = openParenCount - 1\n            val closeParenCount = closeParenCount\
    \ - 1\n            val openCount = openParenCount + closeParenCount\n        \
    \    val closeCount = closeParenCount + openParenCount\n            if(openCount\
    \ > closeCount) {\n                result += \"No\"\n                return result.toString\n\
    \            }\n            val openParenIndex = stack.indexOf(\"(\", openParen)\n\
    \            val closeParenIndex = stack.indexOf(\")\", closeParen)\n        \
    \    ", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            val newStr = str.substring(open + 1, close)\n            val newStack\
    \ = stack.dropRight(1)\n            val newResult = result.dropRight(1)\n    \
    \        val newStackPush = stack.push(\"(\")\n            val newResultPush =\
    \ result.push(\"(\")\n            val newStackPop = stack.pop()\n            val\
    \ newResultPop = result.pop()\n            if(newStack.isEmpty && newResult.isEmpty)\
    \ {\n                val newStackPush2 = stack.push(\"(\")\n                val\
    \ newResultPush2 = result.push(\"(\")\n                val newStackPop2 = stack.pop()\n\
    \                val newResultPop2 = result.pop()\n                if(newStackPush2\
    \ != newStackPop2 && newResultPush2 != newResultPop2) {\n                    return\
    \ \"No\"\n                }\n            }\n            if(newStackPush != newStackPop\
    \ && newResultPush != newResultPop) {\n                return \"No\"\n       \
    \     }\n            stack.push(newStr)\n            result.push(newStr)\n   \
    \     }\n        if(stack.size == 0) {\n            return \"Yes\"\n        }\n\
    \        return \"No\"", "        val stack = mutable.Stack[String]()\n      \
    \  val result = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        val openCount = mutable.ListBuffer[Int]()\n\
    \        val closeCount = mutable.ListBuffer[Int]()\n        lst.foreach { s =>\n\
    \            if (s.startsWith(\"(\")) {\n                open += s\n         \
    \       openCount += 1 \n            } else if (s.startsWith(\")\")) {\n     \
    \           close += s\n                closeCount += 1 \n            } else {\n\
    \                stack += s\n            }\n        }\n        if (openCount.sum\
    \ != closeCount.sum) {\n            return \"No\"\n        }\n        val openCount\
    \ = openCount.toList\n        val closeCount = closeCount.toList\n        val\
    \ open = open.toList\n        val close = close.toList\n        val stack = stack.toList\n\
    \        val stackSize = stack.size\n        val stackSize = stackSize.toInt\n\
    \        val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        val open = open.toList\n        val close = close.toList\n        val\
    \ stack = stack.toList\n        val stackSize = stack.size\n        val stackSize\
    \ = stackSize.toInt\n        val openCount = openCount.toList\n        val closeCount\
    \ = closeCount.toList\n        val openCount = openCount.toList\n        val closeCount\
    \ = closeCount.toList\n        val open = open.toList\n        val close = close.toList\n\
    \        val stack = stack.toList\n        val stackSize = stack.size\n      \
    \  val stackSize = stackSize.toInt\n        val openCount = openCount.toList\n\
    \        val closeCount = closeCount.toList\n        val openCount = openCount.toList\n\
    \        val closeCount = closeCount.toList\n        val open = open.toList\n\
    \        val close = close.toList\n        val stack = stack.toList\n        val\
    \ stackSize = stack.size\n        val stackSize = stackSize.toInt\n        val\
    \ openCount = openCount.toList\n        val closeCount = closeCount.toList\n \
    \       val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        val open = open.toList\n        val close = close.toList\n        val\
    \ stack = stack", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            x match {\n                case \")\" => {\n                    close.push(x)\n\
    \                }\n                case \")(\" => {\n                    open.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")\" => {\n                    val str\
    \ = stack.pop()\n                    val openStr = open.pop()\n              \
    \      val closeStr = close.pop()\n                    val newStr = str + openStr\
    \ + closeStr\n                    result.add(newStr)\n                }\n    \
    \            case _ => {\n                    stack.push(x)\n                }\n\
    \            }\n        })\n        if (close.isEmpty) {\n            return \"\
    No\"\n        }\n        if (open.isEmpty) {\n            return \"Yes\"\n   \
    \     }\n        if (close.size == open.size) {\n            return \"Yes\"\n\
    \        }\n        return \"No\"", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.length){\n            val str = lst(i)\n            if(str == \"(\"){\n\
    \                stack.push(str)\n            }else if(str == \")\"){\n      \
    \          val top = stack.pop()\n                if(top == str){\n          \
    \          result += \"Yes\"\n                }else{\n                    result\
    \ += \"No\"\n                }\n            }else{\n                result +=\
    \ \"No\"\n            }\n        }\n        result.mkString(\",\")", "       \
    \ val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        lst.foreach(x => x\
    \ match {\n            case x if x.startsWith(\"(\") => stack += x\n         \
    \   case x if x.startsWith(\")\") => queue += x\n            case x => result\
    \ += x\n        })\n        val stackSize = stack.size\n        val queueSize\
    \ = queue.size\n        val isGood = stackSize == queueSize\n        if (isGood)\
    \ {\n            val stack = stack.drop(stackSize)\n            val queue = queue.drop(queueSize)\n\
    \            val stackStr = stack.toList\n            val queueStr = queue.toList\n\
    \            val stackStrSize = stackStr.size\n            val queueStrSize =\
    \ queueStr.size\n            val isGood = stackStrSize == queueStrSize\n     \
    \       if (isGood) {\n                val stackStr = stackStr.drop(stackStrSize\
    \ - 1)\n                val queueStr = queueStr.drop(queueStrSize - 1)\n     \
    \           val stackStrSize = stackStr.size\n                val queueStrSize\
    \ = queueStr.size\n                val isGood = stackStrSize == queueStrSize\n\
    \                if (isGood) {\n                    val stackStr = stackStr.drop(stackStrSize\
    \ - 1)\n                    val queueStr = queueStr.drop(queueStrSize - 1)\n \
    \                   val stackStrSize = stackStr.size\n                    val\
    \ queueStrSize = queueStr.size\n                    val isGood = stackStrSize\
    \ == queueStrSize\n                    if (isGood) {\n                       \
    \ val stackStr = stackStr.drop(stackStrSize - 1)\n                        val\
    \ queueStr = queueStr.drop(queueStrSize - 1)\n                        val stackStrSize\
    \ = stackStr.size\n                        val queueStrSize = queueStr.size\n\
    \                        val isGood = stackStrSize == queueStrSize\n         \
    \               if (isGood) {\n                            val stackStr = stackStr.drop(stackStrSize\
    \ - 1)\n                            val queueStr = queueStr.drop(queueStrSize\
    \ - 1)\n                            val stackStrSize = stackStr.size\n       \
    \                     val queueStrSize = queueStr.size\n                     \
    \       val isGood = stackStrSize == queueStrSize\n                          \
    \  if (isGood) {\n                                val stackStr = stackStr.drop(stackStrSize\
    \ - 1)\n                                val queueStr = queueStr.drop(queueStrSize\
    \ - 1)\n                                val stackStrSize = stackStr.size\n   \
    \                             val queueStrSize = queueStr.size\n             \
    \                   val isGood = stackStrSize == queueStrSize\n              \
    \                  if (is", "        val stack = mutable.Stack[String]()\n   \
    \     val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => close.push(x)\n                case \")(\"  => open.push(x)\n           \
    \     case \")()\" => stack.push(x)\n                case \")()()\" => stack.push(x)\n\
    \                case \")(\" => close.push(x)\n                case \")()\" =>\
    \ open.push(x)\n                case _ => stack.push(x)\n            }\n     \
    \   })\n        val openCount = open.size\n        val closeCount = close.size\n\
    \        if (openCount == closeCount) {\n            val openStack = stack.take(openCount)\n\
    \            val closeStack = stack.drop(closeCount)\n            val openStackSize\
    \ = openStack.size\n            val closeStackSize = closeStack.size\n       \
    \     if (openStackSize == closeStackSize) {\n                val openStack =\
    \ stack.take(openStackSize)\n                val closeStack = stack.drop(closeStackSize)\n\
    \                val openStackSize = openStack.size\n                val closeStackSize\
    \ = closeStack.size\n                if (openStackSize == closeStackSize) {\n\
    \                    val openStack = stack.take(openStackSize)\n             \
    \       val closeStack = stack.drop(closeStackSize)\n                    val openStackSize\
    \ = openStack.size\n                    val closeStackSize = closeStack.size\n\
    \                    if (openStackSize == closeStackSize) {\n                \
    \        val openStack = stack.take(openStackSize)\n                        val\
    \ closeStack = stack.drop(closeStackSize)\n                        val openStackSize\
    \ = openStack.size\n                        val closeStackSize = closeStack.size\n\
    \                        if (openStackSize == closeStackSize) {\n            \
    \                val openStack = stack.take(openStackSize)\n                 \
    \           val closeStack = stack.drop(closeStackSize)\n                    \
    \        val openStackSize = openStack.size\n                            val closeStackSize\
    \ = closeStack.size\n                            if (openStackSize == closeStackSize)\
    \ {\n                                val openStack = stack.take(openStackSize)\n\
    \                                val closeStack = stack.drop(closeStackSize)\n\
    \                                val openStackSize = openStack.size\n        \
    \                        val closeStackSize = closeStack.size\n              \
    \                  if (openStackSize == closeStackSize) {\n                  \
    \                  val openStack = stack.take(openStackSize)\n               \
    \                     val closeStack = stack.drop(closeStackSize)\n          \
    \                          val openStackSize = openStack.size\n              \
    \                      val closeStack", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       if (x == \"(\") open += x\n            else if (x == \")\") close += x\n\
    \            else stack += x\n        })\n        if (open.size == 0 && close.size\
    \ == 0) \"No\"\n        else if (open.size == 0 && close.size > 0) \"Yes\"\n \
    \       else if (open.size > 0 && close.size == 0) \"No\"\n        else if (open.size\
    \ > 0 && close.size > 0) \"Yes\"\n        else matchParens(stack.toList)", " \
    \       val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open < 0 || close < 0) {\n                result.append(\"No\"\
    )\n            } else {\n                val openCount = stack.length\n      \
    \          val closeCount = stack.length\n                stack.push(str)\n  \
    \              while(openCount > 0 && closeCount > 0) {\n                    val\
    \ open = stack.pop()\n                    val close = stack.pop()\n          \
    \          if(open != close) {\n                        result.append(\"No\")\n\
    \                        return\n                    }\n                    openCount\
    \ -= 1\n                    closeCount -= 1\n                }\n             \
    \   result.append(\"Yes\")\n            }\n        }\n        result.mkString(\"\
    ,\")", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            if (x == \"(\") stack.push(x)\n     \
    \       if (x == \"(\") stack += x\n            if (x == \")\") stack -= x\n \
    \           if (x == \")\") result += stack.toList\n        })\n        if (result.size\
    \ == lst.length) result.mkString(\"(\", \")\")\n        else result.mkString(\"\
    (\", \")\", \"(\", \")\")", "        val stack = mutable.Stack[String]()\n   \
    \     val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stackSize2 = stackSize * stackSize\n        val stackSize3 = stackSize2\
    \ * stackSize\n        val stackSize4 = stackSize3 * stackSize\n        val stackSize5\
    \ = stackSize4 * stackSize\n        val stackSize6 = stackSize5 * stackSize\n\
    \        val stackSize7 = stackSize6 * stackSize\n        val stackSize8 = stackSize7\
    \ * stackSize\n        val stackSize9 = stackSize8 * stackSize\n        val stackSize10\
    \ = stackSize9 * stackSize\n        val stackSize11 = stackSize10 * stackSize\n\
    \        val stackSize12 = stackSize11 * stackSize\n        val stackSize13 =\
    \ stackSize12 * stackSize\n        val stackSize14 = stackSize13 * stackSize\n\
    \        val stackSize15 = stackSize14 * stackSize\n        val stackSize16 =\
    \ stackSize15 * stackSize\n        val stackSize17 = stackSize16 * stackSize\n\
    \        val stackSize18 = stackSize17 * stackSize\n        val stackSize19 =\
    \ stackSize18 * stackSize\n        val stackSize20 = stackSize19 * stackSize\n\
    \        val stackSize21 = stackSize20 * stackSize\n        val stackSize22 =\
    \ stackSize21 * stackSize\n        val stackSize23 = stackSize22 * stackSize\n\
    \        val stackSize24 = stackSize23 * stackSize\n        val stackSize25 =\
    \ stackSize24 * stackSize\n        val stackSize26 = stackSize25 * stackSize\n\
    \        val stackSize27 = stackSize26 * stackSize\n        val stackSize28 =\
    \ stackSize27 * stackSize\n        val stackSize29 = stackSize28 * stackSize\n\
    \        val stackSize30 = stackSize29 * stackSize\n        val stackSize31 =\
    \ stackSize30 * stackSize\n        val stackSize32 = stackSize31 * stackSize\n\
    \        val stackSize33 = stackSize32 * stackSize\n        val stackSize34 =\
    \ stackSize33 * stackSize\n        val stackSize35 = stackSize34 * stackSize\n\
    \        val stackSize36 = stackSize35 * stackSize\n        val stackSize37 =\
    \ stackSize36 * stackSize\n        val stackSize38 = stackSize37 * stackSize\n\
    \        val stackSize39 = stackSize38 * stackSize\n        val stackSize", " \
    \       val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            val len = open - close\n            if(len > 0) {\n           \
    \     stack.push(str)\n                while(stack.size > 0 && stack.head != str)\
    \ {\n                    val top = stack.pop()\n                    if(top.length\
    \ == len) {\n                        result += (top + str.substring(close+1))\n\
    \                    }\n                }\n            }\n        }\n        if(result.size\
    \ == lst.size) {\n            val str = result.mkString\n            if(str.contains(\"\
    (\") && str.contains(\")\")) {\n                return \"Yes\"\n            }\
    \ else {\n                return \"No\"\n            }\n        } else {\n   \
    \         return \"No\"\n        }", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stackSize2 = stackSize * stackSize\n        val stackSize3 = stackSize2\
    \ * stackSize\n        val stackSize4 = stackSize3 * stackSize\n        val stackSize5\
    \ = stackSize4 * stackSize\n        val stackSize6 = stackSize5 * stackSize\n\
    \        val stackSize7 = stackSize6 * stackSize\n        val stackSize8 = stackSize7\
    \ * stackSize\n        val stackSize9 = stackSize8 * stackSize\n        val stackSize10\
    \ = stackSize9 * stackSize\n        val stackSize11 = stackSize10 * stackSize\n\
    \        val stackSize12 = stackSize11 * stackSize\n        val stackSize13 =\
    \ stackSize12 * stackSize\n        val stackSize14 = stackSize13 * stackSize\n\
    \        val stackSize15 = stackSize14 * stackSize\n        val stackSize16 =\
    \ stackSize15 * stackSize\n        val stackSize17 = stackSize16 * stackSize\n\
    \        val stackSize18 = stackSize17 * stackSize\n        val stackSize19 =\
    \ stackSize18 * stackSize\n        val stackSize20 = stackSize19 * stackSize\n\
    \        val stackSize21 = stackSize20 * stackSize\n        val stackSize22 =\
    \ stackSize21 * stackSize\n        val stackSize23 = stackSize22 * stackSize\n\
    \        val stackSize24 = stackSize23 * stackSize\n        val stackSize25 =\
    \ stackSize24 * stackSize\n        val stackSize26 = stackSize25 * stackSize\n\
    \        val stackSize27 = stackSize26 * stackSize\n        val stackSize28 =\
    \ stackSize27 * stackSize\n        val stackSize29 = stackSize28 * stackSize\n\
    \        val stackSize30 = stackSize29 * stackSize\n        val stackSize31 =\
    \ stackSize30 * stackSize\n        val stackSize32 = stackSize31 * stackSize\n\
    \        val stackSize33 = stackSize32 * stackSize\n        val stackSize34 =\
    \ stackSize33 * stackSize\n        val stackSize35 = stackSize34 * stackSize\n\
    \        val stackSize36 = stackSize35 * stackSize\n        val stackSize37 =\
    \ stackSize36 * stackSize\n        val stackSize38 = stackSize37 * stackSize\n\
    \        val stackSize39 = stackSize38 * stackSize\n        val stackSize", " \
    \       val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => x match {\n            case x if x == \")\" => close.add(x)\n\
    \            case x if x == \"(\" => open.add(x)\n            case _ => stack\
    \ += x\n        })\n        val openCount = open.size\n        val closeCount\
    \ = close.size\n        if (openCount == closeCount) {\n            result +=\
    \ \"Yes\"\n        } else {\n            result += \"No\"\n        }\n       \
    \ result.toString()", "        val stack = mutable.Stack[String]()\n        val\
    \ stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n        \
    \    x match {\n                case \")\" => {\n                    stack.pop()\n\
    \                }\n                case \")()\" => {\n                    stack\
    \ += x\n                }\n                case \")(\" => {\n                \
    \    stack += x\n                }\n                case _ => {\n            \
    \        stack += x\n                }\n            }\n        })\n        stack.toList\
    \ match {\n            case Nil => {\n                result.add(\"Yes\")\n  \
    \          }\n            case _ => {\n                result.add(\"No\")\n  \
    \          }\n        }", "        val stack = mutable.Stack[String]()\n     \
    \   val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => x match {\n            case x if x startsWith \"(\"\
    \ => open.push(x)\n            case x if x startsWith \")\" => close.push(x)\n\
    \            case _ => stack.push(x)\n        })\n        val openCount = open.size\n\
    \        val closeCount = close.size\n        if (openCount == 0 || closeCount\
    \ == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n \
    \       val result = mutable.ListBuffer.empty[String]\n        val stackSize =\
    \ lst.size\n        for(i <- 0 until stackSize) {\n            val str = lst(i)\n\
    \            val open = str.indexOf(\"(\")\n            val close = str.indexOf(\"\
    )\")\n            if(open < 0 || close < 0) {\n                result.append(\"\
    No\")\n                return result.toString()\n            }\n            val\
    \ openCount = stackSize - open\n            val closeCount = close - open\n  \
    \          if(openCount > closeCount) {\n                result.append(\"No\"\
    )\n                return result.toString()\n            }\n            val openParen\
    \ = str.substring(0, open)\n            val closeParen = str.substring(close)\n\
    \            val openParenCount = openParen.length\n            val closeParenCount\
    \ = closeParen.length\n            val openParenStack = stack.take(openParenCount)\n\
    \            val closeParenStack = stack.drop(closeParenCount)\n            val\
    \ newStack = openParenStack ++ closeParenStack\n            val newStackSize =\
    \ newStack.size\n            val newStackStr = newStack.mkString(\"(\", \")\"\
    )\n            if(newStackStr == str) {\n                result.append(\"Yes\"\
    )\n                return result.toString()\n            }\n            stack\
    \ += newStack\n        }\n        result.append(\"No\")\n        return result.toString()",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach { s =>\n            val open = s.indexOf(\"(\")\n       \
    \     val close = s.indexOf(\")\")\n            if (open < 0 || close < 0) return\n\
    \            if (open > close) return\n            if (open > stack.size) {\n\
    \                stack += s\n            } else {\n                val top = stack.pop()\n\
    \                if (top != s) {\n                    result += \"No\"\n     \
    \               return\n                }\n            }\n        }\n        result\
    \ += \"Yes\"", "        val stack = mutable.Stack[String]()\n        val stack2\
    \ = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n  \
    \      val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            if (x == \"(\") open += x\n         \
    \   if (x == \")\") close += x\n            if (open.contains(x)) stack += x\n\
    \            if (close.contains(x)) stack -= x\n        })\n        if (stack.size\
    \ == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n \
    \       val result = mutable.ListBuffer.empty[String]\n        val stackSize =\
    \ lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n", "    \
    \    val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.Set[String]()\n        lst.foreach(x => if (x == \"\
    (\") stack += x else if (!x == \"(\") queue += x else ())\n        while (stack.nonEmpty\
    \ || queue.nonEmpty) {\n            val x = stack.pop() match {\n            \
    \    case \")\" => good.remove(x)\n                case \")(\"  => stack += x\n\
    \                case \")(\" => queue += x\n                case _ => ()\n   \
    \         }\n        }\n        if (good.size == 0) \"No\" else \"Yes\"", "  \
    \      val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val open = str.indexOf(\"(\")\n\
    \            val close = str.indexOf(\")\")\n            if(open < 0 || close\
    \ < 0) {\n                result.append(\"No\")\n            } else {\n      \
    \          val openCount = stack.length\n                val closeCount = stack.length\n\
    \                while(open < close && openCount > 0 && closeCount > 0) {\n  \
    \                  if(openCount > closeCount) {\n                        stack.pop\n\
    \                        openCount -= 1\n                    } else {\n      \
    \                  stack.pop\n                        closeCount -= 1\n      \
    \              }\n                }\n                if(openCount > closeCount)\
    \ {\n                    stack.append(str)\n                } else {\n       \
    \             result.append(\"Yes\")\n                }\n            }\n     \
    \   }\n        result.mkString(\",\")", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        lst.foreach(x\
    \ => {\n            if (x == \"(\") {\n                stack.push(x)\n       \
    \     } else if (x == \")\") {\n                if (stack.nonEmpty) {\n      \
    \              val top = stack.pop()\n                    if (top == \"(\") {\n\
    \                        result += \"(\" + top + \")\"\n                    }\
    \ else {\n                        result += \"(\" + top + \")\"\n            \
    \        }\n                } else {\n                    result += \"(\" + x\
    \ + \")\"\n                }\n            }\n        })\n        if (result.nonEmpty)\
    \ {\n            val last = result.last\n            if (last.startsWith(\"(\"\
    ) && last.endsWith(\")\")) {\n                result.last = \"Yes\"\n        \
    \    } else {\n                result.last = \"No\"\n            }\n        }\n\
    \        result.last", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val open = str.indexOf(\"(\")\n\
    \            val close = str.indexOf(\")\")\n            if(open != -1 && close\
    \ != -1) {\n                val stackStr = str.substring(open + 1, close)\n  \
    \              if(!stackStr.isEmpty) {\n                    stack.push(stackStr)\n\
    \                }\n                val newStr = str.substring(0, open) + str.substring(close\
    \ + 1)\n                if(!stackStr.isEmpty && newStr != str) {\n           \
    \         result.add(\"No\")\n                    return result.toString\n   \
    \             }\n            }\n        }\n        result.add(\"Yes\")\n     \
    \   return result.toString", "        val stack = mutable.Stack[String]()\n  \
    \      val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            val newStr = str.substring(open + 1, close)\n            val newStack\
    \ = stack.dropRight(1)\n            val newResult = result.dropRight(1)\n    \
    \        val newStackPush = stack.push(newStr)\n            val newResultPush\
    \ = result.push(newStr)\n            val newStackPop = stack.pop()\n         \
    \   val newResultPop = result.pop()\n            val newStackEmpty = stack.isEmpty\n\
    \            val newResultEmpty = result.isEmpty\n            val newStackEmptyOrPop\
    \ = stack.isEmpty || stack.pop() == newStr\n            val newResultEmptyOrPop\
    \ = result.isEmpty || result.pop() == newStr\n            val newStackEmptyOrPopOrPush\
    \ = newStackEmpty || newStackPop == newStr\n            val newResultEmptyOrPopOrPush\
    \ = newResultEmpty || newResultPop == newStr\n            val newStackEmptyOrPopOrPushOrPop\
    \ = newStackEmptyOrPop || newStackPush == newStr\n            val newResultEmptyOrPopOrPushOrPop\
    \ = newResultEmptyOrPop || newResultPush == newStr\n            val newStackEmptyOrPopOrPushOrPopOrPush\
    \ = newStackEmptyOrPopOrPush || newStackPop == newStr || newStackPush == newStr\n\
    \            val newResultEmptyOrPopOrPushOrPopOrPush = newResultEmptyOrPopOrPush\
    \ || newResultPop == newStr || newResultPush == newStr\n            val newStackEmptyOrPopOrPushOrPopOrPush\
    \ = newStackEmptyOrPopOrPushOrPop || newStackPush == newStr || newStackPop ==\
    \ newStr || newStackPush == newStr || newStackPop == newStr\n            val newResultEmptyOrPopOrPushOrPopOrPush\
    \ = newResultEmptyOrPopOrPushOrPop || newResultPush == newStr || newResultPop\
    \ == newStr || newResultPush == newStr || newResultPop == newStr || newResultPush\
    \ == newStr\n            val newStackEmptyOrPopOrPushOrPopOrPushOrPush = newStackEmptyOrPopOrPushOrPopOrPush\
    \ || newStackPush == newStr || newStackPop == newStr || newStackPush == newStr\
    \ || newStackPop == newStr || newStackPush", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stackSize2 = stackSize * stackSize\n        val stackSize3 = stackSize2\
    \ * stackSize\n        val stackSize4 = stackSize3 * stackSize\n        val stackSize5\
    \ = stackSize4 * stackSize\n        val stackSize6 = stackSize5 * stackSize\n\
    \        val stackSize7 = stackSize6 * stackSize\n        val stackSize8 = stackSize7\
    \ * stackSize\n        val stackSize9 = stackSize8 * stackSize\n        val stackSize10\
    \ = stackSize9 * stackSize\n        val stackSize11 = stackSize10 * stackSize\n\
    \        val stackSize12 = stackSize11 * stackSize\n        val stackSize13 =\
    \ stackSize12 * stackSize\n        val stackSize14 = stackSize13 * stackSize\n\
    \        val stackSize15 = stackSize14 * stackSize\n        val stackSize16 =\
    \ stackSize15 * stackSize\n        val stackSize17 = stackSize16 * stackSize\n\
    \        val stackSize18 = stackSize17 * stackSize\n        val stackSize19 =\
    \ stackSize18 * stackSize\n        val stackSize20 = stackSize19 * stackSize\n\
    \        val stackSize21 = stackSize20 * stackSize\n        val stackSize22 =\
    \ stackSize21 * stackSize\n        val stackSize23 = stackSize22 * stackSize\n\
    \        val stackSize24 = stackSize23 * stackSize\n        val stackSize25 =\
    \ stackSize24 * stackSize\n        val stackSize26 = stackSize25 * stackSize\n\
    \        val stackSize27 = stackSize26 * stackSize\n        val stackSize28 =\
    \ stackSize27 * stackSize\n        val stackSize29 = stackSize28 * stackSize\n\
    \        val stackSize30 = stackSize29 * stackSize\n        val stackSize31 =\
    \ stackSize30 * stackSize\n        val stackSize32 = stackSize31 * stackSize\n\
    \        val stackSize33 = stackSize32 * stackSize\n        val stackSize34 =\
    \ stackSize33 * stackSize\n        val stackSize35 = stackSize34 * stackSize\n\
    \        val stackSize36 = stackSize35 * stackSize\n        val stackSize37 =\
    \ stackSize36 * stackSize\n        val stackSize38 = stackSize37 * stackSize\n\
    \        val stackSize39 = stackSize38 * stackSize\n        val stackSize", " \
    \       val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => x match {\n            case x if x == \")\" => close.push(x)\n\
    \            case x if x == \")()\" => close.push(x)\n            case x if x\
    \ == \"()\" => open.push(x)\n            case x if x == \")(\" => open.push(x)\n\
    \            case x if x == \")()()\" => open.push(x)\n            case x if x\
    \ == \")(\" => stack.push(x)\n            case x if x == \")()\" => stack.push(x)\n\
    \            case x if x == \")()()\" => stack.push(x)\n            case x if\
    \ x == \")(\" => stack.push(x)\n            case x if x == \")()()\" => stack.push(x)\n\
    \            case x if x == \")(\" => stack.push(x)\n            case x if x ==\
    \ \")()()\" => stack.push(x)\n            case x if x == \")(\" => stack.push(x)\n\
    \            case x if x == \")()()\" => stack.push(x)\n            case x if\
    \ x == \")(\" => stack.push(x)\n            case x if x == \")()()\" => stack.push(x)\n\
    \            case x if x == \")(\" => stack.push(x)\n            case x if x ==\
    \ \")()()\" => stack.push(x)\n            case x if x == \")(\" => stack.push(x)\n\
    \            case x if x == \")()()\" => stack.push(x)\n            case x if\
    \ x == \")(\" => stack.push(x)\n            case x if x == \")()()\" => stack.push(x)\n\
    \            case x if x == \")(\" => stack.push(x)\n            case x if x ==\
    \ \")()()\" => stack.push(x)\n            case x if x == \")(\" => stack.push(x)\n\
    \            case x if x == \")()()\" => stack.push(x)\n            case x if\
    \ x == \")(\" => stack.push(x)\n            case x if x == \")()()\" => stack.push(x)\n\
    \            case x if x == \")(\" => stack.push(x)\n            case x if x ==\
    \ \")()()\" => stack.push(x)\n            case x if x == \")(\" => stack.push(x)\n\
    \            case x if x == \")()()\" => stack.push(x)\n            case x if\
    \ x == \")(\" => stack.push(x)\n            case x if x == \")()()\" => stack.push(x)\n\
    \            case x if x == \")(\" => stack.push(x)\n            case x if x ==\
    \ \")()()\" => stack.push(x)\n            case x if x == \")", "        val stack\
    \ = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            if (x == \"(\") open += x\n         \
    \   if (x == \")\") close += x\n            if (open.isEmpty && close.isEmpty)\
    \ result += \"Yes\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"No\"\n            if (close.isEmpty && !open.isEmpty) result += \"No\"\n \
    \           if (open.isEmpty && close.isEmpty) result += \"No\"\n            if\
    \ (open.isEmpty && !close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && close.isEmpty) result += \"No\"\n            if (open.isEmpty && !close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && close.isEmpty) result += \"\
    No\"\n            if (open.isEmpty && !close.isEmpty) result += \"No\"\n     \
    \       if (open.isEmpty && close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && !close.isEmpty) result += \"No\"\n            if (open.isEmpty && close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"No\"\n            if (open.isEmpty && close.isEmpty) result += \"No\"\n  \
    \          if (open.isEmpty && !close.isEmpty) result += \"No\"\n            if\
    \ (open.isEmpty && close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && !close.isEmpty) result += \"No\"\n            if (open.isEmpty && close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"No\"\n            if (open.isEmpty && close.isEmpty) result += \"No\"\n  \
    \          if (open.isEmpty && !close.isEmpty) result += \"No\"\n            if\
    \ (open.isEmpty && close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && !close.isEmpty) result += \"No\"\n            if (open.isEmpty && close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"No\"\n            if (open.isEmpty && close.isEmpty) result += \"No\"\n  \
    \          if (open.isEmpty && !close.isEmpty) result += \"No\"\n            if\
    \ (open.isEmpty && close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && !close.isEmpty) result += \"No\"\n            if (open.isEmpty && close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"No\"\n            if (open.isEmpty && close", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n  \
    \      val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n", "        val stack\
    \ = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach { s =>\n            val open = s.indexOf(\"(\")\n       \
    \     val close = s.indexOf(\")\")\n            if (open < 0 || close < 0) {\n\
    \                result += \"No\"\n            } else {\n                result\
    \ += \"Yes\"\n                stack.push(s)\n                while (open >= 0\
    \ && close >= 0) {\n                    if (open < close) {\n                \
    \        result += \"Yes\"\n                        stack.push(s.substring(0,\
    \ open))\n                        open -= 1\n                    } else {\n  \
    \                      result += \"No\"\n                        stack.push(s.substring(0,\
    \ close))\n                        close -= 1\n                    }\n       \
    \         }\n                stack.pop\n            }\n        }\n        result.toString",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach { s =>\n            val open = s.indexOf(\"(\")\n       \
    \     val close = s.indexOf(\")\")\n            if (open < 0 || close < 0) return\n\
    \            if (open > close) {\n                stack.push(s)\n            }\
    \ else {\n                val left = stack.pop()\n                val right =\
    \ s.substring(open + 1, close)\n                val newLeft = left + right\n \
    \               val newRight = right + left\n                if (newLeft.length\
    \ == newRight.length) {\n                    result += (newLeft + newRight)\n\
    \                } else {\n                    result += (newLeft + newRight)\n\
    \                }\n            }\n        }\n        if (result.isEmpty) \"No\"\
    \ else \"Yes\"", "        val stack = mutable.Stack[String]()\n        val stack2\
    \ = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n  \
    \      val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open < 0 || close < 0) {\n                result += \"No\"\n\
    \            } else {\n                val newStack = mutable.Stack[String]()\n\
    \                val newResult = mutable.ListBuffer.empty[String]\n          \
    \      for(j <- 0 until open) {\n                    newStack += str.substring(0,\
    \ j)\n                }\n                for(j <- open until close) {\n      \
    \              newStack += str.substring(j, close + 1)\n                }\n  \
    \              for(j <- close + 1 until str.length) {\n                    newStack\
    \ += str.substring(j, str.length)\n                }\n                for(j <-\
    \ 0 until newStack.size) {\n                    newResult += newStack(j)\n   \
    \             }\n                stack += newStack\n                result +=\
    \ newResult\n            }\n        }\n        if(stack.size == 0) {\n       \
    \     result += \"No\"\n        } else {\n            result += \"Yes\"\n    \
    \    }\n        return result.toString()", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.length)\
    \ {\n            val str = lst(i)\n            if(str == \"(\") {\n          \
    \      stack.push(str)\n            } else if(str == \")\") {\n              \
    \  val str = stack.pop()\n                if(str != \"\") {\n                \
    \    result += \"(\" + str + \")\"\n                }\n            }\n       \
    \ }\n        if(result.size == lst.length) result.mkString(\"Yes\") else \"No\"",
  "        val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val result = mutable.Queue[String]()\n        val open = mutable.HashSet[String]()\n\
    \        val close = mutable.HashSet[String]()\n        lst.foreach(x => {\n \
    \           x match {\n                case \")\" => close.add(x)\n          \
    \      case \")(\"  => open.add(x)\n                case \")(\"  => open.add(x)\n\
    \                case \")(\"  => open.add(x)\n                case \")(\"  =>\
    \ open.add(x)\n                case \")(\"  => open.add(x)\n                case\
    \ \")(\"  => open.add(x)\n                case \")(\"  => open.add(x)\n      \
    \          case \")(\"  => open.add(x)\n                case \")(\"  => open.add(x)\n\
    \                case \")(\"  => open.add(x)\n                case \")(\"  =>\
    \ open.add(x)\n                case \")(\"  => open.add(x)\n                case\
    \ \")(\"  => open.add(x)\n                case \")(\"  => open.add(x)\n      \
    \          case \")(\"  => open.add(x)\n                case \")(\"  => open.add(x)\n\
    \                case \")(\"  => open.add(x)\n                case \")(\"  =>\
    \ open.add(x)\n                case \")(\"  => open.add(x)\n                case\
    \ \")(\"  => open.add(x)\n                case \")(\"  => open.add(x)\n      \
    \          case \")(\"  => open.add(x)\n                case \")(\"  => open.add(x)\n\
    \                case \")(\"  => open.add(x)\n                case \")(\"  =>\
    \ open.add(x)\n                case \")(\"  => open.add(x)\n                case\
    \ \")(\"  => open.add(x)\n                case \")(\"  => open.add(x)\n      \
    \          case \")(\"  => open.add(x)\n                case \")(\"  => open.add(x)\n\
    \                case \")(\"  => open.add(x)\n                case \")(\"  =>\
    \ open.add(x)\n                case \")(\"  => open.add(x)\n                case\
    \ \")(\"  => open.add(x)\n                case \")(\"  => open.add(x)\n      \
    \          case \")(\"  => open.add(x)\n                case \")(\"  => open.add(x)\n\
    \                case \")(\"  => open.add(x)\n                case \")(\"  =>\
    \ open.add(x)\n                case \")(\"  => open.add(x)\n                case\
    \ \")(\"  => open.add(x)\n                case \")(\"  => open.add(x)\n      \
    \          case \")(\"  => open.add(x)\n                case \")(\"  => open.add(x)\n\
    \                case \")(\"  => open.add(x)\n                case \")(\"  =>\
    \ open.add(x)\n                case \")(\"  => open.add(x)\n                case\
    \ \")(\"  => open.add(x)\n", "        val stack = mutable.Stack[String]()\n  \
    \      val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.HashSet[String]()\n        val close = mutable.HashSet[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => close.add(x)\n                case \")(\"  => open.add(x)\n             \
    \   case \")()\" => open.add(x)\n                case \")()()\" => open.add(x)\n\
    \                case _ => stack += x\n            }\n        })\n        val\
    \ openCount = open.size\n        val closeCount = close.size\n        if (openCount\
    \ == closeCount) {\n            val openList = open.iterator\n            val\
    \ closeList = close.iterator\n            while (openList.hasNext && closeList.hasNext)\
    \ {\n                val open = openList.next()\n                val close = closeList.next()\n\
    \                val openCount = open.size\n                val closeCount = close.size\n\
    \                if (openCount == closeCount) {\n                    val openList\
    \ = open.iterator\n                    val closeList = close.iterator\n      \
    \              while (openList.hasNext && closeList.hasNext) {\n             \
    \           val open = openList.next()\n                        val close = closeList.next()\n\
    \                        val openCount = open.size\n                        val\
    \ closeCount = close.size\n                        if (openCount == closeCount)\
    \ {\n                            val openList = open.iterator\n              \
    \              val closeList = close.iterator\n                            while\
    \ (openList.hasNext && closeList.hasNext) {\n                                val\
    \ open = openList.next()\n                                val close = closeList.next()\n\
    \                                val openCount = open.size\n                 \
    \               val closeCount = close.size\n                                if\
    \ (openCount == closeCount) {\n                                    val openList\
    \ = open.iterator\n                                    val closeList = close.iterator\n\
    \                                    while (openList.hasNext && closeList.hasNext)\
    \ {\n                                        val open = openList.next()\n    \
    \                                    val close = closeList.next()\n          \
    \                              val openCount = open.size\n                   \
    \                     val closeCount = close.size\n                          \
    \              if (openCount == closeCount) {\n                              \
    \              val openList = open.iterator\n                                \
    \            val closeList = close.iterator\n                                \
    \            while (openList.hasNext && closeList.hasNext) {\n               \
    \                                 val open = openList.next()\n               \
    \                                 val close = closeList.next()\n             \
    \                                   val openCount = open.size\n              \
    \                                  val closeCount = close.size\n             \
    \                                   if (openCount == closeCount) {\n         \
    \                                           val openList = open.iterator\n   \
    \                                                 val closeList = close.iterator\n\
    \                                                    while (openList.hasNext &&\
    \ closeList.hasNext) {\n                                                     \
    \   val open = openList.next()\n                                             \
    \           val close = closeList.next()\n                                   \
    \                     val openCount = ", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val open = str.indexOf('(')\n \
    \           val close = str.indexOf(')')\n            val left = str.substring(0,\
    \ open)\n            val right = str.substring(open + 1, close)\n            val\
    \ newStack = stack.dropRight(1).dropRight(1)\n            val newResult = result.dropRight(1).dropRight(1)\n\
    \            val newLeft = left + newStack.mkString\n            val newRight\
    \ = right + newResult.mkString\n            val newStr = newLeft + newRight\n\
    \            if(newStr != str) {\n                stack.push(str)\n          \
    \      result.push(newStr)\n            }\n        }\n        if(stack.size ==\
    \ 0) {\n            \"No\"\n        } else {\n            \"Yes\"\n        }",
  "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ queue = mutable.Queue[String]()\n        val good = mutable.Set[String]()\n\
    \        lst.foreach(x => if (x == \"(\") stack += x else if (!x == \"(\") queue\
    \ += x else ())\n        val goodString = if (stack.size == 0) \"No\" else \"\
    Yes\"\n        val goodString = if (queue.size == 0) \"No\" else \"Yes\"\n   \
    \     goodString", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.length){\n    \
    \        val str = lst(i)\n            if(str == \"(\"){\n                stack\
    \ += str\n            }else if(str == \")\"){\n                if(stack.size ==\
    \ 0){\n                    result += \"No\"\n                }else{\n        \
    \            result += \"Yes\"\n                }\n                stack -= str\n\
    \            }\n        }\n        if(result.size == 0){\n            result +=\
    \ \"No\"\n        }\n        result.toString", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val open = str.indexOf(\"(\")\n\
    \            val close = str.indexOf(\")\")\n            if(open < 0 || close\
    \ < 0) {\n                result += \"No\"\n            } else {\n           \
    \     val stackStr = str.substring(open + 1, close)\n                val stackSize\
    \ = stack.size\n                if(stackSize > 0) {\n                    result\
    \ += \"No\"\n                } else {\n                    stack += str\n    \
    \                result += \"Yes\"\n                }\n            }\n       \
    \ }\n        result.mkString", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        lst.foreach(x\
    \ => stack += x)\n        while(stack.nonEmpty) {\n            val x = stack.pop()\n\
    \            val y = stack.pop()\n            val z = x + y\n            result\
    \ += (if (z.length == x.length) z else z + \")\")\n        }\n        if (result.nonEmpty)\
    \ result.head\n        else \"No\"", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n  \
    \      for(i <- 0 until stackSize) {\n            val str = lst(i)\n         \
    \   val open = str.indexOf('(')\n            val close = str.indexOf(')')\n  \
    \          val newStr = str.substring(open + 1, close)\n            val newStack\
    \ = stack.dropRight(1).dropRight(1)\n            val newResult = result.dropRight(1).dropRight(1)\n\
    \            val newStackSize = newStack.size()\n            val newResultSize\
    \ = newResult.size()\n            val newStackIsEmpty = newStackSize == 0\n  \
    \          val newResultIsEmpty = newResultSize == 0\n            val newStackIsFull\
    \ = newStackSize == stackSize\n            val newResultIsFull = newResultSize\
    \ == stackSize\n            val newStackIsEmptyOrFull = newStackIsEmpty || newStackIsFull\n\
    \            val newResultIsEmptyOrFull = newResultIsEmpty || newResultIsFull\n\
    \            val newStackIsFullOrEmpty = newStackIsFull || newStackIsEmpty\n \
    \           val newResultIsFullOrEmpty = newResultIsFull || newResultIsEmpty\n\
    \            val newStackIsEmptyOrFullOrEmpty = newStackIsEmptyOrFull || newStackIsEmptyOrEmpty\n\
    \            val newResultIsEmptyOrFullOrEmpty = newResultIsEmptyOrFull || newResultIsEmptyOrEmpty\n\
    \            val newStackIsFullOrEmptyOrEmpty = newStackIsFullOrEmpty || newStackIsEmptyOrFullOrEmpty\n\
    \            val newResultIsFullOrEmptyOrEmpty = newResultIsFullOrEmpty || newResultIsEmptyOrFullOrEmpty\n\
    \            val newStackIsEmptyOrFullOrEmptyOrEmpty = newStackIsEmptyOrFullOrEmptyOrEmpty\
    \ || newStackIsEmptyOrFullOrEmpty\n            val newResultIsEmptyOrFullOrEmptyOrEmpty\
    \ = newResultIsEmptyOrFullOrEmptyOrEmpty || newResultIsEmptyOrFullOrEmptyOrEmpty\n\
    \            val newStackIsFullOrEmptyOrEmptyOrEmpty = newStackIsFullOrEmptyOrEmptyOrEmpty\
    \ || newStackIsFullOrEmptyOrEmptyOrEmpty\n            val newResultIsFullOrEmptyOrEmptyOrEmpty\
    \ = newResultIsFullOrEmptyOrEmptyOrEmpty || newResultIsFullOrEmptyOrEmptyOrEmpty\n\
    \            val newStackIsEmptyOrFullOrEmptyOrEmptyOrEmpty = newStackIsEmptyOrFullOrEmptyOrEmptyOrEmpty\
    \ || newStackIsEmptyOrFull", "        val stack = mutable.Stack[String]()\n  \
    \      val result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.size) {\n            val str = lst(i)\n            val open = str.indexOf(\"\
    (\")\n            val close = str.indexOf(\")\")\n            if(open < 0 || close\
    \ < 0) {\n                result.append(\"No\")\n            } else {\n      \
    \          val left = str.substring(0, open)\n                val right = str.substring(close\
    \ + 1)\n                val newStr = left + right\n                if(!stack.contains(newStr))\
    \ {\n                    result.append(\"Yes\")\n                } else {\n  \
    \                  result.append(\"No\")\n                }\n                stack\
    \ += newStr\n            }\n        }\n        result.toString()", "        val\
    \ stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    if(str == \"(\") {\n                stack.push(str)\n            } else if(str\
    \ == \")\") {\n                val top = stack.pop()\n                if(top ==\
    \ \"(\") {\n                    result += \"(\"\n                } else {\n  \
    \                  result += \"(\"\n                    result += top\n      \
    \          }\n            } else {\n                result += \"(\"\n        \
    \        result += str\n                result += \"(\"\n                stack.push(str)\n\
    \            }\n        }\n        if(stack.size == 0) {\n            \"No\"\n\
    \        } else {\n            \"Yes\"\n        }", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.length) {\n            val str = lst(i)\n      \
    \      val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open < 0 || close < 0) {\n                result.append(\"No\"\
    )\n            } else {\n                val openStr = str.substring(0, open)\n\
    \                val closeStr = str.substring(close+1, str.length)\n         \
    \       val newStr = openStr + closeStr\n                stack += newStr\n   \
    \         }\n        }\n        if(stack.size == 0) {\n            result.append(\"\
    Yes\")\n        } else {\n            result.append(\"No\")\n        }\n     \
    \   return result.toString()", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        val open = mutable.ListBuffer.empty[String]\n        val close = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => {\n                    close.push(x)\n                }\n               \
    \ case \")(\" => {\n                    open.push(x)\n                }\n    \
    \            case \")(\" => {\n                    stack.push(x)\n           \
    \     }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stackSize2 = stackSize * stackSize\n\
    \        val stackSize3 = stackSize2 * stackSize\n        val stackSize4 = stackSize3\
    \ * stackSize\n        val stackSize5 = stackSize4 * stackSize\n        val stackSize6\
    \ = stackSize5 * stackSize\n        val stackSize7 = stackSize6 * stackSize\n\
    \        val stackSize8 = stackSize7 * stackSize\n        val stackSize9 = stackSize8\
    \ * stackSize\n        val stackSize10 = stackSize9 * stackSize\n        val stackSize11\
    \ = stackSize10 * stackSize\n        val stackSize12 = stackSize11 * stackSize\n\
    \        val stackSize13 = stackSize12 * stackSize\n        val stackSize14 =\
    \ stackSize13 * stackSize\n        val stackSize15 = stackSize14 * stackSize\n\
    \        val stackSize16 = stackSize15 * stackSize\n        val stackSize17 =\
    \ stackSize16 * stackSize\n        val stackSize18 = stackSize17 * stackSize\n\
    \        val stackSize19 = stackSize18 * stackSize\n        val stackSize20 =\
    \ stackSize19 * stackSize\n        val stackSize21 = stackSize20 * stackSize\n\
    \        val stackSize22 = stackSize21 * stackSize\n        val stackSize23 =\
    \ stackSize22 * stackSize\n        val stackSize24 = stackSize23 * stackSize\n\
    \        val stackSize25 = stackSize24 * stackSize\n        val stackSize26 =\
    \ stackSize25 * stackSize\n        val stackSize27 = stackSize26 * stackSize\n\
    \        val stackSize28 = stackSize27 * stackSize\n        val stackSize29 =\
    \ stackSize28 * stackSize\n        val stackSize30 = stackSize29 * stackSize\n\
    \        val stackSize31 = stackSize30 * stackSize\n        val stackSize32 =\
    \ stackSize31 * stackSize\n        val stackSize33 = stackSize32 * stackSize\n\
    \        val stackSize34 = stackSize33 * stackSize\n        val stackSize35 =\
    \ stackSize34 * stackSize\n        val stackSize36 = stackSize35 * stackSize\n\
    \        val stackSize37 = stackSize36 * stackSize\n        val stackSize38 =\
    \ stackSize37 * stackSize\n        val stackSize39 = stackSize38 * stackSize\n\
    \        val stackSize", "        val stack = mutable.Stack[String]()\n      \
    \  val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       if (x == \"(\") open += x\n            if (x == \")\") close += x\n  \
    \          if (open.isEmpty && close.isEmpty) result += \"Yes\"\n            if\
    \ (open.isEmpty && close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && !close.isEmpty) result += \"No\"\n            if (open.isEmpty && close.isEmpty)\
    \ result += \"Yes\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"Yes\"\n            if (open.isEmpty && !close.isEmpty) result += \"No\"\n\
    \            if (open.isEmpty && close.isEmpty) result += \"No\"\n           \
    \ if (open.isEmpty && !close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && !close.isEmpty) result += \"Yes\"\n            if (open.isEmpty && close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"No\"\n            if (open.isEmpty && !close.isEmpty) result += \"Yes\"\n\
    \            if (open.isEmpty && close.isEmpty) result += \"No\"\n           \
    \ if (open.isEmpty && !close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && !close.isEmpty) result += \"Yes\"\n            if (open.isEmpty && close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"No\"\n            if (open.isEmpty && !close.isEmpty) result += \"Yes\"\n\
    \            if (open.isEmpty && close.isEmpty) result += \"No\"\n           \
    \ if (open.isEmpty && !close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && !close.isEmpty) result += \"Yes\"\n            if (open.isEmpty && close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"No\"\n            if (open.isEmpty && !close.isEmpty) result += \"Yes\"\n\
    \            if (open.isEmpty && close.isEmpty) result += \"No\"\n           \
    \ if (open.isEmpty && !close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && !close.isEmpty) result += \"Yes\"\n            if (open.isEmpty && close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"No\"\n            if (open.isEmpty && !close.isEmpty) result += \"Yes\"\n\
    \            if (open.isEmpty && close.isEmpty) result += \"No\"\n           \
    \ if (open.isEmpty && !close", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.length){\n\
    \            val str = lst(i)\n            val open = str.indexOf(\"(\")\n   \
    \         val close = str.indexOf(\")\")\n            val left = str.substring(0,\
    \ open)\n            val right = str.substring(open + 1, close)\n            val\
    \ newStr = left + right + \")\"\n            val newStack = stack.push(newStr)\n\
    \            val newResult = result.push(newStack.mkString)\n            if(newResult.size\
    \ == lst.length){\n                val newStack = stack.pop()\n              \
    \  val newResult = result.pop()\n                if(newStack == newResult){\n\
    \                    return \"Yes\"\n                }\n            }\n      \
    \  }\n        return \"No\"", "        val stack = mutable.Stack[String]()\n \
    \       val result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.length){\n            val str = lst(i)\n            val open = str.indexOf(\"\
    (\")\n            val close = str.indexOf(\")\")\n            if(open < 0 || close\
    \ < 0){\n                return \"No\"\n            }\n            val openCount\
    \ = stack.length\n            val closeCount = stack.length\n            val openParen\
    \ = open - 1\n            val closeParen = close + 1\n            while(openCount\
    \ > 0 && closeCount > 0 && openParen < closeParen){\n                val openParenCount\
    \ = stack.length\n                val closeParenCount = stack.length\n       \
    \         val openParenStr = stack.pop()\n                val closeParenStr =\
    \ stack.pop()\n                if(openParenStr == closeParenStr){\n          \
    \          openCount -= 1\n                    closeCount -= 1\n             \
    \   }\n                else if(openParenStr < closeParenStr){\n              \
    \      openCount -= 1\n                }\n                else{\n            \
    \        closeCount -= 1\n                }\n                openParen -= 1\n\
    \                closeParen += 1\n            }\n            if(openCount > closeCount){\n\
    \                result += \"Yes\"\n            }\n            else{\n       \
    \         result += \"No\"\n            }\n            stack.push(str)\n     \
    \   }\n        return result.toString()", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       x match {\n                case \")\" =>\n                    close.synchronized\
    \ {\n                        stack.pop() match {\n                           \
    \ case Some(closing) => result += closing\n                            case None\
    \ => result += x\n                        }\n                    }\n         \
    \       case \")(\" =>\n                    open.synchronized {\n            \
    \            stack.pop() match {\n                            case Some(opening)\
    \ => result += opening\n                            case None => result += x\n\
    \                        }\n                    }\n                case \")(\"\
    \ =>\n                    open.synchronized {\n                        stack.pop()\
    \ match {\n                            case Some(opening) => result += opening\n\
    \                            case None => result += x\n                      \
    \  }\n                    }\n                case \")(\" =>\n                \
    \    open.synchronized {\n                        stack.pop() match {\n      \
    \                      case Some(opening) => result += opening\n             \
    \               case None => result += x\n                        }\n        \
    \            }\n                case \")(\" =>\n                    open.synchronized\
    \ {\n                        stack.pop() match {\n                           \
    \ case Some(opening) => result += opening\n                            case None\
    \ => result += x\n                        }\n                    }\n         \
    \       case \")(\" =>\n                    open.synchronized {\n            \
    \            stack.pop() match {\n                            case Some(opening)\
    \ => result += opening\n                            case None => result += x\n\
    \                        }\n                    }\n                case \")(\"\
    \ =>\n                    open.synchronized {\n                        stack.pop()\
    \ match {\n                            case Some(opening) => result += opening\n\
    \                            case None => result += x\n                      \
    \  }\n                    }\n                case \")(\" =>\n                \
    \    open.synchronized {\n                        stack.pop() match {\n      \
    \                      case Some(opening) => result += opening\n             \
    \               case None => result += x\n                        }\n        \
    \            }\n                case \")(\" =>\n                    open.synchronized\
    \ {\n                        stack.pop() match {\n                           \
    \ case Some(opening) => result += opening\n                            case None\
    \ => result += x\n                        }\n                    }\n         \
    \       case \")(\" =>\n                    open.synchronized {\n            \
    \            stack.pop() match {\n                            case Some(opening)\
    \ => result += opening\n                            case None => result += x\n\
    \                        }\n                    }\n                case \")(\"\
    \ =>\n                    open.synchronized {\n                        stack.pop()\
    \ match {\n                            case Some(opening) => result += opening\n\
    \                            case None => result += x\n                      \
    \  }\n                    }\n                case \")(", "        val stack =\
    \ mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            val newStr = str.substring(open + 1, close)\n            val newStack\
    \ = stack.dropRight(open).reverse\n            val newResult = result.dropRight(open).reverse\n\
    \            val newStack2 = stack.dropRight(close).reverse\n            val newResult2\
    \ = result.dropRight(close).reverse\n            val newStack3 = stack.dropRight(open\
    \ + 1).reverse\n            val newResult3 = result.dropRight(open + 1).reverse\n\
    \            val newStack4 = stack.dropRight(close + 1).reverse\n            val\
    \ newResult4 = result.dropRight(close + 1).reverse\n            val newStack5\
    \ = stack.dropRight(open + 2).reverse\n            val newResult5 = result.dropRight(open\
    \ + 2).reverse\n            val newStack6 = stack.dropRight(close + 2).reverse\n\
    \            val newResult6 = result.dropRight(close + 2).reverse\n          \
    \  val newStack7 = stack.dropRight(open + 3).reverse\n            val newResult7\
    \ = result.dropRight(open + 3).reverse\n            val newStack8 = stack.dropRight(close\
    \ + 3).reverse\n            val newResult8 = result.dropRight(close + 3).reverse\n\
    \            val newStack9 = stack.dropRight(open + 4).reverse\n            val\
    \ newResult9 = result.dropRight(open + 4).reverse\n            val newStack10\
    \ = stack.dropRight(close + 4).reverse\n            val newResult10 = result.dropRight(close\
    \ + 4).reverse\n            val newStack11 = stack.dropRight(open + 5).reverse\n\
    \            val newResult11 = result.dropRight(open + 5).reverse\n          \
    \  val newStack12 = stack.dropRight(close + 5).reverse\n            val newResult12\
    \ = result.dropRight(close + 5).reverse\n            val newStack13 = stack.dropRight(open\
    \ + 6).reverse\n            val newResult13 = result.dropRight(open + 6).reverse\n\
    \            val newStack14 = stack.dropRight(close + 6).reverse\n           \
    \ val newResult14 = result.dropRight(close + 6).reverse\n            val newStack15\
    \ = stack.dropRight(open + 7).reverse\n            val newResult15 = result.dropRight(open\
    \ + 7).reverse\n            val newStack16 = ", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            x match {\n                case \")\" => {\n                    stack.pop()\n\
    \                }\n                case \")()\" => {\n                    stack.pop()\n\
    \                    stack.pop()\n                }\n                case \")(\"\
    \ => {\n                    stack.pop()\n                    stack.append(x)\n\
    \                }\n                case _ => {\n                    stack.append(x)\n\
    \                }\n            }\n        })\n        if (stack.size == 0) {\n\
    \            result.append(\"Yes\")\n        } else {\n            result.append(\"\
    No\")\n        }\n        result.toString()", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       x match {\n                case \")\" => close.push(x)\n             \
    \   case \")(\"  => stack.push(x)\n                case \"(\" => open.push(x)\n\
    \                case \")(\" => close.push(x)\n                case \")()\" =>\
    \ stack.push(x)\n                case \")()()\" => stack.push(x)\n           \
    \     case \")(()\" => stack.push(x)\n                case \")(()()\" => stack.push(x)\n\
    \                case \")(()(\" => stack.push(x)\n                case \")(()()\"\
    \ => stack.push(x)\n                case \")(()(()\" => stack.push(x)\n      \
    \          case \")(()(()()\" => stack.push(x)\n                case \")(()(()(\"\
    \ => stack.push(x)\n                case \")(()(()()\" => stack.push(x)\n    \
    \            case \")(()(()(()\" => stack.push(x)\n                case \")(()(()(()\"\
    \ => stack.push(x)\n                case \")(()(()(()(\" => stack.push(x)\n  \
    \              case \")(()(()(()()\" => stack.push(x)\n                case \"\
    )(()(()(()(\" => stack.push(x)\n                case \")(()(()(()()\" => stack.push(x)\n\
    \                case \")(()(()(()(\" => stack.push(x)\n                case \"\
    )(()(()(()()\" => stack.push(x)\n                case \")(()(()(()(\" => stack.push(x)\n\
    \                case \")(()(()(()()\" => stack.push(x)\n                case\
    \ \")(()(()(()(\" => stack.push(x)\n                case \")(()(()(()()\" => stack.push(x)\n\
    \                case \")(()(()(()(\" => stack.push(x)\n                case \"\
    )(()(()(()()\" => stack.push(x)\n                case \")(()(()(()(\" => stack.push(x)\n\
    \                case \")(()(()(()()\" => stack.push(x)\n                case\
    \ \")(()(()(()(\" => stack.push(x)\n                case \")(()(()(()()\" => stack.push(x)\n\
    \                case \")(()(()(()(\" => stack.push(x)\n                case \"\
    )(()(()(()()\" => stack.push(x)\n                case \")(()(()(()(\" => stack.push(x)\n\
    \                case \")(()(()(()()\" => stack.push(x)\n                case\
    \ \")(()(()(()(\" => stack.push(x)\n                case \")(()(()(()()\" => stack.push(x)\n\
    \                case \")(()(()(()(\" => stack.", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            x match {\n                case \")\" => {\n                    close.push(x)\n\
    \                }\n                case \")(\"  => {\n                    open.push(x)\n\
    \                }\n                case \")()\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    val\
    \ s = stack.pop()\n                    val c = close.pop()\n                 \
    \   val o = open.pop()\n                    result += (s\"$s$c$o\")\n        \
    \        }\n                case _ => {\n                    result += (s\"$x\"\
    )\n                }\n            }\n        })\n        if (close.isEmpty &&\
    \ open.isEmpty) {\n            return \"Yes\"\n        }\n        if (close.isEmpty\
    \ || open.isEmpty) {\n            return \"No\"\n        }\n        if (stack.size\
    \ == 0) {\n            return \"No\"\n        }\n        return \"Yes\"", "  \
    \      val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open < 0 || close < 0) {\n                result += \"No\"\n\
    \            } else {\n                result += \"Yes\"\n                stack\
    \ += str\n                while(open < close) {\n                    val left\
    \ = str.substring(0, open)\n                    val right = str.substring(open+1,\
    \ close)\n                    val newStr = left + right\n                    if(stack.contains(newStr))\
    \ {\n                        result += \"No\"\n                        break\n\
    \                    } else {\n                        result += \"Yes\"\n   \
    \                     stack += newStr\n                    }\n               \
    \     open += 1\n                }\n            }\n        }\n        result.mkString(\"\
    ,\")", "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer.empty[String]\n        lst.foreach { s =>\n    \
    \        if (s.startsWith(\"(\")) {\n                stack.push(s)\n         \
    \   } else if (s.startsWith(\")\")) {\n                val s = stack.pop()\n \
    \               if (s.startsWith(\"(\")) {\n                    stack.push(s)\n\
    \                } else {\n                    result += (s + \"(\" + s + \")\"\
    )\n                }\n            }\n        }\n        if (stack.nonEmpty) {\n\
    \            result += \"(\" + stack.pop() + \")\"\n        }\n        if (result.nonEmpty)\
    \ {\n            return \"Yes\"\n        } else {\n            return \"No\"\n\
    \        }", "        val stack = mutable.Stack[String]()\n        val stack2\
    \ = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n  \
    \      val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(s => {\n            val newStack = mutable.Stack[String]()\n\
    \            val newResult = mutable.ListBuffer.empty[String]\n            stack.push(s)\n\
    \            while (!stack.isEmpty) {\n                val top = stack.pop()\n\
    \                if (top == \"(\") {\n                    newStack.push(top)\n\
    \                } else if (top == \")\") {\n                    if (newStack.size\
    \ == 0) {\n                        newResult += top\n                    } else\
    \ {\n                        newStack.clear()\n                        newResult\
    \ += top\n                    }\n                } else {\n                  \
    \  newStack.clear()\n                    newResult += top\n                }\n\
    \            }\n            result += newResult\n        })\n        if (result.size\
    \ == lst.length) {\n            val stack2 = mutable.Stack[String]()\n       \
    \     val result2 = mutable.ListBuffer.empty[String]\n            lst.foreach(s\
    \ => {\n                val newStack2 = mutable.Stack[String]()\n            \
    \    val newResult2 = mutable.ListBuffer.empty[String]\n                stack2.push(s)\n\
    \                while (!stack2.isEmpty) {\n                    val top2 = stack2.pop()\n\
    \                    if (top2 == \"(\") {\n                        newStack2.push(top2)\n\
    \                    } else if (top2 == \")\") {\n                        if (newStack2.size\
    \ == 0) {\n                            newResult2 += top2\n                  \
    \      } else {\n                            newStack2.clear()\n             \
    \               newResult2 += top2\n                        }\n              \
    \      } else {\n                        newStack2.clear()\n                 \
    \       newResult2 += top2\n                    }\n                }\n       \
    \         result2 += newResult2\n            })\n            if (result2.size\
    \ == lst.length) {\n                val stack3 = mutable.Stack[String]()\n   \
    \             val result3 = mutable.ListBuffer.empty[String]\n               \
    \ lst.foreach(s => {\n                    val newStack3 = mutable.Stack[String]()\n\
    \                    val newResult3 = mutable.ListBuffer.empty[String]\n     \
    \               stack3.push(s)\n                    while (!stack3.isEmpty) {\n\
    \                        val top3 = stack3.pop()\n                        if (top3\
    \ == \"(\") {\n                            newStack3.push(top3)\n            \
    \            } else if (top3 == \")\") {\n                            if (newStack3.size\
    \ == 0) {\n                                newResult3 += top3\n              \
    \              } else {\n                                newStack3.clear()\n \
    \                               newResult3 += top3\n                         \
    \   }\n                        } else {\n                            newStack3.clear()\n\
    \                            newResult3 += top3\n                        }\n \
    \                   }\n                    result3 += newResult3\n           \
    \     })\n                if (result3.size == lst.length) {\n                \
    \    val stack4 = ", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.length)\
    \ {\n            val str = lst(i)\n            val open = str.indexOf(\"(\")\n\
    \            val close = str.indexOf(\")\")\n            if(open < 0 || close\
    \ < 0) {\n                result.append(\"No\")\n            } else {\n      \
    \          val newStr = str.substring(open + 1, close)\n                val newStack\
    \ = stack.drop(open + 1).dropRight(1)\n                val newResult = result.drop(open\
    \ + 1).dropRight(1)\n                val newStackStr = newStack.mkString\n   \
    \             val newResultStr = newResult.mkString\n                if(newStackStr\
    \ == newResultStr) {\n                    result.append(\"Yes\")\n           \
    \     } else {\n                    result.append(\"No\")\n                }\n\
    \            }\n        }\n        result.mkString", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach { x =>\n            if (x == \"(\") {\n                open\
    \ += x\n                stack += x\n            } else if (x == \")\") {\n   \
    \             close += x\n                stack -= x\n            } else if (stack.nonEmpty\
    \ && stack.head == x) {\n                stack -= stack.head\n            } else\
    \ {\n                result += x\n            }\n        }\n        if (stack.nonEmpty)\
    \ {\n            result += \"No\"\n        } else {\n            result += \"\
    Yes\"\n        }\n        result.toString", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n    \
    \        x match {\n                case \")\" => stack.pop() match {\n      \
    \              case \")\" => result += \"(\" + stack.toList + \")\"\n        \
    \            case \")()\" => result += \"(\" + stack.toList + \")()\"\n      \
    \              case \")()()\" => result += \"(\" + stack.toList + \")()()\"\n\
    \                    case _ => result += \"(\" + stack.toList + \")\"\n      \
    \          }\n                case \"(\" => stack.push(x)\n                case\
    \ _ => stack\n            }\n        })\n        if (result.size == lst.length)\
    \ result.mkString(\"Yes\") else \"No\"", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => if (x contains\
    \ \"(\") open += x)\n        lst.foreach(x => if (x contains \")\") close += x)\n\
    \        open foreach { x => stack.push(x) }\n        close foreach { x => stack.pop()\
    \ }\n        val openCount = open.size\n        val closeCount = close.size\n\
    \        if (openCount == closeCount) {\n            val openStack = stack.take(openCount)\n\
    \            val closeStack = stack.take(closeCount)\n            val openStackStr\
    \ = openStack.mkString\n            val closeStackStr = closeStack.mkString\n\
    \            if (openStackStr == closeStackStr) {\n                result += \"\
    Yes\"\n            } else {\n                result += \"No\"\n            }\n\
    \        } else {\n            result += \"No\"\n        }\n        result.toString()",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => x match {\n            case x if x startsWith \"(\"\
    \ => stack.push(x)\n            case x if x startsWith \")\" => stack.pop() match\
    \ {\n                case x if x startsWith \"(\" => result.add(x)\n         \
    \       case x if x startsWith \")\" => result.add(x)\n                case _\
    \ => result.add(x)\n            }\n            case _ => result.add(x)\n     \
    \   })\n        if (stack.size == 0) \"No\" else \"Yes\"", "        val stack\
    \ = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            val newStr = if (open < 0 || close < 0) str else str.substring(0,\
    \ open) + str.substring(close + 1)\n            val newStack = if (open < 0 ||\
    \ close < 0) stack else stack.dropRight(1)\n            val newResult = if (open\
    \ < 0 || close < 0) result else result.dropRight(1)\n            newStack.push(newStr)\n\
    \            newResult.push(newStr)\n        }\n        if (stack.size == 0) \"\
    No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       x match {\n                case \")\" =>\n                    close.synchronized\
    \ {\n                        stack.pop() match {\n                           \
    \ case Some(\"(\") => open.remove(stack.pop())\n                            case\
    \ _ => false\n                        }\n                    }\n             \
    \   case \")(\" =>\n                    stack.synchronized {\n               \
    \         open.add(stack.pop())\n                    }\n                case _\
    \ =>\n                    stack.synchronized {\n                        stack\
    \ += x\n                    }\n            }\n        })\n        val openCount\
    \ = open.synchronized {\n            lst.length\n        }\n        val closeCount\
    \ = close.synchronized {\n            lst.length\n        }\n        if (openCount\
    \ == closeCount) {\n            val openList = open.synchronized {\n         \
    \       lst.toList\n            }\n            val closeList = close.synchronized\
    \ {\n                lst.toList\n            }\n            val openSet = openList.distinct\n\
    \            val closeSet = closeList.distinct\n            if (openSet.size ==\
    \ closeSet.size && openSet.size == openCount) {\n                val openSetList\
    \ = openSet.synchronized {\n                    lst.toList\n                }\n\
    \                val closeSetList = closeSet.synchronized {\n                \
    \    lst.toList\n                }\n                val openSetSet = openSetList.distinct\n\
    \                val closeSetSet = closeSetList.distinct\n                if (openSetSet.size\
    \ == closeSetSet.size && openSetSet.size == openCount) {\n                   \
    \ val openSetSetList = openSetSet.synchronized {\n                        lst.toList\n\
    \                    }\n                    val closeSetSetList = closeSetSet.synchronized\
    \ {\n                        lst.toList\n                    }\n             \
    \       val openSetSetSet = openSetSetList.distinct\n                    val closeSetSetList\
    \ = closeSetSetList.distinct\n                    if (openSetSetSet.size == closeSetSetSet.size\
    \ && openSetSetSet.size == openCount) {\n                        val openSetSetSetList\
    \ = openSetSetSet.synchronized {\n                            lst.toList\n   \
    \                     }\n                        val closeSetSetSetList = closeSetSetList.synchronized\
    \ {\n                            lst.toList\n                        }\n     \
    \                   val openSetSetSetSet = openSetSetSetSetList.distinct\n   \
    \                     val closeSetSetSetList = closeSetSetSetList.distinct\n \
    \                       if (openSetSetSetSet.size == closeSetSetSetSet.size &&\
    \ openSetSetSetSet.size == openCount) {\n                            val openSet",
  "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer.empty[String]\n        lst.foreach { s =>\n    \
    \        if (s == \"(\") {\n                stack.push(s)\n            } else\
    \ if (s == \")\") {\n                val top = stack.pop()\n                if\
    \ (top != \"(\") {\n                    result += \"No\"\n                } else\
    \ {\n                    result += \"Yes\"\n                }\n            }\n\
    \        }\n        result.mkString", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            x match {\n                case \")\" => {\n                    close.push(x)\n\
    \                }\n                case \")(\" => {\n                    open.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")\" => {\n                    stack.push(x)\n\
    \                }\n                case \")\" => {\n                    close.push(x)\n\
    \                }\n                case \")(\" => {\n                    open.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    close.push(x)\n\
    \                }\n                case \")(\" => {\n                    open.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    close.push(x)\n\
    \                }\n                case \")(\" => {\n                    open.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    close.push(x)\n\
    \                }\n                case \")(\" => {\n                    open.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    close.push(x)\n\
    \                }\n                case \")(\" => {\n                    open.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    close.push(x)\n\
    \                }\n                case \")(\" => {\n                    open.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    close.push(x)\n\
    \                }\n                case \")(\" => {\n                    open.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    close.push(x)\n\
    \                }\n                case \")(\" => {\n                    open.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    close.push(x)\n\
    \                }\n                case \")(\" => {\n                    open.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    close.push(x)\n\
    \                }\n                case \")(\" => {\n                    open.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n", "        val stack = mutable.Stack[String]()\n        val\
    \ stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val open = str.indexOf(\"(\")\n\
    \            val close = str.indexOf(\")\")\n            if(open < 0 || close\
    \ < 0) {\n                result += \"No\"\n            } else {\n           \
    \     result += \"Yes\"\n                stack.push(str)\n                while(open\
    \ < close) {\n                    val temp = stack.pop()\n                   \
    \ if(temp == \"\") {\n                        result += \"No\"\n             \
    \           break\n                    }\n                    result += \"Yes\"\
    \n                    stack.push(temp + str.substring(open+1, close))\n      \
    \              open = str.indexOf(\"(\", open+1)\n                    close =\
    \ str.indexOf(\")\", open+1)\n                }\n            }\n        }\n  \
    \      result.toString()", "        val stack = mutable.Stack[String]()\n    \
    \    val result = mutable.ListBuffer.empty[String]\n        lst.foreach { s =>\n\
    \            if (s.startsWith(\"(\")) {\n                stack.push(s)\n     \
    \       } else if (s.startsWith(\")\")) {\n                val s = stack.pop()\n\
    \                if (s.startsWith(\"(\")) {\n                    stack.push(s)\n\
    \                } else {\n                    result ++= s\n                }\n\
    \            }\n        }\n        if (stack.size == 0) {\n            result.append(\"\
    Yes\")\n        } else {\n            result.append(\"No\")\n        }", "   \
    \     val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.length)\
    \ {\n            val str = lst(i)\n            val open = str.indexOf(\"(\")\n\
    \            val close = str.indexOf(\")\")\n            if(open < 0 || close\
    \ < 0) {\n                result.append(\"No\")\n            } else {\n      \
    \          val openStr = str.substring(0, open)\n                val closeStr\
    \ = str.substring(close+1)\n                val newStr = openStr + closeStr\n\
    \                val newStack = stack.push(\"(\") + newStr + stack.pop()\n   \
    \             if(newStack.isEmpty) {\n                    result.append(\"Yes\"\
    )\n                } else {\n                    result.append(\"No\")\n     \
    \           }\n            }\n        }\n        return result.toString()", " \
    \       val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach { s =>\n            s match {\n                case \")\"\
    \ =>\n                    stack.pop()\n                case \")(\"  =>\n     \
    \               stack.push(s)\n                case _ =>\n                   \
    \ stack.push(s)\n            }\n        }\n        if (stack.size == 0) {\n  \
    \          result.append(\"Yes\")\n        } else {\n            result.append(\"\
    No\")\n        }\n        return result.toString", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stackMax = stackSize - 1\n        val stackIsEmpty = stackMax ==\
    \ 0 && !stack.isEmpty\n        val resultIsEmpty = result.size == 0\n        val\
    \ stackIsFull = stackMax == stackSize && !stack.isEmpty\n        val resultIsFull\
    \ = result.size == stackSize\n        val stackIsEmptyOrFull = stackIsEmpty ||\
    \ stackIsFull\n        val resultIsEmptyOrFull = resultIsEmpty || resultIsFull\n\
    \        val stackIsEmptyOrFullOrEmpty = stackIsEmptyOrFull || stackIsEmpty\n\
    \        val resultIsEmptyOrFullOrEmpty = resultIsEmptyOrFull || resultIsEmpty\n\
    \        val stackIsEmptyOrFullOrEmptyOrEmpty = stackIsEmptyOrFullOrEmpty || stackIsEmptyOrEmpty\n\
    \        val resultIsEmptyOrFullOrEmptyOrEmpty = resultIsEmptyOrFullOrEmpty ||\
    \ resultIsEmptyOrEmpty\n        val stackIsEmptyOrFullOrEmptyOrEmptyOrEmpty =\
    \ stackIsEmptyOrFullOrEmptyOrEmpty || stackIsEmptyOrEmptyOrEmpty\n        val\
    \ resultIsEmptyOrFullOrEmptyOrEmptyOrEmpty = resultIsEmptyOrFullOrEmptyOrEmpty\
    \ || resultIsEmptyOrEmptyOrEmpty\n        val stackIsEmptyOrFullOrEmptyOrEmptyOrEmptyOrEmpty\
    \ = stackIsEmptyOrFullOrEmptyOrEmptyOrEmpty || stackIsEmptyOrEmptyOrEmptyOrEmpty\n\
    \        val resultIsEmptyOrFullOrEmptyOrEmptyOrEmptyOrEmpty = resultIsEmptyOrFullOrEmptyOrEmptyOrEmpty\
    \ || resultIsEmptyOrEmptyOrEmptyOrEmpty\n        val stackIsEmptyOrFullOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\
    \ = stackIsEmptyOrFullOrEmptyOrEmptyOrEmptyOrEmpty || stackIsEmptyOrEmptyOrEmptyOrEmptyOrEmpty\n\
    \        val resultIsEmptyOrFullOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty = resultIsEmptyOrFullOrEmptyOrEmptyOrEmptyOrEmpty\
    \ || resultIsEmptyOrEmptyOrEmptyOrEmptyOrEmpty\n        val stackIsEmptyOrFullOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\
    \ = stackIsEmptyOrFullOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty || stackIsEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\n\
    \        val resultIsEmptyOrFullOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty", "      \
    \  val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        lst.foreach(x => {\n            x match\
    \ {\n                case \")\" => {\n                    stackSize -= 1\n   \
    \                 stack += x\n                }\n                case \")()\"\
    \ => {\n                    stackSize -= 1\n                    stack += x\n \
    \                   stack += \")\"\n                }\n                case \"\
    )(\" => {\n                    stackSize -= 1\n                    stack += x\n\
    \                    stack += \")\"\n                    stack += \")\"\n    \
    \            }\n                case \")()()\" => {\n                    stackSize\
    \ -= 1\n                    stack += x\n                    stack += \")\"\n \
    \                   stack += \")\"\n                    stack += \")\"\n     \
    \           }\n                case _ => {\n                    stackSize -= 1\n\
    \                    stack += x\n                }\n            }\n        })\n\
    \        if (stack.size == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val open = str.indexOf(\"(\")\n   \
    \         val close = str.indexOf(\")\")\n            if(open < 0 || close < 0)\
    \ {\n                result.append(\"No\")\n            } else {\n           \
    \     val stackSize = stack.size\n                if(open > close || stackSize\
    \ > 0) {\n                    result.append(\"No\")\n                } else {\n\
    \                    stack.push(str)\n                    result.append(\"Yes\"\
    )\n                }\n            }\n        }\n        return result.toString()",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => stack.pop()\n                case \")(\"  => stack.append(x)\n          \
    \      case _ => stack.append(x)\n            }\n        })\n        stack.toList\
    \ match {\n            case Nil => \"No\"\n            case x :: Nil => \"Yes\"\
    \n            case x :: y => result += \"Yes\"\n        }", "        val stack\
    \ = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.ListBuffer[String]()\n        val close = mutable.ListBuffer[String]()\n\
    \        lst.foreach { s =>\n            s match {\n                case \")\"\
    \ =>\n                    close.clear()\n                    stack.clear()\n \
    \               case \")(\"  =>\n                    close.clear()\n         \
    \           stack.clear()\n                case \")(\" =>\n                  \
    \  close.clear()\n                    stack.clear()\n                case \")()\"\
    \ =>\n                    close.clear()\n                    stack.clear()\n \
    \               case \")()()\" =>\n                    close.clear()\n       \
    \             stack.clear()\n                case \")(())\" =>\n             \
    \       close.clear()\n                    stack.clear()\n                case\
    \ \")(())()\" =>\n                    close.clear()\n                    stack.clear()\n\
    \                case \")(())(\" =>\n                    close.clear()\n     \
    \               stack.clear()\n                case \")(())()()\" =>\n       \
    \             close.clear()\n                    stack.clear()\n             \
    \   case \")(())(())\" =>\n                    close.clear()\n               \
    \     stack.clear()\n                case \")(())(())()\" =>\n               \
    \     close.clear()\n                    stack.clear()\n                case \"\
    )(())(())()\" =>\n                    close.clear()\n                    stack.clear()\n\
    \                case \")(())(())(\" =>\n                    close.clear()\n \
    \                   stack.clear()\n                case \")(())(())()()\" =>\n\
    \                    close.clear()\n                    stack.clear()\n      \
    \          case \")(())(())(())\" =>\n                    close.clear()\n    \
    \                stack.clear()\n                case \")(())(())(())()\" =>\n\
    \                    close.clear()\n                    stack.clear()\n      \
    \          case \")(())(())(())()\" =>\n                    close.clear()\n  \
    \                  stack.clear()\n                case \")(())(())(())(\" =>\n\
    \                    close.clear()\n                    stack.clear()\n      \
    \          case \")(())(())(())()()\" =>\n                    close.clear()\n\
    \                    stack.clear()\n                case \")(())(())(())(())\"\
    \ =>\n                    close.clear()\n                    stack.clear()\n \
    \               case \")(())(())(())(())()\" =>\n                    close.clear()\n\
    \                    stack.clear()\n                case \")(())(())(())(())(\"\
    \ =>\n                    close.clear()\n                    stack.clear()\n \
    \               case \")(())(())(())(())()()\" =>\n                    close.clear()\n\
    \                    stack.clear()\n                case \")(())(())(())(())(())\"\
    \ =>", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open < 0 || close < 0) {\n                result.append(\"No\"\
    )\n            } else {\n                val stackStr = str.substring(open + 1,\
    \ close)\n                val stackStr = stackStr.trim\n                if(stackStr.length\
    \ == 0) {\n                    result.append(\"No\")\n                } else {\n\
    \                    stack.push(stackStr)\n                }\n            }\n\
    \        }\n        if(result.size == lst.size) {\n            val stackStr =\
    \ result.mkString(\"(\", \", \", \")\")\n            val stackStr = stackStr.trim\n\
    \            if(stackStr.length == 0) {\n                result.append(\"No\"\
    )\n            } else {\n                result.append(\"Yes\")\n            }\n\
    \        } else {\n            result.append(\"No\")\n        }", "        val\
    \ stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            if (x == \"(\") {\n                stack.push(x)\n\
    \            } else if (x == \")\") {\n                if (stack.nonEmpty) {\n\
    \                    val top = stack.pop()\n                    if (top == \"\
    (\") {\n                        result.add(\"(\")\n                    } else\
    \ if (top == \")\") {\n                        result.add(\")\")\n           \
    \         }\n                }\n            }\n        })\n        if (result.size\
    \ == lst.size) {\n            val stackStr = stack.toList\n            val resultStr\
    \ = result.toList\n            if (stackStr.size == resultStr.size) {\n      \
    \          val stackStr = stackStr.sortWith(_ < _)\n                val resultStr\
    \ = resultStr.sortWith(_ < _)\n                if (stackStr == resultStr) {\n\
    \                    return \"Yes\"\n                }\n            }\n      \
    \  }\n        return \"No\"", "        val stack = mutable.Stack[String]()\n \
    \       val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => if (x == \"(\") stack += x else stack.pop())\n     \
    \   if (stack.size == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.HashSet[String]()\n\
    \        val close = mutable.HashSet[String]()\n        lst.foreach(x => {\n \
    \           x match {\n                case \")\" =>\n                    close.add(x)\n\
    \                case \")(\"  =>\n                    open.add(x)\n          \
    \      case \")()\" =>\n                    open.add(x)\n                case\
    \ \")()()\" =>\n                    open.add(x)\n                case \")(\" =>\n\
    \                    open.add(x)\n                case \")(\" =>\n           \
    \         open.add(x)\n                case \")()\" =>\n                    open.add(x)\n\
    \                case \")()()\" =>\n                    open.add(x)\n        \
    \        case \")(\" =>\n                    open.add(x)\n                case\
    \ \")()()\" =>\n                    open.add(x)\n                case \")(\" =>\n\
    \                    open.add(x)\n                case \")()()\" =>\n        \
    \            open.add(x)\n                case \")(\" =>\n                   \
    \ open.add(x)\n                case \")()()\" =>\n                    open.add(x)\n\
    \                case \")(\" =>\n                    open.add(x)\n           \
    \     case \")()()\" =>\n                    open.add(x)\n                case\
    \ \")(\" =>\n                    open.add(x)\n                case \")()()\" =>\n\
    \                    open.add(x)\n                case \")(\" =>\n           \
    \         open.add(x)\n                case \")()()\" =>\n                   \
    \ open.add(x)\n                case \")(\" =>\n                    open.add(x)\n\
    \                case \")()()\" =>\n                    open.add(x)\n        \
    \        case \")(\" =>\n                    open.add(x)\n                case\
    \ \")()()\" =>\n                    open.add(x)\n                case \")(\" =>\n\
    \                    open.add(x)\n                case \")()()\" =>\n        \
    \            open.add(x)\n                case \")(\" =>\n                   \
    \ open.add(x)\n                case \")()()\" =>\n                    open.add(x)\n\
    \                case \")(\" =>\n                    open.add(x)\n           \
    \     case \")()()\" =>\n                    open.add(x)\n                case\
    \ \")(\" =>\n                    open.add(x)\n                case \")()()\" =>\n\
    \                    open.add(x)\n                case \")(\" =>\n           \
    \         open.add(x)\n                case \")()()\" =>\n                   \
    \ open.add(x)\n                case \")(\" =>\n                    open.add(x)\n\
    \                case \")()()\" =>\n                    open.add(x)\n        \
    \        case \")(\" =>\n                    open.add(x)\n                case\
    \ \")()()\" =>\n                    open.add(x)\n                case \")(\" =>\n\
    \                    open.add(x)\n                case \")()()\" ", "        val\
    \ stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => stack += x)\n        while(stack.nonEmpty) {\n     \
    \       val str = stack.pop()\n            val open = str.indexOf(\"(\")\n   \
    \         val close = str.indexOf(\")\")\n            if(open != -1 && close !=\
    \ -1) {\n                if(open < close) {\n                    stack.push(str.substring(0,\
    \ open))\n                    stack.push(str.substring(open + 1, close))\n   \
    \             } else {\n                    stack.push(str.substring(0, close))\n\
    \                    stack.push(str.substring(close + 1, open))\n            \
    \    }\n            } else {\n                result += str\n            }\n \
    \       }\n        if(result.size == lst.size) {\n            return \"Yes\"\n\
    \        } else {\n            return \"No\"\n        }", "        val stack =\
    \ mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => close.add(x)\n                case \")(\"  => open.add(x)\n             \
    \   case \")(\"  => close.add(x)\n                case \")(\"  => open.add(x)\n\
    \                case \")(\"  => close.add(x)\n                case \")(\"  =>\
    \ open.add(x)\n                case \")(\"  => close.add(x)\n                case\
    \ \")(\"  => open.add(x)\n                case \")(\"  => close.add(x)\n     \
    \           case \")(\"  => open.add(x)\n                case \")(\"  => close.add(x)\n\
    \                case \")(\"  => open.add(x)\n                case \")(\"  =>\
    \ close.add(x)\n                case \")(\"  => open.add(x)\n                case\
    \ \")(\"  => close.add(x)\n                case \")(\"  => open.add(x)\n     \
    \           case \")(\"  => close.add(x)\n                case \")(\"  => open.add(x)\n\
    \                case \")(\"  => close.add(x)\n                case \")(\"  =>\
    \ open.add(x)\n                case \")(\"  => close.add(x)\n                case\
    \ \")(\"  => open.add(x)\n                case \")(\"  => close.add(x)\n     \
    \           case \")(\"  => open.add(x)\n                case \")(\"  => close.add(x)\n\
    \                case \")(\"  => open.add(x)\n                case \")(\"  =>\
    \ close.add(x)\n                case \")(\"  => open.add(x)\n                case\
    \ \")(\"  => close.add(x)\n                case \")(\"  => open.add(x)\n     \
    \           case \")(\"  => close.add(x)\n                case \")(\"  => open.add(x)\n\
    \                case \")(\"  => close.add(x)\n                case \")(\"  =>\
    \ open.add(x)\n                case \")(\"  => close.add(x)\n                case\
    \ \")(\"  => open.add(x)\n                case \")(\"  => close.add(x)\n     \
    \           case \")(\"  => open.add(x)\n                case \")(\"  => close.add(x)\n\
    \                case \")(\"  => open.add(x)\n                case \")(\"  =>\
    \ close.add(x)\n                case \")(\"  => open.add(x)\n                case\
    \ \")(\"  => close.add(x)\n                case \")(\"  => open.add(x)\n     \
    \           case \")(\"  => close.add(x)\n                case \")(\"  => open.add(x)\n\
    \                case \")(\"  => close.add(x)\n                case \")(\"  =>\
    \ open.add(x)\n                case \")(\"  => close.add(x)\n                case\
    \ \")(\"  => open.add(x)\n                case \")(\"", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        lst.foreach {\
    \ s =>\n            s match {\n                case \")\" =>\n               \
    \     result += \"(\"\n                    stack += s\n                case \"\
    )(\" =>\n                    result += \"(\"\n                    stack += s\n\
    \                case \")(\" =>\n                    result += \"(\"\n       \
    \             stack += s\n                case \")(\" =>\n                   \
    \ result += \"(\"\n                    stack += s\n                case \")(\"\
    \ =>\n                    result += \"(\"\n                    stack += s\n  \
    \              case \")(\" =>\n                    result += \"(\"\n         \
    \           stack += s\n                case \")(\" =>\n                    result\
    \ += \"(\"\n                    stack += s\n                case \")(\" =>\n \
    \                   result += \"(\"\n                    stack += s\n        \
    \        case \")(\" =>\n                    result += \"(\"\n               \
    \     stack += s\n                case \")(\" =>\n                    result +=\
    \ \"(\"\n                    stack += s\n                case \")(\" =>\n    \
    \                result += \"(\"\n                    stack += s\n           \
    \     case \")(\" =>\n                    result += \"(\"\n                  \
    \  stack += s\n                case \")(\" =>\n                    result += \"\
    (\"\n                    stack += s\n                case \")(\" =>\n        \
    \            result += \"(\"\n                    stack += s\n               \
    \ case \")(\" =>\n                    result += \"(\"\n                    stack\
    \ += s\n                case \")(\" =>\n                    result += \"(\"\n\
    \                    stack += s\n                case \")(\" =>\n            \
    \        result += \"(\"\n                    stack += s\n                case\
    \ \")(\" =>\n                    result += \"(\"\n                    stack +=\
    \ s\n                case \")(\" =>\n                    result += \"(\"\n   \
    \                 stack += s\n                case \")(\" =>\n               \
    \     result += \"(\"\n                    stack += s\n                case \"\
    )(\" =>\n                    result += \"(\"\n                    stack += s\n\
    \                case \")(\" =>\n                    result += \"(\"\n       \
    \             stack += s\n                case \")(\" =>\n                   \
    \ result += \"(\"\n                    stack += s\n                case \")(\"\
    \ =>\n                    result += \"(\"\n                    stack += s\n  \
    \              case \")(\" =>\n                    result += \"(\"\n         \
    \           stack += s\n                case \")(\" =>\n                    result\
    \ += \"(\"\n                    stack += s\n                case \")(\" =>\n \
    \                   result += \"(\"\n                    stack += s\n        \
    \        case \")(\" =>\n                    result += \"(\"\n               \
    \     stack += s\n                case \")(\" =>\n                    result +=\
    \ \"(\"\n                    stack += s\n                case \")(\" =>\n    \
    \                result += \"(\"\n                    ", "        val stack =\
    \ mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach { s =>\n            val open = s.indexOf('(')\n         \
    \   val close = s.lastIndexOf(')')\n            if (open < 0 || close < 0) return\n\
    \            if (open > close) return\n            if (open > stack.size) {\n\
    \                stack += s\n            } else {\n                val left =\
    \ stack.pop()\n                val right = s.substring(open + 1, close)\n    \
    \            result += (left + right)\n            }\n        }\n        if (result.size\
    \ == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n \
    \       val result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.length) {\n            val str = lst(i)\n            val open = str.indexOf(\"\
    (\")\n            val close = str.indexOf(\")\")\n            val left = str.substring(0,\
    \ open)\n            val right = str.substring(open + 1, close)\n            val\
    \ newStr = left + right + str\n            val newStack = stack.push(newStr)\n\
    \            while(!newStack.isEmpty) {\n                val newStr = newStack.pop()\n\
    \                val open = newStr.indexOf(\"(\")\n                val close =\
    \ newStr.indexOf(\")\")\n                val left = newStr.substring(0, open)\n\
    \                val right = newStr.substring(open + 1, close)\n             \
    \   val newLeft = left + right\n                val newRight = right + left\n\
    \                val newStr = newLeft + newRight\n                newStack.push(newStr)\n\
    \            }\n            result += (newStr)\n        }\n        if(result.size\
    \ == lst.length)\n            \"Yes\"\n        else\n            \"No\"", "  \
    \      val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            val len = open - close\n            if(len > 0) {\n           \
    \     stack.push(str)\n                while(stack.nonEmpty) {\n             \
    \       val top = stack.pop()\n                    if(top == str) {\n        \
    \                result += \"Yes\"\n                        break\n          \
    \          }\n                    if(top == close) {\n                       \
    \ result += \"No\"\n                        break\n                    }\n   \
    \                 result += \"No\"\n                }\n            }\n       \
    \ }\n        result.mkString(\",\")", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.HashSet[String]()\n\
    \        val close = mutable.HashSet[String]()\n        lst.foreach(x => {\n \
    \           x match {\n                case \")\" => close.add(x)\n          \
    \      case \")(\"  => open.add(x)\n                case _ => stack += x\n   \
    \         }\n        })\n        while(stack.nonEmpty) {\n            val s =\
    \ stack.pop()\n            result += s\n            open -= s\n            close\
    \ -= s\n        }\n        if (close.isEmpty) result.mkString(\"(\", \")\")\n\
    \        else result.mkString(\"(\", \")(\", \")\")", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       x match {\n                case \")\" =>\n                    close.add(x)\n\
    \                case \")(\" =>\n                    open.add(x)\n           \
    \     case \")(\" =>\n                    open.add(x)\n                case \"\
    )(\" =>\n                    open.add(x)\n                case \")(\" =>\n   \
    \                 open.add(x)\n                case \")(\" =>\n              \
    \      open.add(x)\n                case \")(\" =>\n                    open.add(x)\n\
    \                case \")(\" =>\n                    open.add(x)\n           \
    \     case \")(\" =>\n                    open.add(x)\n                case \"\
    )(\" =>\n                    open.add(x)\n                case \")(\" =>\n   \
    \                 open.add(x)\n                case \")(\" =>\n              \
    \      open.add(x)\n                case \")(\" =>\n                    open.add(x)\n\
    \                case \")(\" =>\n                    open.add(x)\n           \
    \     case \")(\" =>\n                    open.add(x)\n                case \"\
    )(\" =>\n                    open.add(x)\n                case \")(\" =>\n   \
    \                 open.add(x)\n                case \")(\" =>\n              \
    \      open.add(x)\n                case \")(\" =>\n                    open.add(x)\n\
    \                case \")(\" =>\n                    open.add(x)\n           \
    \     case \")(\" =>\n                    open.add(x)\n                case \"\
    )(\" =>\n                    open.add(x)\n                case \")(\" =>\n   \
    \                 open.add(x)\n                case \")(\" =>\n              \
    \      open.add(x)\n                case \")(\" =>\n                    open.add(x)\n\
    \                case \")(\" =>\n                    open.add(x)\n           \
    \     case \")(\" =>\n                    open.add(x)\n                case \"\
    )(\" =>\n                    open.add(x)\n                case \")(\" =>\n   \
    \                 open.add(x)\n                case \")(\" =>\n              \
    \      open.add(x)\n                case \")(\" =>\n                    open.add(x)\n\
    \                case \")(\" =>\n                    open.add(x)\n           \
    \     case \")(\" =>\n                    open.add(x)\n                case \"\
    )(\" =>\n                    open.add(x)\n                case \")(\" =>\n   \
    \                 open.add(x)\n                case \")(\" =>\n              \
    \      open.add(x)\n                case \")(\" =>\n                    open.add(x)\n\
    \                case \")(\" =>\n                    open.add(x)\n           \
    \     case \")(\" =>\n                    open.add(x)\n                case \"\
    )(\" =>\n                    open.add(x)\n                case \")(\" =>\n   \
    \                 open.add(x)\n                case \")", "        val stack =\
    \ mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n     \
    \   val good = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => {\n                    queue.enqueue(x)\n                }\n            \
    \    case \")(\" => {\n                    stack.push(x)\n                }\n\
    \                case \")(\" => {\n                    stack.push(x)\n       \
    \         }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        val stackSize = lst.size\n        val stackMax = stackSize - 1\n    \
    \    val stackMaxIndex = stackSize - 1\n        val stackMin = stackSize + 1\n\
    \        val stackMinIndex = stackSize + 1\n        val stackMinIndex2 = stackSize\
    \ + 1\n        val stackMinIndex3 = stackSize + 1\n        val stackMinIndex4\
    \ = stackSize + 1\n        val stackMinIndex5 = stackSize + 1\n        val stackMinIndex6\
    \ = stackSize + 1\n        val stackMinIndex7 = stackSize + 1\n        val stackMinIndex8\
    \ = stackSize + 1\n        val stackMinIndex9 = stackSize + 1\n        val stackMinIndex10\
    \ = stackSize + 1\n        val stackMinIndex11 = stackSize + 1\n        val stackMinIndex12\
    \ = stackSize + 1\n        val stackMinIndex13 = stackSize + 1\n        val stackMinIndex14\
    \ = stackSize + 1\n        val stackMinIndex15 = stackSize + 1\n        val stackMinIndex16\
    \ = stackSize + 1\n        val stackMinIndex17 = stackSize + 1\n        val stackMinIndex18\
    \ = stackSize + 1\n        val stackMinIndex19 = stackSize + 1\n        val stackMinIndex20\
    \ = stackSize + 1\n        val stackMinIndex21 = stackSize + 1\n        val stackMinIndex22\
    \ = stackSize + 1\n        val stackMinIndex23 = stackSize + 1\n        val stackMinIndex24\
    \ = stackSize + 1\n        val stackMinIndex25 = stackSize + 1\n        val stackMinIndex26\
    \ = stackSize + 1\n        val stackMinIndex27 = stackSize + 1\n        val stackMinIndex28\
    \ = stackSize + 1\n        val stackMinIndex29 = stackSize + 1\n        val stackMinIndex30\
    \ = stackSize + 1\n        val stackMinIndex31 = stackSize + 1\n        val stackMinIndex32\
    \ = stackSize + 1\n        val stackMinIndex33 = stackSize + 1\n        val stackMinIndex34\
    \ = stackSize + 1\n        val stackMinIndex35 = stackSize + 1\n        val stackMinIndex36\
    \ = stackSize + 1\n        val stackMinIndex37 = stackSize + 1\n        val stackMinIndex38\
    \ = stackSize + 1\n        val stackMinIndex39 = stackSize + 1\n        val stackMinIndex40\
    \ = stackSize + 1\n        val stackMinIndex41 = stackSize + 1\n        val stackMinIndex42\
    \ = stackSize + 1\n        val stackMin", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.size) {\n            val str = lst(i)\n            val open = str.indexOf(\"\
    (\")\n            val close = str.indexOf(\")\")\n            val newStack = mutable.Stack[String]()\n\
    \            val newResult = mutable.ListBuffer.empty[String]\n            if(open\
    \ != -1 && close != -1) {\n                if(open > close) {\n              \
    \      newStack.push(str.substring(0, open))\n                    newStack.push(str.substring(open\
    \ + 1, close))\n                    newResult.push(str.substring(open + 1, close))\n\
    \                } else {\n                    newStack.push(str.substring(0,\
    \ close))\n                    newStack.push(str.substring(close + 1, open))\n\
    \                    newResult.push(str.substring(close + 1, open))\n        \
    \        }\n                while(newStack.nonEmpty) {\n                    val\
    \ newStr = newStack.pop()\n                    val newStr2 = newResult.pop()\n\
    \                    if(newStr.equals(newStr2)) {\n                        result.push(newStr)\n\
    \                    } else {\n                        newStack.push(newStr)\n\
    \                        newResult.push(newStr2)\n                    }\n    \
    \            }\n            } else {\n                result.push(str)\n     \
    \       }\n        }\n        if(result.size == lst.size) {\n            return\
    \ \"Yes\"\n        } else {\n            return \"No\"\n        }", "        val\
    \ stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open < 0 || close < 0) {\n                result += \"No\"\n\
    \            } else {\n                result += \"Yes\"\n                stack.push(str)\n\
    \                while(open < close && stack.nonEmpty) {\n                   \
    \ val s = stack.pop()\n                    val open2 = s.indexOf(\"(\")\n    \
    \                val close2 = s.indexOf(\")\")\n                    if(open2 <\
    \ 0 || close2 < 0 || open2 > close || close2 > open) {\n                     \
    \   result += \"No\"\n                    } else {\n                        result\
    \ += \"Yes\"\n                        stack.push(s)\n                    }\n \
    \               }\n            }\n        }\n        result.toString()", "   \
    \     val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => x match {\n            case x if x startsWith \"(\"\
    \ => open.push(x)\n            case x if x startsWith \")\" => close.push(x)\n\
    \            case _ => stack.push(x)\n        })\n        val openCount = open.size\n\
    \        val closeCount = close.size\n        if (openCount == 0 && closeCount\
    \ == 0) \"Yes\" else \"No\"", "        val stack = mutable.Stack[String]()\n \
    \       val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val stackMax = stackSize - 1\n        val stackMaxSize = stackMax * 2\n\
    \        val stackMaxSize2 = stackMaxSize * 2\n        val stackMaxSize3 = stackMaxSize2\
    \ * 2\n        val stackMaxSize4 = stackMaxSize3 * 2\n        val stackMaxSize5\
    \ = stackMaxSize4 * 2\n        val stackMaxSize6 = stackMaxSize5 * 2\n       \
    \ val stackMaxSize7 = stackMaxSize6 * 2\n        val stackMaxSize8 = stackMaxSize7\
    \ * 2\n        val stackMaxSize9 = stackMaxSize8 * 2\n        val stackMaxSize10\
    \ = stackMaxSize9 * 2\n        val stackMaxSize11 = stackMaxSize10 * 2\n     \
    \   val stackMaxSize12 = stackMaxSize11 * 2\n        val stackMaxSize13 = stackMaxSize12\
    \ * 2\n        val stackMaxSize14 = stackMaxSize13 * 2\n        val stackMaxSize15\
    \ = stackMaxSize14 * 2\n        val stackMaxSize16 = stackMaxSize15 * 2\n    \
    \    val stackMaxSize17 = stackMaxSize16 * 2\n        val stackMaxSize18 = stackMaxSize17\
    \ * 2\n        val stackMaxSize19 = stackMaxSize18 * 2\n        val stackMaxSize20\
    \ = stackMaxSize19 * 2\n        val stackMaxSize21 = stackMaxSize20 * 2\n    \
    \    val stackMaxSize22 = stackMaxSize21 * 2\n        val stackMaxSize23 = stackMaxSize22\
    \ * 2\n        val stackMaxSize24 = stackMaxSize23 * 2\n        val stackMaxSize25\
    \ = stackMaxSize24 * 2\n        val stackMaxSize26 = stackMaxSize25 * 2\n    \
    \    val stackMaxSize27 = stackMaxSize26 * 2\n        val stackMaxSize28 = stackMaxSize27\
    \ * 2\n        val stackMaxSize29 = stackMaxSize28 * 2\n        val stackMaxSize30\
    \ = stackMaxSize29 * 2\n        val stackMaxSize31 = stackMaxSize30 * 2\n    \
    \    val stackMaxSize32 = stackMaxSize31 * 2\n        val stackMaxSize33 = stackMaxSize32\
    \ * 2\n        val stackMaxSize34 = stackMaxSize33 * 2\n        val stackMaxSize35\
    \ = stackMaxSize34 * 2\n        val stack", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open < 0 || close < 0) {\n                result.append(\"No\"\
    )\n            } else {\n                val left = str.substring(0, open)\n \
    \               val right = str.substring(close + 1)\n                val newStack\
    \ = stack.push(left)\n                val newResult = result.push(right)\n   \
    \             while(!newStack.isEmpty && !newResult.isEmpty) {\n             \
    \       val left = newStack.pop()\n                    val right = newResult.pop()\n\
    \                    if(left == right) {\n                        result.append(\"\
    Yes\")\n                        break\n                    } else {\n        \
    \                newStack = stack.push(left + right)\n                       \
    \ newResult = result.push(right)\n                    }\n                }\n \
    \           }\n        }\n        result.toString", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            val newStr = str.substring(open + 1, close)\n            val newStack\
    \ = stack.push(\"(\")\n            val newResult = result + newStr\n         \
    \   val newStack2 = stack.push(newStr)\n            val newResult2 = result +\
    \ newStr\n            val newStack3 = stack.push(\")\")\n            val newResult3\
    \ = result + newStr\n            val newStack4 = stack.push(\")\")\n         \
    \   val newResult4 = result + newStr\n            val newStack5 = stack.push(\"\
    (\")\n            val newResult5 = result + newStr\n            val newStack6\
    \ = stack.push(\")\")\n            val newResult6 = result + newStr\n        \
    \    val newStack7 = stack.push(\"(\")\n            val newResult7 = result +\
    \ newStr\n            val newStack8 = stack.push(\")\")\n            val newResult8\
    \ = result + newStr\n            val newStack9 = stack.push(\"(\")\n         \
    \   val newResult9 = result + newStr\n            val newStack10 = stack.push(\"\
    )\")\n            val newResult10 = result + newStr\n            val newStack11\
    \ = stack.push(\"(\")\n            val newResult11 = result + newStr\n       \
    \     val newStack12 = stack.push(\")\")\n            val newResult12 = result\
    \ + newStr\n            val newStack13 = stack.push(\"(\")\n            val newResult13\
    \ = result + newStr\n            val newStack14 = stack.push(\")\")\n        \
    \    val newResult14 = result + newStr\n            val newStack15 = stack.push(\"\
    (\")\n            val newResult15 = result + newStr\n            val newStack16\
    \ = stack.push(\")\")\n            val newResult16 = result + newStr\n       \
    \     val newStack17 = stack.push(\"(\")\n            val newResult17 = result\
    \ + newStr\n            val newStack18 = stack.push(\")\")\n            val newResult18\
    \ = result + newStr\n            val newStack19 = stack.push(\"(\")\n        \
    \    val newResult19 = result + newStr\n            val newStack20 = stack.push(\"\
    )\")\n            val newResult20 = result + newStr\n            val newStack21\
    \ = stack.push(\"(\")\n            val newResult", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.length) {\n            val str = lst(i)\n            val open = str.indexOf(\"\
    (\")\n            val close = str.indexOf(\")\")\n            if(open < 0 || close\
    \ < 0) {\n                result += \"No\"\n            } else {\n           \
    \     val stackStr = str.substring(open + 1, close)\n                if(!stack.isEmpty)\
    \ {\n                    val stackStr = stack.last\n                    if(stackStr\
    \ == stackStr) {\n                        result += \"Yes\"\n                \
    \    } else {\n                        result += \"No\"\n                    }\n\
    \                } else {\n                    result += \"Yes\"\n           \
    \     }\n                stack.push(str)\n            }\n        }\n        result.mkString(\"\
    ,\")", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open < 0 || close < 0) {\n                result += \"No\"\n\
    \            } else {\n                result += \"Yes\"\n                stack.push(str)\n\
    \                while(open > 0 && close > 0) {\n                    val open2\
    \ = stack.peek().indexOf(\"(\")\n                    val close2 = stack.peek().indexOf(\"\
    )\")\n                    if(open2 < 0 || close2 < 0 || open2 > close || close2\
    \ > open) {\n                        result += \"No\"\n                      \
    \  break\n                    } else {\n                        result += \"Yes\"\
    \n                        stack.pop\n                        stack.push(stack.peek()\
    \ + str.substring(open2, close2))\n                    }\n                }\n\
    \            }\n        }\n        result.toString()", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        lst.foreach { x =>\n\
    \            x match {\n                case \")\" =>\n                    stack.pop()\
    \ match {\n                        case Some(\"(\") => result += \"(\"\n     \
    \                   case _ => result += \"(\"\n                    }\n       \
    \         case \")(\" =>\n                    stack.pop() match {\n          \
    \              case Some(\"(\") => result += \"(\"\n                        case\
    \ _ => result += \"(\"\n                    }\n                case \")\" =>\n\
    \                    stack.pop() match {\n                        case Some(\"\
    (\") => result += \"(\"\n                        case _ => result += \"(\"\n \
    \                   }\n                case \")(\" =>\n                    stack.pop()\
    \ match {\n                        case Some(\"(\") => result += \"(\"\n     \
    \                   case _ => result += \"(\"\n                    }\n       \
    \         case \")(\" =>\n                    stack.pop() match {\n          \
    \              case Some(\"(\") => result += \"(\"\n                        case\
    \ _ => result += \"(\"\n                    }\n                case \")(\" =>\n\
    \                    stack.pop() match {\n                        case Some(\"\
    (\") => result += \"(\"\n                        case _ => result += \"(\"\n \
    \                   }\n                case \")(\" =>\n                    stack.pop()\
    \ match {\n                        case Some(\"(\") => result += \"(\"\n     \
    \                   case _ => result += \"(\"\n                    }\n       \
    \         case \")(\" =>\n                    stack.pop() match {\n          \
    \              case Some(\"(\") => result += \"(\"\n                        case\
    \ _ => result += \"(\"\n                    }\n                case \")(\" =>\n\
    \                    stack.pop() match {\n                        case Some(\"\
    (\") => result += \"(\"\n                        case _ => result += \"(\"\n \
    \                   }\n                case \")(\" =>\n                    stack.pop()\
    \ match {\n                        case Some(\"(\") => result += \"(\"\n     \
    \                   case _ => result += \"(\"\n                    }\n       \
    \         case \")(\" =>\n                    stack.pop() match {\n          \
    \              case Some(\"(\") => result += \"(\"\n                        case\
    \ _ => result += \"(\"\n                    }\n                case \")(\" =>\n\
    \                    stack.pop() match {\n                        case Some(\"\
    (\") => result += \"(\"\n                        case _ => result += \"(\"\n \
    \                   }\n                case \")(\" =>\n                    stack.pop()\
    \ match {\n                        case Some(\"(\") => result += \"(\"\n     \
    \                   case _ => result += \"(\"\n                    }\n       \
    \         case \")(\" =>\n                    stack.pop() match {\n          \
    \              case Some(\"(\") => result += \"(\"\n                        case\
    \ _ => result += \"(\"\n                    }\n                case \")(\" =>\n\
    \                    stack.pop() match {\n                        case ", "  \
    \      val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        val openCount = mutable.Map[String,\
    \ Int]()\n        val closeCount = mutable.Map[String, Int]()\n        lst.foreach(x\
    \ => {\n            x match {\n                case \")\" => {\n             \
    \       closeCount += x -> 1\n                    close.push(x)\n            \
    \    }\n                case \")(\" => {\n                    openCount += x ->\
    \ 1\n                    open.push(x)\n                }\n                case\
    \ \")(\" => {\n                    openCount += x -> 1\n                    open.push(x)\n\
    \                }\n                case \")(\" => {\n                    openCount\
    \ += x -> 1\n                    open.push(x)\n                }\n           \
    \     case \")(\" => {\n                    openCount += x -> 1\n            \
    \        open.push(x)\n                }\n                case \")(\" => {\n \
    \                   openCount += x -> 1\n                    open.push(x)\n  \
    \              }\n                case \")(\" => {\n                    openCount\
    \ += x -> 1\n                    open.push(x)\n                }\n           \
    \     case \")(\" => {\n                    openCount += x -> 1\n            \
    \        open.push(x)\n                }\n                case \")(\" => {\n \
    \                   openCount += x -> 1\n                    open.push(x)\n  \
    \              }\n                case \")(\" => {\n                    openCount\
    \ += x -> 1\n                    open.push(x)\n                }\n           \
    \     case \")(\" => {\n                    openCount += x -> 1\n            \
    \        open.push(x)\n                }\n                case \")(\" => {\n \
    \                   openCount += x -> 1\n                    open.push(x)\n  \
    \              }\n                case \")(\" => {\n                    openCount\
    \ += x -> 1\n                    open.push(x)\n                }\n           \
    \     case \")(\" => {\n                    openCount += x -> 1\n            \
    \        open.push(x)\n                }\n                case \")(\" => {\n \
    \                   openCount += x -> 1\n                    open.push(x)\n  \
    \              }\n                case \")(\" => {\n                    openCount\
    \ += x -> 1\n                    open.push(x)\n                }\n           \
    \     case \")(\" => {\n                    openCount += x -> 1\n            \
    \        open.push(x)\n                }\n                case \")(\" => {\n \
    \                   openCount += x -> 1\n                    open.push(x)\n  \
    \              }\n                case \")(\" => {\n                    openCount\
    \ += x -> 1\n                    open.push(x)\n                }\n           \
    \     case \")(\" => {\n                    openCount += x -> 1\n            \
    \        open.push(x)\n                }\n                case \")(\" => {\n \
    \                   open", "        val stack = mutable.Stack[String]()\n    \
    \    val result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val open = str.indexOf(\"(\")\n\
    \            val close = str.indexOf(\")\")\n            val len = open - close\n\
    \            if(len > 0) {\n                stack.push(str)\n                while(stack.nonEmpty)\
    \ {\n                    val str = stack.pop()\n                    val close\
    \ = str.indexOf(\")\")\n                    val len = close - open\n         \
    \           if(len > 0) {\n                        stack.push(str)\n         \
    \           } else {\n                        result.add(str)\n              \
    \      }\n                }\n            }\n        }\n        if(result.size\
    \ == lst.size) {\n            \"Yes\"\n        } else {\n            \"No\"\n\
    \        }", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer[String]()\n        lst.foreach(x => if (x == \"(\") stack\
    \ += x else stack.pop())\n        if (stack.size == 0) \"No\" else \"Yes\"", " \
    \       val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       x match {\n                case \")\" => close.push(x)\n             \
    \   case \")(\"  => stack.push(x)\n                case \")(\"  => stack.push(x)\n\
    \                case \")(\" => stack.push(x)\n                case \")\" => stack.push(x)\n\
    \                case x => open.add(x)\n            }\n        })\n        val\
    \ openCount = open.size\n        val closeCount = close.size\n        if (openCount\
    \ == closeCount) {\n            val openList = open.iterator\n            val\
    \ closeList = close.iterator\n            while (openList.hasNext && closeList.hasNext)\
    \ {\n                val open = openList.next()\n                val close = closeList.next()\n\
    \                if (open == close) {\n                    result += \"Yes\"\n\
    \                } else {\n                    result += \"No\"\n            \
    \    }\n            }\n        }\n        result.mkString", "        val stack\
    \ = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val len = lst.size\n        for(i <- 0 until len) {\n            val\
    \ str = lst(i)\n            val open = str.indexOf(\"(\")\n            val close\
    \ = str.indexOf(\")\")\n            if(open < 0 || close < 0) {\n            \
    \    result.append(\"No\")\n            } else {\n                val openCount\
    \ = stack.length\n                val closeCount = stack.length\n            \
    \    while(open < close && openCount > 0 && closeCount > 0) {\n              \
    \      if(openCount > closeCount) {\n                        stack.pop\n     \
    \                   openCount -= 1\n                    } else {\n           \
    \             stack.pop\n                        closeCount -= 1\n           \
    \         }\n                }\n                if(openCount > closeCount) {\n\
    \                    stack += str\n                } else {\n                \
    \    stack += str.substring(0, close)\n                    result.append(\"Yes\"\
    )\n                }\n            }\n        }\n        if(result.size == len)\
    \ {\n            result.mkString(\"Yes\")\n        } else {\n            result.mkString(\"\
    No\")\n        }", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n            x match\
    \ {\n                case \")\" => stack.pop\n                case \")(\"  =>\
    \ stack.append(x)\n                case _ => stack.append(x)\n            }\n\
    \        })\n        stack.toList match {\n            case Nil => result.append(\"\
    Yes\")\n            case x => result.append(\"No\")\n        }", "        val\
    \ stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n\
    \        lst.foreach(x => if (x == \"(\") stack.push(x) else if (x == \")\") queue.push(x)\
    \ else if (stack.nonEmpty && queue.nonEmpty) if (!stack.isEmpty && !queue.isEmpty\
    \ && stack.peek == queue.peek) good.add(x)\n        else bad.add(x))\n       \
    \ if (good.size == lst.size) good.toSet.mkString(\"Yes\") else \"No\"", "    \
    \    val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stackSize2 = stackSize * stackSize\n\
    \        val stackSize3 = stackSize2 * stackSize\n        val stackSize4 = stackSize3\
    \ * stackSize\n        val stackSize5 = stackSize4 * stackSize\n        val stackSize6\
    \ = stackSize5 * stackSize\n        val stackSize7 = stackSize6 * stackSize\n\
    \        val stackSize8 = stackSize7 * stackSize\n        val stackSize9 = stackSize8\
    \ * stackSize\n        val stackSize10 = stackSize9 * stackSize\n        val stackSize11\
    \ = stackSize10 * stackSize\n        val stackSize12 = stackSize11 * stackSize\n\
    \        val stackSize13 = stackSize12 * stackSize\n        val stackSize14 =\
    \ stackSize13 * stackSize\n        val stackSize15 = stackSize14 * stackSize\n\
    \        val stackSize16 = stackSize15 * stackSize\n        val stackSize17 =\
    \ stackSize16 * stackSize\n        val stackSize18 = stackSize17 * stackSize\n\
    \        val stackSize19 = stackSize18 * stackSize\n        val stackSize20 =\
    \ stackSize19 * stackSize\n        val stackSize21 = stackSize20 * stackSize\n\
    \        val stackSize22 = stackSize21 * stackSize\n        val stackSize23 =\
    \ stackSize22 * stackSize\n        val stackSize24 = stackSize23 * stackSize\n\
    \        val stackSize25 = stackSize24 * stackSize\n        val stackSize26 =\
    \ stackSize25 * stackSize\n        val stackSize27 = stackSize26 * stackSize\n\
    \        val stackSize28 = stackSize27 * stackSize\n        val stackSize29 =\
    \ stackSize28 * stackSize\n        val stackSize30 = stackSize29 * stackSize\n\
    \        val stackSize31 = stackSize30 * stackSize\n        val stackSize32 =\
    \ stackSize31 * stackSize\n        val stackSize33 = stackSize32 * stackSize\n\
    \        val stackSize34 = stackSize33 * stackSize\n        val stackSize35 =\
    \ stackSize34 * stackSize\n        val stackSize36 = stackSize35 * stackSize\n\
    \        val stackSize37 = stackSize36 * stackSize\n        val stackSize38 =\
    \ stackSize37 * stackSize\n        val stackSize39 = stackSize38 * stackSize\n\
    \        val stackSize", "        val stack = mutable.Stack[String]()\n      \
    \  val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer.empty[String]\n        lst.foreach { x =>\n    \
    \        if (x == '(') {\n                stack.push(x)\n            } else if\
    \ (x == '(') {\n                if (stack.isEmpty) {\n                    result\
    \ += \"No\"\n                } else {\n                    result += \"Yes\"\n\
    \                }\n                stack.pop()\n            } else if (x == ')')\
    \ {\n                if (stack.isEmpty) {\n                    result += \"No\"\
    \n                } else {\n                    result += \"Yes\"\n          \
    \      }\n                stack.pop()\n            } else {\n                result\
    \ += \"No\"\n            }\n        }\n        result.mkString", "        val\
    \ stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     val open = str.indexOf('(')\n            val close = str.indexOf(')')\n\
    \            val openCount = stack.length\n            val closeCount = stack.length\n\
    \            if(open < 0 || close < 0){\n                result.append(\"No\"\
    )\n                return result.toString()\n            }\n            else if(open\
    \ > close){\n                result.append(\"No\")\n                return result.toString()\n\
    \            }\n            else if(open == close){\n                result.append(\"\
    No\")\n                return result.toString()\n            }\n            else\
    \ if(openCount > closeCount){\n                result.append(\"No\")\n       \
    \         return result.toString()\n            }\n            else if(openCount\
    \ == closeCount){\n                result.append(\"Yes\")\n                return\
    \ result.toString()\n            }\n            else if(openCount < closeCount){\n\
    \                stack.push(str)\n            }\n            else if(openCount\
    \ > closeCount){\n                stack.pop()\n            }\n        }\n    \
    \    result.append(\"No\")\n        return result.toString()", "        val stack\
    \ = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n  \
    \      val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ queue = mutable.Queue[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            if (x == \"(\") open.add(x)\n       \
    \     if (x == \")\") close.add(x)\n        })\n        open.foreach(x => stack\
    \ += x)\n        close.foreach(x => stack -= x)\n        queue.foreach(x => result\
    \ += x)\n        if (stack.size == 0) \"No\" else \"Yes\"", "        val stack\
    \ = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => {\n                    stack.pop() match {\n                        case\
    \ Some(\"(\") => result.add(\"Yes\")\n                        case _ => result.add(\"\
    No\")\n                    }\n                }\n                case \")(\" =>\
    \ stack += x\n                case _ => stack += x\n            }\n        })\n\
    \        if (stack.size == 0) result.add(\"Yes\") else \"No\"", "        val stack\
    \ = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n  \
    \      val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach {\n            case x if x != \")\" => open.add(x)\n    \
    \        case x if x == \")\" => close.add(x)\n            case x => stack +=\
    \ x\n        }\n        val openCount = open.size\n        val closeCount = close.size\n\
    \        if (openCount == closeCount) {\n            val openStack = stack.take(openCount)\n\
    \            val closeStack = stack.drop(openCount)\n            val openStackSize\
    \ = openStack.size\n            val closeStackSize = closeStack.size\n       \
    \     if (openStackSize == closeStackSize) {\n                val openStack =\
    \ stack.take(openStackSize)\n                val closeStack = stack.drop(openStackSize)\n\
    \                val openStackSize = openStack.size\n                val closeStackSize\
    \ = closeStack.size\n                if (openStackSize == closeStackSize) {\n\
    \                    val openStack = stack.take(openStackSize)\n             \
    \       val closeStack = stack.drop(openStackSize)\n                    val openStackSize\
    \ = openStack.size\n                    val closeStackSize = closeStack.size\n\
    \                    if (openStackSize == closeStackSize) {\n                \
    \        val openStack = stack.take(openStackSize)\n                        val\
    \ closeStack = stack.drop(openStackSize)\n                        val openStackSize\
    \ = openStack.size\n                        val closeStackSize = closeStack.size\n\
    \                        if (openStackSize == closeStackSize) {\n            \
    \                val openStack = stack.take(openStackSize)\n                 \
    \           val closeStack = stack.drop(openStackSize)\n                     \
    \       val openStackSize = openStack.size\n                            val closeStackSize\
    \ = closeStack.size\n                            if (openStackSize == closeStackSize)\
    \ {\n                                val openStack = stack.take(openStackSize)\n\
    \                                val closeStack = stack.drop(openStackSize)\n\
    \                                val openStackSize = openStack.size\n        \
    \                        val closeStackSize = closeStack.size\n              \
    \                  if (openStackSize == closeStackSize) {\n                  \
    \                  val openStack = stack.take(openStackSize)\n               \
    \                     val closeStack = stack.drop(openStackSize)\n           \
    \                         val openStackSize = openStack.size\n               \
    \                     val closeStackSize = closeStack.size\n                 \
    \                   if (openStackSize == closeStackSize) {\n                 \
    \                       val openStack = stack.take(openStackSize)\n          \
    \                              val closeStack = stack.drop(openStackSize)", " \
    \       val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val open = str.indexOf(\"(\")\n\
    \            val close = str.indexOf(\")\")\n            if(open < 0 || close\
    \ < 0) {\n                result.append(\"No\")\n            } else {\n      \
    \          val stackStr = str.substring(open + 1, close)\n                val\
    \ stackStr = stackStr.trim\n                if(stackStr.isEmpty) {\n         \
    \           result.append(\"No\")\n                } else {\n                \
    \    stack += stackStr\n                }\n            }\n        }\n        if(result.size\
    \ == lst.size) {\n            val stackStr = stack.toList\n            val stackStr\
    \ = stackStr.mkString(\"\")\n            val stackStr = stackStr.trim\n      \
    \      if(stackStr.isEmpty) {\n                result.append(\"Yes\")\n      \
    \      } else {\n                result.append(\"No\")\n            }\n      \
    \  }\n        result.toString()", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach { s =>\n     \
    \       if (s.startsWith(\"(\")) {\n                open += s\n            } else\
    \ if (s.endsWith(\")\")) {\n                close += s\n            } else {\n\
    \                stack += s\n            }\n        }\n        val openCount =\
    \ open.size\n        val closeCount = close.size\n        if (openCount == closeCount)\
    \ {\n            val openStr = open.toList\n            val closeStr = close.toList\n\
    \            val openStrSize = openStr.size\n            val closeStrSize = closeStr.size\n\
    \            val openStrSet = openStr.iterator\n            val closeStrSet =\
    \ closeStr.iterator\n            while (openStrSet.hasNext && closeStrSet.hasNext)\
    \ {\n                val openStr = openStrSet.next()\n                val closeStr\
    \ = closeStrSet.next()\n                val openCount = openStr.count(\"(\")\n\
    \                val closeCount = closeStr.count(\")\")\n                if (openCount\
    \ == closeCount) {\n                    val openStr = openStr.substring(openStr.indexOf(\"\
    (\") + 1, openStr.indexOf(\")\"))\n                    val closeStr = closeStr.substring(closeStr.indexOf(\"\
    )\") + 1, closeStr.indexOf(\")\"))\n                    val openStrSize = openStr.size\n\
    \                    val closeStrSize = closeStr.size\n                    val\
    \ openStrSet = openStr.iterator\n                    val closeStrSet = closeStr.iterator\n\
    \                    while (openStrSet.hasNext && closeStrSet.hasNext) {\n   \
    \                     val openStr = openStrSet.next()\n                      \
    \  val closeStr = closeStrSet.next()\n                        val openCount =\
    \ openStr.count(\"(\")\n                        val closeCount = closeStr.count(\"\
    )\")\n                        if (openCount == closeCount) {\n               \
    \             val openStr = openStr.substring(openStr.indexOf(\"(\") + 1, openStr.indexOf(\"\
    )\"))\n                            val closeStr = closeStr.substring(closeStr.indexOf(\"\
    )\") + 1, closeStr.indexOf(\")\"))\n                            val openStrSize\
    \ = openStr.size\n                            val closeStrSize = closeStr.size\n\
    \                            val openStrSet = openStr.iterator\n             \
    \               val closeStrSet = closeStr.iterator\n                        \
    \    while (openStrSet.hasNext && closeStrSet.hasNext) {\n                   \
    \             val openStr = openStrSet.next()\n                              \
    \  val closeStr = closeStrSet.next()\n                                val openCount\
    \ = ", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach { x =>\n            x match {\n                case \")\"\
    \ =>\n                    stack.pop()\n                case \")(\"  =>\n     \
    \               stack += x\n                case _ =>\n                    stack\
    \ += x\n            }\n        }\n        if (stack.size == 0) \"No\" else \"\
    Yes\"", "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.ListBuffer[String]()\n        val bad = mutable.ListBuffer[String]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer[Int]()\n\
    \        val goodCount = mutable.ListBuffer[Int]()\n        val badCount = mutable.ListBuffer",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stackSize2 = stackSize * stackSize\n\
    \        val stackSize3 = stackSize2 * stackSize\n        val stackSize4 = stackSize3\
    \ * stackSize\n        val stackSize5 = stackSize4 * stackSize\n        val stackSize6\
    \ = stackSize5 * stackSize\n        val stackSize7 = stackSize6 * stackSize\n\
    \        val stackSize8 = stackSize7 * stackSize\n        val stackSize9 = stackSize8\
    \ * stackSize\n        val stackSize10 = stackSize9 * stackSize\n        val stackSize11\
    \ = stackSize10 * stackSize\n        val stackSize12 = stackSize11 * stackSize\n\
    \        val stackSize13 = stackSize12 * stackSize\n        val stackSize14 =\
    \ stackSize13 * stackSize\n        val stackSize15 = stackSize14 * stackSize\n\
    \        val stackSize16 = stackSize15 * stackSize\n        val stackSize17 =\
    \ stackSize16 * stackSize\n        val stackSize18 = stackSize17 * stackSize\n\
    \        val stackSize19 = stackSize18 * stackSize\n        val stackSize20 =\
    \ stackSize19 * stackSize\n        val stackSize21 = stackSize20 * stackSize\n\
    \        val stackSize22 = stackSize21 * stackSize\n        val stackSize23 =\
    \ stackSize22 * stackSize\n        val stackSize24 = stackSize23 * stackSize\n\
    \        val stackSize25 = stackSize24 * stackSize\n        val stackSize26 =\
    \ stackSize25 * stackSize\n        val stackSize27 = stackSize26 * stackSize\n\
    \        val stackSize28 = stackSize27 * stackSize\n        val stackSize29 =\
    \ stackSize28 * stackSize\n        val stackSize30 = stackSize29 * stackSize\n\
    \        val stackSize31 = stackSize30 * stackSize\n        val stackSize32 =\
    \ stackSize31 * stackSize\n        val stackSize33 = stackSize32 * stackSize\n\
    \        val stackSize34 = stackSize33 * stackSize\n        val stackSize35 =\
    \ stackSize34 * stackSize\n        val stackSize36 = stackSize35 * stackSize\n\
    \        val stackSize37 = stackSize36 * stackSize\n        val stackSize38 =\
    \ stackSize37 * stackSize\n        val stackSize39 = stackSize38 * stackSize\n\
    \        val stackSize", "        val stack = mutable.Stack[String]()\n      \
    \  val result = mutable.ListBuffer.empty[String]\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       if (x contains \"(\") {\n                open += x\n            } else\
    \ {\n                close += x\n            }\n        })\n        val openCount\
    \ = open.size\n        val closeCount = close.size\n        if (openCount == closeCount)\
    \ {\n            val openStack = mutable.Stack[String]()\n            open.foreach(x\
    \ => {\n                openStack += x\n            })\n            val closeStack\
    \ = mutable.Stack[String]()\n            close.foreach(x => {\n              \
    \  closeStack += x\n            })\n            while (openStack.nonEmpty && closeStack.nonEmpty)\
    \ {\n                val open = openStack.pop()\n                val close = closeStack.pop()\n\
    \                if (open == close) {\n                    result += \"(\" + open\
    \ + \")\"\n                } else {\n                    result += \"(\" + open\
    \ + \")\" + close\n                }\n            }\n        }\n        if (result.nonEmpty)\
    \ {\n            return \"Yes\"\n        } else {\n            return \"No\"\n\
    \        }", "        val stack = mutable.Stack[String]()\n        val stack2\
    \ = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n  \
    \      val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer.empty[String]\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach { s =>\n     \
    \       val openCount = open.count(_ == s)\n            val closeCount = close.count(_\
    \ == s)\n            if (openCount > closeCount) {\n                result +=\
    \ \"No\"\n            } else {\n                result += \"Yes\"\n          \
    \  }\n            open += s\n            close += s\n            stack += s\n\
    \        }\n        result.toString", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => if (x == \"(\") stack += x else if (!x == \"(\") stack.pop()\
    \ else stack += x)\n        if (stack.size == 0) \"No\" else \"Yes\"", "     \
    \   val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n  \
    \      for(i <- 0 until stackSize) {\n            val str = lst(i)\n         \
    \   val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\")\n\
    \            if(open < 0 || close < 0) {\n                result.append(\"No\"\
    )\n            } else {\n                val stackStr = str.substring(open + 1,\
    \ close)\n                stack += stackStr\n            }\n        }\n      \
    \  if(stack.size == stackSize) {\n            result.append(\"Yes\")\n       \
    \ } else {\n            result.append(\"No\")\n        }\n        result.toString()",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open < 0 || close < 0) {\n                result.append(\"No\"\
    )\n            } else {\n                val stackSize = stack.size\n        \
    \        if(open < close && stackSize > 0) {\n                    stackSize -=\
    \ 1\n                    stack += str\n                } else if(open > close\
    \ && stackSize > 0) {\n                    stackSize -= 1\n                  \
    \  stack += str.reverse\n                } else {\n                    result.append(\"\
    No\")\n                }\n            }\n        }\n        if(result.size ==\
    \ lst.size) {\n            val stackSize = stack.size\n            if(stackSize\
    \ == 0) {\n                result.append(\"Yes\")\n            } else {\n    \
    \            result.append(\"No\")\n            }\n        }\n        result.toString()",
  "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            if(str == \"(\") {\n          \
    \      stack.push(str)\n            } else if(str == \")\") {\n              \
    \  val str = stack.pop()\n                if(str != \"\") {\n                \
    \    result += \"(\" + str + \")\"\n                }\n            } else {\n\
    \                result += \"(\" + str + \")\"\n            }\n        }\n   \
    \     if(result.size == lst.size) {\n            val str = result.toString\n \
    \           if(str.startsWith(\"(\") && str.endsWith(\")\")) {\n             \
    \   return \"Yes\"\n            }\n        }\n        return \"No\"", "      \
    \  val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        val open = mutable.ListBuffer.empty[String]\n        val close = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach { s =>\n            if (s == \"(\") open += s\n         \
    \   if (s == \"(\") stack += s\n            if (s == \")\")\n                if\
    \ (open.isEmpty) result += \"No\"\n                else if (open == close) result\
    \ += \"Yes\"\n                else if (stack.last == close) result += \"Yes\"\n\
    \                else if (stack.last == open) result += \"No\"\n             \
    \   else if (stack.last == open) result += \"Yes\"\n                else if (stack.last\
    \ == close) result += \"No\"\n                else if (stack.last == open) result\
    \ += \"No\"\n                else if (stack.last == close) result += \"Yes\"\n\
    \                else if (stack.last == open) result += \"No\"\n             \
    \   else if (stack.last == close) result += \"No\"\n                else if (stack.last\
    \ == open) result += \"Yes\"\n                else if (stack.last == close) result\
    \ += \"No\"\n                else if (stack.last == open) result += \"No\"\n \
    \               else if (stack.last == close) result += \"Yes\"\n            \
    \    else if (stack.last == open) result += \"No\"\n                else if (stack.last\
    \ == close) result += \"No\"\n                else if (stack.last == open) result\
    \ += \"Yes\"\n                else if (stack.last == close) result += \"No\"\n\
    \                else if (stack.last == open) result += \"No\"\n             \
    \   else if (stack.last == close) result += \"Yes\"\n                else if (stack.last\
    \ == open) result += \"No\"\n                else if (stack.last == close) result\
    \ += \"No\"\n                else if (stack.last == open) result += \"Yes\"\n\
    \                else if (stack.last == close) result += \"No\"\n            \
    \    else if (stack.last == open) result += \"No\"\n                else if (stack.last\
    \ == close) result += \"Yes\"\n                else if (stack.last == open) result\
    \ += \"No\"\n                else if (stack.last == close) result += \"No\"\n\
    \                else if (stack.last == open) result += \"Yes\"\n            \
    \    else if (stack.last == close) result += \"No\"\n                else if (stack.last\
    \ == open) result += \"No\"\n                else if (stack.last == close) result\
    \ += \"Yes\"\n                else if (stack.last == open) result += \"No\"\n\
    \                else if (stack.last == close) result += \"No\"\n            \
    \    else if (stack.last == open) result += \"Yes\"\n                else if (stack.last\
    \ == close) result += \"No\"\n                else if (", "        val stack =\
    \ mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n    \
    \    val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => x match {\n\
    \            case x if x == \")\" => close.push(x)\n            case x if x ==\
    \ \")()\" => close.push(x)\n            case x if x == \"()\" => open.push(x)\n\
    \            case x if x == \")()()\" => close.push(x)\n            case x if\
    \ x == \")()()()\" => close.push(x)\n            case x if x == \")()()()()\"\
    \ => close.push(x)\n            case x if x == \")()()()()()\" => close.push(x)\n\
    \            case x if x == \")()()()()()()\" => close.push(x)\n            case\
    \ x if x == \")()()()()()()()\" => close.push(x)\n            case x if x == \"\
    )()()()()()()()()\" => close.push(x)\n            case x if x == \")()()()()()()()()()\"\
    \ => close.push(x)\n            case x if x == \")()()()()()()()()()\" => close.push(x)\n\
    \            case x if x == \")()()()()()()()()()\" => close.push(x)\n       \
    \     case x if x == \")()()()()()()()()()()\" => close.push(x)\n            case\
    \ x if x == \")()()()()()()()()()()()\" => close.push(x)\n            case x if\
    \ x == \")()()()()()()()()()()()()\" => close.push(x)\n            case x if x\
    \ == \")()()()()()()()()()()()()\" => close.push(x)\n            case x if x ==\
    \ \")()()()()()()()()()()()()\" => close.push(x)\n            case x if x == \"\
    )()()()()()()()()()()()()\" => close.push(x)\n            case x if x == \")()()()()()()()()()()()()()\"\
    \ => close.push(x)\n            case x if x == \")()()()()()()()()()()()()()\"\
    \ => close.push(x)\n            case x if x == \")()()()()()()()()()()()()()\"\
    \ => close.push(x)\n            case x if x == \")()()()()()()()()()()()()()\"\
    \ ", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        val open = mutable.ListBuffer.empty[String]\n        val close = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ =>\n                    close.push(x)\n                case \")(\" =>\n    \
    \                open.push(x)\n                case _ =>\n                   \
    \ stack.push(x)\n            }\n        })\n        while(stack.nonEmpty) {\n\
    \            val x = stack.pop()\n            x match {\n                case\
    \ \")\" =>\n                    close.push(x)\n                case \")(\" =>\n\
    \                    open.push(x)\n                case _ =>\n               \
    \     stack.push(x)\n            }\n        }\n        val openCount = open.size\n\
    \        val closeCount = close.size\n        if(openCount == closeCount) {\n\
    \            val openStr = open.toList\n            val closeStr = close.toList\n\
    \            val openStrLen = openStr.size\n            val closeStrLen = closeStr.size\n\
    \            if(openStrLen > closeStrLen) {\n                val newOpen = openStr.take(closeStrLen)\n\
    \                val newClose = closeStr.take(openStrLen)\n                val\
    \ newStack = mutable.Stack[String]()\n                newStack.push(newOpen)\n\
    \                newStack.push(newClose)\n                while(newStack.nonEmpty)\
    \ {\n                    val x = newStack.pop()\n                    x match {\n\
    \                        case \")\" =>\n                            close.push(x)\n\
    \                        case \")(\" =>\n                            open.push(x)\n\
    \                        case _ =>\n                            newStack.push(x)\n\
    \                    }\n                }\n                val newOpenCount =\
    \ open.size\n                val newCloseCount = close.size\n                if(newOpenCount\
    \ == newCloseCount) {\n                    val newOpenStr = open.toList\n    \
    \                val newCloseStr = close.toList\n                    val newOpenStrLen\
    \ = newOpenStr.size\n                    val newCloseStrLen = newCloseStr.size\n\
    \                    if(newOpenStrLen > newCloseStrLen) {\n                  \
    \      val newOpen = newOpenStr.take(newCloseStrLen)\n                       \
    \ val newClose = newCloseStr.take(newOpenStrLen)\n                        val\
    \ newStack = mutable.Stack[String]()\n                        newStack.push(newOpen)\n\
    \                        newStack.push(newClose)\n                        while(newStack.nonEmpty)\
    \ {\n                            val x = newStack.pop()\n                    \
    \        x match {\n                                case \")\" =>\n          \
    \                          close.push(x)\n                                ", " \
    \       val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val index = str.indexOf(\"(\")\n            val endIndex = str.indexOf(\"\
    )\")\n            if(index == -1 || endIndex == -1) {\n                stack +=\
    \ str\n            } else {\n                val openParen = str.substring(0,\
    \ index)\n                val closeParen = str.substring(endIndex + 1, str.length)\n\
    \                stack += openParen\n                stack += closeParen\n   \
    \         }\n        }\n        val stackSize = stack.size\n        val stackElements\
    \ = stack.iterator\n        while(stackElements.hasNext) {\n            val element\
    \ = stackElements.next()\n            val index = element.indexOf(\"(\")\n   \
    \         val endIndex = element.indexOf(\")\")\n            if(index == -1 ||\
    \ endIndex == -1) {\n                result += \"(\" + element + \")\"\n     \
    \       } else {\n                val openParen = element.substring(0, index)\n\
    \                val closeParen = element.substring(endIndex + 1, element.length)\n\
    \                result += \"(\" + openParen + \")\" + closeParen\n          \
    \  }\n        }\n        if(result.size == stackSize) {\n            return \"\
    Yes\"\n        } else {\n            return \"No\"\n        }", "        val stack\
    \ = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.length) {\n            val str = lst(i)\n      \
    \      val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open < 0 || close < 0) {\n                result.append(\"No\"\
    )\n            } else {\n                val openCount = stack.length\n      \
    \          val closeCount = stack.length\n                val openParen = str.indexOf(\"\
    (\")\n                val closeParen = str.indexOf(\")\")\n                val\
    \ openParenCount = openParen\n                val closeParenCount = closeParen\n\
    \                val openCount = openParenCount - closeParenCount\n          \
    \      val closeCount = closeParenCount - openParenCount\n                val\
    \ openParenCount = openParen\n                val closeParenCount = closeParen\n\
    \                val openCount = openParenCount - closeParenCount\n          \
    \      val closeCount = closeParenCount - openParenCount\n                if(openCount\
    \ > closeCount) {\n                    result.append(\"No\")\n               \
    \ } else {\n                    result.append(\"Yes\")\n                }\n  \
    \          }\n            stack.push(str)\n        }\n        return result.toString()",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            val stackSize = stack.size\n            if(open < close && stackSize\
    \ > 0) {\n                val stackStr = stack.toList\n                val stackStrSize\
    \ = stackStr.size\n                val stackStrLast = stackStr(stackStrSize -\
    \ 1)\n                val stackStrFirst = stackStr(0)\n                val stackStrLastIndex\
    \ = stackStr.lastIndex\n                val stackStrFirstIndex = stackStr.indexOf(0)\n\
    \                val stackStrLastChar = stackStr(stackStrLastIndex - 1)\n    \
    \            val stackStrFirstChar = stackStr(stackStrFirstIndex - 1)\n      \
    \          val stackStrLastCharIndex = stackStr.lastIndexOf(0)\n             \
    \   val stackStrFirstCharIndex = stackStr.indexOf(0)\n                val stackStrLastCharCount\
    \ = stackStr.lastIndexOf(0)\n                val stackStrFirstCharCount = stackStr.indexOf(0)\n\
    \                val stackStrLastCharCountIndex = stackStr.lastIndexOf(0)\n  \
    \              val stackStrFirstCharCountIndex = stackStr.indexOf(0)\n       \
    \         val stackStrLastCharCountIndex = stackStr.lastIndexOf(0)\n         \
    \       val stackStrFirstCharCountIndex = stackStr.indexOf(0)\n              \
    \  val stackStrLastCharCountIndex = stackStr.lastIndexOf(0)\n                val\
    \ stackStrFirstCharCountIndex = stackStr.indexOf(0)\n                val stackStrLastCharCountIndex\
    \ = stackStr.lastIndexOf(0)\n                val stackStrFirstCharCountIndex =\
    \ stackStr.indexOf(0)\n                val stackStrLastCharCountIndex = stackStr.lastIndexOf(0)\n\
    \                val stackStrFirstCharCountIndex = stackStr.indexOf(0)\n     \
    \           val stackStrLastCharCountIndex = stackStr.lastIndexOf(0)\n       \
    \         val stackStrFirstCharCountIndex = stackStr.indexOf(0)\n            \
    \    val stackStrLastCharCountIndex = stackStr.lastIndexOf(0)\n              \
    \  val stackStrFirstCharCountIndex = stackStr.indexOf(0)\n                val\
    \ stackStrLastCharCountIndex = stackStr.lastIndexOf(0)\n                val stackStrFirstCharCountIndex\
    \ = stackStr.indexOf(0)\n                val stackStrLastCharCountIndex = stackStr.lastIndexOf(0)\n\
    \                val stackStrFirstCharCountIndex = stackStr.indexOf(0)\n     \
    \           val stackStrLastCharCountIndex = stackStr.lastIndexOf(0)\n       \
    \         val stackStrFirstCharCountIndex = stackStr", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ queue = mutable.Queue[String]()\n        val good = mutable.Set[String]()\n\
    \        lst.foreach(x => if (x == \"(\") stack += x else if (!x == \"(\") queue\
    \ += x else ())\n        while(!stack.isEmpty && !queue.isEmpty) {\n         \
    \   val x = stack.pop()\n            val y = queue.pop()\n            if (x ==\
    \ \"(\" && y == \"(\") good += x else if (!x == \"(\" && y == \"(\") good += y\
    \ else if (!x == \"(\" && y == \")\") good += y else if (!x == \"(\" && y == \"\
    )\") good += x else if (!x == \"(\" && y == \"[\")) good += y else if (!x == \"\
    (\" && y == \"[\")) good += x else if (!x == \"(\" && y == \"{\")) good += y else\
    \ if (!x == \"(\" && y == \"{\")) good += x else if (!x == \"(\" && y == \"]\"\
    )) good += y else if (!x == \"(\" && y == \"]\")) good += x else if (!x == \"\
    (\" && y == \"}\")) good += y else if (!x == \"(\" && y == \"}\")) good += x else\
    \ if (!x == \"[\" && y == \"[\")) good += y else if (!x == \"[\" && y == \"[\"\
    )) good += x else if (!x == \"[\" && y == \"{\")) good += y else if (!x == \"\
    [\" && y == \"{\")) good += x else if (!x == \"[\" && y == \"}\")) good += y else\
    \ if (!x == \"[\" && y == \"}\")) good += x else if (!x == \"{\" && y == \"{\"\
    )) good += y else if (!x == \"{\" && y == \"{\")) good += x else if (!x == \"\
    {\" && y == \"}\")) good += y else if (!x == \"{\" && y == \"}\")) good += x else\
    \ if (!x == \"}\" && y == \"}\")) good += y else if (!x == \"}\" && y == \"}\"\
    )) good += x else if (!x == \"}\" && y == \"[\")) good += y else if (!x == \"\
    }\" && y == \"[\")) good += x else if (!x == \"}\" && y == \"{\")) good += y else\
    \ if (!x == \"}\" && y == \"{\")) good += x else if (!x == \"}\" && y == \"]\"\
    )) good += y else if (!x == \"}\" && y == \"]\")) good += x else if (!x == \"\
    }\" && y == \"}\")) good += y else if (!x == \"}\" && y == \"}\")) good ", " \
    \       val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open < 0 || close < 0) {\n                result.append(\"No\"\
    )\n            } else {\n                val stackSize = stack.size\n        \
    \        if(open < close) {\n                    stack.push(str)\n           \
    \     } else {\n                    val top = stack.pop()\n                  \
    \  if(top == str) {\n                        result.append(\"Yes\")\n        \
    \            } else {\n                        result.append(\"No\")\n       \
    \             }\n                }\n            }\n        }\n        return result.toString()",
  "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer.empty[String]\n        lst.foreach { s =>\n    \
    \        val newStack = mutable.Stack[String]()\n            val newResult = mutable.ListBuffer.empty[String]\n\
    \            val open = s.charAt(0)\n            val close = s.charAt(s.length\
    \ - 1)\n            val openCount = if (open == '(') 1 else 0\n            val\
    \ closeCount = if (close == ')') 1 else 0\n            val newOpenCount = openCount\
    \ + 1\n            val newCloseCount = closeCount + 1\n            val newOpen\
    \ = if (open == '(') '(' else ')'\n            val newClose = if (close == ')')\
    \ ')')' else '('\n            val newStackPush = stack push newOpen\n        \
    \    val newStackPop = stack pop\n            val newResultPush = newResult push\
    \ newOpen\n            val newResultPop = newResult pop\n            val newStack\
    \ = newStackPush ++ newStackPop\n            val newResult = newResultPush ++\
    \ newResultPop\n            while (newStack.length > 0) {\n                val\
    \ newChar = newStack.head\n                val newCount = newStack.length\n  \
    \              if (newChar == newClose) {\n                    newStack = newStack.tail\n\
    \                    newResult = newResultPush ++ newResultPop\n             \
    \       newStackPush = newStack.head :: newStack\n                    newResultPush\
    \ = newResult push newClose\n                    newResultPop = newResult pop\n\
    \                    newStack = newStackPush ++ newStackPop\n                \
    \    newResult = newResultPush ++ newResultPop\n                }\n          \
    \      else if (newChar == newOpen) {\n                    newStack = newStack.tail\n\
    \                    newResult = newResultPush ++ newResultPop\n             \
    \       newStackPush = newStack.head :: newStack\n                    newResultPush\
    \ = newResult push newOpen\n                    newResultPop = newResult pop\n\
    \                    newStack = newStackPush ++ newStackPop\n                \
    \    newResult = newResultPush ++ newResultPop\n                }\n          \
    \      else if (newChar == '(') {\n                    newStackPush = newStack.head\
    \ :: newStack\n                    newResultPush = newResult push newOpen\n  \
    \                  newResultPop = newResult pop\n                    newStack\
    \ = newStackPush ++ newStackPop\n                    newResult = newResultPush\
    \ ++ newResultPop\n                }\n                else if (newChar == ')')\
    \ {\n                    newStackPush = newStack.head :: newStack\n          \
    \          newResultPush = newResult push newClose\n                    newResultPop\
    \ = newResult pop"]
stop_tokens:
- "\n    }\n"
