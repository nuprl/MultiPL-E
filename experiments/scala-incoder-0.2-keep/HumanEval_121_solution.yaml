name: HumanEval_121_solution
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a non-empty list of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n    // Examples\n    // solution([5, 8, 7, 1]) ==>\
  \ 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30, 13, 24, 321])\
  \ ==>0\n    def solution(lst : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
  \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
  \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
  \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
  \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
  \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
  \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
  \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
completions: ["        var sum = 0\n        var evenSum = 0\n        lst.foreach(x\
    \ => {\n            if (x % 2 == 0) {\n                evenSum += x\n        \
    \    }\n            else {\n                sum += x\n            }\n        })\n\
    \        evenSum", "        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum\
    \ = odd.sum\n        val evenSumOdd = evenSum + oddSum\n        evenSumOdd", " \
    \       val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = even.foldLeft(0)(_ + _)\n        val oddSum = odd.foldLeft(0)(_\
    \ + _)\n        evenSum + oddSum", "        val even = lst.filter(_ % 2 == 0)\n\
    \        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n  \
    \      val oddSum = odd.sum\n        evenSum + oddSum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        oddSum - evenSum", "     \
    \   val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n       \
    \ val result = evenSum + oddSum\n        result", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        val result = evenSum\
    \ + oddSum\n        result", "        val even = lst.filter(_ % 2 == 0)\n    \
    \    val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n      \
    \  val oddSum = odd.sum\n        evenSum + oddSum", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        val result = evenSum\
    \ + oddSum\n        result", "        val even = lst.filter(_ % 2 == 0)\n    \
    \    val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n      \
    \  val oddSum = odd.sum\n        evenSum - oddSum", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val result = evenSum + oddSum\n       \
    \ result", "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      evenSum - oddSum", "        val even = lst.filter(_ % 2 == 0)\n       \
    \ val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val\
    \ oddSum = odd.sum\n        evenSum - oddSum", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        evenSum - oddSum", "        val evens =\
    \ lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum\
    \ - oddSum", "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      evenSum + oddSum", "        var sum = 0\n        var even = 0\n       \
    \ var odd = 0\n        lst.foreach{\n            x =>\n            if (x % 2 ==\
    \ 0) {\n                even += x\n            } else {\n                odd +=\
    \ x\n            }\n        }\n        sum = even + odd\n        return sum",
  "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val result = even.foldLeft(0L)(_ + odd.sum)\n        result", " \
    \       val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val result = evenSum - oddSum\n        result"]
stop_tokens:
- "\n    }\n"
