language: scala
name: HumanEval_44_change_base
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") { (acc, digit) => acc + digit\
    \ }\n        val baseString = if (base < 10) \"0\" + base.toString else \"\"\n\
    \        result + baseString\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3hb1h349.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits(0)\n        val remainder = digits.tail.foldLeft(0)((acc,\
    \ digit) => acc * base + digit)\n        val remainderString = remainder.toString.reverse\n\
    \        result + remainderString\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvcuw6_3h.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvcuw6_3h.scala:16:64 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = digits.tail.foldLeft(\e\
    [31m0\e[0m)((\e[36macc\e[0m, \e[36mdigit\e[0m) => acc * base + digit)\n\e[31m\e\
    [31m   |\e[0m                                                                ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    String\n\e[31m   |\e[0m                                                 \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (result\
    \ == \"0\") \"-\" else \"\")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt4wdg818.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = new StringBuilder\n        digits.foreach(x => result.append(x.reverse))\n\
    \        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzyndq_qm.scala:20)\n\tat Problem.main(tmpzyndq_qm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val digit = digits.last\n\
    \        val digits = digits.dropRight(1)\n        val digit = digits.last\n \
    \       val digits = digits.dropRight(1)\n        val digit = digits.last\n  \
    \      val digits = digits.dropRight(1)\n        val digit = digits.last\n   \
    \     val digits = digits.dropRight(1)\n        val digit = digits.last\n    \
    \    val digits = digits.dropRight(1)\n        val digit = digits.last\n     \
    \   val digits = digits.dropRight(1)\n        val digit = digits.last\n      \
    \  val digits = digits.dropRight(1)\n        val digit = digits.last\n       \
    \ val digits = digits.dropRight(1)\n        val digit = digits.last\n        val\
    \ digits = digits.dropRight(1)\n        val digit = digits.last\n        val digits\
    \ = digits.dropRight(1)\n        val digit = digits.last\n        val digits =\
    \ digits.dropRight(1)\n        val digit = digits.last\n        val digits = digits.dropRight(1)\n\
    \        val digit = digits.last\n        val digits = digits.dropRight(1)\n \
    \       val digit = digits.last\n        val digits = digits.dropRight(1)\n  \
    \      val digit = digits.last\n        val digits = digits.dropRight(1)\n   \
    \     val digit = digits.last\n        val digits = digits.dropRight(1)\n    \
    \    val digit = digits.last\n        val digits = digits.dropRight(1)\n     \
    \   val digit = digits.last\n        val digits = digits.dropRight(1)\n      \
    \  val digit = digits.last\n        val digits = digits.dropRight(1)\n       \
    \ val digit = digits.last\n        val digits = digits.dropRight(1)\n        val\
    \ digit = digits.last\n        val digits = digits.dropRight(1)\n        val digit\
    \ = digits.last\n        val digits = digits.dropRight(1)\n        val digit =\
    \ digits.last\n        val digits = digits.dropRight(1)\n        val digit = digits.last\n\
    \        val digits = digits.dropRight(1)\n        val digit = digits.last\n \
    \       val digits = digits.dropRight(1)\n        val digit = digits.last\n  \
    \      val digits = digits.dropRight(1)\n        val digit = digits.last\n   \
    \     val digits = digits.dropRight(1)\n        val digit = digits.last\n    \
    \    val digits = digits.dropRight(1)\n        val digit = digits.last\n     \
    \   val digits = digits.dropRight(1)\n        val digit = digits.last\n      \
    \  val digits = digits.dropRight(1)\n        val digit = digits.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmkepj1ic.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = digits.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmkepj1ic.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mdigit\e[0m = digits.last\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigit is already\
    \ defined as \e[33mvalue\e[0m \e[35mdigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmkepj1ic.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigits\e[0m = digits.dropRight(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigits is already\
    \ defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmkepj1ic.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigit\e[0m = digits.last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigit is already defined as \e[33mvalue\e[0m \e[35mdigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmkepj1ic.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = digits.dropRight(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded method"
  stdout: ''
  timestamp: 1659798995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else base.toChar)\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmo8ep0ih.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val digit = digits.last\n\
    \        val remainder = digits.dropRight(1)\n        if (remainder.isEmpty) result\n\
    \        else if (remainder.last == 0) result + digit\n        else result + digit\
    \ + changeBase(remainder.last, base)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9md9lsax.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ < 10) \"0\" + base.toString else base.toString\n        val result = baseString\
    \ + result\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4raluek7.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = baseString\
    \ + result\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp4raluek7.scala:14:76 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val baseString =\
    \ if (base < 10) \"0\" + base.toString else base.toString\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppeuodwo8.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798993
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        var result = \"\"\n        var remainder\
    \ = x % base\n        while(x > 0) {\n            result += (remainder % base).toString\n\
    \            remainder = (remainder / base).toLong\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659798998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") {\n            (acc, digit)\
    \ => acc + digit.drop(base).reverse\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu2rz4a86.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu2rz4a86.scala:16:45 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            (\e[36macc\e[0m, \e[36mdigit\e[0m) => acc\
    \ + digit.drop(base).reverse\n\e[31m\e[31m   |\e[0m                          \
    \                   ^^^^\e[0m\n\e[31m   |\e[0m                               \
    \              Found:    (base : Long)\n\e[31m   |\e[0m                      \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base) \"\" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6bm1yvz1.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + if (digits.size\
    \ < base) \"\" else changeBase(digits.tail, base)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpks7ewu8j.scala:16:17 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result + \e[33mif\e[0m (digits.size < base) \e\
    [31m\"\"\e[0m \e[33melse\e[0m changeBase(digits.tail, base)\n\e[31m\e[31m   |\e\
    [0m                 ^^\e[0m\n\e[31m   |\e[0m                 expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpks7ewu8j.scala:14:76 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val bases = List(10, 8, 7, 6)\n \
    \       val digits = x.toString.reverse.grouped(base).toList\n        val result\
    \ = digits(0) match {\n            case head :: tail => head * bases(base) + changeBase(tail,\
    \ base)\n            case _ => \"\"\n        }\n        result.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf2pk_de8.scala:15:48\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpf2pk_de8.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m head :: tail => head * bases(base)\
    \ + changeBase(tail, base)\n\e[31m\e[31m   |\e[0m                            \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0mvalue * is not a member of Any, but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpf2pk_de8.scala:17:46 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m head :: tail => head * bases(base)\
    \ + changeBase(tail, base)\n\e[31m\e[31m   |\e[0m                            \
    \                  ^^^^\e[0m\n\e[31m   |\e[0m                                \
    \              Found:    (base : Long)\n\e[31m   |\e[0m                      \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result == \"\
    0\") \"1\" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo_fe1qek.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        var result = \"\"\n        var remainder\
    \ = x % base\n        var quotient = x / base\n        while (quotient > 0) {\n\
    \            result += quotient.toString\n            quotient = quotient / base\n\
    \        }\n        result += remainder.toString\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5c75x3bi.scala:26)\n\tat Problem.main(tmp5c75x3bi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base) 0 else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcdnw635_.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") { (acc, digit) => acc + digit\
    \ }\n        return result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj7s262fm.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val baseString =\
    \ if (base < 10) \"0\" + base.toString\n        else base.toString\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvodny9ym.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val digit = digits.head\n\
    \        val rest = digits.tail\n        val restString = rest.mkString(\"\")\n\
    \        val restDigit = rest.toString.reverse.grouped(base).reverse.head\n  \
    \      val restString = rest.toString.reverse.grouped(base).reverse.mkString(\"\
    \")\n        val restDigits = rest.toString.reverse.grouped(base).reverse.tail\n\
    \        val restString = rest.toString.reverse.grouped(base).reverse.mkString(\"\
    \")\n        val restDigit = rest.toString.reverse.grouped(base).reverse.head\n\
    \        val restString = rest.toString.reverse.grouped(base).reverse.mkString(\"\
    \")\n        val restDigits = rest.toString.reverse.grouped(base).reverse.tail\n\
    \        val restString = rest.toString.reverse.grouped(base).reverse.mkString(\"\
    \")\n        val restDigit = rest.toString.reverse.grouped(base).reverse.head\n\
    \        val restString = rest.toString.reverse.grouped(base).reverse.mkString(\"\
    \")\n        val restDigits = rest.toString.reverse.grouped(base).reverse.tail\n\
    \        val restString = rest.toString.reverse.grouped(base).reverse.mkString(\"\
    \")\n        val restDigit = rest.toString.reverse.grouped(base).reverse.head\n\
    \        val restString = rest.toString.reverse.grouped(base).reverse.mkString(\"\
    \")\n        val restDigits = rest.toString.reverse.grouped(base).reverse.tail\n\
    \        val restString = rest.toString.reverse.grouped(base).reverse.mkString(\"\
    \")\n        val restDigit = rest.toString.reverse.grouped(base).reverse.head\n\
    \        val restString = rest.toString.reverse.grouped(base).reverse.mkString(\"\
    \")\n        val restDigits = rest.toString.reverse.grouped(base).reverse.tail\n\
    \        val restString = rest.toString.reverse.grouped(base).reverse.mkString(\"\
    \")\n        val restDigit = rest.toString.reverse.grouped(base).reverse.head\n\
    \        val restString = rest.toString.reverse.grouped(base).reverse.mkString(\"\
    \")\n        val restDigits = rest.toString.reverse.grouped(base).reverse.tail\n\
    \        val restString = rest.toString.reverse.grouped(base).reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8py0uxno.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mrestString\e[0m = rest.toString.reverse.grouped(base).reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrestString is already defined as \e[33mvalue\e[0m \e[35mrestString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8py0uxno.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mrestString\e[0m = rest.toString.reverse.grouped(base).reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrestString is already defined as \e[33mvalue\e[0m \e[35mrestString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8py0uxno.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mrestDigit\e[0m = rest.toString.reverse.grouped(base).reverse.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrestDigit is already defined as \e[33mvalue\e[0m \e[35mrestDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8py0uxno.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mrestString\e[0m = rest.toString.reverse.grouped(base).reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrestString is already defined as \e[33mvalue\e[0m \e[35mrestString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of to"
  stdout: ''
  timestamp: 1659798995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + digits.tail.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf83fdyl0.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        digits.tail.foldLeft(result)\
    \ { case (acc, digit) => acc + digit }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvp1cvncw.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base) \"\" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6bm1yvz1.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmnizkhu4.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \"\" + base)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoeldn_w7.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = new StringBuilder\n        digits.reverse.foreach(x => result.append(x.toChar))\n\
    \        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp300a8p7n.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp300a8p7n.scala:16:52 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        digits.reverse.foreach(\e[36mx\e[0m => result.append(x.toChar))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659799006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + (if\
    \ (digits.isEmpty) \"\" else base.toString.reverse)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0cfhvyjo.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + digits.reverse.takeWhile(_\
    \ < base).reverse.mkString\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvru7jage.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvru7jage.scala:16:46 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result + digits.reverse.takeWhile(_ < base).reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^\e[0m\n\
    \e[31m   |\e[0m                                              Found:    (base :\
    \ Long)\n\e[31m   |\e[0m                                              Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else base.toString.charAt(base.toString.length - digits.length))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpct18a7_7.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val len = result.length\n\
    \        val zeros = len % base\n        val zeroChar = if (zeros == 0) \"\" else\
    \ new String(new Array[Char](zeros))\n        val result = zeroChar + result\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq2wgvzs1.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = zeroChar +\
    \ result\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpq2wgvzs1.scala:14:48 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base).toList\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^\e[0m\n\
    \e[31m   |\e[0m                                                Found:    (base\
    \ : Long)\n\e[31m   |\e[0m                                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq2wgvzs1.scala:18:74\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mzeroChar\e\
    [0m = \e[33mif\e[0m (zeros == \e[31m0\e[0m) \e[31m\"\"\e[0m \e[33melse\e[0m \e\
    [33mnew\e[0m \e[35mString\e[0m(\e[33mnew\e[0m \e[35mArray\e[0m[\e[35mChar\e[0m](zeros))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \                 Found:    (zeros : Long)\n\e[31m   |\e[0m                  \
    \                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) 0 else \"\")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuxiprakj.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = digits.reverse.mkString(\"\")\n        val len = result.length\n\
    \        val zeros = len - result.length\n        val zeroChar = if (zeros ==\
    \ 0) \"0\" else \"\"\n        val result = zeroChar + result\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1g_u3cfe.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = zeroChar +\
    \ result\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp1g_u3cfe.scala:15:28 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e[31m\"\
    \"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" else \"\"\n        result + baseString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg_nu6oxc.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") {\n            case (acc,\
    \ digit) => acc + digit.drop(base).reverse\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeha1k9vf.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeha1k9vf.scala:16:50 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m (acc, digit) => acc + digit.drop(base).reverse\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Found:  \
    \  (base : Long)\n\e[31m   |\e[0m                                            \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString\n        result + (if (digits.size == base)\
    \ \"\" else \"0\" * (base - digits.size))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgbixs4kc.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") {\n            case(acc, digit)\
    \ => acc + digit.drop(base).reverse\n        }\n        result + digits.reverse.takeWhile(_\
    \ != '0').mkString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg2uht2ds.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg2uht2ds.scala:16:49 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m(acc, digit) => acc + digit.drop(base).reverse\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^\e[0m\n\
    \e[31m   |\e[0m                                                 Found:    (base\
    \ : Long)\n\e[31m   |\e[0m                                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpg2uht2ds.scala:18:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        result + digits.reverse.takeWhile(_ != \e[31m'0'\e\
    [0m).mkString\n\e[31m\e[31m   |\e[0m                                         \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char cannot\
    \ be compared with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1659799008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") { (result, digit) =>\n   \
    \         val digitString = digit.toString\n            val newDigitString = digitString.substring(0,\
    \ digitString.length - 1) + digitString.substring(digitString.length - 1)\n  \
    \          result += newDigitString\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprc3zz0ls.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmprc3zz0ls.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            result += newDigitString\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of String - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + digits.reverse.takeWhile(_\
    \ < base).reverse.mkString\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvru7jage.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvru7jage.scala:16:46 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result + digits.reverse.takeWhile(_ < base).reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^\e[0m\n\
    \e[31m   |\e[0m                                              Found:    (base :\
    \ Long)\n\e[31m   |\e[0m                                              Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits(0)\n        val digit = digits(1)\n        val baseDigit\
    \ = digits(2)\n        val newBase = digits(3).toString.reverse.grouped(base).toList\n\
    \        val newDigit = newBase(0)\n        val newBaseDigit = newBase(1)\n  \
    \      val newDigitDigit = newBase(2)\n        val newBaseDigitDigit = newBase(3)\n\
    \        val newBaseDigitDigitDigit = newBase(4)\n        val newBaseDigitDigitDigitDigit\
    \ = newBase(5)\n        val newBaseDigitDigitDigitDigitDigit = newBase(6)\n  \
    \      val newBaseDigitDigitDigitDigitDigitDigit = newBase(7)\n        val newBaseDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(8)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigit =\
    \ newBase(9)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(10)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(11)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(12)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(13)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(14)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(15)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(16)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(17)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(18)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(19)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(20)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(21)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(22)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(23)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(24)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(25)\n        val newBaseDigitDigitDigitDigitDigit\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj_2lpjf7.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj_2lpjf7.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\e[0m =\
    \ newBase(\e[31m13\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35mnewBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpj_2lpjf7.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mnewBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\e\
    [0m = newBase(\e[31m15\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35mnewBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpj_2lpjf7.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mnewBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\e\
    [0m = newBase(\e[31m17\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35mnewBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigi"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (result\
    \ == \"0\") \"1\" else \"\")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnknf5wxl.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0jufsxnt.scala:15:15 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        digits.reverse.mkString\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a member of\
    \ Iterator[String] - did you mean digits.reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else s\"${digits.last}\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprjzw__oa.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ < 10) \"0\" + base.toString else base.toString\n        result + baseString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0upatygm.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result == \"\
    0\") \"-\" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdin2wdfe.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val bases = List('0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9')\n        val digits = List('0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9')\n        val digits_base = digits.zip(bases)\n\
    \        val digits_base_sorted = digits_base.sortBy(_._1).reverse\n        val\
    \ digits_base_sorted_reverse = digits_base_sorted.reverse\n        val digits_base_sorted_reverse2\
    \ = digits_base_sorted_reverse.tail\n        val digits_base_sorted_reverse3 =\
    \ digits_base_sorted_reverse2.tail\n        val digits_base_sorted_reverse4 =\
    \ digits_base_sorted_reverse3.tail\n        val digits_base_sorted_reverse5 =\
    \ digits_base_sorted_reverse4.tail\n        val digits_base_sorted_reverse6 =\
    \ digits_base_sorted_reverse5.tail\n        val digits_base_sorted_reverse7 =\
    \ digits_base_sorted_reverse6.tail\n        val digits_base_sorted_reverse8 =\
    \ digits_base_sorted_reverse7.tail\n        val digits_base_sorted_reverse9 =\
    \ digits_base_sorted_reverse8.tail\n        val digits_base_sorted_reverse10 =\
    \ digits_base_sorted_reverse9.tail\n        val digits_base_sorted_reverse11 =\
    \ digits_base_sorted_reverse10.tail\n        val digits_base_sorted_reverse12\
    \ = digits_base_sorted_reverse11.tail\n        val digits_base_sorted_reverse13\
    \ = digits_base_sorted_reverse12.tail\n        val digits_base_sorted_reverse14\
    \ = digits_base_sorted_reverse13.tail\n        val digits_base_sorted_reverse15\
    \ = digits_base_sorted_reverse14.tail\n        val digits_base_sorted_reverse16\
    \ = digits_base_sorted_reverse15.tail\n        val digits_base_sorted_reverse17\
    \ = digits_base_sorted_reverse16.tail\n        val digits_base_sorted_reverse18\
    \ = digits_base_sorted_reverse17.tail\n        val digits_base_sorted_reverse19\
    \ = digits_base_sorted_reverse18.tail\n        val digits_base_sorted_reverse20\
    \ = digits_base_sorted_reverse19.tail\n        val digits_base_sorted_reverse21\
    \ = digits_base_sorted_reverse20.tail\n        val digits_base_sorted_reverse22\
    \ = digits_base_sorted_reverse21.tail\n        val digits_base_sorted_reverse23\
    \ = digits_base_sorted_reverse22.tail\n        val digits_base_sorted_reverse24\
    \ = digits_base_sorted_reverse23.tail\n        val digits_base_sorted_reverse25\
    \ = digits_base_sorted_reverse24.tail\n        val digits_base_sorted_reverse26\
    \ = digits_base_sorted_reverse25.tail\n        val digits_base_sorted_reverse27\
    \ = digits_base_sorted_reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4z2abnr_.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (x < base) \"\
    \" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy9czp3m3.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result == \"\
    0\") \"1\" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo_fe1qek.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmnizkhu4.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) 0 else \"\")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuxiprakj.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \"0\")\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp21uv0g3_.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits(0)\n        val remainder = digits(1)\n        val\
    \ digit = remainder.toString.reverse.grouped(base).toList\n        val remainderString\
    \ = digits(1)\n        val remainderDigit = remainderString.reverse.grouped(base).toList\n\
    \        val remainderDigitString = digits(1)\n        val remainderDigitString2\
    \ = remainderDigitString.reverse.grouped(base).toList\n        val remainderDigitString3\
    \ = remainderDigitString2.reverse.grouped(base).toList\n        val remainderDigitString4\
    \ = remainderDigitString3.reverse.grouped(base).toList\n        val remainderDigitString5\
    \ = remainderDigitString4.reverse.grouped(base).toList\n        val remainderDigitString6\
    \ = remainderDigitString5.reverse.grouped(base).toList\n        val remainderDigitString7\
    \ = remainderDigitString6.reverse.grouped(base).toList\n        val remainderDigitString8\
    \ = remainderDigitString7.reverse.grouped(base).toList\n        val remainderDigitString9\
    \ = remainderDigitString8.reverse.grouped(base).toList\n        val remainderDigitString10\
    \ = remainderDigitString9.reverse.grouped(base).toList\n        val remainderDigitString11\
    \ = remainderDigitString10.reverse.grouped(base).toList\n        val remainderDigitString12\
    \ = remainderDigitString11.reverse.grouped(base).toList\n        val remainderDigitString13\
    \ = remainderDigitString12.reverse.grouped(base).toList\n        val remainderDigitString14\
    \ = remainderDigitString13.reverse.grouped(base).toList\n        val remainderDigitString15\
    \ = remainderDigitString14.reverse.grouped(base).toList\n        val remainderDigitString16\
    \ = remainderDigitString15.reverse.grouped(base).toList\n        val remainderDigitString17\
    \ = remainderDigitString16.reverse.grouped(base).toList\n        val remainderDigitString18\
    \ = remainderDigitString17.reverse.grouped(base).toList\n        val remainderDigitString19\
    \ = remainderDigitString18.reverse.grouped(base).toList\n        val remainderDigitString20\
    \ = remainderDigitString19.reverse.grouped(base).toList\n        val remainderDigitString21\
    \ = remainderDigitString20.reverse.grouped(base).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqxzb0kbl.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqxzb0kbl.scala:17:55 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mdigit\e[0m = remainder.toString.reverse.grouped(base).toList\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Found:  \
    \  (base : Long)\n\e[31m   |\e[0m                                            \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqxzb0kbl.scala:19:61\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mremainderDigit\e\
    [0m = remainderString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m    \
    \                                                         ^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                                 Found:    (base : Long)\n\
    \e[31m   |\e[0m                                                 Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqxzb0kbl.scala:21:73\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mremainderDigitString2\e\
    [0m = remainderDigitString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m\
    \                                                                         ^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Found:  \
    \  (base : Long)\n\e[31m   |\e[0m                                            \
    \   "
  stdout: ''
  timestamp: 1659799016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + if (digits.size\
    \ == 1) \"0\" else \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqpec7clt.scala:16:17 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result + \e[33mif\e[0m (digits.size == \e[31m1\e\
    [0m) \e[31m\"0\"\e[0m \e[33melse\e[0m \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m \
    \                ^^\e[0m\n\e[31m   |\e[0m                 expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpqpec7clt.scala:14:48 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base).toList\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^\e[0m\n\
    \e[31m   |\e[0m                                                Found:    (base\
    \ : Long)\n\e[31m   |\e[0m                                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else base.toChar)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwytj5h0v.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (x < base) \"\
    \" else \"\" + base.toString.charAt(base.toString.length - 1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy4g5a433.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString\n        result + (if (digits.isEmpty)\
    \ \"\" else base.toChar)\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppaox84qm.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val result = result.reverse\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4zlo2lpk.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mresult\
    \ is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4zlo2lpk.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        digits.tail.foldLeft(result)\
    \ { case (acc, digit) => acc + digit }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvp1cvncw.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val bases = List('0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9')\n        val digits = List('0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9')\n        val digits_pow = digits.map(x => bases.indexOf(x)\
    \ * base)\n        val digits_pow_sorted = digits_pow.sorted\n        val digits_pow_sorted_reversed\
    \ = digits_pow_sorted.reverse\n        val digits_pow_sorted_reversed_reversed\
    \ = digits_pow_sorted_reversed.reverse\n        val digits_pow_sorted_reversed_reversed_reversed\
    \ = digits_pow_sorted_reversed_reversed.reverse\n        val digits_pow_sorted_reversed_reversed_reversed_reversed\
    \ = digits_pow_sorted_reversed_reversed_reversed.reverse\n        val digits_pow_sorted_reversed_reversed_reversed_reversed_reversed\
    \ = digits_pow_sorted_reversed_reversed_reversed_reversed.reverse\n        val\
    \ digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed = digits_pow_sorted_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \        val digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \        val digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \        val digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \        val digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \        val digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \        val digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdcm9wmrd.scala:24:95 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdigits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed\e\
    [0m = digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpdcm9wmrd.scala:25:104 --------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mdigits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\e\
    [0m = digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpdcm9wmrd.scala:26:113 --------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mdigits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\e\
    [0m = digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_rever"
  stdout: ''
  timestamp: 1659799019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val bases = List(\"0\", \"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits match {\n            case Nil => \"\"\n         \
    \   case head :: tail => head + changeBase(tail, base)\n        }\n        bases(base).toString\
    \ + result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5u1dncaf.scala:17:17\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m Nil\
    \ => \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    (Nil : => collection.immutable.Nil\xB2.type)\n\e[31m\
    \   |\e[0m        Required: Iterator[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \        where:    Nil  is a getter in \e[33mpackage object\e[0m \e[35mscala\e\
    [0m\n\e[31m   |\e[0m                  Nil\xB2 is a object in \e[33mpackage\e[0m\
    \ \e[35mscala.collection.immutable\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m    \
    \    pattern type is incompatible with expected type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp5u1dncaf.scala:18:38 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m head :: tail => head + changeBase(tail,\
    \ base)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of Any, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5u1dncaf.scala:18:51\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m head\
    \ :: tail => head + changeBase(tail, base)\n\e[31m\e[31m   |\e[0m            \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                 Found:    (tail : List[Any])\n\e[31m   |\e[0m\
    \                                            Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5u1dncaf.scala:20:14 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        bases(base).toString + result\n\e[31m\e[31m \
    \  |\e[0m      "
  stdout: ''
  timestamp: 1659799021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result == \"\
    0\") \"1\" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo_fe1qek.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val len = result.length\n\
    \        val digit = result.charAt(len-1)\n        if(digit < '0' || digit > '9')\
    \ \"0\"\n        else result\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8sqadukf.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + digits.reverse.drop(base).mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn4k6cmk7.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn4k6cmk7.scala:16:37 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result + digits.reverse.drop(base).mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                     ^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Found:    (base : Long)\n\
    \e[31m   |\e[0m                                     Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" else \"\"\n        result + baseString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg_nu6oxc.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString\n        val baseString = if (base == 10)\
    \ \"0\" else \"\"\n        result + baseString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzvulfq6l.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + (if\
    \ (digits.isEmpty) \"\" else base)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn2z9gfxg.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val result = result.substring(0,\
    \ result.length - base)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe_7dveft.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.substring(\e\
    [31m0\e[0m, result.length - base)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpe_7dveft.scala:14:76 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val baseString =\
    \ if (base < 10) \"0\" + base.toString\n        else base.toString\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvodny9ym.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = new StringBuilder\n        for(i <- 0 until digits.size)\
    \ {\n            val digit = digits(i)\n            val digitString = digit.toString\n\
    \            val digitBase = digitString.reverse.grouped(base).toList\n      \
    \      val digitBaseString = digitBase.reverse.mkString(\"\")\n            result.append(digitBaseString)\n\
    \        }\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppnc6ovyz.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppnc6ovyz.scala:19:56 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mdigitBase\e[0m = digitString.reverse.grouped(base).toList\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Found:  \
    \  (base : Long)\n\e[31m   |\e[0m                                            \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val baseString =\
    \ base.pow(digits.size)\n        val result = result * baseString\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpto03_pdm.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result * baseString\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpto03_pdm.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpto03_pdm.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbaseString\e[0m = base.pow(digits.size)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ pow is not a member of Long, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.long2bigDecimal\n\e[31m\
    \   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659799021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa5slcr1_.scala:86:4 ----------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa5slcr1_.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigits\e[0m = digits.tail\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa5slcr1_.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mdigit\e[0m = digits.head\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigit is already\
    \ defined as \e[33mvalue\e[0m \e[35mdigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa5slcr1_.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigits\e[0m = digits.tail\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa5slcr1_.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mdigit\e[0m = digits.head\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigit is already\
    \ defined as \e[33mvalue\e[0m \e[35mdigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa5slcr1_.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigits\e[0m = digits.tail\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659799021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ < 10) \"0\" + base.toString else base.toString\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcue3b8t8.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk0jytmus.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        digits.tail.foldLeft(result)((acc,\
    \ x) => acc + x)\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpppzvv4r3.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmnizkhu4.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) 0 else \"\")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuxiprakj.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) \"\" else \"\" + x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse.mkString(\"\
    \"))\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6a_qpfl5.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" else \"\"\n        result + baseString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg_nu6oxc.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ < base) \"\" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqlwytcmj.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" else \"\"\n        result + baseString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg_nu6oxc.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (x < base) \"\
    \" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy9czp3m3.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else base.toString.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl86s79am.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ < base) \"\" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqlwytcmj.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val newBase = digits.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val newDigits = newBase.mkString(\"\")\n        val newResult = newDigits.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        result + newResult\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1dfoahvj.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits(0)\n        val rest = digits(1).toString.reverse.grouped(base).toList\n\
    \        val restLength = rest.length\n        val restStrings = rest.map(_.reverse).reverse\n\
    \        val restStringsLength = restStrings.length\n        val restStringsStrings\
    \ = restStrings.map(_.reverse).reverse\n        val restStringsStringsLength =\
    \ restStringsStrings.length\n        val restStringsStringsStringsLength = restStringsStringsStrings.length\n\
    \        val restStringsStringsStringsStringsLength = restStringsStringsStringsStrings.length\n\
    \        val restStringsStringsStringsStringsStringsLength = restStringsStringsStringsStringsStringsLength\n\
    \        val restStringsStringsStringsStringsStringsStringsLength = restStringsStringsStringsStringsStringsStringsLength\n\
    \        val restStringsStringsStringsStringsStringsStringsStringsLength = restStringsStringsStringsStringsStringsStringsStringsLength\n\
    \        val restStringsStringsStringsStringsStringsStringsStringsStringsLength\
    \ = restStringsStringsStringsStringsStringsStringsStringsStringsLength\n     \
    \   val restStringsStringsStringsStringsStringsStringsStringsStringsStringsLength\
    \ = restStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsLength\n\
    \        val restStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsLength\
    \ = restStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsLength\n\
    \        val restStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsLength\
    \ = restStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsLength\n\
    \        val restStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsLength\
    \ = restStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsLength\n\
    \        val restStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptlu5dvyg.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptlu5dvyg.scala:14:48 --------------------\e[0m\e[0m\n\e[31m14 |\e[0m\
    \        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base).toList\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^\e[0m\n\
    \e[31m   |\e[0m                                                Found:    (base\
    \ : Long)\n\e[31m   |\e[0m                                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptlu5dvyg.scala:16:54\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrest\e\
    [0m = digits(\e[31m1\e[0m).toString.reverse.grouped(base).toList\n\e[31m\e[31m\
    \   |\e[0m                                                      ^^^^\e[0m\n\e\
    [31m   |\e[0m                                                 Found:    (base\
    \ : Long)\n\e[31m   |\e[0m                                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlu5dvyg.scala:22:46\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mrestStringsStringsStringsLength\e[0m = restStringsStringsStrings.length\n\e\
    [31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: restStringsStringsStrings\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlu5dvyg.scala:23:53\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mrestStringsStringsStringsStringsLength\e[0m = restStringsStringsStringsStrings.length\n\
    \e[31m\e[31m   |\e[0m                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0"
  stdout: ''
  timestamp: 1659799031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") { (acc, digit) => acc + digit\
    \ }\n        return result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj7s262fm.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (result\
    \ == \"0\") \"1\" else \"\")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnknf5wxl.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        val result\
    \ = result.dropRight(base * digits.size).reverse\n        result + digits.reverse.take(digits.size).mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp61q8qr3z.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.dropRight(base\
    \ * digits.size).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp61q8qr3z.scala:14:48 --------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base).toList\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^\e[0m\n\
    \e[31m   |\e[0m                                                Found:    (base\
    \ : Long)\n\e[31m   |\e[0m                                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799029
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        var result : String = \"\"\n    \
    \    var remainder : Long = x / base\n        var quotient : Long = x % base\n\
    \        while (remainder > 0) {\n            result += quotient.toString\n  \
    \          remainder = remainder - base\n            quotient = quotient / base\n\
    \        }\n        result += quotient.toString\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw8vvwmr_.scala:26)\n\tat Problem.main(tmpw8vvwmr_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" + base.toString\n        else base.toString\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6ifyydgx.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString\n        result + (if (result == \"0\")\
    \ \"\" else base)\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6p1u_5fk.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + (if\
    \ (digits.isEmpty) \"\" else digits(base))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfod01izc.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfod01izc.scala:16:53 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result + (\e[33mif\e[0m (digits.isEmpty) \e[31m\"\
    \"\e[0m \e[33melse\e[0m digits(base))\n\e[31m\e[31m   |\e[0m                 \
    \                                    ^^^^\e[0m\n\e[31m   |\e[0m              \
    \                                   Found:    (base : Long)\n\e[31m   |\e[0m \
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits(0)\n        digits.tail.foreach(x => result = result\
    \ + x.toString.reverse)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz6rcoae8.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpz6rcoae8.scala:16:40 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        digits.tail.foreach(\e[36mx\e[0m => result =\
    \ result + x.toString.reverse)\n\e[31m\e[31m   |\e[0m                        \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                        Reassignment to val result\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") {\n            (acc, digit)\
    \ => acc + (digit.reverse.drop(base).reverse)\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdeoc7bjn.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdeoc7bjn.scala:16:54 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            (\e[36macc\e[0m, \e[36mdigit\e[0m) => acc\
    \ + (digit.reverse.drop(base).reverse)\n\e[31m\e[31m   |\e[0m                \
    \                                      ^^^^\e[0m\n\e[31m   |\e[0m            \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                 Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result == \"\
    0\") \"1\" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo_fe1qek.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString\n        result + (if (result ==\
    \ \"0\") \"-\" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptzvd1cjk.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val bases = List(\"10\", \"11\",\
    \ \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"\
    , \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    )\n        val digits = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\",\
    \ \"7\", \"8\", \"9\")\n        val digits2 = List(\"0\", \"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\")\n        val digits3  = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"\
    , \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\"\
    , \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n        val digits_4\
    \ = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    , \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"\
    , \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\"\
    , \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val digits_5\
    \ = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    , \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"\
    , \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\"\
    , \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\"\
    , \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\"\
    , \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\"\
    , \"Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9ixbzksg.scala:19:643 ----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdigits_5\e[0m = List(\e\
    [31m\"0\"\e[0m, \e[31m\"1\"\e[0m, \e[31m\"2\"\e[0m, \e[31m\"3\"\e[0m, \e[31m\"\
    4\"\e[0m, \e[31m\"5\"\e[0m, \e[31m\"6\"\e[0m, \e[31m\"7\"\e[0m, \e[31m\"8\"\e\
    [0m, \e[31m\"9\"\e[0m, \e[31m\"A\"\e[0m, \e[31m\"B\"\e[0m, \e[31m\"C\"\e[0m, \e\
    [31m\"D\"\e[0m, \e[31m\"E\"\e[0m, \e[31m\"F\"\e[0m, \e[31m\"G\"\e[0m, \e[31m\"\
    H\"\e[0m, \e[31m\"I\"\e[0m, \e[31m\"J\"\e[0m, \e[31m\"K\"\e[0m, \e[31m\"L\"\e\
    [0m, \e[31m\"M\"\e[0m, \e[31m\"N\"\e[0m, \e[31m\"O\"\e[0m, \e[31m\"P\"\e[0m, \e\
    [31m\"Q\"\e[0m, \e[31m\"R\"\e[0m, \e[31m\"S\"\e[0m, \e[31m\"T\"\e[0m, \e[31m\"\
    U\"\e[0m, \e[31m\"V\"\e[0m, \e[31m\"W\"\e[0m, \e[31m\"X\"\e[0m, \e[31m\"Y\"\e\
    [0m, \e[31m\"Z\"\e[0m, \e[31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e\
    [31m\"d\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"\
    h\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"j\"\e[0m, \e[31m\"k\"\e[0m, \e[31m\"l\"\e\
    [0m, \e[31m\"m\"\e[0m, \e[31m\"n\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"p\"\e[0m, \e\
    [31m\"q\"\e[0m, \e[31m\"r\"\e[0m, \e[31m\"s\"\e[0m, \e[31m\"t\"\e[0m, \e[31m\"\
    u\"\e[0m, \e[31m\"v\"\e[0m, \e[31m\"w\"\e[0m, \e[31m\"x\"\e[0m, \e[31m\"y\"\e\
    [0m, \e[31m\"z\"\e[0m, \e[31m\"A\"\e[0m, \e[31m\"B\"\e[0m, \e[31m\"C\"\e[0m, \e\
    [31m\"D\"\e[0m, \e[31m\"E\"\e[0m, \e[31m\"F\"\e[0m, \e[31m\"G\"\e[0m, \e[31m\"\
    H\"\e[0m, \e[31m\"I\"\e[0m, \e[31m\"J\"\e[0m, \e[31m\"K\"\e[0m, \e[31m\"L\"\e\
    [0m, \e[31m\"M\"\e[0m, \e[31m\"N\"\e[0m, \e[31m\"O\"\e[0m, \e[31m\"P\"\e[0m, \e\
    [31m\"Q\"\e[0m, \e[31m\"R\"\e[0m, \e[31m\"S\"\e[0m, \e[31m\"T\"\e[0m, \e[31m\"\
    U\"\e[0m, \e[31m\"V\"\e[0m, \e[31m\"W\"\e[0m, \e[31m\"X\"\e[0m, \e[31m\"Y\"\e\
    [0m, \e[31m\"Z\"\e[0m, \e[31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e\
    [31m\"d\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"\
    h\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"j\"\e[0m, \e[31m\"k\"\e[0m, \e[31m\"l\"\e\
    [0m, \e[31m\"m\"\e[0m, \e[31m\"n\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"p\"\e[0m, \e\
    [31m\"q\"\e[0m, \e[31m\"r\"\e[0m, \e[31m\"s\"\e[0m, \e[31m\"t\"\e[0m, \e[31m\"\
    u\"\e[0m, \e[31m\"v\"\e[0m, \e[31m\"w\"\e[0m, \e[31m\"x\"\e[0m, \e[31m\"y\"\e\
    [0m, \e[31m\"z\"\e[0m, \e[31m\"0\"\e[0m, \e[31m\"1\"\e[0m, \e[31m\"2\"\e[0m, \e\
    [31m\"3\"\e[0m, \e[31m\"4\"\e[0m, \e[31m\"5\"\e[0m, \e[31m\"6\"\e[0m, \e[31m\"\
    7\"\e[0m, \e[31m\"8\"\e[0m, \"9\n\e[31m\e[31m   |\e[0m                       \
    \                                                                            \
    \                                                "
  stdout: ''
  timestamp: 1659799032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) 0 else \"\")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuxiprakj.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" else \"\"\n        result + baseString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg_nu6oxc.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = new StringBuilder\n        digits.reverse.foreach(x => result.append(x.reverse))\n\
    \        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvw06v6_8.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else digits(base))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn6yayk46.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        val result\
    \ = result.dropRight(base).reverse\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqp7l56q3.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.dropRight(base).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpqp7l56q3.scala:14:48 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base).toList\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^\e[0m\n\
    \e[31m   |\e[0m                                                Found:    (base\
    \ : Long)\n\e[31m   |\e[0m                                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ < 10) \"0\" + base.toString\n        else base.toString\n        result + baseString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsxcbsb9g.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val digit = digits.head\n\
    \        val rest = digits.tail\n        val restString = rest.mkString(\"\")\n\
    \        val restDigit = rest.toString.reverse.grouped(base).toList\n        val\
    \ restResult = restDigit.reverse.mkString(\"\")\n        val restResultString\
    \ = restResult.mkString(\"\")\n        val restResultDigit = restResult.toString.reverse.grouped(base).toList\n\
    \        val restResultDigitString = restResultDigit.mkString(\"\")\n        val\
    \ restResultDigitStringLength = restResultDigitString.length\n        val restResultDigitStringLength\
    \ = restResultDigitString.length\n        val restResultDigitStringLength = restResultDigitString.length\n\
    \        val restResultDigitStringLength = restResultDigitString.length\n    \
    \    val restResultDigitStringLength = restResultDigitString.length\n        val\
    \ restResultDigitStringLength = restResultDigitString.length\n        val restResultDigitStringLength\
    \ = restResultDigitString.length\n        val restResultDigitStringLength = restResultDigitString.length\n\
    \        val restResultDigitStringLength = restResultDigitString.length\n    \
    \    val restResultDigitStringLength = restResultDigitString.length\n        val\
    \ restResultDigitStringLength = restResultDigitString.length\n        val restResultDigitStringLength\
    \ = restResultDigitString.length\n        val restResultDigitStringLength = restResultDigitString.length\n\
    \        val restResultDigitStringLength = restResultDigitString.length\n    \
    \    val restResultDigitStringLength = restResultDigitString.length\n        val\
    \ restResultDigitStringLength = restResultDigitString.length\n        val restResultDigitStringLength\
    \ = restResultDigitString.length\n        val restResultDigitStringLength = restResultDigitString.length\n\
    \        val restResultDigitStringLength = restResultDigitString.length\n    \
    \    val restResultDigitStringLength = restResultDigitString.length\n        val\
    \ restResultDigitStringLength = restResultDigitString.length\n        val restResultDigitStringLength\
    \ = restResultDigitString.length\n        val restResultDigitStringLength = restResultDigitString.length\n\
    \        val restResultDigitStringLength = restResultDigitString.length\n    \
    \    val restResultDigitStringLength = restResultDigitString.length\n        val\
    \ restResultDigitStringLength = restResultDigitString.length\n        val restResultDigitStringLength\
    \ = restResultDigitString.length\n        val restResultDigitStringLength = restResultDigitString.length\n\
    \        val restResultDigitStringLength = restResultDigitString.length\n    \
    \    val restResultDigitStringLength = restResultDigitString.length\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxbn_st1a.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mrestResultDigitStringLength\e\
    [0m = restResultDigitString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrestResultDigitStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mrestResultDigitStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxbn_st1a.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mrestResultDigitStringLength\e\
    [0m = restResultDigitString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrestResultDigitStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mrestResultDigitStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxbn_st1a.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mrestResultDigitStringLength\e\
    [0m = restResultDigitString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrestResultDigitStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mrestResultDigitStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxbn_st1a.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mrestResultDigitStringLength\e\
    [0m = restResultDigitString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrestResultDigitStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mrestResultDigitStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods mu"
  stdout: ''
  timestamp: 1659799034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result == \"\
    0\") \"1\" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo_fe1qek.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString\n        result + (if (digits.size == base)\
    \ \"\" else s\"$base\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcq3wyqlj.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val baseString =\
    \ if (base < 10) \"0\" + base.toString\n        else base.toString\n        result\
    \ + baseString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeikgcp5l.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits == Nil) \"\" else digits.mkString(\"\")\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpipif7dyt.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") { (result, digit) => result\
    \ + digit.toString}\n        result + digits.reverse.takeWhile(_ != '0').mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5m3ejiyu.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmp5m3ejiyu.scala:16:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result + digits.reverse.takeWhile(_ != \e[31m'0'\e\
    [0m).mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659799034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgc4nnm5r.scala:15:15 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799034
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = new StringBuilder\n        digits.foreach(x => result.append(x.reverse))\n\
    \        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzyndq_qm.scala:20)\n\tat Problem.main(tmpzyndq_qm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else base.toChar)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwytj5h0v.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        digits.tail.foldLeft(result){\
    \ (acc, digit) => acc + digit }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpef8p1raw.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val result = result.substring(0,\
    \ result.length - base)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe_7dveft.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.substring(\e\
    [31m0\e[0m, result.length - base)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpe_7dveft.scala:14:76 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") { (result, digit) =>\n   \
    \         val digitString = digit.toString\n            val newDigitString = digitString.substring(0,\
    \ digitString.length - 1)\n            result + newDigitString\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp10ni6qt2.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = digits.foldLeft(\"\")(_ + _)\n        result + digits.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphjw8d99j.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result + digits.last\n\e[31m\e[31m   |\e[0m \
    \                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue last is not a member of\
    \ Iterator[String] - did you mean digits.wait?\n1 error found\n"
  stdout: ''
  timestamp: 1659799034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val bases = List(\"10\", \"11\",\
    \ \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"\
    , \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    )\n        val digits = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\",\
    \ \"7\", \"8\", \"9\")\n        val digits_map = Map(digits -> bases)\n      \
    \  val digits_map_reverse = Map(bases -> digits)\n        val digits_map_reverse2\
    \ = Map(digits -> bases)\n        val digits_map_reverse3 = Map(bases -> digits)\n\
    \        val digits_map_reverse4 = Map(digits -> bases)\n        val digits_map_reverse5\
    \ = Map(digits -> bases)\n        val digits_map_reverse6 = Map(digits -> bases)\n\
    \        val digits_map_reverse7 = Map(digits -> bases)\n        val digits_map_reverse8\
    \ = Map(digits -> bases)\n        val digits_map_reverse9 = Map(digits -> bases)\n\
    \        val digits_map_reverse10 = Map(digits -> bases)\n        val digits_map_reverse11\
    \ = Map(digits -> bases)\n        val digits_map_reverse12 = Map(digits -> bases)\n\
    \        val digits_map_reverse13 = Map(digits -> bases)\n        val digits_map_reverse14\
    \ = Map(digits -> bases)\n        val digits_map_reverse15 = Map(digits -> bases)\n\
    \        val digits_map_reverse16 = Map(digits -> bases)\n        val digits_map_reverse17\
    \ = Map(digits -> bases)\n        val digits_map_reverse18 = Map(digits -> bases)\n\
    \        val digits_map_reverse19 = Map(digits -> bases)\n        val digits_map_reverse20\
    \ = Map(digits -> bases)\n        val digits_map_reverse21 = Map(digits -> bases)\n\
    \        val digits_map_reverse22 = Map(digits -> bases)\n        val digits_map_reverse23\
    \ = Map(digits -> bases)\n        val digits_map_reverse24 = Map(digits -> bases)\n\
    \        val digits_map_reverse25 = Map(digits -> bases)\n        val digits_map_reverse26\
    \ = Map(digits -> bases)\n        val digits_map_reverse27 = Map(digits -> bases)\n\
    \        val digits_map_reverse28 = Map(digits -> bases)\n        val digits_map_reverse29\
    \ = Map(digits -> bases)\n        val digits_map_reverse30 = Map(digits -> bases)\n\
    \        val digits_map_reverse31 = Map(digits -> bases)\n        val digit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk1muft3d.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpk1muft3d.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString\n        result + (if (digits.size == base)\
    \ \"\" else (base.toInt - digits.size)*base)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqtmeens7.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) {\n            \"0\"\n        } else {\n            \"\" + base\n   \
    \     }\n        result + baseString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9fyxm7kk.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799044
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        var result = \"\"\n        var remainder\
    \ = x % base\n        var quotient = x / base\n        while (quotient > 0) {\n\
    \            result += quotient.toString\n            quotient = quotient / base\n\
    \        }\n        if (remainder > 0) {\n            result += remainder.toString\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz5gohjkx.scala:28)\n\tat Problem.main(tmpz5gohjkx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ < 10) \"0\" + base.toString else base.toString\n        result + baseString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0upatygm.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + if (digits.size\
    \ < base) \"\" else changeBase(digits.tail, base)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpks7ewu8j.scala:16:17 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result + \e[33mif\e[0m (digits.size < base) \e\
    [31m\"\"\e[0m \e[33melse\e[0m changeBase(digits.tail, base)\n\e[31m\e[31m   |\e\
    [0m                 ^^\e[0m\n\e[31m   |\e[0m                 expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpks7ewu8j.scala:14:76 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) \"\" else \"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptilxw8_b.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val digit = digits.last\n\
    \        val digits = digits.dropRight(1)\n        val digit = digits.last\n \
    \       val digits = digits.dropRight(1)\n        val digit = digits.last\n  \
    \      val digits = digits.dropRight(1)\n        val digit = digits.last\n   \
    \     val digits = digits.dropRight(1)\n        val digit = digits.last\n    \
    \    val digits = digits.dropRight(1)\n        val digit = digits.last\n     \
    \   val digits = digits.dropRight(1)\n        val digit = digits.last\n      \
    \  val digits = digits.dropRight(1)\n        val digit = digits.last\n       \
    \ val digits = digits.dropRight(1)\n        val digit = digits.last\n        val\
    \ digits = digits.dropRight(1)\n        val digit = digits.last\n        val digits\
    \ = digits.dropRight(1)\n        val digit = digits.last\n        val digits =\
    \ digits.dropRight(1)\n        val digit = digits.last\n        val digits = digits.dropRight(1)\n\
    \        val digit = digits.last\n        val digits = digits.dropRight(1)\n \
    \       val digit = digits.last\n        val digits = digits.dropRight(1)\n  \
    \      val digit = digits.last\n        val digits = digits.dropRight(1)\n   \
    \     val digit = digits.last\n        val digits = digits.dropRight(1)\n    \
    \    val digit = digits.last\n        val digits = digits.dropRight(1)\n     \
    \   val digit = digits.last\n        val digits = digits.dropRight(1)\n      \
    \  val digit = digits.last\n        val digits = digits.dropRight(1)\n       \
    \ val digit = digits.last\n        val digits = digits.dropRight(1)\n        val\
    \ digit = digits.last\n        val digits = digits.dropRight(1)\n        val digit\
    \ = digits.last\n        val digits = digits.dropRight(1)\n        val digit =\
    \ digits.last\n        val digits = digits.dropRight(1)\n        val digit = digits.last\n\
    \        val digits = digits.dropRight(1)\n        val digit = digits.last\n \
    \       val digits = digits.dropRight(1)\n        val digit = digits.last\n  \
    \      val digits = digits.dropRight(1)\n        val digit = digits.last\n   \
    \     val digits = digits.dropRight(1)\n        val digit = digits.last\n    \
    \    val digits = digits.dropRight(1)\n        val digit = digits.last\n     \
    \   val digits = digits.dropRight(1)\n        val digit = digits.last\n      \
    \  val digits = digits.dropRight(1)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaxff_17w.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = digits.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpaxff_17w.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mdigit\e[0m = digits.last\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigit is already\
    \ defined as \e[33mvalue\e[0m \e[35mdigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaxff_17w.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigits\e[0m = digits.dropRight(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigits is already\
    \ defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaxff_17w.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigit\e[0m = digits.last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigit is already defined as \e[33mvalue\e[0m \e[35mdigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaxff_17w.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = digits.dropRight(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded method"
  stdout: ''
  timestamp: 1659799045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString\n        val length = result.length\n\
    \        val zeros = Array(0 until length).map(x => if (x == 0) \"0\" else \"\"\
    )\n        val result = zeros ++ result\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsq5x7zq8.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = zeros ++ result\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mresult\
    \ is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsq5x7zq8.scala:15:28\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = digits.reverse.mkString\n\e[31m\e[31m   |\e[0m             \
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a member of\
    \ Iterator[String] - did you mean digits.reversed?\n\e[31m\e[31m-- Error: /tmp/tmpsq5x7zq8.scala:17:55\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mzeros\e[0m = Array(\e[31m0\e[0m until length).map(\e[36mx\e\
    [0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m\"0\"\e[0m \e[33melse\e[0m \e[31m\"\
    \"\e[0m)\n\e[31m\e[31m   |\e[0m                                              \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m          Values of types Range and Int\
    \ cannot be compared with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1659799046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (result.length\
    \ < base) \"\" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp76i83ch9.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) 0 else \"\")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuxiprakj.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else base.toString.reverse.mkString(\"\"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaogil_zh.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (result.length\
    \ < base) \"\" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp76i83ch9.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgl7iv2_o.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.substring(\e\
    [31m0\e[0m, result.length - base)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgl7iv2_o.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.substring(\e[31m0\e\
    [0m, result.length - base)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgl7iv2_o.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.substring(\e[31m0\e\
    [0m, result.length - base)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgl7iv2_o.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.substring(\e[31m0\e\
    [0m, result.length - base)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgl7iv2_o.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659799047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") {\n            case (acc,\
    \ digit) => acc + (digit.reverse.foldLeft(\"\") {\n                case (acc,\
    \ digit) => acc + (digit.toString)\n            })\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph7ob30cm.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \"0\")\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp21uv0g3_.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val len = result.length\n\
    \        if (len > base) {\n            val tmp = result.substring(0, len - base)\n\
    \            val tmp2 = tmp.substring(tmp.length - (len - base))\n           \
    \ val tmp3 = tmp2.reverse.grouped(base.toInt).map(_.mkString).reverse\n      \
    \      val tmp4 = tmp3.mkString(\"\")\n            tmp4 + tmp\n        } else\
    \ {\n            result\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuctbgos8.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val digit = digits.last\n\
    \        val digits = digits.dropRight(1)\n        val digit = digits.last\n \
    \       val digits = digits.dropRight(1)\n        val digit = digits.last\n  \
    \      val digits = digits.dropRight(1)\n        val digit = digits.last\n   \
    \     val digits = digits.dropRight(1)\n        val digit = digits.last\n    \
    \    val digits = digits.dropRight(1)\n        val digit = digits.last\n     \
    \   val digits = digits.dropRight(1)\n        val digit = digits.last\n      \
    \  val digits = digits.dropRight(1)\n        val digit = digits.last\n       \
    \ val digits = digits.dropRight(1)\n        val digit = digits.last\n        val\
    \ digits = digits.dropRight(1)\n        val digit = digits.last\n        val digits\
    \ = digits.dropRight(1)\n        val digit = digits.last\n        val digits =\
    \ digits.dropRight(1)\n        val digit = digits.last\n        val digits = digits.dropRight(1)\n\
    \        val digit = digits.last\n        val digits = digits.dropRight(1)\n \
    \       val digit = digits.last\n        val digits = digits.dropRight(1)\n  \
    \      val digit = digits.last\n        val digits = digits.dropRight(1)\n   \
    \     val digit = digits.last\n        val digits = digits.dropRight(1)\n    \
    \    val digit = digits.last\n        val digits = digits.dropRight(1)\n     \
    \   val digit = digits.last\n        val digits = digits.dropRight(1)\n      \
    \  val digit = digits.last\n        val digits = digits.dropRight(1)\n       \
    \ val digit = digits.last\n        val digits = digits.dropRight(1)\n        val\
    \ digit = digits.last\n        val digits = digits.dropRight(1)\n        val digit\
    \ = digits.last\n        val digits = digits.dropRight(1)\n        val digit =\
    \ digits.last\n        val digits = digits.dropRight(1)\n        val digit = digits.last\n\
    \        val digits = digits.dropRight(1)\n        val digit = digits.last\n \
    \       val digits = digits.dropRight(1)\n        val digit = digits.last\n  \
    \      val digits = digits.dropRight(1)\n        val digit = digits.last\n   \
    \     val digits = digits.dropRight(1)\n        val digit = digits.last\n    \
    \    val digits = digits.dropRight(1)\n        val digit = digits.last\n     \
    \   val digits = digits.dropRight(1)\n        val digit = digits.last\n      \
    \  val digits = digits.dropRight(1)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaxff_17w.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = digits.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpaxff_17w.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mdigit\e[0m = digits.last\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigit is already\
    \ defined as \e[33mvalue\e[0m \e[35mdigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaxff_17w.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigits\e[0m = digits.dropRight(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigits is already\
    \ defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaxff_17w.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigit\e[0m = digits.last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigit is already defined as \e[33mvalue\e[0m \e[35mdigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaxff_17w.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = digits.dropRight(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded method"
  stdout: ''
  timestamp: 1659799045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else digits(base))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn6yayk46.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + digits.reverse.takeWhile(_\
    \ < base).reverse.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpamxjv87b.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpamxjv87b.scala:16:46 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result + digits.reverse.takeWhile(_ < base).reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                        \
    \      ^^^^\e[0m\n\e[31m   |\e[0m                                            \
    \  Found:    (base : Long)\n\e[31m   |\e[0m                                  \
    \            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (x < base) \"\
    \" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy9czp3m3.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits(0)\n        val remainder = digits(1)\n        val\
    \ remainderDigits = remainder.toString.reverse.grouped(base).toList\n        val\
    \ remainderResult = remainderDigits(0)\n        val remainderRemainder = remainderDigits(1)\n\
    \        val remainderRemainderDigits = remainderRemainder.toString.reverse.grouped(base).toList\n\
    \        val remainderRemainderResult = remainderRemainderDigits(0)\n        val\
    \ remainderRemainderRemainder = remainderRemainderDigits(1)\n        val remainderRemainderRemainderDigits\
    \ = remainderRemainderRemainder.toString.reverse.grouped(base).toList\n      \
    \  val remainderRemainderRemainderResult = remainderRemainderRemainderDigits(0)\n\
    \        val remainderRemainderRemainderRemainder = remainderRemainderRemainderDigits(1)\n\
    \        val remainderRemainderRemainderRemainderDigits = remainderRemainderRemainderRemainder.toString.reverse.grouped(base).toList\n\
    \        val remainderRemainderRemainderRemainderResult = remainderRemainderRemainderRemainderDigits(0)\n\
    \        val remainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainderDigits(1)\n\
    \        val remainderRemainderRemainderRemainderRemainderDigits = remainderRemainderRemainderRemainderRemainder.toString.reverse.grouped(base).toList\n\
    \        val remainderRemainderRemainderRemainderRemainderResult = remainderRemainderRemainderRemainderRemainderDigits(0)\n\
    \        val remainderRemainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainderRemainderDigits(1)\n\
    \        val remainderRemainderRemainderRemainderRemainderRemainderDigits = remainderRemainderRemainderRemainderRemainderRemainderRemainder.toString.reverse.grouped(base).toList\n\
    \        val remainderRemainderRemainderRemainderRemainderResult = remainderRemainderRemainderRemainderRemainderRemainderDigits(0)\n\
    \        val remainderRemainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainderRemainderRemainderDigits(1)\n\
    \        val remainderRemainderRemainderRemainderRemainderRemainderDigits = remainderRemainderRemainderRemainderRemainderRemainderRemainder.toString.reverse.grouped(base).toList\n\
    \        val remainder\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9kivgogl.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9kivgogl.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mremainderRemainderRemainderRemainderRemainderResult\e[0m = remainderRemainderRemainderRemainderRemainderRemainderDigits(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderRemainderRemainderRemainderRemainderResult is already\
    \ defined as \e[33mvalue\e[0m \e[35mremainderRemainderRemainderRemainderRemainderResult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9kivgogl.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mremainderRemainderRemainderRemainderRemainderRemainder\e\
    [0m = remainderRemainderRemainderRemainderRemainderRemainderDigits(\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderRemainderRemainderRemainderRemainderRemainder is\
    \ already defined as \e[33mvalue\e[0m \e[35mremainderRemainderRemainderRemainderRemainderRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9kivgogl.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mremainderRemainderRemainderRemainderRemainderRemainderDigits\e\
    [0m = remainderRemainderRemainderRemainderRemainderRemainderRemainder.toString.reverse.grouped(base).toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else base.toString.charAt(digits.length - 1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpptxcghpp.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = digits.map(_.mkString).reverse.mkString\n        result\
    \ + if (x < base) \"\" else changeBase(x - base.toInt, base)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpiw7cyghd.scala:16:17 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result + \e[33mif\e[0m (x < base) \e[31m\"\"\e\
    [0m \e[33melse\e[0m changeBase(x - base.toInt, base)\n\e[31m\e[31m   |\e[0m  \
    \               ^^\e[0m\n\e[31m   |\e[0m                 expression expected but\
    \ \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiw7cyghd.scala:15:44\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = digits.map(_.mkString).reverse.mkString\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Iterator[String] - did you mean Iterator[String].reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val bases = List(\"0\", \"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val digits = List(\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val\
    \ digits2 = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\n        val digits3  = List(\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
    x\", \"y\", \"z\")\n        val digits_4 = List(\"0\", \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"\
    M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"\
    X\", \"Y\", \"Z\")\n        val digits_5 = List(\"0\", \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"\
    M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"\
    X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"\
    P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"\
    L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"\
    W\", \"X\", \"Y\", \"Z\")\n        val digit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxyeru605.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxyeru605.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + digits.reverse.takeWhile(_\
    \ < base).reverse.mkString\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvru7jage.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvru7jage.scala:16:46 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result + digits.reverse.takeWhile(_ < base).reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^\e[0m\n\
    \e[31m   |\e[0m                                              Found:    (base :\
    \ Long)\n\e[31m   |\e[0m                                              Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val length = result.length\n\
    \        val zeros = length - (result.length / base)\n        val zeroChar = if\
    \ (zeros > 0) \"0\"\n        else \"\"\n        val result = zeroChar + result\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvh002pgg.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = zeroChar +\
    \ result\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpvh002pgg.scala:14:76 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (result.length\
    \ < base) 0 else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg9skv5q6.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else base.toString.charAt(base.toString.length - digits.size))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz3r6qj9f.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val digit = digits.head\n\
    \        val remainder = digits.tail.foldLeft(0)((acc, digit) => acc * base +\
    \ digit)\n        val remainderString = remainder.toString.reverse.grouped(base).toList.reverse.mkString(\"\
    \")\n        val remainderString = remainderString.reverse.mkString(\"\")\n  \
    \      val resultString = result + remainderString\n        resultString\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv459ld14.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mremainderString\e[0m = remainderString.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderString is already defined as \e[33mvalue\e[0m \e\
    [35mremainderString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpv459ld14.scala:14:48 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base).toList\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^\e[0m\n\
    \e[31m   |\e[0m                                                Found:    (base\
    \ : Long)\n\e[31m   |\e[0m                                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv459ld14.scala:17:64\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mremainder\e\
    [0m = digits.tail.foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mdigit\e[0m) =>\
    \ acc * base + digit)\n\e[31m\e[31m   |\e[0m                                 \
    \                               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                                   Found:    String\n\e[31m \
    \  |\e[0m                                                        Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv459ld14.scala:18:65\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mremainderString\e\
    [0m = remainder.toString.reverse.grouped(base).toList.reverse.mkString(\e[31m\"\
    \"\e[0m)\n\e[31m\e[31m   |\e[0m                                              \
    \                   ^^^^\e[0m\n\e[31m   |\e[0m                               \
    \                  Found:    (base : Long)\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659799047
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = new StringBuilder\n        digits.foreach(x => result.append(x.reverse))\n\
    \        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzyndq_qm.scala:20)\n\tat Problem.main(tmpzyndq_qm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") { (acc, digit) =>\n      \
    \      acc + (digit.reverse.drop(base).reverse)\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt3ms1v2p.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt3ms1v2p.scala:16:38 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            acc + (digit.reverse.drop(base).reverse)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^\e[0m\n\e[31m \
    \  |\e[0m                                      Found:    (base : Long)\n\e[31m\
    \   |\e[0m                                      Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") {\n            (acc, digit)\
    \ => acc + (digit.drop(base).reverse)\n        }\n        return result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_zxxzzza.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_zxxzzza.scala:16:46 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            (\e[36macc\e[0m, \e[36mdigit\e[0m) => acc\
    \ + (digit.drop(base).reverse)\n\e[31m\e[31m   |\e[0m                        \
    \                      ^^^^\e[0m\n\e[31m   |\e[0m                            \
    \                  Found:    (base : Long)\n\e[31m   |\e[0m                  \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        var res = \"\"\n        var i = 0\n\
    \        while (i < x.length) {\n            var digit = x(i) - 48\n         \
    \   if (digit < base) {\n                digit += base\n            }\n      \
    \      res += digit.toString\n            i += 1\n        }\n        return res\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3i8hprv8.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mwhile\e[0m (i < x.length) {\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \ value length is not a member of Long\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp3i8hprv8.scala:17:24\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mvar\e\
    [0m \e[36mdigit\e[0m = x(i) - \e[31m48\e[0m\n\e[31m\e[31m   |\e[0m           \
    \             ^\e[0m\n\e[31m   |\e[0m                        \e[33mparameter\e\
    [0m \e[35mx\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjb0fa34i.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" else \"\"\n        result + baseString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg_nu6oxc.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits == Nil) \"\" else digits.head\n        result\
    \ + (if (digits.tail.isEmpty) \"\" else digits.tail.mkString(\"\"))\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy7uyos26.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result == \"\
    0\") \"1\" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo_fe1qek.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        val baseString =\
    \ if (base == 10) \"0\" else \"\" + base\n        result + baseString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe9ukwna1.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else (base.toString.reverse.grouped(base.toInt).map(_.mkString).reverse.mkString(\"\
    \")))\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp819pkh3v.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val digit = digits.last\n\
    \        val remainder = digits.dropRight(1)\n        val remainderString = remainder.mkString(\"\
    \")\n        val remainderString = remainderString.reverse.mkString(\"\")\n  \
    \      val remainderString = remainderString.reverse.mkString(\"\")\n        val\
    \ remainderString = remainderString.reverse.mkString(\"\")\n        val remainderString\
    \ = remainderString.reverse.mkString(\"\")\n        val remainderString = remainderString.reverse.mkString(\"\
    \")\n        val remainderString = remainderString.reverse.mkString(\"\")\n  \
    \      val remainderString = remainderString.reverse.mkString(\"\")\n        val\
    \ remainderString = remainderString.reverse.mkString(\"\")\n        val remainderString\
    \ = remainderString.reverse.mkString(\"\")\n        val remainderString = remainderString.reverse.mkString(\"\
    \")\n        val remainderString = remainderString.reverse.mkString(\"\")\n  \
    \      val remainderString = remainderString.reverse.mkString(\"\")\n        val\
    \ remainderString = remainderString.reverse.mkString(\"\")\n        val remainderString\
    \ = remainderString.reverse.mkString(\"\")\n        val remainderString = remainderString.reverse.mkString(\"\
    \")\n        val remainderString = remainderString.reverse.mkString(\"\")\n  \
    \      val remainderString = remainderString.reverse.mkString(\"\")\n        val\
    \ remainderString = remainderString.reverse.mkString(\"\")\n        val remainderString\
    \ = remainderString.reverse.mkString(\"\")\n        val remainderString = remainderString.reverse.mkString(\"\
    \")\n        val remainderString = remainderString.reverse.mkString(\"\")\n  \
    \      val remainderString = remainderString.reverse.mkString(\"\")\n        val\
    \ remainderString = remainderString.reverse.mkString(\"\")\n        val remainderString\
    \ = remainderString.reverse.mkString(\"\")\n        val remainderString = remainderString.reverse.mkString(\"\
    \")\n        val remainderString = remainderString.reverse.mkString(\"\")\n  \
    \      val remainderString = remainderString.reverse.mkString(\"\")\n        val\
    \ remainderString = remainderString.reverse.mkString(\"\")\n        val remainderString\
    \ = remainderString.reverse.mkString(\"\")\n        val remainderString = remainderString.reverse.mkString(\"\
    \")\n        val remainderString = remainderString.reverse.mkString(\"\")\n  \
    \      val remainderString = remainderString.reverse.mkString(\"\")\n        val\
    \ remainderString = remainderString.reverse.mk\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptg3r8ly9.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mremainderString\e[0m = remainderString.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderString is already defined as \e[33mvalue\e[0m \e\
    [35mremainderString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptg3r8ly9.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mremainderString\e[0m = remainderString.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderString is already defined as \e[33mvalue\e[0m \e\
    [35mremainderString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptg3r8ly9.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mremainderString\e[0m = remainderString.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderString is already defined as \e[33mvalue\e[0m \e\
    [35mremainderString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptg3r8ly9.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mremainderString\e[0m = remainderString.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderString is already defined as \e[33mvalue\e[0m \e\
    [35mremainderString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error"
  stdout: ''
  timestamp: 1659799059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") {\n            case (acc,\
    \ digit) => acc + (digit.drop(base).reverse)\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdc0_c9r4.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdc0_c9r4.scala:16:51 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m (acc, digit) => acc + (digit.drop(base).reverse)\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Found:  \
    \  (base : Long)\n\e[31m   |\e[0m                                            \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" else \"\"\n        result + baseString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg_nu6oxc.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        var result : String = \"\"\n    \
    \    var remainder : Long = 0\n        var quotient : Long = 0\n        var remainder2\
    \ : Long = 0\n        var quotient2 : Long = 0\n        var remainder3 : Long\
    \ = 0\n        var quotient3 : Long = 0\n        var remainder4 : Long = 0\n \
    \       var quotient4 : Long = 0\n        var remainder5 : Long = 0\n        var\
    \ quotient5 : Long = 0\n        var remainder6 : Long = 0\n        var quotient6\
    \ : Long = 0\n        var remainder7 : Long = 0\n        var quotient7 : Long\
    \ = 0\n        var remainder8 : Long = 0\n        var quotient8 : Long = 0\n \
    \       var remainder9 : Long = 0\n        var quotient9 : Long = 0\n        var\
    \ remainder10 : Long = 0\n        var quotient10 : Long = 0\n        var remainder11\
    \ : Long = 0\n        var quotient11 : Long = 0\n        var remainder12 : Long\
    \ = 0\n        var quotient12 : Long = 0\n        var remainder13 : Long = 0\n\
    \        var quotient13 : Long = 0\n        var remainder14 : Long = 0\n     \
    \   var quotient14 : Long = 0\n        var remainder15 : Long = 0\n        var\
    \ quotient15 : Long = 0\n        var remainder16 : Long = 0\n        var quotient16\
    \ : Long = 0\n        var remainder17 : Long = 0\n        var quotient17 : Long\
    \ = 0\n        var remainder18 : Long = 0\n        var quotient18 : Long = 0\n\
    \        var remainder19 : Long = 0\n        var quotient19 : Long = 0\n     \
    \   var remainder20 : Long = 0\n        var quotient20 : Long = 0\n        var\
    \ remainder21 : Long = 0\n        var quotient21 : Long = 0\n        var remainder22\
    \ : Long = 0\n        var quotient22 : Long = 0\n        var remainder23 : Long\
    \ = 0\n        var quotient23 : Long = 0\n        var remainder24 : Long = 0\n\
    \        var quotient24 : Long = 0\n        var remainder25 : Long = 0\n     \
    \   var quotient25 : Long = 0\n        var remainder26 : Long = 0\n        var\
    \ quotient26 : Long = 0\n        var remainder27 : Long = 0\n        var quotient27\
    \ : Long = 0\n        var remainder28 : Long = 0\n        var quotient28 : Long\
    \ = 0\n        var remainder29 : Long = 0\n        var quotient29 : Long = 0\n\
    \        var remainder30 : Long = 0\n        var quotient30 : Long = 0\n     \
    \   var remainder31 : Long = 0\n        var quotient31 : Long = 0\n        var\
    \ remainder32 : Long = 0\n        var quotient32 : Long = 0\n        var \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmptvu7wknl.scala:79:11 ---------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptvu7wknl.scala:80:5 ---------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk0jytmus.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits(0)\n        val rest = digits(1)\n        val digit\
    \ = rest match {\n            case Nil => \"\"\n            case x => x.toString\n\
    \        }\n        val newBase = digits.length - base\n        val newDigit =\
    \ digit.substring(0, newBase)\n        val newRest = digit.substring(newBase)\n\
    \        result + newDigit + newRest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp60qwnrzk.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp60qwnrzk.scala:18:17 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m Nil => \e[31m\"\"\e[0m\n\e\
    [31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m        Found:  \
    \  (Nil : => collection.immutable.Nil\xB2.type)\n\e[31m   |\e[0m        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m        where:    Nil  is a getter in\
    \ \e[33mpackage object\e[0m \e[35mscala\e[0m\n\e[31m   |\e[0m                \
    \  Nil\xB2 is a object in \e[33mpackage\e[0m \e[35mscala.collection.immutable\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m        pattern type is incompatible with\
    \ expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp60qwnrzk.scala:22:42\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnewDigit\e\
    [0m = digit.substring(\e[31m0\e[0m, newBase)\n\e[31m\e[31m   |\e[0m          \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                           Found:    (newBase : Long)\n\e[31m   |\e[0m      \
    \                                    Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp60qwnrzk.scala:23:38 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnewRest\e[0m = digit.substring(newBase)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      Found:    (newBase : Long)\n\e\
    [31m   |\e[0m       "
  stdout: ''
  timestamp: 1659799059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val length = result.length\n\
    \        val zeros = length - (result.length - base)\n        val zeroChar = if\
    \ (zeros > 0) \"0\" else \"\"\n        val result = result + zeroChar\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprlaynez6.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result + zeroChar\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprlaynez6.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) \"\" else \"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptilxw8_b.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else base.toChar)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwytj5h0v.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        val len = result.length\n\
    \        val zeros = len % base\n        val zero = if (zeros == 0) \"\" else\
    \ new StringBuilder(zeros).reverse.insert(len - zeros, \"0\").toString\n     \
    \   result + zero\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp2d5dqr5.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val bases = List(10, 8, 7, 6)\n \
    \       val digits = x.toString.reverse.grouped(base).toList\n        val result\
    \ = bases.map(x => digits.map(y => y * x).sum).sum\n        val str = result.toString\n\
    \        val len = str.length\n        val zeros = len - base\n        val zero\
    \ = if (zeros > 0) zeros else \"0\"\n        val result = if (base == 10) str\
    \ else str + zero\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4fli68tm.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e\
    [0m (base == \e[31m10\e[0m) str \e[33melse\e[0m str + zero\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4fli68tm.scala:15:48\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmp4fli68tm.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = bases.map(\e\
    [36mx\e[0m => digits.map(\e[36my\e[0m => y * x).sum).sum\n\e[31m\e[31m   |\e[0m\
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                No implicit Ordering defined for B\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                where:    B is a type variable with constraint\
    \ >: String\n\e[31m   |\e[0m                .\n\e[31m\e[31m-- Error: /tmp/tmp4fli68tm.scala:16:67\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33mval\e[0m \e[36mresult\e[0m = bases.map(\e[36mx\e[0m => digits.map(\e[36my\e\
    [0m => y * x).sum).sum\n\e[31m\e[31m   |\e[0m                                \
    \                                   ^\e[0m\n\e[31m   |\e[0m                No\
    \ implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m          \
    \      where:    B is a type variable with constraint >: String\n\e[31m   |\e\
    [0m                .\n4 errors found\n"
  stdout: ''
  timestamp: 1659799059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmnizkhu4.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val len = result.length\n\
    \        val zeros = len % base\n        val result = if (zeros > 0) result.substring(0,\
    \ zeros) else result\n        result + digits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6uxuwyau.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e\
    [0m (zeros > \e[31m0\e[0m) result.substring(\e[31m0\e[0m, zeros) \e[33melse\e\
    [0m result\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp6uxuwyau.scala:14:76 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" else \"\"\n        result + baseString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg_nu6oxc.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") {\n            (x, y) => x\
    \ + y.reverse.mkString(\"\")\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsn7wztan.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits(0) match {\n            case x if x == 0 => \"\"\n\
    \            case x => digits(0).toString.reverse.grouped(base).toList\n     \
    \   }\n        val digits2 = digits(1) match {\n            case x if x == 0 =>\
    \ \"\"\n            case x => digits(1).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit3 = digits(2) match {\n            case x if x ==\
    \ 0 => \"\"\n            case x => digits(2).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit4 = digits(3) match {\n            case x if x ==\
    \ 0 => \"\"\n            case x => digits(3).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit5 = digits(4) match {\n            case x if x ==\
    \ 0 => \"\"\n            case x => digits(4).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit6 = digits(5) match {\n            case x if x ==\
    \ 0 => \"\"\n            case x => digits(5).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit7 = digits(6) match {\n            case x if x ==\
    \ 0 => \"\"\n            case x => digits(6).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit8 = digits(7) match {\n            case x if x ==\
    \ 0 => \"\"\n            case x => digits(7).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit9 = digits(8) match {\n            case x if x ==\
    \ 0 => \"\"\n            case x => digits(8).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit10 = digits(9) match {\n            case x if x ==\
    \ 0 => \"\"\n            case x => digits(9).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit11 = digits(10) match {\n            case x if x\
    \ == 0 => \"\"\n            case x => digits(10).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit12 = digits(11) match {\n            case x if x\
    \ == 0 => \"\"\n            case x => digits(11).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit13 = digits(12) match {\n            case x if x\
    \ == 0 => \"\"\n            case x => digits(12).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit14 = digits(13) match {\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6ondjgg2.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'case' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6ondjgg2.scala:86:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m86 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp6ondjgg2.scala:14:48 --------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base).toList\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^\e[0m\n\
    \e[31m   |\e[0m                                                Found:    (base\
    \ : Long)\n\e[31m   |\e[0m                                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp6ondjgg2.scala:16:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x == \e[31m0\e\
    [0m => \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m         Values of types String and Int cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ondjgg2.scala:17:57\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m x\
    \ => digits(\e[31m0\e[0m).toString.reverse.grouped(base).toList\n\e[31m\e[31m\
    \   |\e[0m                                                         ^^^^\e[0m\n\
    \e[31m   |\e[0m                                                 Found:    (base\
    \ : Long)\n\e[31m   |\e[0m                                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp6ondjgg2.scala:20:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x == \e[31m0\e\
    [0m => \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m         Values of types String and Int cannot be compared wi"
  stdout: ''
  timestamp: 1659799062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") {\n            (x, y) => x\
    \ + y.reverse\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphb5l_5dq.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") {\n            (x, y) => x\
    \ + y.reverse\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphb5l_5dq.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmnizkhu4.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else base)\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqoeb1nhp.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val result = result.substring(0,\
    \ result.length - base)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe_7dveft.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.substring(\e\
    [31m0\e[0m, result.length - base)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpe_7dveft.scala:14:76 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString\n        result + (if (result.length\
    \ < base) \"\" else \"\" + base)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm5ylsr3.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val baseString =\
    \ if (base < 10) \"0\" + base.toString\n        else base.toString\n        val\
    \ result = baseString + result\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpke4k65xt.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = baseString\
    \ + result\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpke4k65xt.scala:14:48 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base).toList\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^\e[0m\n\
    \e[31m   |\e[0m                                                Found:    (base\
    \ : Long)\n\e[31m   |\e[0m                                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") { (acc, digit) =>\n      \
    \      val digitString = digit.toString\n            val digitBase = digitString.length\n\
    \            val digitValue = digitString.toLong\n            val digitBaseString\
    \ = digitBase.toString\n            val digitBaseValue = digitBaseString.toLong\n\
    \            val digitBaseBase = digitBaseValue.toLong\n            val digitBaseBaseString\
    \ = digitBaseBase.toString\n            val digitBaseBaseValue = digitBaseBaseString.toLong\n\
    \            val digitBaseBaseBase = digitBaseBaseValue.toLong\n            val\
    \ digitBaseBaseBaseString = digitBaseBaseBase.toString\n            val digitBaseBaseBaseValue\
    \ = digitBaseBaseBaseString.toLong\n            val digitBaseBaseBaseBase = digitBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseString = digitBaseBaseBaseBase.toString\n\
    \            val digitBaseBaseBaseBaseValue = digitBaseBaseBaseBaseString.toLong\n\
    \            val digitBaseBaseBaseBaseBase = digitBaseBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseBaseString = digitBaseBaseBaseBaseBase.toString\n\
    \            val digitBaseBaseBaseBaseValue = digitBaseBaseBaseBaseBaseString.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseBaseString = digitBaseBaseBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseBaseValue = digitBaseBaseBaseBaseBaseBaseString.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBaseString = digitBaseBaseBaseBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBaseValue = digitBaseBaseBaseBaseBaseBaseString.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBaseString = digitBaseBaseBaseBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBaseValue = digitBaseBaseBaseBaseBaseBaseBaseString.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBaseBaseString = digitBaseBaseBaseBaseBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBaseValue = digitBaseBaseBaseBaseBaseBaseBaseString.toLong\n\
    \            \n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr5sle4n_.scala:63:0 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr5sle4n_.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpr5sle4n_.scala:32:16 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e[0m \e[36mdigitBaseBaseBaseBaseValue\e\
    [0m = digitBaseBaseBaseBaseBaseString.toLong\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdigitBaseBaseBaseBaseValue is already defined as \e[33mvalue\e\
    [0m \e[35mdigitBaseBaseBaseBaseValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr5sle4n_.scala:34:16 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e[0m \e[36mdigitBaseBaseBaseBaseBaseString\e\
    [0m = digitBaseBaseBaseBaseBaseValue.toLong\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigitBaseBaseBaseBaseBaseString is already defined as \e[33mvalue\e\
    [0m \e[35mdigitBaseBaseBaseBaseBaseString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5sle4n_.scala:43:58\
    \ ------------------------\e[0m\e[0m\n\e[31m43 |\e[0m            \e[33mval\e[0m\
    \ \e[36mdigitBaseBaseBaseBaseBaseBaseBaseString\e[0m = digitBaseBaseBaseBaseBaseBaseBaseValue.toLong\n\
    \e["
  stdout: ''
  timestamp: 1659799061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (result\
    \ == \"0\") \"1\" else \"\")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnknf5wxl.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val newBase = digits.reverse.take(base).reverse.mkString(\"\
    \")\n        val newDigits = digits.reverse.drop(base).reverse.mkString(\"\")\n\
    \        val newX = x.toString.reverse.grouped(newBase).toList\n        val newResult\
    \ = newX.mkString(\"\")\n        val newDigit = newDigits.reverse.mkString(\"\"\
    )\n        val newBaseNew = newBase.reverse.mkString(\"\")\n        val newDigitNew\
    \ = newDigits.reverse.mkString(\"\")\n        val newXNew = newX.reverse.grouped(newBaseNew).toList\n\
    \        val newResultNew = newXNew.mkString(\"\")\n        val newDigitNewNew\
    \ = newDigitNew.reverse.mkString(\"\")\n        val newBaseNewNew = newBaseNew.reverse.mkString(\"\
    \")\n        val newDigitNewNew = newDigitNew.reverse.mkString(\"\")\n       \
    \ val newXNewNew = newXNew.reverse.grouped(newBaseNewNew).toList\n        val\
    \ newResultNewNew = newXNewNew.mkString(\"\")\n        val newDigitNewNewNew =\
    \ newDigitNewNew.reverse.mkString(\"\")\n        val newBaseNewNewNew = newBaseNewNew.reverse.mkString(\"\
    \")\n        val newDigitNewNewNew = newDigitNewNew.reverse.mkString(\"\")\n \
    \       val newXNewNewNew = newXNewNew.reverse.grouped(newBaseNewNewNew).toList\n\
    \        val newResultNewNewNew = newXNewNewNew.mkString(\"\")\n        val newDigitNewNewNewNew\
    \ = newDigitNewNewNew.reverse.mkString(\"\")\n        val newBaseNewNewNewNew\
    \ = newBaseNewNewNew.reverse.mkString(\"\")\n        val newDigitNewNewNewNew\
    \ = newDigitNewNewNew.reverse.mkString(\"\")\n        val newXNewNewNewNew = newXNewNewNew.reverse.grouped(newBaseNewNewNewNew).toList\n\
    \        val newResultNewNewNewNew = newXNewNewNewNew.mkString(\"\")\n       \
    \ val newDigitNewNewNewNewNew = newDigitNewNewNewNew.reverse.mkString(\"\")\n\
    \        val newBaseNewNewNewNewNew = newBaseNewNewNewNew.reverse.mkString(\"\"\
    )\n        val newDigitNewNewNewNewNew = newDigitNewNewNewNew.reverse.mkString(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfpy5b80j.scala:42:76 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mnewDigitNewNewNewNewNew\e\
    [0m = newDigitNewNewNewNew.reverse.mkString(\n\e[31m\e[31m   |\e[0m          \
    \                                                                  ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfpy5b80j.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewDigitNewNew\e[0m = newDigitNew.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewDigitNewNew is already defined as \e[33mvalue\e[0m \e[35mnewDigitNewNew\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfpy5b80j.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mnewDigitNewNewNew\e[0m = newDigitNewNew.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewDigitNewNewNew is already defined as \e[33mvalue\e[0m \e\
    [35mnewDigitNewNewNew\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfpy5b80j.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mnewDigitNewNewNewNew\e[0m\
    \ = newDigitNewNewNew.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnewDigitNewNewNewNew is already defined as \e[33mvalue\e[0m \e\
    [35mnewDigitNewNewNewNew\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E007] Type Mis"
  stdout: ''
  timestamp: 1659799061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") {\n            case (acc,\
    \ digit) => acc + digit.toString\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8zwex7lo.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = new mutable.StringBuilder\n        digits.foreach(x => result.append(x.reverse))\n\
    \        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3wdyatvt.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmnizkhu4.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmnizkhu4.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659798993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else base.toString.charAt(base.toString.length - digits.size))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz3r6qj9f.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else base.toString.charAt(base.toString.length - digits.size))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz3r6qj9f.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = digits.map(_.mkString(\"\")).reverse.mkString(\"\")\n  \
    \      result + if (result == \"0\") \"1\" else \"\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9yzwu9p_.scala:16:17 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result + \e[33mif\e[0m (result == \e[31m\"0\"\
    \e[0m) \e[31m\"1\"\e[0m \e[33melse\e[0m \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                 ^^\e[0m\n\e[31m   |\e[0m                 expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp9yzwu9p_.scala:15:48 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.map(_.mkString(\e[31m\"\"\
    \e[0m)).reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse\
    \ is not a member of Iterator[String] - did you mean Iterator[String].reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        var result = \"\"\n        var remainder\
    \ = x % base\n        var quotient = x / base\n        while (quotient > 0) {\n\
    \            result += quotient.toString\n            quotient = quotient / base\n\
    \        }\n        if (remainder > 0) {\n            result += remainder.toString\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi54q1_4z.scala:28)\n\tat Problem.main(tmpi54q1_4z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        digits.tail.foldLeft(result){\n\
    \            (a,b) => a + b\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphgz1w2ik.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + digits.reverse.takeWhile(_\
    \ < base).reverse.mkString\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvru7jage.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvru7jage.scala:16:46 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result + digits.reverse.takeWhile(_ < base).reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^\e[0m\n\
    \e[31m   |\e[0m                                              Found:    (base :\
    \ Long)\n\e[31m   |\e[0m                                              Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") {\n            (acc, digit)\
    \ => acc + (digit.drop(base).reverse)\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdzsasuy0.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdzsasuy0.scala:16:46 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            (\e[36macc\e[0m, \e[36mdigit\e[0m) => acc\
    \ + (digit.drop(base).reverse)\n\e[31m\e[31m   |\e[0m                        \
    \                      ^^^^\e[0m\n\e[31m   |\e[0m                            \
    \                  Found:    (base : Long)\n\e[31m   |\e[0m                  \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) 0 else \"\")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuxiprakj.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        val digit = digits.last\n\
    \        val digits = digits.dropRight(1)\n        val digit = digits.last\n \
    \       val digits = digits.dropRight(1)\n        val digit = digits.last\n  \
    \      val digits = digits.dropRight(1)\n        val digit = digits.last\n   \
    \     val digits = digits.dropRight(1)\n        val digit = digits.last\n    \
    \    val digits = digits.dropRight(1)\n        val digit = digits.last\n     \
    \   val digits = digits.dropRight(1)\n        val digit = digits.last\n      \
    \  val digits = digits.dropRight(1)\n        val digit = digits.last\n       \
    \ val digits = digits.dropRight(1)\n        val digit = digits.last\n        val\
    \ digits = digits.dropRight(1)\n        val digit = digits.last\n        val digits\
    \ = digits.dropRight(1)\n        val digit = digits.last\n        val digits =\
    \ digits.dropRight(1)\n        val digit = digits.last\n        val digits = digits.dropRight(1)\n\
    \        val digit = digits.last\n        val digits = digits.dropRight(1)\n \
    \       val digit = digits.last\n        val digits = digits.dropRight(1)\n  \
    \      val digit = digits.last\n        val digits = digits.dropRight(1)\n   \
    \     val digit = digits.last\n        val digits = digits.dropRight(1)\n    \
    \    val digit = digits.last\n        val digits = digits.dropRight(1)\n     \
    \   val digit = digits.last\n        val digits = digits.dropRight(1)\n      \
    \  val digit = digits.last\n        val digits = digits.dropRight(1)\n       \
    \ val digit = digits.last\n        val digits = digits.dropRight(1)\n        val\
    \ digit = digits.last\n        val digits = digits.dropRight(1)\n        val digit\
    \ = digits.last\n        val digits = digits.dropRight(1)\n        val digit =\
    \ digits.last\n        val digits = digits.dropRight(1)\n        val digit = digits.last\n\
    \        val digits = digits.dropRight(1)\n        val digit = digits.last\n \
    \       val digits = digits.dropRight(1)\n        val digit = digits.last\n  \
    \      val digits = digits.dropRight(1)\n        val digit = digits.last\n   \
    \     val digits = digits.dropRight(1)\n        val digit = digits.last\n    \
    \    val digits = digits.dropRight(1)\n        val digit = digits.last\n     \
    \   val digits = digits.dropRight(1)\n        val digit = digits.last\n      \
    \  val digits = digits.dropRight(1)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphbldk5bv.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = digits.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphbldk5bv.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mdigit\e[0m = digits.last\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigit is already\
    \ defined as \e[33mvalue\e[0m \e[35mdigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphbldk5bv.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigits\e[0m = digits.dropRight(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigits is already\
    \ defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphbldk5bv.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigit\e[0m = digits.last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigit is already defined as \e[33mvalue\e[0m \e[35mdigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphbldk5bv.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = digits.dropRight(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded method"
  stdout: ''
  timestamp: 1659799065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (x < base) \"\
    \" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy9czp3m3.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_k1b71v8.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_k1b71v8.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        var result = \"\"\n        var remainder\
    \ = x % base\n        while(x > 0) {\n            result += Integer.toString((x\
    \ % base))\n            x /= base\n        }\n        if(remainder != 0) {\n \
    \           result += Integer.toString(remainder)\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_vvp31zl.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            result += Integer.toString((x % base))\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_vvp31zl.scala:17:40 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            result += Integer.toString((x % base))\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                        Found:    Long\n\e[31m   |\e[0m   \
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp_vvp31zl.scala:18:14 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            x /= base\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long -\
    \ did you mean x.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_vvp31zl.scala:21:19\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            result += Integer.toString(remainder)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_vvp31zl.scala:21:39 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            result += Integer.toString(remainder)\n\e[31m\e\
    [31m   |\e[0m                                       ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                       Found:    (remainder : Long)\n\e[31m\
    \   |\e[0m                                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659799065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (x < base) \"\
    \" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy9czp3m3.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n   \
    \ // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    def changeBase(x\
    \ : Long, base : Long) : String = {\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjb0fa34i.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(base).toList\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                     Found:    (base : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799056
