name: HumanEval_156_int_to_mini_roman
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  \    // and return it in lowercase.\n    // Restrictions: 1 <= num <= 1000\n   \
  \ // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>> int_to_mini_roman(152)\
  \ == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n    def intToMiniRoman(number\
  \ : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
  xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
  ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
  d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
  iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
  xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
  dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
  cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n}\n"
completions: ["        val roman = mutable.ListBuffer.empty[String]\n        val nums\
    \ = scala.math.pow(10, number.toInt)\n        val numsStr = nums.toString.reverse\n\
    \        val numsArr = numsStr.split(\"\\\\.\")\n        val numsArrLength = numsArr.length\n\
    \        val numsArrLength = numsArrLength - 1\n        val numsArrLength = numsArrLength\
    \ - 1\n        val numsArrLength = numsArrLength - 1\n        val numsArrLength\
    \ = numsArrLength - 1\n        val numsArrLength = numsArrLength - 1\n       \
    \ val numsArrLength = numsArrLength - 1\n        val numsArrLength = numsArrLength\
    \ - 1\n        val numsArrLength = numsArrLength - 1\n        val numsArrLength\
    \ = numsArrLength - 1\n        val numsArrLength = numsArrLength - 1\n       \
    \ val numsArrLength = numsArrLength - 1\n        val numsArrLength = numsArrLength\
    \ - 1\n        val numsArrLength = numsArrLength - 1\n        val numsArrLength\
    \ = numsArrLength - 1\n        val numsArrLength = numsArrLength - 1\n       \
    \ val numsArrLength = numsArrLength - 1\n        val numsArrLength = numsArrLength\
    \ - 1\n        val numsArrLength = numsArrLength - 1\n        val numsArrLength\
    \ = numsArrLength - 1\n        val numsArrLength = numsArrLength - 1\n       \
    \ val numsArrLength = numsArrLength - 1\n        val numsArrLength = numsArrLength\
    \ - 1\n        val numsArrLength = numsArrLength - 1\n        val numsArrLength\
    \ = numsArrLength - 1\n        val numsArrLength = numsArrLength - 1\n       \
    \ val numsArrLength = numsArrLength - 1\n        val numsArrLength = numsArrLength\
    \ - 1\n        val numsArrLength = numsArrLength - 1\n        val numsArrLength\
    \ = numsArrLength - 1\n        val numsArrLength = numsArrLength - 1\n       \
    \ val numsArrLength = numsArrLength - 1\n        val numsArrLength = numsArrLength\
    \ - 1\n        val numsArrLength = numsArrLength - 1\n        val numsArrLength\
    \ = numsArrLength - 1\n        val numsArrLength = numsArrLength - 1\n       \
    \ val numsArrLength = numsArrLength - 1\n        val numsArrLength = numsArrLength\
    \ - 1\n        val num", "        val roman = mutable.ArrayBuffer.empty[String]\n\
    \        val nums = scala.math.pow(10, number.toInt)\n        for (i <- 0 until\
    \ nums) {\n            val remainder = number % nums\n            roman.append(roman.last.charAt(0)\
    \ + remainder.toChar)\n            number /= nums\n        }\n        roman.mkString",
  "        val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        for (i\
    \ <- 0 until numsString.length) {\n            val digit = numsString(i)\n   \
    \         if (digit == \"0\") {\n                roman += \"\"\n            }\
    \ else {\n                val index = roman.indexOf(digit)\n                if\
    \ (index == -1) {\n                    roman += digit\n                } else\
    \ {\n                    val before = roman.take(index).reverse\n            \
    \        val after = roman.drop(index).reverse\n                    roman += before\
    \ + digit + after\n                }\n            }\n        }\n        roman.mkString.toLowerCase",
  "        val roman = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\", \"\
    CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    \
    \    )\n        val romanNum = mutable.ArrayBuffer(\n            \"M\", \"CM\"\
    , \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"\
    I\"\n        )\n        val romanNum2 = mutable.ArrayBuffer(\n            \"M\"\
    , \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"\n        )\n        val romanNum3 = mutable.ArrayBuffer(\n       \
    \     \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"\n        )\n        val romanNum4 = mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum5 = mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum6 = mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum7 = mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum8 = mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum9 = mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum10 = mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum11 = mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum12 = mutable.Array",
  "        val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val num = scala.math.pow(10,\
    \ i.toInt)\n            val remainder = number - num\n            if (remainder\
    \ >= 1000) {\n                roman.append(scala.math.pow(10, i.toInt).toString)\n\
    \                roman.append(scala.math.pow(10, i.toInt).toString)\n        \
    \    } else {\n                roman.append(scala.math.pow(10, i.toInt).toString)\n\
    \            }\n        }\n        roman.mkString.toLowerCase", "        val roman\
    \ = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10, number.toInt)\n\
    \        val numsString = nums.toString.reverse\n        var i = 0\n        while\
    \ (i < numsString.length) {\n            val num = numsString.charAt(i).toInt\n\
    \            val romanNum = numToRoman(num)\n            roman.append(romanNum)\n\
    \            i += 1\n        }\n        roman.reverse.mkString", "        val\
    \ roman = scala.collection.mutable.ArrayBuffer.empty[String]\n        val nums\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap2 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap3 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap4 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap5 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap6 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap7 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap8 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap9 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap10 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap11 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap12 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap13 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap14 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap15 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap16 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap17 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap18 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap19 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap20 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap21 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap22 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap23 = scala.collection.mutable.HashMap.empty[Int,\
    \ String]\n        val numsMap24 = scala.", "        val roman = mutable.ListBuffer.empty[String]\n\
    \        val nums = scala.math.pow(10, number.toInt)\n        val numsArray =\
    \ nums.toArray\n        val numsArrayLength = numsArray.length\n        val numsArrayIterator\
    \ = numsArray.iterator\n        val numsArrayIteratorNext = numsArrayIterator.next\n\
    \        val numsArrayIteratorNextInt = numsArrayIteratorNext.toInt\n        val\
    \ numsArrayIteratorNextInt = numsArrayIteratorNextInt.toInt\n        val numsArrayIteratorNextInt\
    \ = numsArrayIteratorNextInt.toInt\n        val numsArrayIteratorNextInt = numsArrayIteratorNextInt.toInt\n\
    \        val numsArrayIteratorNextInt = numsArrayIteratorNextInt.toInt\n     \
    \   val numsArrayIteratorNextInt = numsArrayIteratorNextInt.toInt\n        val\
    \ numsArrayIteratorNextInt = numsArrayIteratorNextInt.toInt\n        val numsArrayIteratorNextInt\
    \ = numsArrayIteratorNextInt.toInt\n        val numsArrayIteratorNextInt = numsArrayIteratorNextInt.toInt\n\
    \        val numsArrayIteratorNextInt = numsArrayIteratorNextInt.toInt\n     \
    \   val numsArrayIteratorNextInt = numsArrayIteratorNextInt.toInt\n        val\
    \ numsArrayIteratorNextInt = numsArrayIteratorNextInt.toInt\n        val numsArrayIteratorNextInt\
    \ = numsArrayIteratorNextInt.toInt\n        val numsArrayIteratorNextInt = numsArrayIteratorNextInt.toInt\n\
    \        val numsArrayIteratorNextInt = numsArrayIteratorNextInt.toInt\n     \
    \   val numsArrayIteratorNextInt = numsArrayIteratorNextInt.toInt\n        val\
    \ numsArrayIteratorNextInt = numsArrayIteratorNextInt.toInt\n        val numsArrayIteratorNextInt\
    \ = numsArrayIteratorNextInt.toInt\n        val numsArrayIteratorNextInt = numsArrayIteratorNextInt.toInt\n\
    \        val numsArrayIteratorNextInt = numsArrayIteratorNextInt.toInt\n     \
    \   val numsArrayIteratorNextInt = numsArrayIteratorNextInt.toInt\n        val\
    \ numsArrayIteratorNextInt = numsArrayIteratorNextInt.toInt\n        val numsArrayIteratorNextInt\
    \ = numsArrayIteratorNextInt.toInt", "        val roman = mutable.ArrayBuffer.empty[String]\n\
    \        val nums = scala.math.pow(10, number.toInt)\n        val numsStr = nums.toString.reverse\n\
    \        val numsArr = numsStr.split(\"\").toArray\n        val numsArr_length\
    \ = numsArr.length\n        val numsArr_length = numsArr.length\n        val numsArr_length\
    \ = numsArr.length\n        val numsArr_length = numsArr.length\n        val numsArr_length\
    \ = numsArr.length\n        val numsArr_length = numsArr.length\n        val numsArr_length\
    \ = numsArr.length\n        val numsArr_length = numsArr.length\n        val numsArr_length\
    \ = numsArr.length\n        val numsArr_length = numsArr.length\n        val numsArr_length\
    \ = numsArr.length\n        val numsArr_length = numsArr.length\n        val numsArr_length\
    \ = numsArr.length\n        val numsArr_length = numsArr.length\n        val numsArr_length\
    \ = numsArr.length\n        val numsArr_length = numsArr.length\n        val numsArr_length\
    \ = numsArr.length\n        val numsArr_length = numsArr.length\n        val numsArr_length\
    \ = numsArr.length\n        val numsArr_length = numsArr.length\n        val numsArr_length\
    \ = numsArr.length\n        val numsArr_length = numsArr.length\n        val numsArr_length\
    \ = numsArr.length\n        val numsArr_length = numsArr.length\n        val numsArr_length\
    \ = numsArr.length\n        val numsArr_length = numsArr.length\n        val numsArr_length\
    \ = numsArr.length\n        val numsArr_length = numsArr.length\n        val numsArr_length\
    \ = numsArr.length\n        val numsArr_length = numsArr.length\n        val numsArr_length\
    \ = numsArr.length\n        val numsArr_length = numsArr.length\n        val numsArr_length\
    \ = numsArr.length\n        val numsArr_length = numsArr.length\n        val numsArr_length\
    \ = numsArr.length\n        val num", "        val roman = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numsMap = scala.collection.mutable.Map[Int, Int]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap3 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap4 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap7 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap8 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap9\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap10 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap11 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap12 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap13 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap14\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap15 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap16 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap17 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap20 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap21 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap22 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap23 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap24\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap25 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap26 = scala.collection.mutable.Map[Int, Int]", " \
    \       val roman = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap", "        val roman = mutable.ListBuffer[String]()\n   \
    \     val nums = scala.math.pow(10, number.toInt)\n        val numsArray = nums.toArray\n\
    \        val numsArrayLength = numsArray.length\n        for (i <- 0 until numsArrayLength)\
    \ {\n            val num = numsArray(i)\n            val romanNum = num.toString.toRoman\n\
    \            roman.append(romanNum)\n        }\n        roman.mkString.toLowerCase",
  "        val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val remainder\
    \ = number % i\n            if (remainder == 0) {\n                roman += scala.math.pow(10,\
    \ i).toChar\n                number /= i\n            } else {\n             \
    \   roman += scala.math.pow(10, i).toChar\n                number /= i\n     \
    \           roman += scala.math.pow(10, remainder).toChar\n            }\n   \
    \     }\n        roman.mkString.toLowerCase", "        val roman = mutable.ListBuffer[String]()\n\
    \        val nums = scala.math.pow(10, number.toInt)\n        val numsArray =\
    \ nums.toArray\n        val numsArrayLength = numsArray.length\n        var i\
    \ = 0\n        while (i < numsArrayLength) {\n            val numsArrayElement\
    \ = numsArray(i)\n            val numsArrayElementAsInt = numsArrayElement.toInt\n\
    \            val numsArrayElementAsLong = numsArrayElementAsInt * 10\n       \
    \     val numsArrayElementAsLongAsString = numsArrayElementAsLong.toString\n \
    \           val numsArrayElementAsLongAsStringAsLowerCase = numsArrayElementAsLongAsString.toLowerCase\n\
    \            val numsArrayElementAsLongAsStringAsLowerCaseAsRoman = numsArrayElementAsLongAsStringAsLowerCase.charAt(0).toString\
    \ + numsArrayElementAsLongAsStringAsLowerCase.substring(1)\n            roman.append(numsArrayElementAsLongAsStringAsLowerCaseAsRoman)\n\
    \            i += 1\n        }\n        roman.toString", "        val roman =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val nums = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsStr = scala.collection.mutable.ListBuffer[String]()\n       \
    \ val numsStr2 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr3\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr4 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr5 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsStr6 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr7\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr8 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr9 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsStr10 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr11 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr12\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr13 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr14 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr15 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr16 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr17\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr18 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr19 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr20 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr21 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr22\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr23 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr24 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr25 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr26 = scala.collection.mutable.ListBuffer[String]", "        val roman\
    \ = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10, number.toInt)\n\
    \        val numsStr = nums.toString.reverse\n        val numsArr = numsStr.split(\"\
    \\\\.\")\n        for (i <- 0 until numsArr.length) {\n            val numStr\
    \ = numsArr(i)\n            val numInt = numStr.toInt\n            val numIntStr\
    \ = numInt.toString\n            val numIntStrLen = numIntStr.length\n       \
    \     val numIntStrLen2 = numIntStrLen / 2\n            val numIntStrLen3 = numIntStrLen\
    \ / 3\n            val numIntStrLen4 = numIntStrLen / 4\n            val numIntStrLen5\
    \ = numIntStrLen / 5\n            val numIntStrLen6 = numIntStrLen / 6\n     \
    \       val numIntStrLen7 = numIntStrLen / 7\n            val numIntStrLen8 =\
    \ numIntStrLen / 8\n            val numIntStrLen9 = numIntStrLen / 9\n       \
    \     val numIntStrLen10 = numIntStrLen / 10\n            val numIntStrLen11 =\
    \ numIntStrLen / 11\n            val numIntStrLen12 = numIntStrLen / 12\n    \
    \        val numIntStrLen13 = numIntStrLen / 13\n            val numIntStrLen14\
    \ = numIntStrLen / 14\n            val numIntStrLen15 = numIntStrLen / 15\n  \
    \          val numIntStrLen16 = numIntStrLen / 16\n            val numIntStrLen17\
    \ = numIntStrLen / 17\n            val numIntStrLen18 = numIntStrLen / 18\n  \
    \          val numIntStrLen19 = numIntStrLen / 19\n            val numIntStrLen20\
    \ = numIntStrLen / 20\n            val numIntStrLen21 = numIntStrLen / 21\n  \
    \          val numIntStrLen22 = numIntStrLen / 22\n            val numIntStrLen23\
    \ = numIntStrLen / 23\n            val numIntStrLen24 = numIntStrLen / 24\n  \
    \          val numIntStrLen25 = numIntStrLen / 25\n            val numIntStrLen26\
    \ = numIntStrLen / 26\n            val numIntStrLen27 = numIntStrLen / 27\n  \
    \          val numIntStrLen28 = numIntStrLen / 28\n            val numIntStrLen29\
    \ = numIntStrLen / ", "        val roman = mutable.ListBuffer.empty[String]\n\
    \        val nums = scala.math.pow(10, number.toInt)\n        val numsArray =\
    \ nums.toArray\n        val numsArrayLength = numsArray.length\n        val numsArrayReversed\
    \ = numsArray.reverse\n        val numsArrayReversedLength = numsArrayReversed.length\n\
    \        val numsArrayReversedLength = numsArrayReversedLength - 1\n        val\
    \ numsArrayReversedLength = numsArrayReversedLength - 1\n        val numsArrayReversedLength\
    \ = numsArrayReversedLength - 1\n        val numsArrayReversedLength = numsArrayReversedLength\
    \ - 1\n        val numsArrayReversedLength = numsArrayReversedLength - 1\n   \
    \     val numsArrayReversedLength = numsArrayReversedLength - 1\n        val numsArrayReversedLength\
    \ = numsArrayReversedLength - 1\n        val numsArrayReversedLength = numsArrayReversedLength\
    \ - 1\n        val numsArrayReversedLength = numsArrayReversedLength - 1\n   \
    \     val numsArrayReversedLength = numsArrayReversedLength - 1\n        val numsArrayReversedLength\
    \ = numsArrayReversedLength - 1\n        val numsArrayReversedLength = numsArrayReversedLength\
    \ - 1\n        val numsArrayReversedLength = numsArrayReversedLength - 1\n   \
    \     val numsArrayReversedLength = numsArrayReversedLength - 1\n        val numsArrayReversedLength\
    \ = numsArrayReversedLength - 1\n        val numsArrayReversedLength = numsArrayReversedLength\
    \ - 1\n        val numsArrayReversedLength = numsArrayReversedLength - 1\n   \
    \     val numsArrayReversedLength = numsArrayReversedLength - 1\n        val numsArrayReversedLength\
    \ = numsArrayReversedLength - 1\n        val numsArrayReversedLength = numsArrayReversedLength\
    \ - 1\n        val numsArrayReversedLength = numsArrayReversedLength - 1\n   \
    \     val numsArrayReversedLength = numsArrayReversedLength - 1\n        val numsArrayReversedLength\
    \ = numsArrayReversedLength - 1\n        val numsArrayReversedLength = numsArrayReversedLength\
    \ - 1\n        val numsArrayReversedLength = numsArrayReversedLength - 1\n   \
    \     val numsArrayReversedLength = numsArrayReversedLength - 1\n        val numsArrayReversedLength\
    \ = numsArrayReversedLength - 1\n        val num", "        val roman = mutable.ArrayBuffer(\n\
    \            \"\",\n            \"M\",\n            \"CM\",\n            \"D\"\
    ,\n            \"CD\",\n            \"C\",\n            \"XC\",\n            \"\
    L\",\n            \"XL\",\n            \"X\",\n            \"IX\",\n         \
    \   \"V\",\n            \"IV\",\n            \"I\"\n        )\n        val romanNum\
    \ = number / 100\n        val remainder = number % 100\n        romanNum match\
    \ {\n            case 0 => roman(0)\n            case 1 => roman(1)\n        \
    \    case 2 => roman(2)\n            case 3 => roman(3)\n            case 4 =>\
    \ roman(4)\n            case 5 => roman(5)\n            case 6 => roman(6)\n \
    \           case 7 => roman(7)\n            case 8 => roman(8)\n            case\
    \ 9 => roman(9)\n            case 10 => roman(10)\n            case 11 => roman(11)\n\
    \            case 12 => roman(12)\n            case 13 => roman(13)\n        \
    \    case 14 => roman(14)\n            case 15 => roman(15)\n            case\
    \ 16 => roman(16)\n            case 17 => roman(17)\n            case 18 => roman(18)\n\
    \            case 19 => roman(19)\n            case 20 => roman(20)\n        \
    \    case 21 => roman(21)\n            case 22 => roman(22)\n            case\
    \ 23 => roman(23)\n            case 24 => roman(24)\n            case 25 => roman(25)\n\
    \            case 26 => roman(26)\n            case 27 => roman(27)\n        \
    \    case 28 => roman(28)\n            case 29 => roman(29)\n            case\
    \ 30 => roman(30)\n            case 31 => roman(31)\n            case 32 => roman(32)\n\
    \            case 33 => roman(33)\n            case 34 => roman(34)\n        \
    \    case 35 => roman(35)\n            case 36 => roman(36)\n            case\
    \ 37 => roman(37)\n            case 38 => roman(38)\n            case 39 => roman(39)\n\
    \            case 40 => roman(40)\n            case 41 => roman(41)\n        \
    \    case 42 => roman(42)\n            case 43 => roman(43)\n            case\
    \ 44 => roman(44)\n            case 45 => roman(45)\n            case 46 => roman(46)\n\
    \            case 47 => roman(47)\n            case 48 => roman(48)\n        \
    \    case 49 => roman", "        val roman = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numsMap = scala.collection.mutable.Map[Int, Int]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap3 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap4 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap7 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap8 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap9\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap10 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap11 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap12 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap13 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap14\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap15 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap16 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap17 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap20 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap21 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap22 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap23 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap24\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap25 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap26 = scala.collection.mutable.Map[Int, Int]", " \
    \       val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val num = scala.math.pow(10,\
    \ i)\n            val remainder = number % num\n            roman.append(if (remainder\
    \ >= 10) \"M\" else \"m\")\n            roman.append(if (remainder >= 100) \"\
    C\" else \"c\")\n            roman.append(if (remainder >= 1000) \"D\" else \"\
    d\")\n            roman.append(if (remainder >= 10000) \"CD\" else \"cd\")\n \
    \           roman.append(if (remainder >= 100000) \"C\" else \"c\")\n        \
    \    roman.append(if (remainder >= 1000000) \"X\" else \"x\")\n            roman.append(if\
    \ (remainder >= 10000000) \"L\" else \"l\")\n            roman.append(if (remainder\
    \ >= 100000000) \"XL\" else \"xl\")\n            roman.append(if (remainder >=\
    \ 1000000000) \"XC\" else \"xc\")\n            roman.append(if (remainder >= 10000000000)\
    \ \"C\" else \"c\")\n            roman.append(if (remainder >= 100000000000) \"\
    D\" else \"d\")\n            roman.append(if (remainder >= 1000000000000) \"CM\"\
    \ else \"cm\")\n            roman.append(if (remainder >= 10000000000000) \"M\"\
    \ else \"m\")\n            roman.append(if (remainder >= 100000000000000) \"MM\"\
    \ else \"mm\")\n            roman.append(if (remainder >= 1000000000000000) \"\
    MMM\" else \"MMM\")\n            roman.append(if (remainder >= 10000000000000000)\
    \ \"MMMM\" else \"MMMM\")\n            roman.append(if (remainder >= 100000000000000000)\
    \ \"MMMMM\" else \"MMMMM\")\n            roman.append(if (remainder >= 1000000000000000000)\
    \ \"MMMMMMM\" else \"MMMMMMM\")\n        }\n        roman.mkString"]
stop_tokens:
- "\n    }\n"
