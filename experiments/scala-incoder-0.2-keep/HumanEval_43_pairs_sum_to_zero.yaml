name: HumanEval_43_pairs_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // pairs_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ True if there are two distinct elements in the list that\n    // sum to zero,\
  \ and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3, 5, 0])\n    // False\n\
  \    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n    // >>> pairs_sum_to_zero([1,\
  \ 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n \
  \   // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n    def pairsSumToZero(l\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
  \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n    }\n\
  \n}\n"
completions: ["        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.length == 1 && x._2.sum == 0)", "        val pairs = l.groupBy(x => x %\
    \ 2)\n        pairs.forall { case (k, v) => v.reduce(_ + _) == 0 }", "       \
    \ val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduceLeft(_\
    \ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.sum == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.forall {\n            case (k, v) => v.reduce(_ + _) ==\
    \ 0\n        }", "        val pairs = l.zipWithIndex.filter(_._2 != l.length)\n\
    \        val pairsWithZero = pairs.filter(_._2 == 0)\n        pairsWithZero.length\
    \ == pairs.length", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.sum == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.forall { case (k, v) => v.reduceLeft(_ + _) == 0 }", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v)\
    \ => v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n   \
    \     pairs.forall { case (k, v) => v.forall(x => x == 0) }", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.sum\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.length == 2 && x._2.sum == 0)", "        val pairs = l.groupBy(x => x %\
    \ 2)\n        pairs.forall { case (k, v) => v.reduce(_ + _) == 0L }", "      \
    \  val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduce(_\
    \ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(pair\
    \ => pair._2.length == 1 && pair._2.sum == 0)", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(pair => pair._2.sum == 0)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case\
    \ (k, v) => v.forall(x => x == 0) }", "        val pairs = l.groupBy(x => x %\
    \ 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "      \
    \  val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduce(_\
    \ + _) == 0 }"]
stop_tokens:
- "\n    }\n"
