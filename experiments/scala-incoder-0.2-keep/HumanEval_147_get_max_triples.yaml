name: HumanEval_147_get_max_triples
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i] = i\
  \ * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a where\
  \ i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example\
  \ :\n    // Input: n = 5\n    // Output: 1\n    // Explanation: \n    // a = [1,\
  \ 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    def getMaxTriples(n\
  \ : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
  \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
  \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
completions: ["        val a = Array.ofDim[Long](n)\n        val count = mutable.Map[Long,\
    \ Long]()\n        for(i <- 0 until n){\n            val j = i * i - i + 1\n \
    \           val k = i * i + i + 1\n            if((j < k) && (j % 3 == 0)){\n\
    \                a(i) = j\n                count(i) = count(i) + 1\n         \
    \   }\n        }\n        count(0)", "        val a = Array.ofDim[Int](n)\n  \
    \      val count = mutable.Map[Int, Int]()\n        for( i <- 1 to n ) {\n   \
    \         for( j <- 1 to i ) {\n                for( k <- 1 to j ) {\n       \
    \             if( i + j + k == n ) {\n                        a(i) = i * i - i\
    \ + 1\n                        count(a(i), a(i), a(i)) = 1\n                 \
    \   }\n                    else {\n                        count(a(i), a(i), a(i))\
    \ = count(a(i), a(i), a(i)) + 1\n                    }\n                }\n  \
    \          }\n        }\n        count.values.toList.max", "        var triples\
    \ = 0\n        var a = Array.ofDim[Int](n)\n        var i = 0\n        var j =\
    \ 0\n        var k = 0\n        while(i < n && j < n && k < n) {\n           \
    \ a(i) = i * i - i + 1\n            i += 1\n            j += 1\n            k\
    \ += 1\n        }\n        while(i < n) {\n            a(i) = i * i - i + 1\n\
    \            i += 1\n        }\n        while(j < n) {\n            a(j) = j *\
    \ j - j + 1\n            j += 1\n        }\n        while(k < n) {\n         \
    \   a(k) = k * k - k + 1\n            k += 1\n        }\n        for(i<-0 until\
    \ n) {\n            for(j<-0 until n) {\n                for(k <- 0 until n) {\n\
    \                    if(i<j && i<k && j<k) {\n                        if(a(i)\
    \ + a(j) + a(k) == 3) {\n                            triples += 1\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n        return triples", "        val a = Array.ofDim[Int](n)\n    \
    \    val count = mutable.Map[Int, Int]()\n        for( i <- 1 to n ) {\n     \
    \       val j = i * i - i + 1\n            val k = i * i + i + 1\n           \
    \ if( j < k ) {\n                a(i) = j\n                count(j) = count(j)\
    \ + 1\n                count(k) = count(k) + 1\n            }\n        }\n   \
    \     count(a(0))", "        val a = Array.ofDim[Int](n)\n        val result =\
    \ new mutable.HashMap[Int, Int]()\n        val triples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.Hash", "    \
    \    val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        for (i <- 1 to n) {\n\
    \            val j = i * i - i + 1\n            val k = i * i + j\n          \
    \  val l = i * i - j\n            if (l == 0) {\n                a += i\n    \
    \            m += k\n            }\n        }\n        m.toList.length", "   \
    \     val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        for (i <- 0 until n) {\n            a(i) = i * i - i + 1\n        }\n\
    \        val triples = a.zipWithIndex.filter(_._2 % 3 == 0)\n        triples.foreach\
    \ { t =>\n            val a = t._1.toInt\n            val b = t._2.toInt\n   \
    \         val c = a * b\n            if (count.contains(c)) {\n              \
    \  count(c) = count(c) + 1\n            } else {\n                count(c) = 1\n\
    \            }\n        }\n        count.values.max", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        var count = 0\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        while(i < n && j < n && k < n)\
    \ {\n            a(i) = i * i - i + 1\n            i += 1\n            j += 1\n\
    \            k += 1\n        }\n        while(i < n) {\n            count += 1\n\
    \            i += 1\n        }\n        while(j < n) {\n            count += 1\n\
    \            j += 1\n        }\n        while(k < n) {\n            count += 1\n\
    \            k += 1\n        }\n        count += a.filter(_ % 3 == 0).length\n\
    \        return count", "        val a = Array.ofDim[Int](n)\n        val m =\
    \ mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        for( i <- 1 to n ) {\n            for( j <- 1 to i ) {\n            \
    \    for( k <- 1 to j ) {\n                    if( i + j + k == n ) {\n      \
    \                  a(i) = i * i - i + 1\n                        count(a(i), a(i),\
    \ a(i)) = 1\n                    }\n                }\n            }\n       \
    \ }\n        count.filter(_._2 > 0).length", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var count = 0\n        while (i < n && j <\
    \ n && k < n) {\n            val x = a(i) + a(j) + a(k);\n            if (x %\
    \ 3 == 0) {\n                m += x\n                count += 1\n            }\n\
    \            i += 1\n            j += 1\n            k += 1\n        }\n     \
    \   m.toList.length", "        var max = 0\n        var a = new Array[Int](n)\n\
    \        for(i<- 0 until n){\n            a(i) = i * i - i + 1\n        }\n  \
    \      for(i<- 0 until n){\n            for(j<- 0 until n){\n                for(k\
    \ <- 0 until n){\n                    if(i<j && i<k && j<k){\n               \
    \         if(a(i) + a(j) + a(k) == 3){\n                            max = max\
    \ + 1\n                        }\n                    }\n                }\n \
    \           }\n        }\n        return max", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for (i <- 1 to n) {\n  \
    \          val j = i * i - i + 1\n            val k = i * i + i + j\n        \
    \    val count = count.getOrElse(k, 0)\n            val count = count.updated(k,\
    \ count + 1)\n            val count = count.updated(j, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count ", "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for( i <- 1 to n ) {\n \
    \           val j = i * i - i + 1\n            if( j != 0 ) {\n              \
    \  val k = i * i + j\n                if( k > 0 ) {\n                    a(i)\
    \ = k\n                    count(k) = count(k) + 1\n                }\n      \
    \      }\n        }\n        val maxCount = count.maxBy(_._2)\n        val maxCount\
    \ = maxCount._1 + 1\n        val triples = count.filter(_._2 == maxCount).map(_._1)\n\
    \        triples.sum", "        var max = 0\n        var a = new Array[Long](n)\n\
    \        for(i<-0 until n){\n            a(i) = i * i - i + 1\n        }\n   \
    \     for(i<-0 until n){\n            for(j<-0 until n){\n                for(k\
    \ <- 0 until n){\n                    if(i<j && i<k && j<k){\n               \
    \         if(a(i) + a(j) + a(k) == 3){\n                            max = max\
    \ + 1\n                        }\n                    }\n                }\n \
    \           }\n        }\n        return max", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for (i <- 1 to n) {\n  \
    \          a(i) = i * i - i + 1\n        }\n        val triples = a.zipWithIndex.filter(_._2\
    \ % 3 == 0)\n        val result = triples.foldLeft(0)((acc, triple) => {\n   \
    \         val i = triple._1\n            val j = triple._2\n            val k\
    \ = triple._3\n            val count = acc + count(i) + count(j) + count(k)\n\
    \            if (count > 3) {\n                count(i) + count(j) + count(k)\n\
    \            } else {\n                acc\n            }\n        })\n      \
    \  result", "        var max = 0\n        var a = new Array[Int](n)\n        for(\
    \ i <- 0 until n ) {\n            a(i) = i * i - i + 1\n        }\n        for(\
    \ i <- 0 until n ) {\n            for( j <- 0 until n ) {\n                for(\
    \ k <- 0 until n ) {\n                    if( i < j < k && a(i) + a(j) + a(k)\
    \ == 3 ) {\n                        max = max + 1\n                    }\n   \
    \             }\n            }\n        }\n        return max"]
stop_tokens:
- "\n    }\n"
