name: HumanEval_147_get_max_triples
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i] = i\
  \ * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a where\
  \ i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example\
  \ :\n    // Input: n = 5\n    // Output: 1\n    // Explanation: \n    // a = [1,\
  \ 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    def getMaxTriples(n\
  \ : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
  \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
  \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
completions: ["        val a = Array.ofDim[Long](n)\n        val count = mutable.Map[Long,\
    \ Long]()\n        for(i <- 0 until n){\n            val j = i * i - i + 1\n \
    \           val k = i * i + i + 1\n            if((j < k) && (j % 3 == 0)){\n\
    \                a(i) = j\n                count(i) = count(i) + 1\n         \
    \   }\n        }\n        count(0)", "        val a = Array.ofDim[Int](n)\n  \
    \      val count = mutable.Map[Int, Int]()\n        for( i <- 1 to n ) {\n   \
    \         for( j <- 1 to i ) {\n                for( k <- 1 to j ) {\n       \
    \             if( i + j + k == n ) {\n                        a(i) = i * i - i\
    \ + 1\n                        count(a(i), a(i), a(i)) = 1\n                 \
    \   }\n                    else {\n                        count(a(i), a(i), a(i))\
    \ = count(a(i), a(i), a(i)) + 1\n                    }\n                }\n  \
    \          }\n        }\n        count.values.toList.max", "        var triples\
    \ = 0\n        var a = Array.ofDim[Int](n)\n        var i = 0\n        var j =\
    \ 0\n        var k = 0\n        while(i < n && j < n && k < n) {\n           \
    \ a(i) = i * i - i + 1\n            i += 1\n            j += 1\n            k\
    \ += 1\n        }\n        while(i < n) {\n            a(i) = i * i - i + 1\n\
    \            i += 1\n        }\n        while(j < n) {\n            a(j) = j *\
    \ j - j + 1\n            j += 1\n        }\n        while(k < n) {\n         \
    \   a(k) = k * k - k + 1\n            k += 1\n        }\n        for(i<-0 until\
    \ n) {\n            for(j<-0 until n) {\n                for(k <- 0 until n) {\n\
    \                    if(i<j && i<k && j<k) {\n                        if(a(i)\
    \ + a(j) + a(k) == 3) {\n                            triples += 1\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n        return triples", "        val a = Array.ofDim[Int](n)\n    \
    \    val count = mutable.Map[Int, Int]()\n        for( i <- 1 to n ) {\n     \
    \       val j = i * i - i + 1\n            val k = i * i + i + 1\n           \
    \ if( j < k ) {\n                a(i) = j\n                count(j) = count(j)\
    \ + 1\n                count(k) = count(k) + 1\n            }\n        }\n   \
    \     count(a(0))", "        val a = Array.ofDim[Int](n)\n        val result =\
    \ new mutable.HashMap[Int, Int]()\n        val triples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.Hash", "    \
    \    val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        for (i <- 1 to n) {\n\
    \            val j = i * i - i + 1\n            val k = i * i + j\n          \
    \  val l = i * i - j\n            if (l == 0) {\n                a += i\n    \
    \            m += k\n            }\n        }\n        m.toList.length", "   \
    \     val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        for (i <- 0 until n) {\n            a(i) = i * i - i + 1\n        }\n\
    \        val triples = a.zipWithIndex.filter(_._2 % 3 == 0)\n        triples.foreach\
    \ { t =>\n            val a = t._1.toInt\n            val b = t._2.toInt\n   \
    \         val c = a * b\n            if (count.contains(c)) {\n              \
    \  count(c) = count(c) + 1\n            } else {\n                count(c) = 1\n\
    \            }\n        }\n        count.values.max", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        var count = 0\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        while(i < n && j < n && k < n)\
    \ {\n            a(i) = i * i - i + 1\n            i += 1\n            j += 1\n\
    \            k += 1\n        }\n        while(i < n) {\n            count += 1\n\
    \            i += 1\n        }\n        while(j < n) {\n            count += 1\n\
    \            j += 1\n        }\n        while(k < n) {\n            count += 1\n\
    \            k += 1\n        }\n        count += a.filter(_ % 3 == 0).length\n\
    \        return count", "        val a = Array.ofDim[Int](n)\n        val m =\
    \ mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        for( i <- 1 to n ) {\n            for( j <- 1 to i ) {\n            \
    \    for( k <- 1 to j ) {\n                    if( i + j + k == n ) {\n      \
    \                  a(i) = i * i - i + 1\n                        count(a(i), a(i),\
    \ a(i)) = 1\n                    }\n                }\n            }\n       \
    \ }\n        count.filter(_._2 > 0).length", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var count = 0\n        while (i < n && j <\
    \ n && k < n) {\n            val x = a(i) + a(j) + a(k);\n            if (x %\
    \ 3 == 0) {\n                m += x\n                count += 1\n            }\n\
    \            i += 1\n            j += 1\n            k += 1\n        }\n     \
    \   m.toList.length", "        var max = 0\n        var a = new Array[Int](n)\n\
    \        for(i<- 0 until n){\n            a(i) = i * i - i + 1\n        }\n  \
    \      for(i<- 0 until n){\n            for(j<- 0 until n){\n                for(k\
    \ <- 0 until n){\n                    if(i<j && i<k && j<k){\n               \
    \         if(a(i) + a(j) + a(k) == 3){\n                            max = max\
    \ + 1\n                        }\n                    }\n                }\n \
    \           }\n        }\n        return max", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for (i <- 1 to n) {\n  \
    \          val j = i * i - i + 1\n            val k = i * i + i + j\n        \
    \    val count = count.getOrElse(k, 0)\n            val count = count.updated(k,\
    \ count + 1)\n            val count = count.updated(j, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count + 1)\n            val count = count.updated(i, count + 1)\n          \
    \  val count = count.updated(i, count + 1)\n            val count = count.updated(i,\
    \ count ", "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for( i <- 1 to n ) {\n \
    \           val j = i * i - i + 1\n            if( j != 0 ) {\n              \
    \  val k = i * i + j\n                if( k > 0 ) {\n                    a(i)\
    \ = k\n                    count(k) = count(k) + 1\n                }\n      \
    \      }\n        }\n        val maxCount = count.maxBy(_._2)\n        val maxCount\
    \ = maxCount._1 + 1\n        val triples = count.filter(_._2 == maxCount).map(_._1)\n\
    \        triples.sum", "        var max = 0\n        var a = new Array[Long](n)\n\
    \        for(i<-0 until n){\n            a(i) = i * i - i + 1\n        }\n   \
    \     for(i<-0 until n){\n            for(j<-0 until n){\n                for(k\
    \ <- 0 until n){\n                    if(i<j && i<k && j<k){\n               \
    \         if(a(i) + a(j) + a(k) == 3){\n                            max = max\
    \ + 1\n                        }\n                    }\n                }\n \
    \           }\n        }\n        return max", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for (i <- 1 to n) {\n  \
    \          a(i) = i * i - i + 1\n        }\n        val triples = a.zipWithIndex.filter(_._2\
    \ % 3 == 0)\n        val result = triples.foldLeft(0)((acc, triple) => {\n   \
    \         val i = triple._1\n            val j = triple._2\n            val k\
    \ = triple._3\n            val count = acc + count(i) + count(j) + count(k)\n\
    \            if (count > 3) {\n                count(i) + count(j) + count(k)\n\
    \            } else {\n                acc\n            }\n        })\n      \
    \  result", "        var max = 0\n        var a = new Array[Int](n)\n        for(\
    \ i <- 0 until n ) {\n            a(i) = i * i - i + 1\n        }\n        for(\
    \ i <- 0 until n ) {\n            for( j <- 0 until n ) {\n                for(\
    \ k <- 0 until n ) {\n                    if( i < j < k && a(i) + a(j) + a(k)\
    \ == 3 ) {\n                        max = max + 1\n                    }\n   \
    \             }\n            }\n        }\n        return max", "        val a\
    \ = Array.ofDim[Int](n)\n        var count = 0\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        while(i < n && j < n && k < n) {\n       \
    \     if(i == j && j == k) {\n                count += 1\n                i +=\
    \ 1\n                j += 1\n                k += 1\n            } else if(i %\
    \ 2 == 0) {\n                a(i) = i * i - i + 1\n                i += 1\n  \
    \          } else if(j % 2 == 0) {\n                a(j) = i * i - i + 1\n   \
    \             j += 1\n            } else {\n                a(k) = i * i - i +\
    \ 1\n                k += 1\n            }\n        }\n        count += a.filter(_\
    \ % 3 == 0).length\n        return count", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for( i <- 1 to n ) {\n \
    \           val j = i * i - i + 1\n            if( j < 0 ) break\n           \
    \ val k = j * j - j\n            if( k < 0 ) break\n            if( k > 0 ) {\n\
    \                val value = a(i) + a(j) + a(k)\n                if( value % 3\
    \ == 0 ) {\n                    if( count.contains(value) ) count(value) += 1\n\
    \                    else count(value) = 1\n                }\n            }\n\
    \        }\n        count.values.toList.max", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for( i <- 1 to n ) {\n \
    \           for( j <- 1 to i ) {\n                for( k <- 1 to j ) {\n     \
    \               val sum = i * i - i + j\n                    if( sum % 3 == 0\
    \ ) {\n                        a(i) = sum\n                        count(sum)\
    \ = count(sum) + 1\n                    }\n                }\n            }\n\
    \        }\n        count(a(0))", "        val a = Array.ofDim[Int](n)\n     \
    \   val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[In", "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int,\
    \ Int]()\n        for (i <- 1 to n) {\n            val j = i * i - i + 1\n   \
    \         val k = i * i + i + 1\n            val value = if (j + k == 0) 1 else\
    \ 0\n            val count = count(i) + value\n            a(i) = value\n    \
    \        count(i) = count\n        }\n        count(1)", "        var triples\
    \ = 0\n        var a = Array.ofDim[Int](n + 1)\n        a(0) = 1\n        a(1)\
    \ = 3\n        a(2) = 7\n        a(3) = 13\n        a(4) = 21\n        var i =\
    \ 0\n        var j = 0\n        var k = 0\n        while (i < n) {\n         \
    \   while (j < n) {\n                while (k < n) {\n                    if (a(i)\
    \ + a(j) + a(k) == 3) {\n                        triples += 1\n              \
    \      }\n                    k += 1\n                }\n                j +=\
    \ 1\n            }\n            i += 1\n        }\n        return triples", " \
    \       val a = Array.ofDim[Long](n)\n        val count = mutable.Map[Long, Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until n) {\n            val j = i +\
    \ 1\n            val k = n - i\n            val sum = i * i - i + 1\n        \
    \    val count = mutable.Map[Long, Long]()\n            for(j <- 0 until i until\
    \ n) {\n                val k = n - j\n                val sum = i * i - j + 1\n\
    \                val count = mutable.Map[Long, Long]()\n                for(k\
    \ <- 0 until j until n) {\n                    val sum = i * i - k + 1\n     \
    \               val count = mutable.Map[Long, Long]()\n                    if(sum\
    \ % 3 == 0) {\n                        count.put(i, count.getOrElse(i, 0L) + 1)\n\
    \                        count.put(j, count.getOrElse(j, 0L) + 1)\n          \
    \              count.put(k, count.getOrElse(k, 0L) + 1)\n                    }\n\
    \                }\n            }\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._2)._2\n\
    \            val maxCount = count.maxBy(_._2)._2\n            val maxCount = count.maxBy(_._",
  "        var max = 0\n        var a = new Array[Long](n)\n        for( i <- 0 until\
    \ n ) {\n            a(i) = i * i - i + 1\n        }\n        for( i <- 0 until\
    \ n ) {\n            for( j <- 0 until n ) {\n                for( k <- 0 until\
    \ n ) {\n                    if( i < j && j < k && k < n ) {\n               \
    \         if( a(i) + a(j) + a(k) == 0 ) {\n                            max = max\
    \ + 1\n                        }\n                    }\n                }\n \
    \           }\n        }\n        return max", "        var a = Array.ofDim[Int](n\
    \ + 1)\n        a(0) = 1\n        a(1) = 1\n        a(2) = 1\n        a(3) = 1\n\
    \        a(4) = 1\n        \n        var count = 0\n        \n        for(i<-0\
    \ until n){\n            for(j<-0 until n){\n                for(k<-0 until n){\n\
    \                    if(i<j && i<k && j<k){\n                        if(a(i) +\
    \ a(j) + a(k) == 3){\n                            count = count + 1\n        \
    \                }\n                    }\n                }\n            }\n\
    \        }\n        \n        return count", "        var count = 0\n        var\
    \ a = Array.ofDim[Int](n+1)\n        for(i<-0 until n){\n            a(i) = i\
    \ * i - i + 1\n        }\n        for(i<-0 until n){\n            for(j<-0 until\
    \ n){\n                for(k <- 0 until n){\n                    if(i<j && i<k\
    \ && j<k){\n                        if(a(i) + a(j) + a(k) == 0){\n           \
    \                 count += 1\n                        }\n                    }\n\
    \                }\n            }\n        }\n        count", "        val a =\
    \ Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n        val\
    \ maxCount = 0\n        for(i <- 0 until n){\n            val j = i + 1\n    \
    \        val k = n - 1\n            val sum = i * i - i + 1\n            val sum\
    \ = j + k\n            val sum = sum % 3\n            val sum = sum * sum\n  \
    \          val sum = sum % 3\n            val sum = sum * sum\n            val\
    \ sum = sum % 3\n            val sum = sum * sum\n            val sum = sum %\
    \ 3\n            val sum = sum * sum\n            val sum = sum % 3\n        \
    \    val sum = sum * sum\n            val sum = sum % 3\n            val sum =\
    \ sum * sum\n            val sum = sum % 3\n            val sum = sum * sum\n\
    \            val sum = sum % 3\n            val sum = sum * sum\n            val\
    \ sum = sum % 3\n            val sum = sum * sum\n            val sum = sum %\
    \ 3\n            val sum = sum * sum\n            val sum = sum % 3\n        \
    \    val sum = sum * sum\n            val sum = sum % 3\n            val sum =\
    \ sum * sum\n            val sum = sum % 3\n            val sum = sum * sum\n\
    \            val sum = sum % 3\n            val sum = sum * sum\n            val\
    \ sum = sum % 3\n            val sum = sum * sum\n            val sum = sum %\
    \ 3\n            val sum = sum * sum\n            val sum = sum % 3\n        \
    \    val sum = sum * sum\n            val sum = sum % 3\n            val sum =\
    \ sum * sum\n            val sum = sum % 3\n            val sum = sum * sum\n\
    \            val sum = sum % 3\n            val sum = sum * sum\n            val\
    \ sum = sum % 3\n            val sum = sum * sum\n            val sum = sum %\
    \ 3\n            val sum = sum * sum\n            val sum = sum % 3\n        \
    \    val sum = sum * sum\n            val sum = sum % 3\n            val sum =\
    \ sum * sum\n            val sum = sum % 3\n            val sum = sum * sum\n\
    \            val sum = sum % 3\n            val sum = sum * sum\n            val\
    \ sum = sum % 3\n            val sum = sum * sum\n            val sum = sum %\
    \ 3\n            val sum = sum * sum\n            val sum = sum % 3\n        \
    \    val sum = sum * sum\n            val sum = sum % 3\n            val sum =\
    \ sum * sum\n            val sum = sum % 3\n            val sum = sum * sum\n\
    \            val sum = sum % 3\n            val sum = sum * sum\n", "        val\
    \ a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n  \
    \      val n = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val s = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val t = mutable.ArrayBuffer.empty[Int]\n        val r = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val s = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val t = mutable.ArrayBuffer.empty[Int]\n        val r = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val s = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val t = mutable.ArrayBuffer.empty[Int]\n        val r = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val s = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val t = mutable.ArrayBuffer.empty[Int]\n        val r = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        var a = Array.ofDim[Int](n+1)\n\
    \        a(0) = 1\n        a(1) = 1\n        a(2) = 1\n        val maxTriples\
    \ = 0 \n        for (i <- 0 until n-1) {\n            for (j <- 0 until n-1) {\n\
    \                for (k <- 0 until n-1) {\n                    if (i+j+k == n)\
    \ maxTriples += 1\n                    else if (a(i) + a(j) + a(k) == 3) maxTriples\
    \ += 1\n                }\n            }\n        }\n        return maxTriples",
  "        val a = Array.ofDim[Long](n)\n        var i = 0\n        var j = 0\n  \
    \      var k = 0\n        var count = 0\n        while (i < n && j < n && k <\
    \ n) {\n            a(i) = i * i - i + 1\n            i += 1\n            j +=\
    \ 1\n            k += 1\n        }\n        val triples = a.zipWithIndex.filter(_._2\
    \ < n).map(_._1).sum\n        val triple = (triples % 3) == 0\n        if (triple)\
    \ {\n            count = triples + 1\n        }\n        count", "        val\
    \ a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n  \
    \      val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        var a = Array.ofDim[Int](n+1)\n        a(0) = 1\n        a(1) = 1\n   \
    \     a(2) = 1\n        for(i<-3 until n){\n            for(j<-3 until n){\n \
    \               for(k<-3 until n){\n                    if(i<j && i<k && j<k){\n\
    \                        if(a(i)+a(j)+a(k) == 3){\n                          \
    \  return 1\n                        }\n                    }\n              \
    \  }\n            }\n        }\n        return 0", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[", "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int,\
    \ Int]()\n        for (i <- 1 to n) {\n            val j = i * i - i + 1\n   \
    \         val k = i * i + i + j\n            if (j > k) {\n                a(i)\
    \ = j\n                count(i) = 1\n            } else {\n                a(i)\
    \ = k\n                count(i) = count(i) + 1\n            }\n        }\n   \
    \     count(1)", "        val a = Array.ofDim[Int](n)\n        val m = scala.math.BigInt(3)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while(i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       while(i < n) {\n            a(i) = i * i - i + 1\n            i += 1\n\
    \        }\n        while(j < n) {\n            a(j) = i * i - i + 1\n       \
    \     j += 1\n        }\n        while(k < n) {\n            a(k) = i * i - i\
    \ + 1\n            k += 1\n        }\n        for(i<-0 until a.length) {\n   \
    \         for(j<-0 until a.length) {\n                for(k <- 0 until a.length)\
    \ {\n                    if(i<j && i<k && j<k) {\n                        if(a(i)\
    \ + a(j) + a(k) == m) {\n                            count += 1\n            \
    \            }\n                    }\n                }\n            }\n    \
    \    }\n        count", "        val a = Array.ofDim[Long](n)\n        val m =\
    \ mutable.HashMap[Long, Long]()\n        for(i <- 1 to n){\n            val j\
    \ = i * i - i + 1\n            val k = i * i + j\n            if((j + k) % 3 ==\
    \ 0){\n                a(i) = j\n                m(k) = i\n            }\n   \
    \     }\n        val res = a.filter(_ % 3 == 0).length\n        m.values.toList.sortWith(_\
    \ > _).last", "        var triples = 0\n        var a = Array.ofDim[Int](n)\n\
    \        for( i <- 1 to n ) {\n            a(i) = i * i - i + 1\n        }\n \
    \       for( i <- 1 to n ) {\n            for( j <- 1 to n ) {\n             \
    \   for( k <- 1 to n ) {\n                    if( i != j && j != k && i != k )\
    \ {\n                        if( a(i) + a(j) + a(k) == 0 ) {\n               \
    \             triples += 1\n                        }\n                    }\n\
    \                }\n            }\n        }\n        return triples", "     \
    \   val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var count = 0\n        while (i < n && j <\
    \ n && k < n) {\n            val temp = a(i) + a(j) + a(k) + 3\n            if\
    \ (temp % 3 == 0) {\n                count += 1\n                m += temp\n \
    \           }\n            i += 1\n            j += 1\n            k += 1\n  \
    \      }\n        if (count == 0) {\n            count = 0\n        }\n      \
    \  m.toList.length", "        val a = Array.ofDim[Int](n)\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 1 to n) {\n            val j = i * i - i + 1\n            val\
    \ k = i * i + i + j\n            val x = a(i) + a(i) + a(i)\n            val y\
    \ = a(i) + a(i) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k)\
    \ + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k) + a(k", "        var count\
    \ = 0\n        var a = Array.ofDim[Int](n+1)\n        for(i <- 1 to n){\n    \
    \        a(i) = i * i - i + 1\n        }\n        for(i <- 1 to n){\n        \
    \    for(j <- 1 to n){\n                for(k <- 1 to n){\n                  \
    \  if(i<j && i<k && j<k){\n                        if(a(i) + a(j) + a(k) == 0){\n\
    \                            count += 1\n                        }\n         \
    \           }\n                }\n            }\n        }\n        count", " \
    \       val a = Array.ofDim[Long](n)\n        val count = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triple2 = mutable.Map[Long, Long]()\n        val triple3\
    \ = mutable.Map[Long, Long]()\n        val triple4 = mutable.Map[Long, Long]()\n\
    \        val triple5 = mutable.Map[Long, Long]()\n        val triple6 = mutable.Map[Long,\
    \ Long]()\n        val triple7 = mutable.Map[Long, Long]()\n        val triple8\
    \ = mutable.Map[Long, Long]()\n        val triple9 = mutable.Map[Long, Long]()\n\
    \        val triple10 = mutable.Map[Long, Long]()\n        val triple11 = mutable.Map[Long,\
    \ Long]()\n        val triple12 = mutable.Map[Long, Long]()\n        val triple13\
    \ = mutable.Map[Long, Long]()\n        val triple14 = mutable.Map[Long, Long]()\n\
    \        val triple15 = mutable.Map[Long, Long]()\n        val triple16 = mutable.Map[Long,\
    \ Long]()\n        val triple17 = mutable.Map[Long, Long]()\n        val triple18\
    \ = mutable.Map[Long, Long]()\n        val triple19 = mutable.Map[Long, Long]()\n\
    \        val triple20 = mutable.Map[Long, Long]()\n        val triple21 = mutable.Map[Long,\
    \ Long]()\n        val triple22 = mutable.Map[Long, Long]()\n        val triple23\
    \ = mutable.Map[Long, Long]()\n        val triple24 = mutable.Map[Long, Long]()\n\
    \        val triple25 = mutable.Map[Long, Long]()\n        val triple26 = mutable.Map[Long,\
    \ Long]()\n        val triple27 = mutable.Map[Long, Long]()\n        val triple28\
    \ = mutable.Map[Long, Long]()\n        val triple29 = mutable.Map[Long, Long]()\n\
    \        val triple30 = mutable.Map[Long, Long]()\n        val triple31 = mutable.Map[Long,\
    \ Long]()\n        val triple32 = mutable.Map[Long, Long]()\n        val triple33\
    \ = mutable.Map[Long, Long]()\n        val triple34 = mutable.Map[Long, Long]()\n\
    \        val triple35 = mutable.Map[Long, Long]", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var count = 0\n        while(i < n && j <\
    \ n && k < n) {\n            if(i+j+k == n) {\n                count += 1\n  \
    \              m += (i+j+k)\n                i += 1\n                j += 1\n\
    \                k += 1\n            } else if(i+j+k > n) {\n                i\
    \ += 1\n                j += 1\n                k += 1\n            } else if(j+k\
    \ > n) {\n                j += 1\n                k += 1\n            } else if(i+j+k\
    \ > n) {\n                i += 1\n                j += 1\n                k +=\
    \ 1\n            } else {\n                i += 1\n                j += 1\n  \
    \              k += 1\n            }\n        }\n        count += m.toArray.filter(_\
    \ % 3 == 0).length\n        return count", "        val a = Array.ofDim[Int](n+1)\n\
    \        a(0) = 1\n        a(1) = 1\n        a(2) = 1\n        a(3) = 1\n    \
    \    val m = a.length\n        val n = a.last\n        val triples = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        for (k <- 0 until n) {\n                    if (i < j && j < k && k <\
    \ n) {\n                        val sum = i * i + j * j + k * k\n            \
    \            if (sum % 3 == 0) {\n                            triples += sum\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        triples.toList.size", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val count = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        ", "        val\
    \ a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n  \
    \      val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        var a = Array.ofDim[Int](n)\n\
    \        for( i <- 0 until n ) {\n            a(i) = i * i - i + 1\n        }\n\
    \        val result = a.filter( x => x < 3 ).length\n        result * 3", "  \
    \      val a = Array.ofDim[Int](n)\n        var i = 0\n        var j = 0\n   \
    \     var k = 0\n        var count = 0\n        while (i < n && j < n && k < n)\
    \ {\n            a(i) = i * i - i + 1\n            i += 1\n            j += 1\n\
    \            k += 1\n            count += 1\n        }\n        val max = a.max\n\
    \        val maxIndex = a.indexOf(max)\n        if (maxIndex == 0 || maxIndex\
    \ == n - 1) {\n            return count\n        }\n        val max2 = a.max\n\
    \        val maxIndex2 = a.indexOf(max2)\n        if (maxIndex2 == 0 || maxIndex2\
    \ == n - 1) {\n            return count\n        }\n        if (maxIndex > maxIndex2)\
    \ {\n            val temp = maxIndex\n            maxIndex = maxIndex2\n     \
    \       maxIndex2 = temp\n        }\n        val max3 = a.max\n        val maxIndex3\
    \ = a.indexOf(max3)\n        if (maxIndex3 == 0 || maxIndex3 == n - 1) {\n   \
    \         return count\n        }\n        if (maxIndex > maxIndex3 && maxIndex2\
    \ > maxIndex3) {\n            val temp1 = maxIndex\n            maxIndex = maxIndex3\n\
    \            maxIndex3 = temp1\n        }\n        val max4 = a.max\n        val\
    \ maxIndex4 = a.indexOf(max4)\n        if (maxIndex4 == 0 || maxIndex4 == n -\
    \ 1) {\n            return count\n        }\n        if (maxIndex > maxIndex4\
    \ && maxIndex2 > maxIndex4) {\n            val temp2 = maxIndex\n            maxIndex\
    \ = maxIndex4\n            maxIndex4 = temp2\n        }\n        val max5 = a.max\n\
    \        val maxIndex5 = a.indexOf(max5)\n        if (maxIndex5 == 0 || maxIndex5\
    \ == n - 1) {\n            return count\n        }\n        if (maxIndex > maxIndex5\
    \ && maxIndex2 > maxIndex5 && maxIndex3 > maxIndex5) {\n            val temp3\
    \ = maxIndex\n            maxIndex = maxIndex5\n            maxIndex5 = temp3\n\
    \        }\n        val max6 = a.max\n        val maxIndex6 = a.indexOf(max6)\n\
    \        if (maxIndex6 == 0 || maxIndex6 == n - 1) {\n            return count\n\
    \        }\n        if (maxIndex > maxIndex6 && maxIndex2 > maxIndex6 && maxIndex3\
    \ > maxIndex6 && maxIndex4 > maxIndex6) {\n            val temp4 = maxIndex\n\
    \            maxIndex = maxIndex6\n            maxIndex6 = temp4\n        }\n\
    \        val max7 = a.max\n        val maxIndex7 = a.indexOf(max7)\n        if\
    \ (maxIndex7 == 0 || maxIndex7 == n - 1) {\n            return count\n       \
    \ }\n        if (maxIndex > maxIndex7 && maxIndex2 > maxIndex7 && ", "       \
    \ val a = Array.ofDim[Long](n)\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while(i < n && j < n && k < n) {\n            if(i<j && j<k) {\n\
    \                a(i) = i*i - i + 1\n                i += 1\n                j\
    \ += 1\n                k += 1\n                count += 1\n            } else\
    \ if(i<k) {\n                a(i) = i*i - i + 1\n                i += 1\n    \
    \            k += 1\n                count += 1\n            } else if(j<k) {\n\
    \                a(j) = i*i - i + 1\n                j += 1\n                k\
    \ += 1\n                count += 1\n            } else {\n                a(k)\
    \ = i*i - i + 1\n                k += 1\n                count += 1\n        \
    \    }\n        }\n        val res = a.filter(_ % 3 == 0).length\n        count\
    \ += res\n        count", "        val a = Array.ofDim[Int](n)\n        val m\
    \ = mutable.ArrayBuffer.empty[Int]\n        for(i <- 0 until n) {\n          \
    \  val j = i * i - i + 1\n            val k = i * i + j\n            val l = i\
    \ * i - j\n            if((j > 0) && (k > 0) && (l > 0)) {\n                a\
    \ += i\n                m += j\n                m += k\n            }\n      \
    \  }\n        val count = m.toList.count(x => x % 3 == 0)\n        return count",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        val triples = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, ", "        var a = Array.ofDim[Int](n);\n\
    \        var sum = 0;\n        var max = 0;\n        var maxTriples = 0;\n   \
    \     var j = 0;\n        var k = 0;\n        var i = 0;\n        for(i <- 0 until\
    \ n) {\n            a(i) = i * i - i + 1;\n            sum += a(i);\n        }\n\
    \        for(i <- 0 until n) {\n            for(j <- 0 until n) {\n          \
    \      for(k <- 0 until n) {\n                    if(i<j && j<k && k<i) {\n  \
    \                      if(a(i) + a(j) + a(k) == sum) {\n                     \
    \       maxTriples += 1;\n                            max = Math.max(max, a(i)\
    \ + a(j) + a(k));\n                        }\n                    }\n        \
    \        }\n            }\n        }\n        return maxTriples;", "        val\
    \ a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n     \
    \   val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[In", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        for(i <- 0 until n){\n\
    \            val j = i * i - i + 1\n            val k = i * i + i + 1\n      \
    \      if((j < k) && (j % 3 == 0)){\n                a += j\n                m\
    \ += i\n            }\n        }\n        m.toList.length", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for( i <- 1 to n ) {\n \
    \           val j = i * i - i + 1\n            val k = i * i + i + j\n       \
    \     if( j > 0 ) {\n                if( k > 0 ) {\n                    if( j\
    \ + k == 0 ) {\n                        a(i) = j\n                        count(j)\
    \ = count(j) + 1\n                    } else {\n                        a(i) =\
    \ k\n                        count(k) = count(k) + 1\n                    }\n\
    \                } else {\n                    a(i) = j\n                    count(j)\
    \ = count(j) + 1\n                }\n            } else {\n                a(i)\
    \ = k\n                count(k) = count(k) + 1\n            }\n        }\n   \
    \     count(0)", "        val a = Array.ofDim[Int](n)\n        val result = mutable.ArrayBuffer.empty[Int]\n\
    \        val max = 0\n        val min = 0\n        val maxTriples = 0\n      \
    \  val minTriples = 0\n        val maxSum = 0\n        val minSum = 0\n      \
    \  val maxSumTriples = 0\n        val minSumTriples = 0\n        val maxSumTriples\
    \ = 0\n        val minSumTriples = 0\n        val maxSumTriples = 0\n        val\
    \ minSumTriples = 0\n        val maxSumTriples = 0\n        val minSumTriples\
    \ = 0\n        val maxSumTriples = 0\n        val minSumTriples = 0\n        val\
    \ maxSumTriples = 0\n        val minSumTriples = 0\n        val maxSumTriples\
    \ = 0\n        val minSumTriples = 0\n        val maxSumTriples = 0\n        val\
    \ minSumTriples = 0\n        val maxSumTriples = 0\n        val minSumTriples\
    \ = 0\n        val maxSumTriples = 0\n        val minSumTriples = 0\n        val\
    \ maxSumTriples = 0\n        val minSumTriples = 0\n        val maxSumTriples\
    \ = 0\n        val minSumTriples = 0\n        val maxSumTriples = 0\n        val\
    \ minSumTriples = 0\n        val maxSumTriples = 0\n        val minSumTriples\
    \ = 0\n        val maxSumTriples = 0\n        val minSumTriples = 0\n        val\
    \ maxSumTriples = 0\n        val minSumTriples = 0\n        val maxSumTriples\
    \ = 0\n        val minSumTriples = 0\n        val maxSumTriples = 0\n        val\
    \ minSumTriples = 0\n        val maxSumTriples = 0\n        val minSumTriples\
    \ = 0\n        val maxSumTriples = 0\n        val minSumTriples = 0\n        val\
    \ maxSumTriples = 0\n        val minSumTriples = 0\n        val maxSumTriples\
    \ = 0\n        val minSumTriples = 0\n        val maxSumTriples = 0\n        val\
    \ minSumTriples = 0\n        val maxSumTriples = 0\n        val minSumTriples\
    \ = 0\n        val maxSumTriples = 0\n        val minSumTriples = 0\n        val\
    \ maxSumTriples = 0\n        val minSumTriples = 0\n        val maxSumTriples\
    \ = 0\n        val minSumTriples = 0\n        val maxSumTriples = 0\n        val\
    \ minSumTriples = 0\n        val maxSumTri", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val a = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val a = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val a = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val a = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val a = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val a = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[",
  "        var a = Array.ofDim[Int](n)\n        var count = 0\n        for (i<-0 until\
    \ n) {\n            a(i) = i * i - i + 1\n        }\n        for (i<-0 until n)\
    \ {\n            for (j<-0 until n) {\n                for (k<-0 until n) {\n\
    \                    if (a(i) + a(j) + a(k) == 3) {\n                        count\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \       return count", "        val a = Array.ofDim[Int](n)\n        val count\
    \ = mutable.Map[Int, Int]()\n        for (i <- 0 until n) {\n            a(i)\
    \ = i * i - i + 1\n        }\n        val triples = a.zipWithIndex.filter(_._2\
    \ < n).filter(_._1 < n).filter(_._2 < n).map(_._1).distinct\n        triples.foreach\
    \ { i =>\n            val triple = a.zipWithIndex.filter(_._1 < i).filter(_._2\
    \ < i).filter(_._3 < i).map(_._1).distinct\n            val tripleCount = triple.length\n\
    \            if (tripleCount > 0) {\n                val tripleSum = triple.map(x\
    \ => a(x) + a(i) + a(i + 1)).sum\n                if (tripleSum > 0) {\n     \
    \               count(tripleSum) += 1\n                }\n            }\n    \
    \    }\n        count(triples.last) += 1\n        count(triples.last).sum", " \
    \       val a = Array.ofDim[Int](n)\n        val result = mutable.HashMap[Int,\
    \ Int]()\n        \n        for( i <- 1 to n ) {\n            val j = i\n    \
    \        val k = n - i\n            \n            if( i != j ) {\n           \
    \     val temp = a(i)\n                a(i) = a(j)\n                a(j) = temp\n\
    \            }\n            \n            if( i != k ) {\n                val\
    \ temp = a(i)\n                a(i) = a(k) \n                a(k) = temp\n   \
    \         }\n            \n            if( j != k ) {\n                val temp\
    \ = a(j)\n                a(j) = a(k) \n                a(k) = temp\n        \
    \    }\n            \n            if( i != k ) {\n                val temp = a(i)\n\
    \                a(i) = a(k) \n                a(k) = temp\n            }\n  \
    \          \n            if( j != k ) {\n                val temp = a(j)\n   \
    \             a(j) = a(k) \n                a(k) = temp\n            }\n     \
    \       \n            if( i != j ) {\n                val temp = a(i)\n      \
    \          a(i) = a(j)\n                a(j) = temp\n            }\n         \
    \   \n            if( j != k ) {\n                val temp = a(j)\n          \
    \      a(j) = a(k) \n                a(k) = temp\n            }\n            \n\
    \            if( i != k ) {\n                val temp = a(i)\n               \
    \ a(i) = a(k) \n                a(k) = temp\n            }\n            \n   \
    \         if( j != k ) {\n                val temp = a(j)\n                a(j)\
    \ = a(k) \n                a(k) = temp\n            }\n            \n        \
    \    if( i != j ) {\n                val temp = a(i)\n                a(i) = a(j)\n\
    \                a(j) = temp\n            }\n            \n            if( j !=\
    \ k ) {\n                val temp = a(j)\n                a(j) = a(k) \n     \
    \           a(k) = temp\n            }\n            \n            if( i != k )\
    \ {\n                val temp = a(i)\n                a(i) = a(k) \n         \
    \       a(k) = temp\n            }\n            \n            if( j != k ) {\n\
    \                val temp = a(j)\n                a(j) = a(k) \n             \
    \   a(k) = temp\n            }\n            \n            if( i != j ) {\n   \
    \             val temp = a(i)\n                a(i) = a(j)\n                a(j)\
    \ = temp\n            }\n            \n            if( j != k ) {\n          \
    \      val temp = a(j)\n                a(j) = a(k) \n                a(k) = temp\n\
    \            }\n            \n            if( i != k ", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val max = 0\n        val\
    \ maxCount = 0\n        for(i <- 0 until n){\n            val j = i + 1\n    \
    \        val k = n - i\n            val count = count(i) + count(j) + count(k)\n\
    \            if(count > maxCount){\n                max = count\n            \
    \    maxCount = count\n            }\n            a(i) = i * i - i + 1\n     \
    \   }\n        max.toLong", "        val a = Array.ofDim[Int](n)\n        val\
    \ m = scala.math.pow(3, n).toInt\n        val n = scala.math.pow(3, n).toInt\n\
    \        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n", "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val result = mutable.ArrayBuffer.empty[Int]\n        val max = (3 * n)\
    \ - 1\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = (0, 0, 0)\n        val maxTripleIndex = 0\n        val maxTripleSum = 0\n\
    \        val maxTripleSumIndex = 0\n        val maxTripleSumValue = 0\n      \
    \  val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex = 0\n  \
    \      val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex = 0\n\
    \        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex =\
    \ 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val maxTripleSumValueIndex = 0\n        val maxTripleSumValueIndex\
    \ = 0\n        val max", "        val a = Array.ofDim[Int](n)\n        val m =\
    \ mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int, Int]()\n \
    \       val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = a.length\n        val n = m\n        val max = 0\n        var\
    \ i = 0\n        var j = 0\n        var k = 0\n        var count = 0\n       \
    \ while (i < n && j < n && k < n) {\n            if (a(i) + a(j) + a(k) == 0)\
    \ {\n                count += 1\n            }\n            i += 1\n         \
    \   j += 1\n            k += 1\n        }\n        if (count > max) {\n      \
    \      max = count\n        }\n        return max", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        var a = Array.ofDim[Int](n)\n        for( i <- 1 to n-1 ) {\n         \
    \   val j = i*i-1\n            val k = i*i+1\n            if( j+k == n ) {\n \
    \               a(i) = j\n                a(i+1) = k\n                a(i+2) =\
    \ j+k\n            }\n        }\n        val sum = a(0) + a(1) + a(2) \n     \
    \   val triples = sum % 3 == 0\n        if( triples ) 1 else 0", "        val\
    \ a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n  \
    \      for (i <- 0 until n) {\n            a(i) = i * i - i + 1\n        }\n \
    \       val triples = mutable.ArrayBuffer.empty[Int]\n        for (i <- 0 until\
    \ n) {\n            for (j <- 0 until n) {\n                for (k <- 0 until\
    \ n) {\n                    if (i < j && j < k && k < i) {\n                 \
    \       triples += (a(i), a(j), a(k))\n                    }\n               \
    \ }\n            }\n        }\n        triples.toArray.count(_ % 3 == 0)", " \
    \       val a = Array.ofDim[Long](n)\n        val count = mutable.Map[Long, Long]()\n\
    \        for (i <- 1 to n) {\n            val j = i * i - i + 1\n            val\
    \ k = i * i + i + j\n            if (j > k) {\n                a(i) = j\n    \
    \            count(j) = count(j) + 1\n                count(k) = count(k) + 1\n\
    \            } else {\n                a(i) = k\n                count(k) = count(k)\
    \ + 1\n            }\n        }\n        count(a(0))", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        var count = 0\n        var a = Array.ofDim[Int](n)\n        for(i <- 0\
    \ until n) {\n            a(i) = i * i - i + 1\n        }\n        for(i <- 0\
    \ until n) {\n            for(j <- 0 until n) {\n                for(k <- 0 until\
    \ n) {\n                    if(i+j+k == a(i)+a(j)+a(k)) {\n                  \
    \      count += 1\n                    }\n                }\n            }\n \
    \       }\n        count", "        val a = Array.ofDim[Int](n)\n        var count\
    \ = 0\n        for(i <- 0 until n) {\n            for(j <- 0 until n) {\n    \
    \            for(k <- 0 until n) {\n                    if(i+j+k == n) count +=\
    \ 1\n                }\n            }\n            a(i) = i*i-i+1\n        }\n\
    \        count * 3", "        val a = Array.ofDim[Int](n)\n        val count =\
    \ mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        var count = 0\n        for( i <- 0 until n ) {\n            val j = i\
    \ + i\n            val k = i + j\n            if( j > n ) {\n                j\
    \ -= n\n            }\n            if( k > n ) {\n                k -= n\n   \
    \         }\n            if( a(i) == a(j) && a(i) == a(k) ) {\n              \
    \  count += 1\n            }\n        }\n        count", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriplesCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleSum = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleSumCount = mutable.ArrayBuffer.empty[Int]\n        val maxTripleProduct\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleProductCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductSum = mutable.ArrayBuffer.empty[Int]\n        val\
    \ maxTripleProductSumCount = mutable.ArrayBuffer.empty[Int]\n        val maxTripleProductProduct\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleProductProductCount =\
    \ mutable.ArrayBuffer.empty[Int]\n        val maxTripleProductProductSum = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductSumCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProduct = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductSum = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductSumCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductProduct = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductProductCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductSum = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductSumCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductProduct = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductProductCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductProductSum = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleProductProductProductProductSumCount = mutable.ArrayBuffer.empty[Int]\n\
    \        ", "        var max = 0\n        var a = new Array[Long](n)\n       \
    \ for( i <- 0 until n ) {\n            a(i) = i * i - i + 1\n        }\n     \
    \   for( i <- 0 until n ) {\n            for( j <- 0 until n ) {\n           \
    \     for( k <- 0 until n ) {\n                    if( i < j < k && a(i) + a(j)\
    \ + a(k) == 0 ) {\n                        max = max + 1\n                   \
    \ }\n                }\n            }\n        }\n        return max", "     \
    \   val a = Array.ofDim[Long](n)\n        val count = mutable.Map[Long, Long]()\n\
    \        val max = 0\n        for(i <- 0 until n) {\n            val j = i + 1\n\
    \            val k = n - 1\n            val sum = a(i) + a(j) + a(k) \n      \
    \      val triple = sum % 3 == 0\n            val key = sum\n            if(triple\
    \ && count.contains(key)) \n                max += 1\n            count(key) =\
    \ count(key) + 1 \n        }\n        max", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val count = mutable.ArrayBuffer.empty[Int]\n\
    \        val max = 0\n        val maxCount = 0\n        val maxTriples = 0\n \
    \       val maxTripleCount = 0\n        val maxTripleSum = 0\n        val maxTripleSumCount\
    \ = 0\n        val maxTripleSumSum = 0\n        val maxTripleSumSumCount = 0\n\
    \        val maxTripleSumSumSum = 0\n        val maxTripleSumSumSumCount = 0\n\
    \        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount =\
    \ 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumSum = 0\n        val maxTriple", "      \
    \  val a = Array.ofDim[Long](n)\n        val m = scala.math.pow(3, n).toLong\n\
    \        val n = scala.math.pow(3, n).toLong\n        val k = scala.math.pow(3,\
    \ n).toLong\n        var i = 0\n        var j = 0\n        var k = 0\n       \
    \ var count = 0\n        while(i < n && j < n && k < n) {\n            a(i) =\
    \ i * i - i + 1\n            i += 1\n            j += 1\n            k += 1\n\
    \            count += 1\n        }\n        while(i < n) {\n            a(i) =\
    \ i * i - i + 1\n            i += 1\n            count += 1\n        }\n     \
    \   while(j < n) {\n            a(j) = j * j - j + 1\n            j += 1\n   \
    \         count += 1\n        }\n        while(k < n) {\n            a(k) = k\
    \ * k - k + 1\n            k += 1\n            count += 1\n        }\n       \
    \ val max = 0\n        for(i <- 0 until count) {\n            val triple = a(i)\
    \ + a(j) + a(k) \n            if(triple > max) {\n                max = triple\n\
    \            }\n        }\n        return max", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val sum = 0\n        for(i\
    \ <- 1 to n) {\n            val j = i\n            val k = n - i\n           \
    \ val sum = i * i - i + 1\n            val triple = if (j > k) (a, j, k) else\
    \ (a, i, j)\n            count += triple\n            sum += triple\n        }\n\
    \        val result = count.filter(_._2 % 3 == 0).length\n        sum += result\n\
    \        sum", "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        var max = 0\n        var\
    \ a = new Array[Long](n)\n        for( i <- 0 until n ) {\n            a(i) =\
    \ i * i - i + 1\n        }\n        for( i <- 0 until n ) {\n            for(\
    \ j <- 0 until n ) {\n                for( k <- 0 until n ) {\n              \
    \      if( i < j && j < k && k < i ) {\n                        if( a(i) + a(j)\
    \ + a(k) == 0 ) {\n                            max = max + 1\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n        return max", "        var a = Array.ofDim[Int](n)\n        for( i\
    \ <- 0 until n ) {\n            a(i) = i * i - i + 1\n        }\n        val res\
    \ = a.filter( x => x < 3 ).length\n        for( i <- 0 until n ) {\n         \
    \   val j = a.indexOf(i)\n            val k = a.indexOf(j)\n            if( j\
    \ > k ) {\n                val tmp = a.slice( j, k )\n                if( tmp.isEmpty\
    \ ) res += 1\n                else if( tmp.sum % 3 == 0 ) res += 1\n         \
    \   }\n        }\n        res", "        val a = Array.ofDim[Int](n)\n       \
    \ var i = 0\n        var j = 0\n        var k = 0\n        var count = 0\n   \
    \     while (i < n && j < n && k < n) {\n            a(i) = i * i - i + 1\n  \
    \          i += 1\n            j += 1\n            k += 1\n        }\n       \
    \ val triples = a.zipWithIndex.filter(_._2 < n).map(_._1)\n        triples.foreach\
    \ { t =>\n            val a = a.updated(t._2, t._2 + t._1 + 1)\n            val\
    \ triple = a.zipWithIndex.filter(_._2 < n).map(_._1)\n            if (triples.forall(t\
    \ => triple(t).forall(t => t._1 + t._2 == t._1 + t._2))) {\n                count\
    \ += 1\n            }\n        }\n        count", "        val a = Array.ofDim[Long](n)\n\
    \        val result = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.HashSet[Long]()\n\
    \        val maxTriple = mutable.HashSet[Long]()\n        val maxTriples = mutable.Hash",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        while(i < n && j < n && k < n) {\n       \
    \     if(i == j && i == k) {\n                m += (i * i - i + 1)\n         \
    \       i += 1\n                j += 1\n                k += 1\n            }\
    \ else if(i == j) {\n                m += (i * i - i + 1)\n                i +=\
    \ 1\n                j += 1\n            } else if(j == k) {\n               \
    \ m += (i * i - i + 1)\n                j += 1\n                k += 1\n     \
    \       } else {\n                m += (i * i - i + 1)\n                i += 1\n\
    \                j += 1\n                k += 1\n            }\n        }\n  \
    \      m.toArray.length", "        val a = Array.ofDim[Int](n)\n        val m\
    \ = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        var count = 0\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        while (i < n) {\n            a(i)\
    \ = i * i - i + 1\n            i += 1\n        }\n        val maxTriples = a.filter(_\
    \ % 3 == 0).length\n        return maxTriples", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val count = mutable.ArrayBuffer.empty[Int]\n        val maxTriples =\
    \ mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleIndex = mutable.ArrayBuffer.empty[Int]\n        val maxTripleValue\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleValue = mutable.ArrayBuffer.empty[Int]\n        val maxTripleIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleValue = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleIndex = mutable.ArrayBuffer.empty[Int]\n        val maxTripleValue\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleValue = mutable.ArrayBuffer.empty[Int]\n        val maxTripleIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleValue = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleIndex = mutable.ArrayBuffer.empty[Int]\n        val maxTripleValue\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleValue = mutable.ArrayBuffer.empty[Int]\n        val maxTripleIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleValue = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleIndex = mutable.ArrayBuffer.empty[Int]\n        val maxTripleValue\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleValue = mutable.ArrayBuffer.empty[Int]\n        val maxTripleIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleValue = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleIndex = mutable.ArrayBuffer.empty[Int]\n        val maxTripleValue\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleIndex = mutable.Array",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = a.length\n        var i = 0\n        var j = 0\n        var k\
    \ = 0\n        var count = 0\n        while (i < m && j < m && k < m) {\n    \
    \        a(i) = i * i - i + 1\n            i += 1\n            j += 1\n      \
    \      k += 1\n        }\n        val triples = a.zipWithIndex.filter(_._1 < _._2).filter(_._2\
    \ < _._3).filter(_._3 < _._1).length\n        if (triples > 0) {\n           \
    \ count = triples * 3\n        }\n        count", "        val a = Array.ofDim[Long](n\
    \ + 1)\n        a(0) = 1\n        a(1) = 1\n        a(2) = 1\n        val count\
    \ = mutable.Map[Long, Long]()\n        for (i <- 0 until a.length) {\n       \
    \     for (j <- 0 until a.length) {\n                for (k <- 0 until a.length)\
    \ {\n                    if (i < j && j < k && a(i) + a(j) + a(k) == 3) {\n  \
    \                      val triple = i + j + k\n                        val count\
    \ = count(triple)\n                        if (count == null) {\n            \
    \                count(triple) = 1\n                        } else {\n       \
    \                     count(triple) += 1\n                        }\n        \
    \            }\n                }\n            }\n        }\n        count(a(n))",
  "        var i = 0\n        var j = 0\n        var k = 0\n        var count = 0\n\
    \        var a = Array.fill(n)(0)\n        for( i <- 1 to n ) {\n            for(j\
    \ <- 1 to n) {\n                for( k <- 1 to n) {\n                    if( i\
    \ != j && i != k && j != k ) {\n                        if( a[i] < a[j] && a[j]\
    \ < a[k] ) {\n                            a[i] = a[j] + a[k]\n               \
    \             count += 1\n                        }\n                    }\n \
    \               }\n            }\n        }\n        return count", "        var\
    \ a = Array.ofDim[Int](n)\n        var count = 0\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        while(i < n && j < n && k < n) {\n       \
    \     a(i) = i * i - i + 1\n            i += 1\n            j += 1\n         \
    \   k += 1\n        }\n        while(i < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n        }\n        while(j < n) {\n            a(j) =\
    \ j * j - j + 1\n            j += 1\n        }\n        while(k < n) {\n     \
    \       a(k) = k * k - k + 1\n            k += 1\n        }\n        for(i<-0\
    \ until a.length) {\n            for(j<-0 until a.length) {\n                for(k\
    \ <- 0 until a.length) {\n                    if(i<j && i<k && j<k) {\n      \
    \                  if(a(i) + a(j) + a(k) % 3 == 0) {\n                       \
    \     count += 1\n                        }\n                    }\n         \
    \       }\n            }\n        }\n        count", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Long](n)\n\
    \        val result = mutable.ArrayBuffer.empty[Long]\n        val max = (3 *\
    \ n) - 1\n        val min = (3 * n) / 2\n        val mid = (3 * n) / 2\n     \
    \   val mid2 = ((3 * n) / 2) + 1\n        val mid3 = (3 * n) / 3\n        val\
    \ mid4 = (3 * n) / 4\n        val mid5 = (3 * n) / 5\n        val mid6 = (3 *\
    \ n) / 6\n        val mid7 = (3 * n) / 7\n        val mid8 = (3 * n) / 8\n   \
    \     val mid9 = (3 * n) / 9\n        val mid10 = (3 * n) / 10\n        val mid11\
    \ = (3 * n) / 11\n        val mid12 = (3 * n) / 12\n        val mid13 = (3 * n)\
    \ / 13\n        val mid14 = (3 * n) / 14\n        val mid15 = (3 * n) / 15\n \
    \       val mid16 = (3 * n) / 16\n        val mid17 = (3 * n) / 17\n        val\
    \ mid18 = (3 * n) / 18\n        val mid19 = (3 * n) / 19\n        val mid20 =\
    \ (3 * n) / 2\n        val mid21 = (3 * n) / 21\n        val mid22 = (3 * n) /\
    \ 22\n        val mid23 = (3 * n) / 23\n        val mid24 = (3 * n) / 24\n   \
    \     val mid25 = (3 * n) / 25\n        val mid26 = (3 * n) / 26\n        val\
    \ mid27 = (3 * n) / 27\n        val mid28 = (3 * n) / 28\n        val mid29 =\
    \ (3 * n) / 29\n        val mid30 = (3 * n) / 30\n        val mid31 = (3 * n)\
    \ / 31\n        val mid32 = (3 * n) / 32\n        val mid33 = (3 * n) / 33\n \
    \       val mid34 = (3 * n) / 34\n        val mid35 = (3 * n) / 35\n        val\
    \ mid36 = (3 * n) / 36\n        val mid37 = (3 * n) / 37\n        val mid38 =\
    \ (3 * n) / 38\n        val mid39 = (3 * n) / 39\n        val mid40 = (3 * n)\
    \ / 40\n        val mid41 = (3 * n) / 41\n        val mid42 = (3 * n) / 42\n \
    \       val mid43 = (3 * n) / 43\n        val mid44 = (3 * n) / 44\n        val\
    \ mid45 = (3 * n) / 45\n        val mid46 = (3 * n) / 46\n        val mid47 =\
    \ (3 * n) / 47\n        val mid48", "        val a = Array.ofDim[Int](n + 1)\n\
    \        a(0) = 1\n        a(1) = 3\n        a(2) = 7\n        a(3) = 13\n   \
    \     a(4) = 21\n        val triples = mutable.ListBuffer[Int]()\n        val\
    \ triple = (_: Int) + (_: Int) + (_: Int)\n        a.foreach { x =>\n        \
    \    a.foreach { y =>\n                a.foreach { z =>\n                    if\
    \ (x + y + z == triple(x) + triple(y) + triple(z)) {\n                       \
    \ triples += triple(x) + triple(y) + triple(z)\n                    }\n      \
    \          }\n            }\n        }\n        triples.toList.size", "      \
    \  val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val count = mutable.ArrayBuffer.empty[Int]\n\
    \        val max = 0\n        val maxCount = 0\n        val maxTriples = 0\n \
    \       val maxTripleCount = 0\n        val maxTripleSum = 0\n        val maxTripleSumCount\
    \ = 0\n        val maxTripleSumSum = 0\n        val maxTripleSumSumCount = 0\n\
    \        val maxTripleSumSumSum = 0\n        val maxTripleSumSumSumCount = 0\n\
    \        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTripleSumSumSumCount = 0\n        val maxTripleSumSumSumCount\
    \ = 0\n        val maxTri", "        var a = Array.ofDim[Int](n)\n        for(\
    \ i <- 0 until n ) {\n            a(i) = i * i - i + 1\n        }\n        val\
    \ result = a.filter( x => x < 3 ).length\n        return result", "        val\
    \ a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n     \
    \   val triples = mutable.Map[Int, Int]()\n        \n        for( i <- 1 to n\
    \ ) {\n            val j = i * i - i + 1\n            val k = i * i + i + j\n\
    \            \n            if( j > 0 ) {\n                if( !triples.contains(k)\
    \ ) {\n                    triples(k) = k\n                    count(k) = 1\n\
    \                }\n                else {\n                    count(k) = count(k)\
    \ + 1\n                }\n            }\n            \n            if( j > 0 )\
    \ {\n                if( !triples.contains(k) ) {\n                    triples(k)\
    \ = k\n                    count(k) = 1\n                }\n                else\
    \ {\n                    count(k) = count(k) + 1\n                }\n        \
    \    }\n            \n            if( j > 0 ) {\n                if( !triples.contains(k)\
    \ ) {\n                    triples(k) = k\n                    count(k) = 1\n\
    \                }\n                else {\n                    count(k) = count(k)\
    \ + 1\n                }\n            }\n        }\n        \n        val triple\
    \ = triples.maxBy(_._2)\n        \n        if( triple._2 % 3 == 0 ) {\n      \
    \      count(triple._1)\n        }\n        else {\n            -1\n        }",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[In", "        var a = Array.ofDim[Int](n)\n        for( i <- 0 until\
    \ n ) {\n            a(i) = i * i - i + 1\n        }\n        val result = a.filter(\
    \ x => x < 3 ).length\n        a.removeAll( x => x < 3 )\n        val result2\
    \ = a.filter( x => x < 3 ).length\n        val result3 = a.filter( x => x < 3\
    \ ).length\n        val result4 = a.filter( x => x < 3 ).length\n        val result5\
    \ = a.filter( x => x < 3 ).length\n        val result6 = a.filter( x => x < 3\
    \ ).length\n        val result7 = a.filter( x => x < 3 ).length\n        val result8\
    \ = a.filter( x => x < 3 ).length\n        val result9 = a.filter( x => x < 3\
    \ ).length\n        val result10 = a.filter( x => x < 3 ).length\n        val\
    \ result11 = a.filter( x => x < 3 ).length\n        val result12 = a.filter( x\
    \ => x < 3 ).length\n        val result13 = a.filter( x => x < 3 ).length\n  \
    \      val result14 = a.filter( x => x < 3 ).length\n        val result15 = a.filter(\
    \ x => x < 3 ).length\n        val result16 = a.filter( x => x < 3 ).length\n\
    \        val result17 = a.filter( x => x < 3 ).length\n        val result18 =\
    \ a.filter( x => x < 3 ).length\n        val result19 = a.filter( x => x < 3 ).length\n\
    \        val result20 = a.filter( x => x < 3 ).length\n        val result21 =\
    \ a.filter( x => x < 3 ).length\n        val result22 = a.filter( x => x < 3 ).length\n\
    \        val result23 = a.filter( x => x < 3 ).length\n        val result24 =\
    \ a.filter( x => x < 3 ).length\n        val result25 = a.filter( x => x < 3 ).length\n\
    \        val result26 = a.filter( x => x < 3 ).length\n        val result27 =\
    \ a.filter( x => x < 3 ).length\n        val result28 = a.filter( x => x < 3 ).length\n\
    \        val result29 = a.filter( x => x < 3 ).length\n        val result30 =\
    \ a.filter( x => x < 3 ).length\n        val result31 = a.filter( x => x < 3 ).length\n\
    \        val result32 = a.filter( x => x < 3 ).length\n        val result33 =\
    \ a.", "        val a = Array.ofDim[Int](n)\n        val m = mutable.HashMap.empty[Int,\
    \ Int]\n        val r = mutable.HashMap.empty[Int, Int]\n        val s = mutable.HashMap.empty[Int,\
    \ Int]\n        val t = mutable.HashMap.empty[Int, Int]\n        val u = mutable.HashMap.empty[Int,\
    \ Int]\n        val v = mutable.HashMap.empty[Int, Int]\n        val w = mutable.HashMap.empty[Int,\
    \ Int]\n        val x = mutable.HashMap.empty[Int, Int]\n        val y = mutable.HashMap.empty[Int,\
    \ Int]\n        val z = mutable.HashMap.empty[Int, Int]\n        val a = Array.ofDim[Int](n)\n\
    \        val b = Array.ofDim[Int](n)\n        val c = Array.ofDim[Int](n)\n  \
    \      val d = Array.ofDim[Int](n)\n        val e = Array.ofDim[Int](n)\n    \
    \    val f = Array.ofDim[Int](n)\n        val g = Array.ofDim[Int](n)\n      \
    \  val h = Array.ofDim[Int](n)\n        val i = Array.ofDim[Int](n)\n        val\
    \ j = Array.ofDim[Int](n)\n        val k = Array.ofDim[Int](n)\n        val l\
    \ = Array.ofDim[Int](n)\n        val m = Array.ofDim[Int](n)\n        val n =\
    \ Array.ofDim[Int](n)\n        val o = Array.ofDim[Int](n)\n        val p = Array.ofDim[Int](n)\n\
    \        val q = Array.ofDim[Int](n)\n        val r = Array.ofDim[Int](n)\n  \
    \      val s = Array.ofDim[Int](n)\n        val t = Array.ofDim[Int](n)\n    \
    \    val u = Array.ofDim[Int](n)\n        val v = Array.ofDim[Int](n)\n      \
    \  val w = Array.ofDim[Int](n)\n        val x = Array.ofDim[Int](n)\n        val\
    \ y = Array.ofDim[Int](n)\n        val z = Array.ofDim[Int](n)\n        val a\
    \ = Array.ofDim[Int](n)\n        val b = Array.ofDim[Int](n)\n        val c =\
    \ Array.ofDim[Int](n)\n        val d = Array.ofDim[Int](n)\n        val e = Array.ofDim[Int](n)\n\
    \        val f = Array.ofDim[Int](n)\n        val g = Array.ofDim[Int]", "   \
    \     val a = Array.ofDim[Int](n)\n        var i = 0\n        var j = 0\n    \
    \    var k = 0\n        var count = 0\n        while (i < n && j < n && k < n)\
    \ {\n            a(i) = i * i - i + 1\n            i += 1\n            j += 1\n\
    \            k += 1\n        }\n        val triples = a.zipWithIndex.filter(_._2\
    \ % 3 == 0).map(_._1)\n        val tripleCount = triples.count(_ > 0)\n      \
    \  count += tripleCount\n        count", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[", "        var count = 0\n        var\
    \ a = new Array[Int](n)\n        for( i <- 0 until n ) {\n            a(i) = i\
    \ * i - i + 1\n        }\n        for( i <- 0 until n ) {\n            for( j\
    \ <- 0 until n ) {\n                for( k <- 0 until n ) {\n                \
    \    if( i < j < k && a(i) + a(j) + a(k) % 3 == 0 ) {\n                      \
    \  count += 1\n                    }\n                }\n            }\n     \
    \   }\n        count", "        val a = Array.ofDim[Long](n)\n        val m =\
    \ mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to n) {\n            val\
    \ j = i * i - i + 1\n            val k = i * i + i + j\n            val l = i\
    \ * j + i + k\n            val m = m :+ l\n            val n = m filter (_ % 3\
    \ == 0)\n            val m = m filter (_ % 3 != 0)\n            val n = m filter\
    \ (_ > 0)\n            val m = m filter (_ < 0)\n            val n = m filter\
    \ (_ == 0)\n            val m = m filter (_ == 1)\n            val n = m filter\
    \ (_ == 2)\n            val m = m filter (_ == 3)\n            val n = m filter\
    \ (_ == 4)\n            val m = m filter (_ == 5)\n            val n = m filter\
    \ (_ == 6)\n            val m = m filter (_ == 7)\n            val n = m filter\
    \ (_ == 8)\n            val m = m filter (_ == 9)\n            val n = m filter\
    \ (_ == 10)\n            val m = m filter (_ == 11)\n            val n = m filter\
    \ (_ == 12)\n            val m = m filter (_ == 13)\n            val n = m filter\
    \ (_ == 14)\n            val m = m filter (_ == 15)\n            val n = m filter\
    \ (_ == 16)\n            val m = m filter (_ == 17)\n            val n = m filter\
    \ (_ == 18)\n            val m = m filter (_ == 19)\n            val n = m filter\
    \ (_ == 20)\n            val m = m filter (_ == 21)\n            val n = m filter\
    \ (_ == 22)\n            val m = m filter (_ == 23)\n            val n = m filter\
    \ (_ == 24)\n            val m = m filter (_ == 25)\n            val n = m filter\
    \ (_ == 26)\n            val m = m filter (_ == 27)\n            val n = m filter\
    \ (_ == 28)\n            val m = m filter (_ == 29)\n            val n = m filter\
    \ (_ == 30)\n            val m = m filter (_ == 31)\n            val n = m filter\
    \ (_ == 32)\n            val m = m filter (_ == 33)\n            val n = m filter\
    \ (_ == 34)\n            val m = m filter (_ == 35)\n            val n = m filter\
    \ (_ == 36)\n            val m = m filter (_ == 37)\n            val n = m filter\
    \ (_ == 38)\n            val m = m filter (_ == 39", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val count = mutable.ArrayBuffer.empty[Int]\n\
    \        val max = mutable.ArrayBuffer.empty[Int]\n        val min = 3\n     \
    \   val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = 0\n\
    \        val minTriple = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriple = 0\n        val minTriple = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriple = 0\n        val minTriples\
    \ = 0\n        val maxTriple = 0\n        val minTriples = 0\n        val maxTriple\
    \ = 0\n        val minTriples = 0\n        val maxTriple = 0\n        val minTriples\
    \ = 0\n        val maxTriple = 0\n        val minTriples = 0\n        val maxTriple\
    \ = 0\n        val minTriples = 0\n        val maxTriple = 0\n        val minTriples\
    \ = 0\n        val maxTriple = 0\n        val minTriples = 0\n        val maxTriple\
    \ = 0\n        val minTriples = 0\n        val maxTriple = 0\n        val minTriples\
    \ = 0\n        val maxTriple = 0\n        val minTriples = 0\n        val maxTriple\
    \ = 0\n        val minTriples = 0\n        val maxTriple = 0\n        val minTriples\
    \ = 0\n        val maxTriple = 0\n        val minTriples = 0\n        val maxTriple\
    \ = 0\n        val minTriples = 0\n        val maxTriple = 0\n        val minTriples\
    \ = 0\n        val maxTriple = 0\n        val minTriples = 0\n        val maxTriple\
    \ = 0\n        val minTriples = 0\n        val maxTriple = 0\n        val minTriples\
    \ = 0\n        val maxTriple = 0\n        val minTriples = 0\n        val maxTriple\
    \ = 0\n        val minTriples = 0\n        val maxTriple = 0\n        val minTriples\
    \ = 0\n        val maxTriple = 0\n        val minTriples = 0\n        val maxTriple\
    \ = 0\n        val minTriples = 0\n        val maxTriple", "        val a = Array.ofDim[Int](n)\n\
    \        val m = scala.math.pow(3, n).toLong\n        val n = scala.math.pow(3,\
    \ n).toLong\n        val k = scala.math.pow(3, n).toLong\n        val i = scala.math.pow(3,\
    \ n).toLong\n        val j = scala.math.pow(3, n).toLong\n        val l = scala.math.pow(3,\
    \ n).toLong\n        val m = scala.math.pow(3, n).toLong\n        val n = scala.math.pow(3,\
    \ n).toLong\n        val k = scala.math.pow(3, n).toLong\n        val i = scala.math.pow(3,\
    \ n).toLong\n        val j = scala.math.pow(3, n).toLong\n        val l = scala.math.pow(3,\
    \ n).toLong\n        val m = scala.math.pow(3, n).toLong\n        val n = scala.math.pow(3,\
    \ n).toLong\n        val k = scala.math.pow(3, n).toLong\n        val i = scala.math.pow(3,\
    \ n).toLong\n        val j = scala.math.pow(3, n).toLong\n        val l = scala.math.pow(3,\
    \ n).toLong\n        val m = scala.math.pow(3, n).toLong\n        val n = scala.math.pow(3,\
    \ n).toLong\n        val k = scala.math.pow(3, n).toLong\n        val i = scala.math.pow(3,\
    \ n).toLong\n        val j = scala.math.pow(3, n).toLong\n        val l = scala.math.pow(3,\
    \ n).toLong\n        val m = scala.math.pow(3, n).toLong\n        val n = scala.math.pow(3,\
    \ n).toLong\n        val k = scala.math.pow(3, n).toLong\n        val i = scala.math.pow(3,\
    \ n).toLong\n        val j = scala.math.pow(3, n).toLong\n        val l = scala.math.pow(3,\
    \ n).toLong\n        val m = scala.math.pow(3, n).toLong\n        val n = scala.math.pow(3,\
    \ n).toLong\n        val k = scala.math.pow(3, n).toLong\n        val i = scala.math.pow(3,\
    \ n).toLong\n        val j = scala.math.pow(3, n).toLong\n        val l = scala.math.pow(3,\
    \ n).toLong\n        val m = scala.math.pow(3, n).toLong\n        val n = scala.math.pow(3,\
    \ n).toLong\n        val k = scala.math.pow(3, n).toLong\n        val i = scala.math.pow(3,\
    \ n).toLong\n        val j = scala.math.pow(3, n).toLong\n        val l = scala.math.pow(3,\
    \ n", "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int,\
    \ Int]()\n        val sum = 0\n        for(i <- 1 to n){\n            val j =\
    \ i * i - i + 1\n            val k = i * i + i + j\n            val v = a(i) +\
    \ a(i) + a(i)\n            sum += v\n            if((v % 3) == 0){\n         \
    \       count(v)\n            }\n            a(i) = v\n        }\n        count(sum)",
  "        val a = Array.ofDim[Int](n)\n        var count = 0\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        while(i < n && j < n && k < n)\
    \ {\n            a(i) = i * i - i + 1\n            i += 1\n            j += 1\n\
    \            k += 1\n        }\n        while(i < n) {\n            a(i) = i *\
    \ i - i + 1\n            i += 1\n        }\n        while(j < n) {\n         \
    \   a(j) = i * i - i + 1\n            j += 1\n        }\n        while(k < n)\
    \ {\n            a(k) = i * i - i + 1\n            k += 1\n        }\n       \
    \ for(i<-0 until a.length) {\n            for(j<-0 until a.length) {\n       \
    \         for(k<-0 until a.length) {\n                    if(a(i) + a(j) + a(k)\
    \ == 0) {\n                        count += 1\n                    }\n       \
    \         }\n            }\n        }\n        count", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[", "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val s = mutable.ArrayBuffer.empty[Int]\n\
    \        val t = mutable.ArrayBuffer.empty[Int]\n        val r = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val s = mutable.ArrayBuffer.empty[Int]\n\
    \        val t = mutable.ArrayBuffer.empty[Int]\n        val r = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val s = mutable.ArrayBuffer.empty[Int]\n\
    \        val t = mutable.ArrayBuffer.empty[Int]\n        val r = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val s = mutable.ArrayBuffer.empty[Int]\n\
    \        val t = mutable.ArrayBuffer.empty[Int]\n        val r = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = a.length - 1\n        val max = 0\n        for(i <- 0 until m){\n\
    \            for(j <- 0 until m){\n                for(k <- 0 until m){\n    \
    \                if(i<j && i<k && j<k){\n                        val sum = i.toInt\
    \ + j.toInt + k.toInt\n                        if(sum % 3 == 0){\n           \
    \                 val triple = i + j + k\n                            if(triple\
    \ > max){\n                                max = triple\n                    \
    \        }\n                        }\n                    }\n               \
    \ }\n            }\n        }\n        max", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[In", "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 1 to n){\n            val j = i * i - i + 1\n            val\
    \ k = i * i + i + j\n            if((j > 0) && (k > 0)){\n                a +=\
    \ i\n                m += j\n                m += k\n            }\n        }\n\
    \        m.toList.filter(_ % 3 == 0).size", "        val a = Array.ofDim[Int](n)\n\
    \        val m = a.length\n        var i = 0\n        var j = 0\n        var k\
    \ = 0\n        var count = 0\n        while (i < m && j < m && k < m) {\n    \
    \        if (a(i) < a(j) && a(j) < a(k)) {\n                i += 1\n         \
    \   } else if (a(i) > a(j) && a(j) > a(k)) {\n                j += 1\n       \
    \     } else if (a(i) < a(j) && a(j) > a(k)) {\n                k += 1\n     \
    \       }\n            count += 1\n        }\n        count", "        val a =\
    \ Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n      \
    \  for (i <- 0 until n) {\n            a(i) = i * i - i + 1\n        }\n     \
    \   val n = a.length\n        for (i <- 0 until n - 1) {\n            for (j <-\
    \ i + 1 until n) {\n                for (k <- j + 1 until n) {\n             \
    \       if (a(i) + a(j) + a(k)%3 > 0) {\n                        m += (i + j +\
    \ k).toInt\n                    }\n                }\n            }\n        }\n\
    \        m.length", "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        var a = Array.ofDim[Int](n)\n\
    \        a.foreach(x => x = x * x - x + 1)\n        val result = a.zipWithIndex.filter(_._2\
    \ % 3 == 0).length\n        a", "        var a = new Array[Int](n)\n        var\
    \ count = 0\n        for(i<- 1 to n){\n            for(j<- i+1 to n){\n      \
    \          for(k<- j+1 to n){\n                    if(i+j+k == 3){\n         \
    \               a(i) = i\n                        a(j) = j\n                 \
    \       a(k) = k\n                        count += 1\n                    }\n\
    \                }\n            }\n        }\n        count", "        var count\
    \ = 0\n        var a = Array.ofDim[Int](n)\n        for( i <- 0 until n ) {\n\
    \            a(i) = i * i - i + 1\n        }\n        for( i <- 0 until n ) {\n\
    \            for( j <- 0 until n ) {\n                for( k <- 0 until n ) {\n\
    \                    if( i < j < k && a(i) + a(j) + a(k) % 3 == 0 ) {\n      \
    \                  count += 1\n                    }\n                }\n    \
    \        }\n        }\n        count", "        var max = 0\n        var a = new\
    \ Array[Int](n)\n        for( i <- 0 until n ) {\n            a(i) = i * i - i\
    \ + 1\n        }\n        for( i <- 0 until n ) {\n            for( j <- 0 until\
    \ n ) {\n                for( k <- 0 until n ) {\n                    if( i <\
    \ j < k && a(i) + a(j) + a(k) == 3 ) {\n                        max = max + 1\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max", "        var a = new Array[Long](n)\n        var count = 0\n        for(i\
    \ <- 0 until n) {\n            a(i) = i * i - i + 1\n        }\n        for(i\
    \ <- 0 until n) {\n            for(j <- 0 until n) {\n                for(k <-\
    \ 0 until n) {\n                    if(i+j+k == a(i)+a(j)+a(k)) {\n          \
    \              count += 1\n                    }\n                }\n        \
    \    }\n        }\n        count", "        val a = Array.ofDim[Int](n)\n    \
    \    val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[In", "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triple2 = mutable.Map[Int, Int]()\n   \
    \     val triple3 = mutable.Map[Int, Int]()\n        val triple4 = mutable.Map[Int,\
    \ Int]()\n        val triple5 = mutable.Map[Int, Int]()\n        val triple6 =\
    \ mutable.Map[Int, Int]()\n        val triple7 = mutable.Map[Int, Int]()\n   \
    \     val triple8 = mutable.Map[Int, Int]()\n        val triple9 = mutable.Map[Int,\
    \ Int]()\n        val triple10 = mutable.Map[Int, Int]()\n        val triple11\
    \ = mutable.Map[Int, Int]()\n        val triple12 = mutable.Map[Int, Int]()\n\
    \        val triple13 = mutable.Map[Int, Int]()\n        val triple14 = mutable.Map[Int,\
    \ Int]()\n        val triple15 = mutable.Map[Int, Int]()\n        val triple16\
    \ = mutable.Map[Int, Int]()\n        val triple17 = mutable.Map[Int, Int]()\n\
    \        val triple18 = mutable.Map[Int, Int]()\n        val triple19 = mutable.Map[Int,\
    \ Int]()\n        val triple20 = mutable.Map[Int, Int]()\n        val triple21\
    \ = mutable.Map[Int, Int]()\n        val triple22 = mutable.Map[Int, Int]()\n\
    \        val triple23 = mutable.Map[Int, Int]()\n        val triple24 = mutable.Map[Int,\
    \ Int]()\n        val triple25 = mutable.Map[Int, Int]()\n        val triple26\
    \ = mutable.Map[Int, Int]()\n        val triple27 = mutable.Map[Int, Int]()\n\
    \        val triple28 = mutable.Map[Int, Int]()\n        val triple29 = mutable.Map[Int,\
    \ Int]()\n        val triple30 = mutable.Map[Int, Int]()\n        val triple31\
    \ = mutable.Map[Int, Int]()\n        val triple32 = mutable.Map[Int, Int]()\n\
    \        val triple33 = mutable.Map[Int, Int]()\n        val triple34 = mutable.Map[Int,\
    \ Int]()\n        val triple35 = mutable.Map[Int, Int]", "        var a = Array.ofDim[Int](n\
    \ + 1)\n        var count = 0\n        for(i<- 1 to n){\n            for(j <-\
    \ i to n){\n                for(k <- j to n){\n                    if(i+j+k ==\
    \ i*i*i && i*i+j*j+k*k == i*i*i){\n                        a(i) = i\n        \
    \                a(j) = j\n                        a(k) = k\n                \
    \        count += 1\n                    }\n                }\n            }\n\
    \        }\n        count", "        val a = Array.ofDim[Int](n)\n        val\
    \ m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int, Int]()\n\
    \        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val triples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = ", "        var a =\
    \ Array.ofDim[Int](n);\n        var cnt = 0;\n        for(i<- 0 until n){\n  \
    \          a(i) = i * i - i + 1;\n            if(a(i) % 3 == 0){\n           \
    \     cnt += 1\n            }\n        }\n        return cnt;", "        val a\
    \ = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n    \
    \    val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        val triples = mutable.Map[Int, Int]()\n        \n        for(i <- 0 until\
    \ n) {\n            val j = i * i - i + 1\n            val k = i * i + i + 1\n\
    \            \n            if((j > 0) && (k > 0)) {\n                a(i) = j\n\
    \                a(k) = k\n                \n                count(j) = count(j)\
    \ + 1\n                count(k) = count(k) + 1\n                \n           \
    \     triples(j) = triples(j) + 1\n                triples(k) = triples(k) + 1\n\
    \            }\n        }\n        \n        val maxTriples = triples.maxBy(_._2)._2\n\
    \        \n        count(maxTriples)", "        var a = new Array[Int](n)\n  \
    \      var count = 0\n        for(i<- 1 to n){\n            for(j <- i to n){\n\
    \                for(k <- j to n){\n                    if(i+j+k == i*i*i + j*j*j\
    \ + k*k*k){\n                        count += 1\n                    }\n     \
    \           }\n            }\n            a(i) = i*i*i + j*j*j + k*k*k\n     \
    \   }\n        count += a.filter(_ % 3 == 0).length\n        return count", " \
    \       val a = Array.ofDim[Int](n)\n        val m = mutable.HashMap[Int, Int]()\n\
    \        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[",
  "        var triples = 0\n        var a = Array.ofDim[Int](n)\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        while(i < n && j < n && k < n)\
    \ {\n            a(i) = i * i - i + 1\n            i += 1\n            j += 1\n\
    \            k += 1\n        }\n        while(i < n) {\n            a(i) = i *\
    \ i - i + 1\n            i += 1\n        }\n        while(j < n) {\n         \
    \   a(j) = i * i - i + 1\n            j += 1\n        }\n        while(k < n)\
    \ {\n            a(k) = i * i - i + 1\n            k += 1\n        }\n       \
    \ for(i<-0 until n) {\n            for(j<-0 until n) {\n                for(k<-0\
    \ until n) {\n                    if(a(i) + a(j) + a(k) == 3) {\n            \
    \            triples += 1\n                    }\n                }\n        \
    \    }\n        }\n        return triples", "        val a = Array.ofDim[Int](n)\n\
    \        val m = scala.math.max(3, n)\n        val maxTriples = 0\n        val\
    \ maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val maxTriples = scala.math.max(3,\
    \ n)\n        val maxTriple = scala.math.max(3, n)\n        val max", "      \
    \  val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        val triples = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, ", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        var count = 0\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        while (i < n && j < n && k < n)\
    \ {\n            a(i) = i * i - i + 1\n            i += 1\n            j += 1\n\
    \            k += 1\n        }\n        val max = a.max\n        val maxIndex\
    \ = a.indexOf(max)\n        val maxTriples = maxIndex - i + 1\n        if (maxTriples\
    \ == 0) {\n            count = 0\n        } else {\n            count = maxTriples\n\
    \        }\n        return count", "        val a = Array.ofDim[Int](n)\n    \
    \    val count = mutable.Map[Int, Int]()\n        for( i <- 1 to n ) {\n     \
    \       for( j <- 1 to i ) {\n                for( k <- 1 to j ) {\n         \
    \           if( i != j && i != k && j != k ) {\n                        val sum\
    \ = i * i - i + j + k\n                        if( sum % 3 == 0 ) {\n        \
    \                    a(i) = sum\n                            count(sum) = 1\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        count(a(0))", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[", "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 0 until n) {\n            a(i) = i * i - i + 1\n           \
    \ m += a(i)\n        }\n        val res = m.filter(_ % 3 == 0).length\n      \
    \  a", "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int,\
    \ Int]()\n        for (i <- 0 until n) {\n            a(i) = i * i - i + 1\n \
    \           count(a(i)) = count(a(i)) + 1\n        }\n        val maxCount = count.max\n\
    \        val maxKey = count.keys.max\n        val maxValue = count.values.max\n\
    \        val maxTriples = maxCount * maxValue * maxKey\n        return maxTriples",
  "        val a = Array.ofDim[Int](n)\n        val m = scala.math.pow(3, n).toInt\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while(i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       while(i < n) {\n            a(i) = i * i - i + 1\n            i += 1\n\
    \        }\n        while(j < n) {\n            a(j) = i * i - i + 1\n       \
    \     j += 1\n        }\n        while(k < n) {\n            a(k) = i * i - i\
    \ + 1\n            k += 1\n        }\n        for(i<-0 until n) {\n          \
    \  for(j<-0 until n) {\n                for(k <- 0 until n) {\n              \
    \      if(a(i) + a(j) + a(k) == m) {\n                        count += 1\n   \
    \                 }\n                }\n            }\n        }\n        count",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = ", "        val a\
    \ = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n    \
    \    val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        for (i <- 1 to n) {\n\
    \            a(i) = i * i - i + 1\n        }\n        val triples = a.zipWithIndex.filter(_._2\
    \ % 3 == 0)\n        triples.foreach { t =>\n            val i = t._1\n      \
    \      val j = t._2 + 1\n            val k = t._2 + 2\n            val sum = t._1\
    \ + t._2 + t._3\n            if (sum % 3 == 0) {\n                m += i\n   \
    \             m += j\n                m += k\n            }\n        }\n     \
    \   m.length", "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for (i <- 1 to n) {\n  \
    \          val j = i * i - i + 1\n            val k = i * i + i + j\n        \
    \    if (j > k) {\n                a(i) = j\n                count(j) = count(j)\
    \ + 1\n            } else {\n                a(i) = k\n                count(k)\
    \ = count(k) + 1\n            }\n        }\n        count(a(0))", "        val\
    \ a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n     \
    \   for(i <- 1 to n){\n            for(j <- 1 to n){\n                for(k <-\
    \ 1 to n){\n                    if(i<j && i<k && j<k){\n                     \
    \   a(i) = i*i - i + 1\n                        count(a(i)) = count(a(i)) + (a(i)\
    \ + a(j) + a(k))\n                    }\n                }\n            }\n  \
    \      }\n        count(a(0))", "        var a = Array.ofDim[Int](n)\n       \
    \ var count = 0\n        for (i <- 1 to n) {\n            a(i) = i * i - i + 1\n\
    \        }\n        for (i <- 1 to n) {\n            for (j <- 1 to n) {\n   \
    \             for (k <- 1 to n) {\n                    if (a(i) + a(j) + a(k)\
    \ % 3 == 0) {\n                        count += 1\n                    }\n   \
    \             }\n            }\n        }\n        return count", "        val\
    \ a = Array.ofDim[Int](n)\n        val m = scala.math.pow(3, n).toInt\n      \
    \  var i = 0\n        var j = 0\n        var k = 0\n        var count = 0\n  \
    \      while (i < n) {\n            a(i) = i * i - i + 1\n            i += 1\n\
    \        }\n        val l = a.length - 1\n        while (j < l) {\n          \
    \  while (k < l) {\n                if (a(i) + a(k) + a(j) == m) {\n         \
    \           count += 1\n                }\n                k += 1\n          \
    \  }\n            j += 1\n        }\n        count", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        for (i <- 1 to n) {\n\
    \            a(i) = i * i - i + 1\n        }\n        for (i <- 1 to n) {\n  \
    \          for (j <- 1 to n) {\n                for (k <- 1 to n) {\n        \
    \            if (a(i) + a(j) + a(k)%3 > 0)\n                        m += a(i)\
    \ + a(j) + a(k)\n                }\n            }\n        }\n        m.length",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, ", "        var a = Array.ofDim[Int](n + 1)\n        var\
    \ count = 0\n        for (i <- 1 to n) {\n            a(i) = i * i - i + 1\n \
    \       }\n        for (i <- 1 to n) {\n            for (j <- 1 to n) {\n    \
    \            for (k <- 1 to n) {\n                    if (a(i) + a(j) + a(k) %\
    \ 3 == 0) {\n                        count += 1\n                    }\n     \
    \           }\n            }\n        }\n        count", "        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.HashMap[Long, Long]()\n        val n = mutable.HashMap[Long,\
    \ Long]()\n        val triples = mutable.HashMap[Long, Long]()\n        val maxTriples\
    \ = mutable.HashMap[Long, Long]()\n        val maxTriple = mutable.HashMap[Long,\
    \ Long]()\n        val maxTriples = mutable.HashMap[Long, Long]()\n        val\
    \ maxTriple = mutable.HashMap[Long, Long]()\n        val maxTriples = mutable.HashMap[Long,\
    \ Long]()\n        val maxTriple = mutable.HashMap[Long, Long]()\n        val\
    \ maxTriples = mutable.HashMap[Long, Long]()\n        val maxTriple = mutable.HashMap[Long,\
    \ Long]()\n        val maxTriples = mutable.HashMap[Long, Long]()\n        val\
    \ maxTriple = mutable.HashMap[Long, Long]()\n        val maxTriples = mutable.HashMap[Long,\
    \ Long]()\n        val maxTriple = mutable.HashMap[Long, Long]()\n        val\
    \ maxTriples = mutable.HashMap[Long, Long]()\n        val maxTriple = mutable.HashMap[Long,\
    \ Long]()\n        val maxTriples = mutable.HashMap[Long, Long]()\n        val\
    \ maxTriple = mutable.HashMap[Long, Long]()\n        val maxTriples = mutable.HashMap[Long,\
    \ Long]()\n        val maxTriple = mutable.HashMap[Long, Long]()\n        val\
    \ maxTriples = mutable.HashMap[Long, Long]()\n        val maxTriple = mutable.HashMap[Long,\
    \ Long]()\n        val maxTriples = mutable.HashMap[Long, Long]()\n        val\
    \ maxTriple = mutable.HashMap[Long, Long]()\n        val maxTriples = mutable.HashMap[Long,\
    \ Long]()\n        val maxTriple = mutable.HashMap[Long, Long]()\n        val\
    \ maxTriples = mutable.HashMap[Long, Long]()\n        val maxTriple = mutable.HashMap[Long,\
    \ Long]()\n        val maxTriples = mutable.HashMap[Long, Long]()\n        val\
    \ maxTriple = mutable.HashMap[Long, Long]()\n        val maxTriples = mutable.HashMap[Long,\
    \ Long", "        val a = Array.ofDim[Int](n)\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[",
  "        val a = Array.ofDim[Long](n)\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.", "        val a = Array.ofDim[Int](n)\n        val\
    \ m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int, Int]()\n\
    \        val s = mutable.HashMap[Int, Int]()\n        val t = mutable.HashMap[Int,\
    \ Int]()\n        val r = mutable.HashMap[Int, Int]()\n        val p = mutable.HashMap[Int,\
    \ Int]()\n        val q = mutable.HashMap[Int, Int]()\n        val r = mutable.HashMap[Int,\
    \ Int]()\n        val s = mutable.HashMap[Int, Int]()\n        val t = mutable.HashMap[Int,\
    \ Int]()\n        val p = mutable.HashMap[Int, Int]()\n        val q = mutable.HashMap[Int,\
    \ Int]()\n        val r = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val s = mutable.HashMap[Int,\
    \ Int]()\n        val t = mutable.HashMap[Int, Int]()\n        val p = mutable.HashMap[Int,\
    \ Int]()\n        val q = mutable.HashMap[Int, Int]()\n        val r = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val s = mutable.HashMap[Int, Int]()\n        val t = mutable.HashMap[Int,\
    \ Int]()\n        val p = mutable.HashMap[Int, Int]()\n        val q = mutable.HashMap[Int,\
    \ Int]()\n        val r = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val s = mutable.HashMap[Int,\
    \ Int]()\n        val t = mutable.HashMap[Int, Int]()\n        val p = mutable.HashMap[Int,\
    \ Int]()\n        val q = mutable.HashMap[Int, Int]()\n        val r = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val s = mutable.HashMap[Int, Int]()\n        val t = mutable.HashMap[Int,\
    \ Int]()\n        val p = mutable.HashMap[", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for(i<-0 until n){\n   \
    \         val j = i*i - i + 1\n            val k = i*i + i + j\n            if(i<j\
    \ && i<k && j<k){\n                a(i) = i\n                count(i) = count(i)\
    \ + 1\n            }\n        }\n        count.filter(_._2 > 1).length", "   \
    \     var triples = 0\n        var a = Array.ofDim[Int](n + 1)\n        a(0) =\
    \ 1\n        a(1) = 1\n        a(2) = 1\n        a(3) = 1\n        a(4) = 1\n\
    \        for(i <- 0 until n){\n            for(j <- 0 until i){\n            \
    \    for(k <- 0 until j){\n                    if(i+j+k == 3){\n             \
    \           triples += 1\n                    }\n                }\n         \
    \   }\n        }\n        return triples", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[", "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        for (i <- 0 until n) {\n            a(i) = i * i - i + 1\n          \
    \  val triples = a.filter(_ > 0).filter(_ < i).filter(_ < i + 1)\n           \
    \ count += triples.map(t => (t, triples.count(_ == t)))\n        }\n        count.values.toList.max",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        var a = new Array[Long](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while(i < n) {\n            a(i) = i * i - i + 1\n            i +=\
    \ 1\n        }\n        while(j < n) {\n            a(j) = i * i - j + 1\n   \
    \         j += 1\n        }\n        while(k < n) {\n            a(k) = i * i\
    \ - k + 1\n            k += 1\n        }\n        for(i = 1; i < n; i++) {\n \
    \           for(j = 1; j < n; j++) {\n                for(k = 1; k < n; k++) {\n\
    \                    if(a(i) + a(j) + a(k) % 3 == 0) {\n                     \
    \   count += 1\n                    }\n                }\n            }\n    \
    \    }\n        return count", "        val a = Array.ofDim[Int](n)\n        val\
    \ result = mutable.ArrayBuffer.empty[Int]\n        val max = 0\n        val min\
    \ = 0\n        for(i <- 1 to n){\n            val x = i * i - i + 1\n        \
    \    val y = a(i) + a(i) + a(i)\n            val z = a(i) + a(i) + a(i) + a(i)\n\
    \            val z = a(i) + a(i) + a(i) + a(i) + a(i)\n            val z = a(i)\
    \ + a(i) + a(i) + a(i) + a(i) + a(i)\n            val z = a(i) + a(i) + a(i) +\
    \ a(i) + a(i) + a(i) + a(i)\n            val z = a(i) + a(i) + a(i) + a(i) + a(i)\
    \ + a(i) + a(i) + a(i)\n            val z = a(i) + a(i) + a(i) + a(i) + a(i) +\
    \ a(i) + a(i) + a(i) + a(i)\n            val z = a(i) + a(i) + a(i) + a(i) + a(i)\
    \ + a(i) + a(i) + a(i) + a(i) + a(i)\n            val z = a(i) + a(i) + a(i) +\
    \ a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i)\n            val z = a(i)\
    \ + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i)\n\
    \            val z = a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i)\
    \ + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i)\
    \ + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i)\
    \ + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i)\
    \ + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i)\
    \ + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i) + a(i)\
    \ + a(i) + a(i) + a(i) + a(i) + a(i", "        val a = Array.ofDim[Int](n)\n \
    \       val m = mutable.ArrayBuffer.empty[Int]\n        for (i <- 1 to n) {\n\
    \            a(i) = i * i - i + 1\n        }\n        val n = a.length\n     \
    \   for (i <- 1 to n - 1) {\n            for (j <- i + 1 to n) {\n           \
    \     for (k <- j + 1 to n) {\n                    if (a(i) + a(j) + a(k) % 3\
    \ == 0) {\n                        m += (i + j + k)\n                    }\n \
    \               }\n            }\n        }\n        m.length", "        val a\
    \ = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n    \
    \    for (i <- 0 until n) {\n            a(i) = i * i - i + 1\n        }\n   \
    \     for (i <- 0 until n) {\n            for (j <- 0 until n) {\n           \
    \     for (k <- 0 until n) {\n                    if (a(i) + a(j) + a(k)%3==0)\
    \ {\n                        m += (i+j+k)\n                    }\n           \
    \     }\n            }\n        }\n        m.length", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[In", "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = a.length\n        val result = new mutable.HashMap[Int, Int]()\n\
    \        val triples = mutable.HashMap[Int, Int]()\n        val triple = mutable.HashMap[Int,\
    \ Int]()\n        val triple2 = mutable.HashMap[Int, Int]()\n        val triple3\
    \ = mutable.HashMap[Int, Int]()\n        val triple4 = mutable.HashMap[Int, Int]()\n\
    \        val triple5 = mutable.HashMap[Int, Int]()\n        val triple6 = mutable.HashMap[Int,\
    \ Int]()\n        val triple7 = mutable.HashMap[Int, Int]()\n        val triple8\
    \ = mutable.HashMap[Int, Int]()\n        val triple9 = mutable.HashMap[Int, Int]()\n\
    \        val triple10 = mutable.HashMap[Int, Int]()\n        val triple11 = mutable.HashMap[Int,\
    \ Int]()\n        val triple12 = mutable.HashMap[Int, Int]()\n        val triple13\
    \ = mutable.HashMap[Int, Int]()\n        val triple14 = mutable.HashMap[Int, Int]()\n\
    \        val triple15 = mutable.HashMap[Int, Int]()\n        val triple16 = mutable.HashMap[Int,\
    \ Int]()\n        val triple17 = mutable.HashMap[Int, Int]()\n        val triple18\
    \ = mutable.HashMap[Int, Int]()\n        val triple19 = mutable.HashMap[Int, Int]()\n\
    \        val triple20 = mutable.HashMap[Int, Int]()\n        val triple21 = mutable.HashMap[Int,\
    \ Int]()\n        val triple22 = mutable.HashMap[Int, Int]()\n        val triple23\
    \ = mutable.HashMap[Int, Int]()\n        val triple24 = mutable.HashMap[Int, Int]()\n\
    \        val triple25 = mutable.HashMap[Int, Int]()\n        val triple26 = mutable.HashMap[Int,\
    \ Int]()\n        val triple27 = mutable.HashMap[Int, Int]()\n        val triple28\
    \ = mutable.HashMap[Int, Int]()\n        val triple29 = mutable.HashMap[Int, Int]()\n\
    \        val triple30 = mutable.HashMap[Int, Int]()\n        val triple31 = mutable.HashMap[Int,\
    \ Int]()\n        val triple32 = mutable.HashMap[Int, Int]()", "        var a\
    \ = Array.ofDim[Int](n);\n        var cnt = 0\n        for(i<- 1 to n-1){\n  \
    \          for(j <- i+1 to n-1){\n                for(k <- j+1 to n-1){\n    \
    \                if(i+j+k == n){\n                        cnt += 1\n         \
    \           }\n                }\n            }\n        }\n        cnt", "  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        var count = 0\n\
    \        var a = Array.ofDim[Int](n)\n        for(i <- 0 until n){\n         \
    \   a(i) = i * i - i + 1\n        }\n        for(i <- 0 until n){\n          \
    \  for(j <- 0 until n){\n                for(k <- 0 until n){\n              \
    \      if(i<j && j<k){\n                        if(a(i) + a(j) + a(k) == 3){\n\
    \                            count += 1\n                        }\n         \
    \           }\n                }\n            }\n        }\n        return count",
  "        var max = 0\n        var a = new Array[Long](n)\n        for(i <- 0 until\
    \ n) {\n            a(i) = i * i - i + 1\n        }\n        for(i <- 0 until\
    \ n) {\n            for(j <- 0 until n) {\n                for(k <- 0 until n)\
    \ {\n                    if(i+j+k > max && a(i) + a(j) + a(k) % 3 == 0) {\n  \
    \                      max = a(i) + a(j) + a(k) % 3\n                    }\n \
    \               }\n            }\n        }\n        return max", "        var\
    \ a = Array.ofDim[Int](n+1)\n        a(0) = 1\n        a(1) = 1\n        a(2)\
    \ = 1\n        \n        var i = 0\n        var j = 0\n        var k = 0\n   \
    \     var count = 0\n        \n        while(i < n) {\n            while(j < n)\
    \ {\n                while(k <n) {\n                    if(i+j+k == n+1) {\n \
    \                       count += 1\n                    }\n                  \
    \  k += 1\n                }\n                j += 1\n            }\n        \
    \    i += 1\n        }\n        \n        return count", "        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        for( i <- 1 to n ) {\n\
    \            val j = i * i - i + 1\n            val k = i * i + j\n          \
    \  if( j > k ) {\n                val tmp = j\n                j = k\n       \
    \         k = tmp\n            }\n            if( j % 3 == 0 ) {\n           \
    \     a(i) = j\n                count(k) = count(k) + 1\n            }\n     \
    \   }\n        count(0)", "        val a = Array.ofDim[Int](n)\n        var count\
    \ = 0\n        for(i<-0 until n){\n            for(j<-0 until n){\n          \
    \      for(k <- 0 until n){\n                    if(i<j && i<k && j<k){\n    \
    \                    a(i) = i*i - i + 1\n                        a(j) = i*i -\
    \ j + 1\n                        a(k) = i*i - k + 1\n                        if(a(i)\
    \ + a(j) + a(k) % 3 == 0){\n                            count += 1\n         \
    \               }\n                    }\n                }\n            }\n \
    \       }\n        count", "        val a = Array.ofDim[Int](n)\n        val count\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        for (i <- 0 until n) {\n            a(i) = i * i - i + 1\n        }\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        for (k <- 0 until n) {\n                    if (a(i) + a(j) + a(k)%3\
    \ == 0) {\n                        val triple = (a(i), a(j), a(k))\n         \
    \               val tripleCount = count(triple) + 1\n                        count(triple)\
    \ = tripleCount\n                        if (tripleCount > maxTriples(triple))\
    \ {\n                            maxTriples(triple) = tripleCount\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n        count(a(0))"]
stop_tokens:
- "\n    }\n"
