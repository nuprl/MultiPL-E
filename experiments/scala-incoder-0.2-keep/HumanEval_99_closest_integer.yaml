name: HumanEval_99_closest_integer
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that takes a value (string) representing a number\n  \
  \  // and returns the closest integer to it. If the number is equidistant\n    //\
  \ from two integers, round it away from zero.\n    // Examples\n    // >>> closest_integer(\"\
  10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n    // 15\n    // Note:\n\
  \    // Rounding away from zero means that if the given number is equidistant\n\
  \    // from two integers, the one you should return is the one that is the\n  \
  \  // farthest from zero. For example closest_integer(\"14.5\") should\n    // return\
  \ 15 and closest_integer(\"-14.5\") should return -15.\n    def closestInteger(value\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
  10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
  -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
  0\")) == (0l));\n    }\n\n}\n"
completions: ["        val nums = value.split(\"\\\\.\").map(_.toInt)\n        val\
    \ min = math.min(nums.map(_.toLong))\n        val max = math.max(nums.map(_.toLong))\n\
    \        val diff = max - min\n        val closest = (diff + min) / 2\n      \
    \  val closestInt = math.round(closest)\n        closestInt", "        val nums\
    \ = value.split(\".\").map(_.toInt)\n        val min = math.min(nums)\n      \
    \  val max = math.max(nums)\n        val diff = max - min\n        if (diff ==\
    \ 0) min else min + diff", "        val parts = value.split(\"\\\\.\") // Split\
    \ value into two parts\n        val part1 = parts(0).toLong // First part is integer\n\
    \        val part2 = parts(1).toLong // Second part is fraction\n        val difference\
    \ = part1 - part2 // Difference between first and second part\n        if (difference\
    \ < 0)\n            part1 + difference\n        else\n            part1 - difference",
  "        val numbers = value.split(\"\\\\.\").map(_.toInt)\n        val min = numbers.min\n\
    \        val max = numbers.max\n        val diff = max - min\n        if (diff\
    \ < 1) {\n            val roundTo = diff / 2\n            min + roundTo\n    \
    \    } else {\n            val roundTo = diff / 2\n            max - roundTo\n\
    \        }", "        val numbers = value.split(\"\\\\.\").map(_.toInt)\n    \
    \    val smallest = math.min(numbers)\n        val largest = math.max(numbers)\n\
    \        val difference = largest - smallest\n        val roundTowardZero = difference\
    \ < 0\n        val roundAwayFromZero = difference > 0\n        val roundTowardZeroOrAwayFromZero\
    \ = roundTowardZero || roundAwayFromZero\n        if (roundTowardZeroOrAwayFromZero)\
    \ {\n            math.round(largest - smallest)\n        } else {\n          \
    \  math.round(smallest + difference)\n        }", "        val nums = value.split(\"\
    \\\\.\").map(_.toInt)\n        val minDiff = math.abs(nums(0) - nums(1))\n   \
    \     val closestNum = nums.minBy(math.abs)\n        val diff = Math.abs(closestNum\
    \ - nums(0))\n        if (diff < minDiff) {\n            closestNum\n        }\
    \ else {\n            closestNum - diff\n        }", "        val numbers = value.split(\"\
    \\\\.\").map(_.toInt)\n        val smallest = math.min(numbers)\n        val largest\
    \ = math.max(numbers)\n        val diff = (largest - smallest).toInt\n       \
    \ val closest = (smallest + diff) / 2\n        closest.toLong", "        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val difference = largest - smallest\n\
    \        val closest = (largest + smallest) / 2\n        if (difference < smallest)\
    \ {\n            closest\n        } else {\n            math.round(closest)\n\
    \        }", "        val nums = value.split(\"\\\\.\").map(_.toInt)\n       \
    \ val min = math.min(nums)\n        val max = math.max(nums)\n        val mid\
    \ = math.round(min + (max - min) / 2)\n        val diff = (mid - min).abs()\n\
    \        if (diff < 0.5) {\n            mid\n        } else {\n            math.round(mid\
    \ - diff)\n        }", "        val nums = value.split(\"\\\\.\").map(_.toInt)\n\
    \        val min = math.min(nums.map(_.toDouble))\n        val max = math.max(nums.map(_.toDouble))\n\
    \        val diff = max - min\n        val closest = (diff + min) / 2\n      \
    \  math.round(closest)", "        val intValue = value.toInt\n        val difference\
    \ = abs(intValue - intValue)\n        val closestInteger = intValue + difference\n\
    \        closestInteger", "        val intValue = value.toInt\n        val intArray\
    \ = intValue.toString.split(\"\\\\.\").map(_.toInt)\n        val intArrayLength\
    \ = intArray.length\n        val intArraySum = intArray.sum\n        val intArrayDiff\
    \ = intArraySum - intArray(0)\n        val intArrayDiffSquared = intArrayDiff*intArrayDiff\n\
    \        val intArrayDiffSquaredLength = intArrayDiffSquared.length\n        val\
    \ intArrayDiffSquaredSum = intArrayDiffSquared.sum\n        val intArrayDiffSquaredDiff\
    \ = intArrayDiffSquaredSum - intArrayDiffSquared(0)\n        val intArrayDiffSquaredDiffSquared\
    \ = intArrayDiffSquaredDiff*intArrayDiffSquaredDiff\n        val intArrayDiffSquaredDiffSquaredLength\
    \ = intArrayDiffSquaredDiffSquared.length\n        val intArrayDiffSquaredDiffSquaredSum\
    \ = intArrayDiffSquaredDiffSquared.sum\n        val intArrayDiffSquaredDiffSquaredDiff\
    \ = intArrayDiffSquaredDiffSquaredSum - intArrayDiffSquaredDiffSquared(0)\n  \
    \      val intArrayDiffSquaredDiffSquaredDiffSquared = intArrayDiffSquaredDiffSquaredDiffSquared.sum\n\
    \        val intArrayDiffSquaredDiffSquaredDiffSquaredLength = intArrayDiffSquaredDiffSquaredDiffSquared.length\n\
    \        val intArrayDiffSquaredDiffSquaredDiffSquaredSum = intArrayDiffSquaredDiffSquaredDiffSquared.sum\n\
    \        val intArrayDiffSquaredDiffSquaredDiffSquaredDiff = intArrayDiffSquaredDiffSquaredDiffSquaredSum\
    \ - intArrayDiffSquaredDiffSquaredDiffSquared(0)\n        val intArrayDiffSquaredDiffSquaredDiffSquaredDiffSquared\
    \ = intArrayDiffSquaredDiffSquaredDiffSquaredDiffSquared.sum\n        val intArrayDiffSquaredDiffSquaredDiffSquaredDiffSquaredLength\
    \ = intArrayDiffSquaredDiffSquaredDiffSquaredDiffSquared.length\n        val intArrayDiffSquaredDiffSquaredDiffSquaredDiffSquaredSum\
    \ = intArrayDiffSquaredDiffSquaredDiffSquaredDiffSquared.sum\n        val intArrayDiffSquaredDiffSquaredDiffSquaredDiffSquaredDiff\
    \ = intArrayDiffSquaredDiffSquaredDiffSquaredDiffSquaredSum - intArrayDiffSquaredDiffSquaredDiffSquaredDiffSquared(0)\n\
    \        val intArrayDiffSquaredDiffSquared", "        val intValue = value.asInstanceOf[String]\n\
    \        val intArray = intValue.split(\"\\\\.\").map(_.toInt)\n        val intArrayLength\
    \ = intArray.length\n        val intArrayMin = intArray.min\n        val intArrayMax\
    \ = intArray.max\n        val intArrayDiff = intArrayMax - intArrayMin\n     \
    \   val intArrayDiffAbs = intArrayDiff.abs\n        val intArrayDiffAbsMin = intArrayDiffAbs.min\n\
    \        val intArrayDiffAbsMax = intArrayDiffAbs.max\n        val intArrayDiffAbsDiff\
    \ = intArrayDiffAbsMax - intArrayDiffAbsMin\n        val intArrayDiffAbsDiffAbs\
    \ = intArrayDiffAbsDiff.abs\n        val intArrayDiffAbsDiffAbsMin = intArrayDiffAbsDiffAbs.min\n\
    \        val intArrayDiffAbsDiffAbsMax = intArrayDiffAbsDiffAbs.max\n        val\
    \ intArrayDiffAbsDiffAbsDiff = intArrayDiffAbsDiffAbsMax - intArrayDiffAbsDiffAbsMin\n\
    \        val intArrayDiffAbsDiffAbsDiffAbs = intArrayDiffAbsDiffAbsDiffAbs.abs\n\
    \        val intArrayDiffAbsDiffAbsDiffAbsMin = intArrayDiffAbsDiffAbsDiffAbs.min\n\
    \        val intArrayDiffAbsDiffAbsDiffAbsMax = intArrayDiffAbsDiffAbsDiffAbs.max\n\
    \        val intArrayDiffAbsDiffAbsDiffAbsDiff = intArrayDiffAbsDiffAbsDiffAbsMax\
    \ - intArrayDiffAbsDiffAbsDiffAbsMin\n        val intArrayDiffAbsDiffAbsDiffAbsDiffAbs\
    \ = intArrayDiffAbsDiffAbsDiffAbsDiffAbsMax - intArrayDiffAbsDiffAbsDiffAbsMin\n\
    \        val intArrayDiffAbsDiffAbsDiffAbsDiffAbsMin = intArrayDiffAbsDiffAbsDiffAbsDiffAbsMax\
    \ - intArrayDiffAbsDiffAbsDiffAbsMin\n        val intArrayDiffAbsDiffAbsDiffAbsDiffAbsMax\
    \ = intArrayDiffAbsDiffAbsDiffAbsDiffAbsMax - intArrayDiffAbsDiffAbsDiffAbsMin\n\
    \        val intArrayDiffAbsDiffAbsDiffAbsDiffAbs", "        val intValue = value.toInt\n\
    \        val intArray = intValue.toString.split(\"\\\\.\").map(_.toInt)\n    \
    \    val intArrayLength = intArray.length\n        val intArraySum = intArray.sum\n\
    \        val intArrayDifference = intArraySum - intArray(0)\n        val intArrayDifferenceAbs\
    \ = intArrayDifference.abs\n        val intArrayDifferenceAbsMax = intArrayDifferenceAbs.max\n\
    \        val intArrayDifferenceAbsMin = intArrayDifferenceAbs.min\n        val\
    \ intArrayDifferenceAbsMaxIndex = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMax)\n\
    \        val intArrayDifferenceAbsMinIndex = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMin)\n\
    \        val intArrayDifferenceAbsMaxIndex2 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMaxIndex\
    \ + 1)\n        val intArrayDifferenceAbsMinIndex2 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMinIndex\
    \ - 1)\n        val intArrayDifferenceAbsMaxIndex3 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMaxIndex\
    \ + 2)\n        val intArrayDifferenceAbsMinIndex3 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMinIndex\
    \ - 2)\n        val intArrayDifferenceAbsMaxIndex4 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMaxIndex\
    \ + 3)\n        val intArrayDifferenceAbsMinIndex4 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMinIndex\
    \ - 3)\n        val intArrayDifferenceAbsMaxIndex5 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMaxIndex\
    \ + 4)\n        val intArrayDifferenceAbsMinIndex5 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMinIndex\
    \ - 4)\n        val intArrayDifferenceAbsMaxIndex6 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMaxIndex\
    \ + 5)\n        val intArrayDifferenceAbsMinIndex6 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMinIndex\
    \ - 5)\n        val intArrayDifferenceAbsMaxIndex7 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMaxIndex\
    \ + 6)\n        val intArrayDifferenceAbsMinIndex7 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMinIndex\
    \ - 6)\n        val intArrayDifferenceAbsMaxIndex8 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMaxIndex\
    \ + 7)\n        val intArrayDifferenceAbsMinIndex8 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMinIndex\
    \ - 7)\n", "        val nums = value.split(\"\\\\.\").map(_.toInt)\n        val\
    \ min = math.min(nums.map(_.toDouble))\n        val max = math.max(nums.map(_.toDouble))\n\
    \        val diff = max - min\n        val closest = (diff + min) / 2\n      \
    \  math.round(closest)", "        val nums = value.split(\"\\\\.\").map(_.toInt)\n\
    \        val min = math.min(nums)\n        val max = math.max(nums)\n        val\
    \ diff = max - min\n        val closest = (diff / 2) + min\n        closest.toLong",
  "        val nums = value.split(\".\").map(_.toInt)\n        val min = math.min(nums.map(_.toLong))\n\
    \        val max = math.max(nums.map(_.toLong))\n        val diff = max - min\n\
    \        val closest = (min + diff) / 2\n        math.round(closest)", "     \
    \   val nums = value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toDouble))\n\
    \        val max = math.max(nums.map(_.toDouble))\n        val diff = max - min\n\
    \        val closest = (diff + min) / 2\n        math.round(closest)", "     \
    \   val parts = value.split(\".\").map(_.toInt)\n        val part1 = parts(0)\n\
    \        val part2 = parts(1)\n        val part3 = parts(2)\n        val part4\
    \ = parts(3)\n        val part5 = parts(4)\n        val part6 = parts(5)\n   \
    \     val part7 = parts(6)\n        val part8 = parts(7)\n        val part9 =\
    \ parts(8)\n        val part10 = parts(9)\n        val part11 = parts(10)\n  \
    \      val part12 = parts(11)\n        val part13 = parts(12)\n        val part14\
    \ = parts(13)\n        val part15 = parts(14)\n        val part16 = parts(15)\n\
    \        val part17 = parts(16)\n        val part18 = parts(17)\n        val part19\
    \ = parts(18)\n        val part20 = parts(19)\n        val part21 = parts(20)\n\
    \        val part22 = parts(21)\n        val part23 = parts(22)\n        val part24\
    \ = parts(23)\n        val part25 = parts(24)\n        val part26 = parts(25)\n\
    \        val part27 = parts(26)\n        val part28 = parts(27)\n        val part29\
    \ = parts(28)\n        val part30 = parts(29)\n        val part31 = parts(30)\n\
    \        val part32 = parts(31)\n        val part33 = parts(32)\n        val part34\
    \ = parts(33)\n        val part35 = parts(34)\n        val part36 = parts(35)\n\
    \        val part37 = parts(36)\n        val part38 = parts(37)\n        val part39\
    \ = parts(38)\n        val part40 = parts(39)\n        val part41 = parts(40)\n\
    \        val part42 = parts(41)\n        val part43 = parts(42)\n        val part44\
    \ = parts(43)\n        val part45 = parts(44)\n        val part46 = parts(45)\n\
    \        val part47 = parts(46)\n        val part48 = parts(47)\n        val part49\
    \ = parts(48)\n        val part50 = parts(49)\n        val part51 = parts(50)\n\
    \        val part52 = parts(51)\n        val part53 = parts(52)\n        val part54\
    \ = parts(53)\n        val part55 = parts(54)\n        val part56 = parts(55)\n\
    \        val part57 = parts(56)\n        val part58 = parts(57)\n        val part59\
    \ = parts(58)\n        val part60 = parts(59)\n", "        val numbers = value.split(\"\
    .\").map(_.toInt)\n        val min = math.min(numbers)\n        val max = math.max(numbers)\n\
    \        val diff = max - min\n        val closest = (diff + min) / 2\n      \
    \  math.round(closest)"]
stop_tokens:
- "\n    }\n"
