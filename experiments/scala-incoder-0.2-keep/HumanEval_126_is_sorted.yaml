name: HumanEval_126_is_sorted
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of numbers, return whether or not they are sorted\n    // in\
  \ ascending order. If list has more than 1 duplicate of the same\n    // number,\
  \ return False. Assume no negative numbers and only integers.\n    // Examples\n\
  \    // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
  \    // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4, 5,\
  \ 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    // is_sorted([1,\
  \ 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
  \    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    def isSorted(lst : List[Long])\
  \ : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
  \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
  \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
  \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) == (true));\n\
  \    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
  \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
completions: ["        var i = 0\n        var j = 0\n        var isSorted = true\n\
    \        while (i < lst.size) {\n            if (lst(i) > lst(j)) {\n        \
    \        isSorted = false\n                break\n            }\n            i\
    \ += 1\n            j += 1\n        }\n        return isSorted", "        val\
    \ set = new mutable.HashSet[Long]()\n        for(i <- 0 until lst.size) {\n  \
    \          if(!set.contains(lst(i))) {\n                set.add(lst(i))\n    \
    \            return true\n            }\n        }\n        return false", " \
    \       val hashSet = mutable.HashSet[Long]()\n        val hashSet2 = mutable.HashSet[Long]()\n\
    \        val hashSet3 = mutable.HashSet[Long]()\n        val hashSet4 = mutable.HashSet[Long]()\n\
    \        val hashSet5 = mutable.HashSet[Long]()\n        val hashSet6 = mutable.HashSet[Long]()\n\
    \        val hashSet7 = mutable.HashSet[Long]()\n        val hashSet8 = mutable.HashSet[Long]()\n\
    \        val hashSet9 = mutable.HashSet[Long]()\n        val hashSet10 = mutable.HashSet[Long]()\n\
    \        val hashSet11 = mutable.HashSet[Long]()\n        val hashSet12 = mutable.HashSet[Long]()\n\
    \        val hashSet13 = mutable.HashSet[Long]()\n        val hashSet14 = mutable.HashSet[Long]()\n\
    \        val hashSet15 = mutable.HashSet[Long]()\n        val hashSet16 = mutable.HashSet[Long]()\n\
    \        val hashSet17 = mutable.HashSet[Long]()\n        val hashSet18 = mutable.HashSet[Long]()\n\
    \        val hashSet19 = mutable.HashSet[Long]()\n        val hashSet20 = mutable.HashSet[Long]()\n\
    \        val hashSet21 = mutable.HashSet[Long]()\n        val hashSet22 = mutable.HashSet[Long]()\n\
    \        val hashSet23 = mutable.HashSet[Long]()\n        val hashSet24 = mutable.HashSet[Long]()\n\
    \        val hashSet25 = mutable.HashSet[Long]()\n        val hashSet26 = mutable.HashSet[Long]()\n\
    \        val hashSet27 = mutable.HashSet[Long]()\n        val hashSet28 = mutable.HashSet[Long]()\n\
    \        val hashSet29 = mutable.HashSet[Long]()\n        val hashSet30 = mutable.HashSet[Long]()\n\
    \        val hashSet31 = mutable.HashSet[Long]()\n        val hashSet32 = mutable.HashSet[Long]()\n\
    \        val hashSet33 = mutable.HashSet[Long]()\n        val hashSet34 = mutable.HashSet[Long]()\n\
    \        val hashSet35 = mutable.HashSet[Long]()", "        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true", "        var i = 0\n        var j = 1\n      \
    \  var k = 0\n        var flag = true\n        while(i < lst.length && j < lst.length)\
    \ {\n            if(lst(i) < lst(j)) {\n                flag = false\n       \
    \         k = j\n                j++\n            } else {\n                k\
    \ = i\n                i += 1\n            }\n        }\n        if(flag && i\
    \ == lst.length && j == lst.length) {\n            return true\n        }\n  \
    \      return false", "        val set = new mutable.HashSet[Long]()\n       \
    \ for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n     \
    \           return false\n            }\n            set.add(lst(i))\n       \
    \ }\n        return true", "        val set = mutable.HashSet[Long]()\n      \
    \  for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n    \
    \            return false\n            }\n            set += lst(i)\n        }\n\
    \        return true", "        val set = new mutable.HashSet[Long]()\n      \
    \  for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n    \
    \            return false\n            }\n            else {\n               \
    \ set.add(lst(i))\n            }\n        }\n        return true", "        val\
    \ set = mutable.HashSet[Long]()\n        val list = lst.sortWith(_ < _)\n    \
    \    list.foreach { x => set.add(x.toLong) }\n        set.size == lst.size", " \
    \       val hashSet = mutable.HashSet[Long]()\n        val hashSet2 = mutable.HashSet[Long]()\n\
    \        val hashSet3 = mutable.HashSet[Long]()\n        val hashSet4 = mutable.HashSet[Long]()\n\
    \        val hashSet5 = mutable.HashSet[Long]()\n        val hashSet6 = mutable.HashSet[Long]()\n\
    \        val hashSet7 = mutable.HashSet[Long]()\n        val hashSet8 = mutable.HashSet[Long]()\n\
    \        val hashSet9 = mutable.HashSet[Long]()\n        val hashSet10 = mutable.HashSet[Long]()\n\
    \        val hashSet11 = mutable.HashSet[Long]()\n        val hashSet12 = mutable.HashSet[Long]()\n\
    \        val hashSet13 = mutable.HashSet[Long]()\n        val hashSet14 = mutable.HashSet[Long]()\n\
    \        val hashSet15 = mutable.HashSet[Long]()\n        val hashSet16 = mutable.HashSet[Long]()\n\
    \        val hashSet17 = mutable.HashSet[Long]()\n        val hashSet18 = mutable.HashSet[Long]()\n\
    \        val hashSet19 = mutable.HashSet[Long]()\n        val hashSet20 = mutable.HashSet[Long]()\n\
    \        val hashSet21 = mutable.HashSet[Long]()\n        val hashSet22 = mutable.HashSet[Long]()\n\
    \        val hashSet23 = mutable.HashSet[Long]()\n        val hashSet24 = mutable.HashSet[Long]()\n\
    \        val hashSet25 = mutable.HashSet[Long]()\n        val hashSet26 = mutable.HashSet[Long]()\n\
    \        val hashSet27 = mutable.HashSet[Long]()\n        val hashSet28 = mutable.HashSet[Long]()\n\
    \        val hashSet29 = mutable.HashSet[Long]()\n        val hashSet30 = mutable.HashSet[Long]()\n\
    \        val hashSet31 = mutable.HashSet[Long]()\n        val hashSet32 = mutable.HashSet[Long]()\n\
    \        val hashSet33 = mutable.HashSet[Long]()\n        val hashSet34 = mutable.HashSet[Long]()\n\
    \        val hashSet35 = mutable.HashSet[Long]()", "        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.length)\n            if(!set.contains(lst(i)))\n\
    \                set.add(lst(i))\n        set.size == lst.length", "        val\
    \ set = mutable.HashSet[Long]()\n        for(i <- 0 until lst.size) {\n      \
    \      if(set.contains(lst(i))) {\n                return false\n            }\n\
    \            set += lst(i)\n        }\n        return true", "        val set\
    \ = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        val set5 = new mutable.HashSet[Long]()\n        val set6 = new mutable.HashSet[Long]()\n\
    \        val set7 = new mutable.HashSet[Long]()\n        val set8 = new mutable.HashSet[Long]()\n\
    \        val set9 = new mutable.HashSet[Long]()\n        val set10 = new mutable.HashSet[Long]()\n\
    \        val set11 = new mutable.HashSet[Long]()\n        val set12 = new mutable.HashSet[Long]()\n\
    \        val set13 = new mutable.HashSet[Long]()\n        val set14 = new mutable.HashSet[Long]()\n\
    \        val set15 = new mutable.HashSet[Long]()\n        val set16 = new mutable.HashSet[Long]()\n\
    \        val set17 = new mutable.HashSet[Long]()\n        val set18 = new mutable.HashSet[Long]()\n\
    \        val set19 = new mutable.HashSet[Long]()\n        val set20 = new mutable.HashSet[Long]()\n\
    \        val set21 = new mutable.HashSet[Long]()\n        val set22 = new mutable.HashSet[Long]()\n\
    \        val set23 = new mutable.HashSet[Long]()\n        val set24 = new mutable.HashSet[Long]()\n\
    \        val set25 = new mutable.HashSet[Long]()\n        val set26 = new mutable.HashSet[Long]()\n\
    \        val set27 = new mutable.HashSet[Long]()\n        val set28 = new mutable.HashSet[Long]()\n\
    \        val set29 = new mutable.HashSet[Long]()\n        val set30 = new mutable.HashSet[Long]()\n\
    \        val set31 = new mutable.HashSet[Long]()\n        val set32 = new mutable.HashSet[Long]()\n\
    \        val set33 = new mutable.HashSet[Long]()\n        val set34 = new mutable.HashSet[Long]()\n\
    \        val set35 = new mutable.HashSet[Long]()\n        val set36 = new mutable.HashSet[Long]()\n\
    \        val set37 = new mutable.", "        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val set4 = new mutable.HashSet[Long]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val set6 = new mutable.HashSet[Long]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val set8 = new mutable.HashSet[Long]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val set10 = new mutable.HashSet[Long]()\n        val set11 = new mutable.HashSet[Long]()\n\
    \        val set12 = new mutable.HashSet[Long]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val set14 = new mutable.HashSet[Long]()\n        val set15 = new mutable.HashSet[Long]()\n\
    \        val set16 = new mutable.HashSet[Long]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val set18 = new mutable.HashSet[Long]()\n        val set19 = new mutable.HashSet[Long]()\n\
    \        val set20 = new mutable.HashSet[Long]()\n        val set21 = new mutable.HashSet[Long]()\n\
    \        val set22 = new mutable.HashSet[Long]()\n        val set23 = new mutable.HashSet[Long]()\n\
    \        val set24 = new mutable.HashSet[Long]()\n        val set25 = new mutable.HashSet[Long]()\n\
    \        val set26 = new mutable.HashSet[Long]()\n        val set27 = new mutable.HashSet[Long]()\n\
    \        val set28 = new mutable.HashSet[Long]()\n        val set29 = new mutable.HashSet[Long]()\n\
    \        val set30 = new mutable.HashSet[Long]()\n        val set31 = new mutable.HashSet[Long]()\n\
    \        val set32 = new mutable.HashSet[Long]()\n        val set33 = new mutable.HashSet[Long]()\n\
    \        val set34 = new mutable.HashSet[Long]()\n        val set35 = new mutable.HashSet[Long]()\n\
    \        val set36 = new mutable.HashSet[Long]()\n        val set37 = new mutable.",
  "        var i = 0\n        var j = 1\n        var k = lst.length\n        while\
    \ (i < k) {\n            if (lst(i) > lst(j)) {\n                return false\n\
    \            }\n            i += 1\n            j += 1\n        }\n        return\
    \ true", "        val set = mutable.HashSet[Long]()\n        for(i <- 0 until\
    \ lst.size) {\n            if(!set.contains(lst(i))) {\n                set.add(lst(i))\n\
    \            } else {\n                return false\n            }\n        }\n\
    \        return true", "        val set = new mutable.HashSet[Long]()\n      \
    \  val len = lst.length\n        var i = 0\n        while (i < len) {\n      \
    \      if (set.contains(lst(i))) {\n                return false\n           \
    \ }\n            set.add(lst(i))\n            i += 1\n        }\n        return\
    \ true", "        val seen = mutable.HashSet[Long]()\n        val seenCount =\
    \ mutable.HashMap[Long, Int]()\n        val len = lst.size\n        for(i <- 0\
    \ until len) {\n            val cur = lst(i)\n            if(!seen(cur)) {\n \
    \               seen(cur) = 1\n                seenCount(cur) = 1\n          \
    \  } else {\n                seenCount(cur) += 1\n            }\n        }\n \
    \       val result = seenCount.values.toList.forall(x => x == len)\n        seenCount.clear()\n\
    \        return result", "        val set = new mutable.HashSet[Long]()\n    \
    \    for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n  \
    \              return false\n            }\n            set.add(lst(i))\n    \
    \    }\n        return true", "        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true"]
stop_tokens:
- "\n    }\n"
