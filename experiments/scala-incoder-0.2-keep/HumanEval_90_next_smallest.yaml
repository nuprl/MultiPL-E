name: HumanEval_90_next_smallest
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of integers.\n    // Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n    // Return None if there\
  \ is no such element.\n    // next_smallest([1, 2, 3, 4, 5]) == 2\n    // next_smallest([5,\
  \ 1, 4, 3, 2]) == 2\n    // next_smallest([]) == None\n    // next_smallest([1,\
  \ 1]) == None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
  \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
  \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n  \
  \  assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(1l));\n\
  \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n  \
  \  assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
  \    }\n\n}\n"
completions: ["        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x < smallest)\n        if (index < lst.size) {\n            Some(lst(index\
    \ + 1))\n        } else {\n            None\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if (index < 0)\
    \ None\n        else Some(lst.apply(index + 1))", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x < smallest)\n        if (index < 0)\
    \ None\n        else Some(lst.apply(index + 1))", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(_ == smallest)\n        if (index == 0) None\n\
    \        else Some(lst.apply(index + 1))", "        val smallest = lst.min\n \
    \       val index = lst.indexOf(smallest)\n        if (index < lst.size - 1) {\n\
    \            Some(lst(index + 1))\n        } else {\n            None\n      \
    \  }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == lst.size - 1) {\n            None\n        } else {\n  \
    \          val nextSmallest = lst(index + 1)\n            Some(nextSmallest)\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x == smallest)\n        if (index == 0) None\n        else Some(lst.apply(index\
    \ + 1))", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x < smallest)\n        if (index == 0) None\n        else Some(lst.apply(index\
    \ - 1))", "        val smallest = lst.min\n        val index = lst.indexWhere(_\
    \ == smallest)\n        if (index == lst.size) {\n            None\n        }\
    \ else {\n            Some(lst.apply(index + 1))\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n        if\
    \ (index == -1) {\n            None\n        } else {\n            val next =\
    \ lst.apply(index + 1)\n            Some(next)\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n        if\
    \ (index == lst.size - 1) None\n        else Some(lst.apply(index + 1))", "  \
    \      val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if(index == lst.size - 1) {\n            None\n        } else {\n      \
    \      val nextSmallest = lst(index + 1)\n            Some(nextSmallest)\n   \
    \     }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x == smallest)\n        if (index < lst.size - 1) {\n            Some(lst.apply(index\
    \ + 1))\n        } else {\n            None\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if(index < lst.size\
    \ - 1) {\n            Some(lst(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x == smallest)\n        if (index == 0) None\n        else Some(lst.apply(index\
    \ + 1))", "        val smallest = lst.min\n        val index = lst.indexWhere(_\
    \ == smallest)\n        if (index < lst.size - 1) {\n            Some(lst(index\
    \ + 1))\n        } else {\n            None\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if(index == 0)\
    \ None\n        else Some(lst.apply(index - 1))", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if (index ==\
    \ 0) None\n        else Some(lst.apply(index - 1))", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if (index < lst.size)\
    \ {\n            Some(lst(index + 1))\n        } else {\n            None\n  \
    \      }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexOf(smallest)\n    \
    \    if (index == 0) None\n        else Some(lst.apply(index - 1))", "       \
    \ val smallest = lst.min\n        val index = lst.indexWhere(_ == smallest)\n\
    \        if (index < lst.size) {\n            Some(lst.apply(index + 1))\n   \
    \     } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index < lst.size - 1)\
    \ {\n            Some(lst(index + 1))\n        } else {\n            None\n  \
    \      }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if(index < lst.size - 1)\n            Some(lst.apply(index + 1))\n  \
    \      else\n            None", "        val smallest = lst.min\n        val index\
    \ = lst.indexOf(smallest)\n        if (index == 0 || index == lst.size - 1) {\n\
    \            None\n        } else {\n            val nextSmallest = lst(index\
    \ + 1)\n            Some(nextSmallest)\n        }", "        val smallest = lst.min\n\
    \        val smallestIndex = lst.indexOf(smallest)\n        val secondSmallest\
    \ = lst.drop(smallestIndex).min\n        val secondSmallestIndex = lst.indexOf(secondSmallest)\n\
    \        if (smallestIndex < secondSmallestIndex) {\n            Some(secondSmallest)\n\
    \        } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if (index ==\
    \ lst.size) {\n            None\n        } else {\n            Some(lst(index\
    \ + 1))\n        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst.apply(index + 1))\n\
    \        } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index < lst.size - 1)\
    \ {\n            Some(lst.apply(index + 2))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst.apply(index + 1))\n\
    \        } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x < smallest)\n        if (index == 0)\
    \ None\n        else Some(lst.apply(index + 1))", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index < lst.size - 1)\
    \ {\n            Some(lst(index + 1))\n        } else {\n            None\n  \
    \      }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index + 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if(index < lst.size) Some(lst.apply(index + 1))\n        else None",
  "        val smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index == -1) {\n            None\n        } else {\n            Some(lst.apply(index\
    \ + 1))\n        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x < smallest)\n        if (index < lst.size) {\n            Some(lst.apply(index\
    \ + 1))\n        } else {\n            None\n        }", "        val smallest\
    \ = lst.min\n        val smallestIndex = lst.indexOf(smallest)\n        if(smallestIndex\
    \ == lst.size - 1)\n            None\n        else\n            lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, smallest))", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else Some(lst.apply(index+1))", "        val smallest = lst.min\n      \
    \  val index = lst.indexWhere(x => x < smallest)\n        if (index < 0) None\n\
    \        else Some(lst.apply(index + 1))", "        val m = lst.min\n        val\
    \ n = lst.max\n        if (m == n) None\n        else if (m > n) Some(m)\n   \
    \     else Some(n)", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x < smallest)\n        if (index < 0) None\n        else Some(lst.apply(index\
    \ + 1))", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if(index == -1) {\n            None\n        } else {\n            val\
    \ next = lst.apply(index + 1)\n            if(next < smallest) {\n           \
    \     Some(next)\n            } else {\n                None\n            }\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst(index + 1))\n     \
    \   } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else if (index == lst.size - 1) Some(smallest)\n        else Some(lst(index+1))",
  "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if (index == -1) {\n            None\n        } else {\n            val\
    \ next = lst.updated(index, smallest)\n            Some(next)\n        }", " \
    \       val smallest = lst.min\n        val index = lst.indexOf(smallest)\n  \
    \      if (index < lst.size - 1) {\n            Some(lst(index + 1))\n       \
    \ } else {\n            None\n        }", "        val smallest = lst.min\n  \
    \      val rest = lst.filter(_ != smallest)\n        if (rest.isEmpty) None\n\
    \        else Some(rest.min.toLong)", "        val smallest = lst.min\n      \
    \  val index = lst.indexOf(smallest)\n        if (index == lst.size - 1) {\n \
    \           None\n        } else {\n            val next = lst.apply(index + 1)\n\
    \            if (next < smallest) {\n                Some(next)\n            }\
    \ else {\n                None\n            }\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if(index == lst.size\
    \ - 1) None\n        else Some(lst(index + 1))", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else Some(lst.apply(index - 1))", "        val m = lst.min\n        val\
    \ n = lst.max\n        if (m == n) None\n        else Some(m)", "        val smallest\
    \ = lst.min\n        val smallest_index = lst.indexWhere(x => x == smallest)\n\
    \        val second_smallest = lst.apply(smallest_index + 1)\n        val second_smallest_index\
    \ = lst.indexWhere(x => x == second_smallest)\n        if (second_smallest_index\
    \ == lst.size - 1) {\n            None\n        } else {\n            Some(second_smallest)\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0 || index == lst.size - 1) {\n            None\n      \
    \  } else {\n            val next = lst.apply(index + 1)\n            Some(next)\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < 0) None\n        else Some(lst.apply(index+1))", "      \
    \  val smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index < lst.size) {\n            Some(lst.apply(index + 1))\n   \
    \     } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if(index < lst.size){\n\
    \            Some(lst.apply(index+1))\n        }\n        else None", "      \
    \  val smallest = lst.min\n        val index = lst.indexOf(smallest)\n       \
    \ if (index < lst.size - 1) {\n            Some(lst(index + 1))\n        } else\
    \ {\n            None\n        }", "        val smallest = lst.min\n        val\
    \ index = lst.indexOf(smallest)\n        if (index == -1) {\n            None\n\
    \        } else {\n            val nextSmallest = lst(index + 1)\n           \
    \ if (nextSmallest < smallest) {\n                Some(nextSmallest)\n       \
    \     } else {\n                None\n            }\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index < lst.size) {\n            Some(lst.apply(index + 1))\n   \
    \     } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x < smallest)\n        if (index < lst.size)\
    \ {\n            Some(lst.apply(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexOf(smallest)\n    \
    \    if (index == -1) {\n            None\n        } else {\n            val nextSmallest\
    \ = lst(index + 1)\n            Some(nextSmallest)\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n        if\
    \ (index == lst.size) {\n            None\n        } else {\n            val nextSmallest\
    \ = lst(index + 1)\n            Some(nextSmallest)\n        }", "        val smallest\
    \ = lst.min\n        val rest = lst.filter(_ != smallest)\n        if (rest.isEmpty)\
    \ None\n        else Some(smallest)", "        val smallest = lst.min\n      \
    \  val index = lst.indexOf(smallest)\n        if (index < lst.size - 1) {\n  \
    \          Some(lst(index + 1))\n        } else {\n            None\n        }",
  "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if (index == -1) {\n            None\n        } else {\n            val\
    \ nextSmallest = lst(index + 1)\n            Some(nextSmallest)\n        }", " \
    \       val m = lst.head\n        lst.tail.foreach(x => if (x < m) m = x)\n  \
    \      if (lst.size == 1) Some(m)\n        else nextSmallest(lst.tail)", "   \
    \     val smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if (index == -1) {\n            None\n        } else {\n            val\
    \ next = lst.apply(index + 1)\n            Some(next)\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexOf(smallest)\n        if (index\
    \ == lst.size - 1) {\n            None\n        } else {\n            val nextSmallest\
    \ = lst(index + 1)\n            Some(nextSmallest)\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if(index < lst.size\
    \ - 1){\n            Some(lst(index + 1))\n        }else{\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x == smallest)\n        if (index == lst.size) {\n            None\n    \
    \    } else {\n            Some(lst.apply(index + 1))\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexOf(smallest)\n        if (index\
    \ == 0) None\n        else Some(lst.apply(index - 1))", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if (index == -1)\
    \ {\n            None\n        } else {\n            val nextSmallest = lst(index\
    \ + 1)\n            Some(nextSmallest)\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == lst.size - 1)\
    \ None\n        else Some(lst.apply(index + 1))", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if(index == lst.size - 1)\n\
    \            None\n        else\n            Some(lst.apply(index + 1))", "  \
    \      val smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if (index < lst.size) {\n            Some(lst.apply(index + 1))\n   \
    \     } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if(index == -1) {\n      \
    \      None\n        } else {\n            val next = lst.apply(index + 1)\n \
    \           if(next < smallest) {\n                Some(next)\n            } else\
    \ {\n                None\n            }\n        }", "        val smallest =\
    \ lst.min\n        val index = lst.indexWhere(x => x < smallest)\n        if (index\
    \ == 0) None\n        else Some(lst.apply(index + 1))", "        val smallest\
    \ = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n        if\
    \ (index == lst.size) {\n            None\n        } else {\n            val next\
    \ = lst.apply(index + 1)\n            Some(next)\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexWhere(_ == smallest)\n        if (index\
    \ < lst.size) {\n            Some(lst.apply(index + 1))\n        } else {\n  \
    \          None\n        }", "        val smallest = lst.min\n        val index\
    \ = lst.indexWhere(x => x == smallest)\n        if (index == -1) {\n         \
    \   None\n        } else {\n            val next = lst.apply(index + 1)\n    \
    \        if (next < smallest) {\n                Some(next)\n            } else\
    \ {\n                None\n            }\n        }", "        val smallest =\
    \ lst.min\n        val index = lst.indexWhere(x => x == smallest)\n        if(index\
    \ == lst.size) {\n            None\n        } else {\n            Some(lst(index\
    \ + 1))\n        }", "        val smallest = lst.min\n        val smallestIndex\
    \ = lst.indexOf(smallest)\n        if (smallestIndex == lst.size - 1) {\n    \
    \        None\n        } else {\n            val nextSmallest = lst(smallestIndex\
    \ + 1)\n            Some(nextSmallest)\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else Some(lst.apply(index - 1))", "        val smallest = lst.min\n    \
    \    val smallestIndex = lst.indexOf(smallest)\n        if (smallestIndex < lst.size\
    \ - 1) {\n            val secondSmallest = lst(smallestIndex + 1)\n          \
    \  if (secondSmallest < smallest) {\n                Some(secondSmallest)\n  \
    \          } else {\n                None\n            }\n        } else {\n \
    \           None\n        }", "        val smallest = lst.min\n        val rest\
    \ = lst.filter(_ != smallest)\n        val second = smallest\n        if (rest.isEmpty)\
    \ None else Some(second)", "        val smallest = lst.min\n        val index\
    \ = lst.indexOf(smallest)\n        if (index < 0) None\n        else Some(lst.apply(index+1))",
  "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if (index == -1) {\n            None\n        } else {\n            val\
    \ next = lst.apply(index + 1)\n            Some(next)\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexOf(smallest)\n        if (index\
    \ == -1) {\n            None\n        } else {\n            val next = lst.apply(index\
    \ + 1)\n            if (next < smallest) {\n                Some(next)\n     \
    \       } else {\n                None\n            }\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexOf(smallest)\n        if (index\
    \ == -1) {\n            None\n        } else {\n            val next = lst.updated(index\
    \ + 1, lst.apply(index + 1))\n            Some(next)\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if (index == lst.size) {\n            None\n        } else {\n      \
    \      Some(lst.apply(index + 1))\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index < lst.size - 1)\
    \ {\n            Some(lst(index + 1))\n        } else {\n            None\n  \
    \      }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if (index < lst.size) {\n            Some(lst.apply(index + 1))\n   \
    \     } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if (index ==\
    \ lst.size) {\n            None\n        } else {\n            val next = lst.apply(index\
    \ + 1)\n            if (next < smallest) {\n                Some(next)\n     \
    \       } else {\n                None\n            }\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexWhere(_ == smallest)\n    \
    \    if (index == lst.size) {\n            None\n        } else {\n          \
    \  Some(lst.apply(index + 1))\n        }", "        val smallest = lst.min\n \
    \       val smallestIndex = lst.indexOf(smallest)\n        if(smallestIndex ==\
    \ lst.size - 1) {\n            None\n        } else {\n            val nextSmallestIndex\
    \ = smallestIndex + 1\n            val nextSmallest = lst(nextSmallestIndex)\n\
    \            Some(nextSmallest)\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if(index == -1)\
    \ {\n            None\n        } else {\n            Some(lst.apply(index + 1))\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x < smallest)\n        if (index == -1) {\n            None\n        } else\
    \ {\n            Some(lst.apply(index + 1))\n        }", "        val smallest\
    \ = lst.min\n        val rest = lst.filter(_ != smallest)\n        if (rest.isEmpty)\
    \ None\n        else Some(rest.min.next)", "        val smallest = lst.min\n \
    \       val index = lst.indexOf(smallest)\n        if(index < lst.size - 1) {\n\
    \            Some(lst(index + 1))\n        } else {\n            None\n      \
    \  }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index + 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexWhere(_ == smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index + 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexOf(smallest)\n    \
    \    if (index < lst.size - 1) {\n            Some(lst(index + 1))\n        }\
    \ else {\n            None\n        }", "        val smallest = lst.min\n    \
    \    val index = lst.indexWhere(x => x < smallest)\n        if (index < lst.size)\
    \ {\n            Some(lst.apply(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst(index + 1))\n     \
    \   } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if(index < lst.size - 1){\n\
    \            Some(lst.apply(index + 1))\n        }\n        else{\n          \
    \  None\n        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x == smallest)\n        if (index < lst.size) {\n            Some(lst(index\
    \ + 1))\n        } else {\n            None\n        }", "        val m = lst.head\n\
    \        val n = lst.tail.head\n        if (n < m) Some(m)\n        else nextSmallest(n::lst)",
  "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if (index == lst.size - 1) {\n            None\n        } else {\n     \
    \       val next = lst.apply(index + 1)\n            if (next < smallest) {\n\
    \                Some(next)\n            } else {\n                None\n    \
    \        }\n        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == -1) {\n            None\n        } else {\n            val\
    \ next = lst.apply(index + 1)\n            if (next < smallest) {\n          \
    \      Some(next)\n            } else {\n                None\n            }\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if(index == 0) None\n        else Some(lst.apply(index - 1))", "    \
    \    val smallest = lst.min\n        val index = lst.indexOf(smallest)\n     \
    \   if(index == 0 || index == lst.size - 1)\n            None\n        else\n\
    \            Some(lst(index + 1))", "        val smallest = lst.min\n        val\
    \ index = lst.indexOf(smallest)\n        if(index == 0) None\n        else Some(lst.apply(index\
    \ - 1))", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if(index == 0) None\n        else Some(lst.apply(index - 1))", "    \
    \    val smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if (index < 0) None\n        else Some(lst.apply(index + 1))", "    \
    \    val smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if (index < lst.size) {\n            Some(lst.apply(index + 1))\n   \
    \     } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == lst.size - 1)\
    \ {\n            None\n        } else {\n            val nextSmallest = lst(index\
    \ + 1)\n            Some(nextSmallest)\n        }", "        val smallest = lst.min\n\
    \        val rest = lst.filter(_ != smallest)\n        if (rest.isEmpty) None\n\
    \        else Some(smallest)", "        val smallest = lst.min\n        val index\
    \ = lst.indexOf(smallest)\n        if (index == lst.size - 1) {\n            None\n\
    \        } else {\n            val next = lst.apply(index + 1)\n            if\
    \ (next < smallest) {\n                Some(next)\n            } else {\n    \
    \            None\n            }\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(_ == smallest)\n        if (index < lst.size)\
    \ {\n            Some(lst.apply(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val rest = lst.filter(_\
    \ != smallest)\n        if (rest.isEmpty) None\n        else Some(rest.min.toLong)",
  "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if (index == lst.size - 1) {\n            None\n        } else {\n     \
    \       val next = lst.apply(index + 1)\n            if (next < smallest) {\n\
    \                Some(next)\n            } else {\n                None\n    \
    \        }\n        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == -1) {\n            None\n        } else {\n            val\
    \ next = lst.apply(index + 1)\n            if (next < smallest) {\n          \
    \      Some(next)\n            } else {\n                None\n            }\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x == smallest)\n        if (index == lst.size) {\n            None\n    \
    \    } else {\n            Some(lst.apply(index + 1))\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexOf(smallest)\n        if (index\
    \ == lst.size - 1) None\n        else Some(lst(index + 1))", "        val smallest\
    \ = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n        if\
    \ (index == lst.size) {\n            None\n        } else {\n            Some(lst.apply(index\
    \ + 1))\n        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x < smallest)\n        if (index < lst.size) {\n            Some(lst.apply(index\
    \ + 1))\n        } else {\n            None\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if (index < lst.size\
    \ - 1) {\n            Some(lst.apply(index + 1))\n        } else {\n         \
    \   None\n        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else if (index == lst.size - 1) Some(smallest)\n\
    \        else Some(lst.apply(index + 1))", "        val m = lst.min\n        val\
    \ n = lst.max\n        if (m == n) None\n        else Some(m)", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if (index == 0)\
    \ None\n        else if (index == lst.size - 1) Some(smallest)\n        else Some(lst.apply(index\
    \ + 1))", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst(index + 1))\n     \
    \   } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if(index == 0) None\n    \
    \    else Some(lst.apply(index - 1))", "        val smallest = lst.min\n     \
    \   val index = lst.indexWhere(x => x < smallest)\n        if (index < 0) None\n\
    \        else Some(lst.apply(index + 1))", "        val m = lst.min\n        val\
    \ n = lst.max\n        if (m == n) None\n        else if (m > n) Some(m)\n   \
    \     else Some(n)", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0 || index == lst.size - 1) {\n            None\n      \
    \  } else {\n            Some(lst(index + 1))\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if (index == -1)\
    \ {\n            None\n        } else {\n            val next = lst.apply(index\
    \ + 1)\n            if (next < smallest) {\n                Some(next)\n     \
    \       } else {\n                None\n            }\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexOf(smallest)\n        if (index\
    \ == 0) None\n        else Some(lst.apply(index - 1))", "        val smallest\
    \ = lst.min\n        val rest = lst.filter(_ != smallest)\n        if (rest.isEmpty)\
    \ None\n        else Some(rest.min.toLong)", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if (index < lst.size)\
    \ {\n            Some(lst.apply(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == -1) {\n            None\n        } else {\n            val\
    \ nextSmallest = lst(index + 1)\n            Some(nextSmallest)\n        }", " \
    \       val smallest = lst.min\n        val index = lst.indexOf(smallest)\n  \
    \      if (index == 0) None\n        else Some(lst.apply(index - 1))", "     \
    \   val smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if(index == 0) None\n        else Some(lst.apply(index + 1))", "    \
    \    val smallest = lst.min\n        val rest = lst.filter(_ != smallest)\n  \
    \      if (rest.isEmpty) None\n        else Some(rest.min.toLong)", "        val\
    \ smallest = lst.min\n        val rest = lst.filter(_ != smallest)\n        if\
    \ (rest.isEmpty) None\n        else Some(smallest)", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else Some(lst.apply(index + 1))", "        val smallest = lst.min\n    \
    \    val smallestIndex = lst.indexOf(smallest)\n        if(smallestIndex == lst.size\
    \ - 1) {\n            None\n        } else {\n            val nextSmallest = lst(smallestIndex\
    \ + 1)\n            Some(nextSmallest)\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if (index ==\
    \ -1) {\n            None\n        } else {\n            val next = lst.apply(index\
    \ + 1)\n            if (next < smallest) {\n                Some(next)\n     \
    \       } else {\n                None\n            }\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if(index == 0) None else Some(lst.apply(index + 1))", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if (index == -1)\
    \ {\n            None\n        } else {\n            val nextSmallest = lst(index\
    \ + 1)\n            Some(nextSmallest)\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == -1) {\n     \
    \       None\n        } else {\n            val next = lst.apply(index + 1)\n\
    \            if (next < smallest) {\n                Some(next)\n            }\
    \ else {\n                None\n            }\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n        if\
    \ (index < lst.size) {\n            Some(lst.apply(index + 1))\n        } else\
    \ {\n            None\n        }", "        val smallest = lst.min\n        val\
    \ index = lst.indexWhere(x => x == smallest)\n        if (index < lst.size) {\n\
    \            Some(lst.apply(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x < smallest)\n        if (index == 0) None\n        else Some(lst.apply(index\
    \ + 1))", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst(index + 1))\n     \
    \   } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if (index ==\
    \ lst.size) {\n            None\n        } else {\n            Some(lst(index\
    \ + 1))\n        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else if (index == lst.size - 1) Some(smallest)\n\
    \        else Some(lst(index+1))", "        val smallest = lst.min\n        val\
    \ index = lst.indexOf(smallest)\n        if (index < 0) None\n        else Some(lst.apply(index\
    \ + 1))", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x < smallest)\n        if (index == 0) None\n        else Some(lst.apply(index\
    \ + 1))", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if(index == 0) None\n        else Some(lst.apply(index+1))", "      \
    \  val smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if (index == lst.size) {\n            None\n        } else {\n      \
    \      Some(lst(index + 1))\n        }", "        val smallest = lst.min\n   \
    \     val index = lst.indexOf(smallest)\n        if (index == 0) None\n      \
    \  else Some(lst.apply(index - 1))", "        val smallest = lst.min\n       \
    \ val index = lst.indexOf(smallest)\n        if (index == 0 || index == lst.size\
    \ - 1) {\n            None\n        } else {\n            val nextSmallest = lst(index\
    \ + 1)\n            Some(nextSmallest)\n        }", "        val smallest = lst.min\n\
    \        val rest = lst.filter(_ != smallest)\n        if (rest.size == 0) None\n\
    \        else Some(rest.min.toLong)", "        val smallest = lst.min\n      \
    \  val index = lst.indexOf(smallest)\n        if(index == lst.size - 1)\n    \
    \        None\n        else\n            Some(lst.apply(index + 1))", "      \
    \  val smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index + 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexOf(smallest)\n    \
    \    if (index == lst.size - 1) {\n            None\n        } else {\n      \
    \      val next = lst.apply(index + 1)\n            if (next < smallest) {\n \
    \               Some(next)\n            } else {\n                None\n     \
    \       }\n        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if(index == -1) {\n            None\n        } else {\n            val\
    \ nextSmallest = lst(index + 1)\n            Some(nextSmallest)\n        }", " \
    \       val smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index == lst.size) {\n            None\n        } else {\n      \
    \      val nextSmallest = lst(index + 1)\n            Some(nextSmallest)\n   \
    \     }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if(index == lst.size - 1) {\n            None\n        } else {\n   \
    \         val nextSmallest = lst(index + 1)\n            Some(nextSmallest)\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x == smallest)\n        if (index == lst.size) {\n            None\n    \
    \    } else {\n            val nextSmallest = lst(index + 1)\n            Some(nextSmallest)\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if(index == -1) {\n            None\n        } else {\n            val\
    \ nextSmallest = lst(index + 1)\n            if(nextSmallest < smallest) {\n \
    \               Some(nextSmallest)\n            } else {\n                None\n\
    \            }\n        }", "        val smallest = lst.min\n        val index\
    \ = lst.indexWhere(_ == smallest)\n        if (index == 0) None\n        else\
    \ Some(lst.apply(index + 1))", "        val smallest = lst.min\n        val index\
    \ = lst.indexWhere(x => x == smallest)\n        if (index == lst.size) {\n   \
    \         None\n        } else {\n            Some(lst.apply(index + 1))\n   \
    \     }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexOf(smallest)\n    \
    \    if (index == -1) {\n            None\n        } else {\n            val next\
    \ = lst.updated(index, lst.apply(index + 1))\n            Some(next)\n       \
    \ }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if(index == 0) None\n        else Some(lst.apply(index+1))", "      \
    \  val smallest = lst.min\n        val index = lst.indexOf(smallest)\n       \
    \ if (index == 0) None\n        else Some(lst.apply(index - 1))", "        val\
    \ smallest = lst.min\n        val index = lst.indexOf(smallest)\n        if (index\
    \ == -1) {\n            None\n        } else {\n            val next = lst.apply(index\
    \ + 1)\n            if (next < smallest) {\n                Some(next)\n     \
    \       } else {\n                None\n            }\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexOf(smallest)\n        if (index\
    \ == -1) {\n            None\n        } else {\n            val next = lst.updated(index,\
    \ lst.apply(index + 1))\n            Some(smallest)\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexOf(smallest)\n        if(index\
    \ == lst.size - 1) None\n        else Some(lst.apply(index + 1))", "        val\
    \ smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if (index < lst.size) {\n            Some(lst.apply(index + 1))\n   \
    \     } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else Some(lst.apply(index + 1))", "        val smallest = lst.min\n    \
    \    val smallestIndex = lst.indexOf(smallest)\n        if (smallestIndex == lst.size\
    \ - 1) {\n            None\n        } else {\n            val nextSmallest = lst(smallestIndex\
    \ + 1)\n            Some(nextSmallest)\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x < smallest)\n        if (index < lst.size)\
    \ {\n            Some(lst.apply(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst(index + 1))\n     \
    \   } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x < smallest)\n        if (index < lst.size)\
    \ {\n            Some(lst.apply(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x < smallest)\n        if (index == lst.size) {\n            None\n     \
    \   } else {\n            Some(lst(index + 1))\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if (index < lst.size\
    \ - 1) {\n            Some(lst(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x == smallest)\n        if(index == lst.size){\n            None\n      \
    \  }else{\n            val nextSmallest = lst(index + 1)\n            Some(nextSmallest)\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x < smallest)\n        if (index == lst.size) {\n            None\n     \
    \   } else {\n            val nextSmallest = lst(index + 1)\n            Some(nextSmallest)\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(_\
    \ == smallest)\n        if (index == lst.size) {\n            None\n        }\
    \ else {\n            Some(lst.apply(index + 1))\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if (index < lst.size\
    \ - 1) {\n            Some(lst(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x < smallest)\n        if (index == -1) {\n            None\n        } else\
    \ {\n            val next = lst.apply(index + 1)\n            if (next < smallest)\
    \ {\n                Some(next)\n            } else {\n                None\n\
    \            }\n        }", "        val smallest = lst.min\n        val index\
    \ = lst.indexWhere(_ == smallest)\n        if (index < lst.size) {\n         \
    \   Some(lst(index + 1))\n        } else {\n            None\n        }", "  \
    \      val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if (index < lst.size - 1) {\n            Some(lst.apply(index + 1))\n  \
    \      } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(_ == smallest)\n        if (index < lst.size)\
    \ {\n            Some(lst.apply(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x == smallest)\n        if (index == 0) None\n        else Some(lst.apply(index\
    \ + 1))", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst(index + 1))\n     \
    \   } else {\n            None\n        }"]
stop_tokens:
- "\n    }\n"
