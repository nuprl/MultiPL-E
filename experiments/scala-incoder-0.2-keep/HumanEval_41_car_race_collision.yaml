name: HumanEval_41_car_race_collision
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Imagine a road that's a perfectly straight infinitely long line.\n    //\
  \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
  \    // are driving right to left.   The two sets of cars start out being very far\
  \ from\n    // each other.  All cars move in the same speed.  Two cars are said\
  \ to collide\n    // when a car that's moving left to right hits a car that's moving\
  \ right to left.\n    // However, the cars are infinitely sturdy and strong; as\
  \ a result, they continue moving\n    // in their trajectory as if they did not\
  \ collide.\n    // This function outputs the number of such collisions.\n    def\
  \ carRaceCollision(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
  \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
  \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
  \ == (100l));\n    }\n\n}\n"
completions: ["        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collisions = mutable.Set[Car]()\n        val\
    \ collisionsCount = mutable.Set[Car]()\n        val collisionsCount2 = mutable.Set[Car]()\n\
    \        val collisionsCount3 = mutable.Set[Car]()\n        val collisionsCount4\
    \ = mutable.Set[Car]()\n        val collisionsCount5 = mutable.Set[Car]()\n  \
    \      val collisionsCount6 = mutable.Set[Car]()\n        val collisionsCount7\
    \ = mutable.Set[Car]()\n        val collisionsCount8 = mutable.Set[Car]()\n  \
    \      val collisionsCount9 = mutable.Set[Car]()\n        val collisionsCount10\
    \ = mutable.Set[Car]()\n        val collisionsCount11 = mutable.Set[Car]()\n \
    \       val collisionsCount12 = mutable.Set[Car]()\n        val collisionsCount13\
    \ = mutable.Set[Car]()\n        val collisionsCount14 = mutable.Set[Car]()\n \
    \       val collisionsCount15 = mutable.Set[Car]()\n        val collisionsCount16\
    \ = mutable.Set[Car]()\n        val collisionsCount17 = mutable.Set[Car]()\n \
    \       val collisionsCount18 = mutable.Set[Car]()\n        val collisionsCount19\
    \ = mutable.Set[Car]()\n        val collisionsCount20 = mutable.Set[Car]()\n \
    \       val collisionsCount21 = mutable.Set[Car]()\n        val collisionsCount22\
    \ = mutable.Set[Car]()\n        val collisionsCount23 = mutable.Set[Car]()\n \
    \       val collisionsCount24 = mutable.Set[Car]()\n        val collisionsCount25\
    \ = mutable.Set[Car]()\n        val collisionsCount26 = mutable.Set[Car]()\n \
    \       val collisionsCount27 = mutable.Set[Car]()\n        val collisionsCount28\
    \ = mutable.Set[Car]()\n        val collisionsCount29 = mutable.Set[Car]()\n \
    \       val collisionsCount30 = mutable.Set[Car]()\n        val collisionsCount31\
    \ = mutable.Set[Car]()\n        val collisionsCount32 = mutable.Set[Car]()\n \
    \       val collisionsCount", "        val cars = mutable.ListBuffer(1 to n).map(i\
    \ => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long", "        val collisions = mutable.Set[Long]()\n\
    \        val cars = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val ", "        val cars\
    \ = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n   \
    \     val collided = mutable.Set[Car]()\n        val collisions = mutable.Set[Car]()\n\
    \        val collisionsCount = mutable.Set[Car]()\n        val collisionsCount2\
    \ = mutable.Set[Car]()\n        val collisionsCount3 = mutable.Set[Car]()\n  \
    \      val collisionsCount4 = mutable.Set[Car]()\n        val collisionsCount5\
    \ = mutable.Set[Car]()\n        val collisionsCount6 = mutable.Set[Car]()\n  \
    \      val collisionsCount7 = mutable.Set[Car]()\n        val collisionsCount8\
    \ = mutable.Set[Car]()\n        val collisionsCount9 = mutable.Set[Car]()\n  \
    \      val collisionsCount10 = mutable.Set[Car]()\n        val collisionsCount11\
    \ = mutable.Set[Car]()\n        val collisionsCount12 = mutable.Set[Car]()\n \
    \       val collisionsCount13 = mutable.Set[Car]()\n        val collisionsCount14\
    \ = mutable.Set[Car]()\n        val collisionsCount15 = mutable.Set[Car]()\n \
    \       val collisionsCount16 = mutable.Set[Car]()\n        val collisionsCount17\
    \ = mutable.Set[Car]()\n        val collisionsCount18 = mutable.Set[Car]()\n \
    \       val collisionsCount19 = mutable.Set[Car]()\n        val collisionsCount20\
    \ = mutable.Set[Car]()\n        val collisionsCount21 = mutable.Set[Car]()\n \
    \       val collisionsCount22 = mutable.Set[Car]()\n        val collisionsCount23\
    \ = mutable.Set[Car]()\n        val collisionsCount24 = mutable.Set[Car]()\n \
    \       val collisionsCount25 = mutable.Set[Car]()\n        val collisionsCount26\
    \ = mutable.Set[Car]()\n        val collisionsCount27 = mutable.Set[Car]()\n \
    \       val collisionsCount28 = mutable.Set[Car]()\n        val collisionsCount29\
    \ = mutable.Set[Car]()\n        val collisionsCount30 = mutable.Set[Car]()\n \
    \       val collisionsCount31 = mutable.Set[Car]()\n        val collisionsCount32\
    \ = mut", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speeds = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBefore\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsAfter = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsBeforeAfter = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfter =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val ", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(",
  "        var collisions = 0\n        var currentCar = 0\n        var previousCar\
    \ = 0\n        var currentSpeed = 0\n        var previousSpeed = 0\n        var\
    \ currentCollision = 0\n        var previousCollision = 0\n        var currentCollisionCount\
    \ = 0\n        var previousCollisionCount = 0\n        var currentCollisionCount2\
    \ = 0\n        var previousCollisionCount2 = 0\n        var currentCollisionCount3\
    \ = 0\n        var previousCollisionCount3 = 0\n        var currentCollisionCount4\
    \ = 0\n        var previousCollisionCount4 = 0\n        var currentCollisionCount5\
    \ = 0\n        var previousCollisionCount5 = 0\n        var currentCollisionCount6\
    \ = 0\n        var previousCollisionCount6 = 0\n        var currentCollisionCount7\
    \ = 0\n        var previousCollisionCount7 = 0\n        var currentCollisionCount8\
    \ = 0\n        var previousCollisionCount8 = 0\n        var currentCollisionCount9\
    \ = 0\n        var previousCollisionCount9 = 0\n        var currentCollisionCount10\
    \ = 0\n        var previousCollisionCount10 = 0\n        var currentCollisionCount11\
    \ = 0\n        var previousCollisionCount11 = 0\n        var currentCollisionCount12\
    \ = 0\n        var previousCollisionCount12 = 0\n        var currentCollisionCount13\
    \ = 0\n        var previousCollisionCount13 = 0\n        var currentCollisionCount14\
    \ = 0\n        var previousCollisionCount14 = 0\n        var currentCollisionCount15\
    \ = 0\n        var previousCollisionCount15 = 0\n        var currentCollisionCount16\
    \ = 0\n        var previousCollisionCount16 = 0\n        var currentCollisionCount17\
    \ = 0\n        var previousCollisionCount17 = 0\n        var currentCollisionCount18\
    \ = 0\n        var previousCollisionCount18 = 0\n        var currentCollisionCount19\
    \ = 0\n        var previousCollisionCount19 = 0\n        var currentCollisionCount20\
    \ = 0\n        var previousCollisionCount20 = 0\n        var currentCollisionCount21\
    \ = 0\n        var previousCollisionCount21 = 0\n        var currentCollisionCount22\
    \ = 0\n        var previousCollisionCount22 = 0\n        var currentCollisionCount23\
    \ = 0\n        var previousCollisionCount23 = 0\n        var currentCollisionCount24\
    \ = 0\n        var previousCollisionCount24 = 0\n        var currentCollisionCount25\
    \ = 0\n        var previousCollisionCount25 = 0\n        var currentCollisionCount26\
    \ = 0\n        var previousCollisionCount26 = 0\n        var currentCollisionCount27\
    \ = 0\n        var previousCollisionCount27 = 0\n        var currentCollisionCount28\
    \ = 0\n        var previousCollisionCount28 = 0\n        var currentCollisionCount29\
    \ = 0\n        var previousCollisionCount29 = 0\n        var currentCollisionCount30\
    \ = 0\n        var previousCollisionCount30 = 0\n        var currentCollisionCount31\
    \ = 0\n        var previousCollisionCount31 = 0\n        var currentCollisionCount32\
    \ = 0\n        var previousCollisionCount32 = 0\n        var currentCollisionCount33\
    \ = 0\n        var previousCollisionCount33 = 0\n        var currentCollisionCount34\
    \ = 0\n        var previousCollisionCount34 = 0\n        var currentCollisionCount",
  "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n  \
    \      val collisions = mutable.Set[Long]()\n        val collisionsCount = 0\n\
    \        val collisionsCountPerCar = mutable.Set[Long]()\n        val collisionsCountPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCar = mutable.Set[Long]()\n\
    \        val collisionsCountPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n \
    \       val collisionsCountPerCarPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n\
    \        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n\
    \        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n\
    \        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar =\
    \ mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar",
  "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        val carsLeft\
    \ = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val\
    \ carsCollisions = carsLeft.zip(carsRight).filter(_._1.x == _._1.x).filter(_._1.y\
    \ == _._1.y).filter(_._1.z == _._1.z).filter(_._1.x == _._2.x).filter(_._1.y ==\
    \ _._2.y).filter(_._1.z == _._2.z).filter(_._2.x == _._1.x).filter(_._2.y == _._1.y).filter(_._2.z\
    \ == _._1.z).filter(_._2.x == _._2.x).filter(_._2.y == _._2.y).filter(_._2.z ==\
    \ _._2.z).length\n        collisions += carsCollisions\n        collisions.sum",
  "        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.",
  "        val cars = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsLeft\
    \ = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsRight = Array.fill(n\
    \ / 2)(mutable.Stack.empty[Int])\n        val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n\
    \        val carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n       \
    \ val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsRight\
    \ = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsLeft = Array.fill(n\
    \ / 2)(mutable.Stack.empty[Int])\n        val carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n\
    \        val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val\
    \ carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsLeft\
    \ = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsRight = Array.fill(n\
    \ / 2)(mutable.Stack.empty[Int])\n        val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n\
    \        val carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n       \
    \ val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsRight\
    \ = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsLeft = Array.fill(n\
    \ / 2)(mutable.Stack.empty[Int])\n        val carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n\
    \        val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val\
    \ carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsLeft\
    \ = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsRight = Array.fill(n\
    \ / 2)(mutable.Stack.empty[Int])\n        val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n\
    \        val carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        ",
  "        val cars = mutable.ListBuffer[Long]()\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.",
  "        val collisions = mutable.Set[Long]()\n        val cars = mutable.Set[Long]()\n\
    \        val speed = mutable.Set[Double]()\n        val speeds = mutable.Set[Double]()\n\
    \        val speedLimit = mutable.Set[Double]()\n        val speedLimits = mutable.Set[Double]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mut", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collisions = mutable.Set[Car]()\n        val\
    \ collisionCount = 0\n        val collisionsSoFar = mutable.Set[Car]()\n     \
    \   val collisionsSoFarCount = 0\n        val carsMovingLeft = cars.filter(_.getDirection.x\
    \ < 0).map(_.getSpeed)\n        val carsMovingRight = cars.filter(_.getDirection.x\
    \ > 0).map(_.getSpeed)\n        carsMovingLeft.foreach(speed => collisions +=\
    \ cars.find(_.getSpeed == speed))\n        carsMovingRight.foreach(speed => collisions\
    \ += cars.find(_.getSpeed == speed))\n        collisions.foreach(c => {\n    \
    \        collisionCount += 1\n            collisionsSoFar += c\n            collisionsSoFarCount\
    \ += 1\n        })\n        collisionCount - collisionsSoFarCount", "        val\
    \ cars = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisions\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speed\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n",
  "        val cars = Vector.tabulate(n)(i => i)\n        val carsLeft = cars.tail\n\
    \        val carsRight = cars.init\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n", "        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.filter(_ < n)\n\
    \        val carsRight = cars.filter(_ >= n)\n        val collisions = carsLeft.filter(_\
    \ => carsRight.contains(_)).size\n        collisions", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.",
  "        val cars = Vector.tabulate(n)(i => Car(Vector.random(2), Vector.random(2),\
    \ Vector.random(2)))\n        val collided = cars.foldLeft(0)((acc, car) => acc\
    \ + (car.collide(cars)))\n        collided", "        val cars = mutable.ListBuffer(1\
    \ to n).map(i => new Car(i))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar", "     \
    \   val cars = Vector.tabulate(n)(i => Car(Vector.random(10), Vector.random(10),\
    \ Vector.random(10)))\n        val carsLeft = cars.takeRight(n)\n        val carsRight\
    \ = cars.dropRight(n)\n        val collisions = carsLeft.foldLeft(0)(_ + carsRight.foldLeft(0)(_\
    \ + collision))\n        collisions", "        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n   \
    \     val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n      \
    \  val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n       \
    \ val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n",
  "        val cars = Vector.tabulate(n)(i => Car(Vector.random(2), Vector.random(2)))\n\
    \        val collided = mutable.Set.empty[Car]\n        val collisions = mutable.Set.empty[Car]\n\
    \        val collisionsCount = mutable.Set.empty[Car]\n        val collisionsCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCount = mutable.Set.empty[Car]\n\
    \        val collisionsCountCountCountCount = mutable.Set.empty[Car]\n       \
    \ val collisionsCountCountCountCountCount = mutable.Set.empty[Car]\n        val\
    \ collisionsCountCountCountCountCountCount = mutable.Set.empty[Car]\n        val\
    \ collisionsCountCountCountCountCountCountCount = mutable.Set.empty[Car]\n   \
    \     val collisionsCountCountCountCountCountCountCountCount = mutable.Set.empty[Car]\n\
    \        val collisionsCountCountCountCountCountCountCountCountCount = mutable.Set.empty[Car]\n\
    \        val collisionsCountCountCountCountCountCountCountCountCountCount = mutable.Set.empty[Car]\n\
    \        val collisionsCountCountCountCountCountCountCountCountCountCount = mutable.Set.empty[Car]\n\
    \        val collisionsCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCountCountCountCountCountCountCountCountCountCountCount",
  "        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.", "        val cars = mutable.ListBuffer[Int]()\n\
    \        val collisions = mutable.ListBuffer[Int]()\n        val collisionsCount\
    \ = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.List",
  "        val cars = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[Car])\n      \
    \  val collisions = mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsLeft =\
    \ mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n       \
    \ val carsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n      \
    \  val carsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsRight =\
    \ mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n      \
    \  val carsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsRight =\
    \ mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n      \
    \  val carsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsRight =\
    \ mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n      \
    \  val carsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsRight =\
    \ mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n      \
    \  val carsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsRight =\
    \ mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n      \
    \  val carsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsRight =\
    \ mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n      \
    \  val carsLeft = mutable.ArrayBuffer.fill(n / 2)", "        val cars = mutable.ListBuffer[Int]()\n\
    \        val collisions = mutable.ListBuffer[Int]()\n        val speed = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Int]()\n        val speedLimit = mutable.ListBuffer[Int]()\n\
    \        val speedLimits = mutable.ListBuffer[Int]()\n        val speedLimit2\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit2s = mutable.ListBuffer[Int]()\n\
    \        val speedLimit3 = mutable.ListBuffer[Int]()\n        val speedLimit3s\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit4 = mutable.ListBuffer[Int]()\n\
    \        val speedLimit4s = mutable.ListBuffer[Int]()\n        val speedLimit5\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit5s = mutable.ListBuffer[Int]()\n\
    \        val speedLimit6 = mutable.ListBuffer[Int]()\n        val speedLimit6s\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit7 = mutable.ListBuffer[Int]()\n\
    \        val speedLimit7s = mutable.ListBuffer[Int]()\n        val speedLimit8\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit8s = mutable.ListBuffer[Int]()\n\
    \        val speedLimit9 = mutable.ListBuffer[Int]()\n        val speedLimit9s\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit10 = mutable.ListBuffer[Int]()\n\
    \        val speedLimit10s = mutable.ListBuffer[Int]()\n        val speedLimit11\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit11s = mutable.ListBuffer[Int]()\n\
    \        val speedLimit12 = mutable.ListBuffer[Int]()\n        val speedLimit12s\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit13 = mutable.ListBuffer[Int]()\n\
    \        val speedLimit13s = mutable.ListBuffer[Int]()\n        val speedLimit14\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit14s = mutable.ListBuffer[Int]()\n\
    \        val speedLimit15 = mutable.ListBuffer[Int]()\n        val speedLimit15s\
    \ = mutable.ListBuffer[Int]()\n        val speedLimit16 = mutable.ListBuffer[Int]()\n\
    \        val speedLimit16s = mutable.", "        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.ListBuffer.empty[Long]\n\
    \        val collide = mutable.ListBuffer.empty[Long]\n        val collisions\
    \ = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCount = mutable.ListBuffer.empty[Long]\n\
    \        ", "        val cars = Array.fill(2*n)(0)\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val speed = mutable.ListBuffer.empty[Double]\n        val speeds = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit = mutable.ListBuffer.empty[Double]\n        val speedLimits\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit2 = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit2s = mutable.ListBuffer.empty[Double]\n        val speedLimit3\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit3s = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit4 = mutable.ListBuffer.empty[Double]\n        val speedLimit4s\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit5 = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit5s = mutable.ListBuffer.empty[Double]\n        val speedLimit6\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit6s = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit7 = mutable.ListBuffer.empty[Double]\n        val speedLimit7s\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit8 = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit8s = mutable.ListBuffer.empty[Double]\n        val speedLimit9\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit9s = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit10 = mutable.ListBuffer.empty[Double]\n        val speedLimit10s\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit11 = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit11s = mutable.ListBuffer.empty[Double]\n        val speedLimit12\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit12s = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit13 = mutable.ListBuffer.empty[Double]\n        val speedLimit13s\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit14 = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit14s = mutable.ListBuffer.empty[Double]\n        val speedLimit15\
    \ = mutable.ListBuffer.empty[Double]\n        val speedLimit15s = mutable.ListBuffer.empty[Double]\n\
    \        val speedLimit16 = mutable.ListBuffer.empty[Double]\n        val speedLimit16s\
    \ = mutable.ListBuffer.", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n        val\
    \ collisionsLeft = mutable.ListBuffer[Long]()\n        val collisionsRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBoth = mutable.ListBuffer[Long]()\n        val collisionsBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBoth = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothLeft = mutable.ListBuffer[Long]()\n   \
    \     val collisionsBothBothBothBothRight = mutable.ListBuffer[Long]()\n     \
    \   val collisionsBothBothBothBothBoth = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n      \
    \  val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothBothRight = mut", "       \
    \ val cars = mutable.ListBuffer[Car]()\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val speedLimit = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]",
  "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBoth = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothBothLeft = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothRight\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothLeft = mutable.ListBuffer.empty[Long]\n   \
    \     val collisionsBothBothBothRight = mutable.ListBuffer.empty[Long]\n     \
    \   val collisionsBothBothBothBoth = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n      \
    \  val collisionsBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBothRight = mutable.ListBuffer.empty",
  "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n  \
    \      val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collisionsLeft\
    \ = carsLeft.foldLeft(0)((acc, car) => acc + (car.zip(collisions).forall(x =>\
    \ x._1 == x._2))).sum\n        val collisionsRight = carsRight.foldLeft(0)((acc,\
    \ car) => acc + (car.zip(collisions).forall(x => x._1 == x._2))).sum\n       \
    \ collisions ++ collisionsLeft ++ collisionsRight", "        val cars = mutable.ArrayBuffer(1\
    \ to n).map(i => new Car(math.random))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = mutable.ArrayBuffer.empty[Long]\n\
    \        carsLeft.foreach(c => carsRight.foreach(otherCar => {\n            if\
    \ (c.collidesWith(otherCar)) {\n                collisions += otherCar.index\n\
    \            }\n        }))\n        collisions.sum", "        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]", "        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => new Car(i, j)))\n       \
    \ val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n   \
    \     val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount", "        val cars =\
    \ mutable.ListBuffer(1 to n).map(i => new Car(i))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar", "     \
    \   val cars = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisions\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speed\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n",
  "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collisionsSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val\
    \ collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n", '        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j
    => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n
    => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r
    => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v
    => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z
    => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d
    => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h
    => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l
    => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p
    => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t
    => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x
    => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b
    => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f
    => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j
    => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul', "        val\
    \ cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val\
    \ collisions = mutable.Set[Long]()\n        val collisionsCount = mutable.Set[Long]()\n\
    \        val collisionsCount2 = mutable.Set[Long]()\n        val collisionsCount3\
    \ = mutable.Set[Long]()\n        val collisionsCount4 = mutable.Set[Long]()\n\
    \        val collisionsCount5 = mutable.Set[Long]()\n        val collisionsCount6\
    \ = mutable.Set[Long]()\n        val collisionsCount7 = mutable.Set[Long]()\n\
    \        val collisionsCount8 = mutable.Set[Long]()\n        val collisionsCount9\
    \ = mutable.Set[Long]()\n        val collisionsCount10 = mutable.Set[Long]()\n\
    \        val collisionsCount11 = mutable.Set[Long]()\n        val collisionsCount12\
    \ = mutable.Set[Long]()\n        val collisionsCount13 = mutable.Set[Long]()\n\
    \        val collisionsCount14 = mutable.Set[Long]()\n        val collisionsCount15\
    \ = mutable.Set[Long]()\n        val collisionsCount16 = mutable.Set[Long]()\n\
    \        val collisionsCount17 = mutable.Set[Long]()\n        val collisionsCount18\
    \ = mutable.Set[Long]()\n        val collisionsCount19 = mutable.Set[Long]()\n\
    \        val collisionsCount20 = mutable.Set[Long]()\n        val collisionsCount21\
    \ = mutable.Set[Long]()\n        val collisionsCount22 = mutable.Set[Long]()\n\
    \        val collisionsCount23 = mutable.Set[Long]()\n        val collisionsCount24\
    \ = mutable.Set[Long]()\n        val collisionsCount25 = mutable.Set[Long]()\n\
    \        val collisionsCount26 = mutable.Set[Long]()\n        val collisionsCount27\
    \ = mutable.Set[Long]()\n        val collisionsCount28 = mutable.Set[Long]()\n\
    \        val collisionsCount29 = mutable.Set[Long]()\n        val collisionsCount30\
    \ = mutable.Set[Long]()\n        val collisionsCount31 = mutable.Set[Long]()\n\
    \        val collisionsCount32 = mutable.Set[Long]()\n        val collisionsCount33\
    \ = ", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.Set.empty[Car]\n        val collisionsCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCount2 = mutable.Set.empty[Car]\n\
    \        val collisionsCount3 = mutable.Set.empty[Car]\n        val collisionsCount4\
    \ = mutable.Set.empty[Car]\n        val collisionsCount5 = mutable.Set.empty[Car]\n\
    \        val collisionsCount6 = mutable.Set.empty[Car]\n        val collisionsCount7\
    \ = mutable.Set.empty[Car]\n        val collisionsCount8 = mutable.Set.empty[Car]\n\
    \        val collisionsCount9 = mutable.Set.empty[Car]\n        val collisionsCount10\
    \ = mutable.Set.empty[Car]\n        val collisionsCount11 = mutable.Set.empty[Car]\n\
    \        val collisionsCount12 = mutable.Set.empty[Car]\n        val collisionsCount13\
    \ = mutable.Set.empty[Car]\n        val collisionsCount14 = mutable.Set.empty[Car]\n\
    \        val collisionsCount15 = mutable.Set.empty[Car]\n        val collisionsCount16\
    \ = mutable.Set.empty[Car]\n        val collisionsCount17 = mutable.Set.empty[Car]\n\
    \        val collisionsCount18 = mutable.Set.empty[Car]\n        val collisionsCount19\
    \ = mutable.Set.empty[Car]\n        val collisionsCount20 = mutable.Set.empty[Car]\n\
    \        val collisionsCount21 = mutable.Set.empty[Car]\n        val collisionsCount22\
    \ = mutable.Set.empty[Car]\n        val collisionsCount23 = mutable.Set.empty[Car]\n\
    \        val collisionsCount24 = mutable.Set.empty[Car]\n        val collisionsCount25\
    \ = mutable.Set.empty[Car]\n        val collisionsCount26 = mutable.Set.empty[Car]\n\
    \        val collisionsCount27 = mutable.Set.empty[Car]\n        val collisionsCount28\
    \ = mutable.Set.empty[Car]\n        val collisionsCount29 = mutable.Set.empty[Car]\n\
    \        val collisionsCount30 = mutable.Set.empty[Car]\n        val collisionsCount31\
    \ = mutable.Set.empty[Car]\n        val collisionsCount32 = mutable.Set.empty[Car]\n\
    \        val collisionsCount", '        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j
    => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n
    => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r
    => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v
    => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z
    => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d
    => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h
    => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l
    => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p
    => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t
    => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x
    => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b
    => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f
    => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j
    => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul', "        val\
    \ cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n    \
    \    val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val carsLeft = cars.takeRight(n)\n        val carsRight\
    \ = cars.dropRight(n)\n        val collisions = mutable.Set[Long]()\n        val\
    \ collisionsLeft = carsLeft.foldLeft(0)((acc, car) => acc + (car.zip(collisions).filter(_._1).length))\n\
    \        val collisionsRight = carsRight.foldLeft(0)((acc, car) => acc + (car.zip(collisions).filter(_._1).length))\n\
    \        collisions += collisionsLeft + collisionsRight\n        collisions.toList.sum",
  '        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k
    => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o
    => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s
    => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w
    => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a
    => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e
    => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i
    => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m
    => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q
    => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u
    => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y
    => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c
    => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g
    => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k
    => Vector.tabulate(n)(l => Vector.tabul', "        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.zip(carsRight).count(x\
    \ => x._1 == x._2)\n        collisions", "        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val left = mutable.ListBuffer[Long]()\n        val right = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n", "        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val collisions = carsLeft.zip(carsRight).filter(_._1 == _._2).length\n\
    \        collisions", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collisions = mutable.Set[Car]()\n        val\
    \ collisionsCount = mutable.Set[Car]()\n        val collisionsCount2 = mutable.Set[Car]()\n\
    \        val collisionsCount3 = mutable.Set[Car]()\n        val collisionsCount4\
    \ = mutable.Set[Car]()\n        val collisionsCount5 = mutable.Set[Car]()\n  \
    \      val collisionsCount6 = mutable.Set[Car]()\n        val collisionsCount7\
    \ = mutable.Set[Car]()\n        val collisionsCount8 = mutable.Set[Car]()\n  \
    \      val collisionsCount9 = mutable.Set[Car]()\n        val collisionsCount10\
    \ = mutable.Set[Car]()\n        val collisionsCount11 = mutable.Set[Car]()\n \
    \       val collisionsCount12 = mutable.Set[Car]()\n        val collisionsCount13\
    \ = mutable.Set[Car]()\n        val collisionsCount14 = mutable.Set[Car]()\n \
    \       val collisionsCount15 = mutable.Set[Car]()\n        val collisionsCount16\
    \ = mutable.Set[Car]()\n        val collisionsCount17 = mutable.Set[Car]()\n \
    \       val collisionsCount18 = mutable.Set[Car]()\n        val collisionsCount19\
    \ = mutable.Set[Car]()\n        val collisionsCount20 = mutable.Set[Car]()\n \
    \       val collisionsCount21 = mutable.Set[Car]()\n        val collisionsCount22\
    \ = mutable.Set[Car]()\n        val collisionsCount23 = mutable.Set[Car]()\n \
    \       val collisionsCount24 = mutable.Set[Car]()\n        val collisionsCount25\
    \ = mutable.Set[Car]()\n        val collisionsCount26 = mutable.Set[Car]()\n \
    \       val collisionsCount27 = mutable.Set[Car]()\n        val collisionsCount28\
    \ = mutable.Set[Car]()\n        val collisionsCount29 = mutable.Set[Car]()\n \
    \       val collisionsCount30 = mutable.Set[Car]()\n        val collisionsCount31\
    \ = mutable.Set[Car]()\n        val collisionsCount32 = mutable.Set[Car]()\n \
    \       val collisionsCount", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(10),\
    \ Vector.random(10)))\n        val collides = mutable.Set.empty[Car]\n       \
    \ val collideCars = mutable.Set.empty[Car]\n        val collideCarsCount = mutable.Set.empty[Car]\n\
    \        val collideCarsCount2 = mutable.Set.empty[Car]\n        val collideCarsCount3\
    \ = mutable.Set.empty[Car]\n        val collideCarsCount4 = mutable.Set.empty[Car]\n\
    \        val collideCarsCount5 = mutable.Set.empty[Car]\n        val collideCarsCount6\
    \ = mutable.Set.empty[Car]\n        val collideCarsCount7 = mutable.Set.empty[Car]\n\
    \        val collideCarsCount8 = mutable.Set.empty[Car]\n        val collideCarsCount9\
    \ = mutable.Set.empty[Car]\n        val collideCarsCount10 = mutable.Set.empty[Car]\n\
    \        val collideCarsCount11 = mutable.Set.empty[Car]\n        val collideCarsCount12\
    \ = mutable.Set.empty[Car]\n        val collideCarsCount13 = mutable.Set.empty[Car]\n\
    \        val collideCarsCount14 = mutable.Set.empty[Car]\n        val collideCarsCount15\
    \ = mutable.Set.empty[Car]\n        val collideCarsCount16 = mutable.Set.empty[Car]\n\
    \        val collideCarsCount17 = mutable.Set.empty[Car]\n        val collideCarsCount18\
    \ = mutable.Set.empty[Car]\n        val collideCarsCount19 = mutable.Set.empty[Car]\n\
    \        val collideCarsCount20 = mutable.Set.empty[Car]\n        val collideCarsCount21\
    \ = mutable.Set.empty[Car]\n        val collideCarsCount22 = mutable.Set.empty[Car]\n\
    \        val collideCarsCount23 = mutable.Set.empty[Car]\n        val collideCarsCount24\
    \ = mutable.Set.empty[Car]\n        val collideCarsCount25 = mutable.Set.empty[Car]\n\
    \        val collideCarsCount26 = mutable.Set.empty[Car]\n        val collideCarsCount27\
    \ = mutable.Set.empty[Car]\n        val collideCarsCount28 = mutable.Set.", " \
    \       val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount2 = mutable.Set.empty[Long]\n\
    \        val collisionsCount3 = mutable.Set.empty[Long]\n        val collisionsCount4\
    \ = mutable.Set.empty[Long]\n        val collisionsCount5 = mutable.Set.empty[Long]\n\
    \        val collisionsCount6 = mutable.Set.empty[Long]\n        val collisionsCount7\
    \ = mutable.Set.empty[Long]\n        val collisionsCount8 = mutable.Set.empty[Long]\n\
    \        val collisionsCount9 = mutable.Set.empty[Long]\n        val collisionsCount10\
    \ = mutable.Set.empty[Long]\n        val collisionsCount11 = mutable.Set.empty[Long]\n\
    \        val collisionsCount12 = mutable.Set.empty[Long]\n        val collisionsCount13\
    \ = mutable.Set.empty[Long]\n        val collisionsCount14 = mutable.Set.empty[Long]\n\
    \        val collisionsCount15 = mutable.Set.empty[Long]\n        val collisionsCount16\
    \ = mutable.Set.empty[Long]\n        val collisionsCount17 = mutable.Set.empty[Long]\n\
    \        val collisionsCount18 = mutable.Set.empty[Long]\n        val collisionsCount19\
    \ = mutable.Set.empty[Long]\n        val collisionsCount20 = mutable.Set.empty[Long]\n\
    \        val collisionsCount21 = mutable.Set.empty[Long]\n        val collisionsCount22\
    \ = mutable.Set.empty[Long]\n        val collisionsCount23 = mutable.Set.empty[Long]\n\
    \        val collisionsCount24 = mutable.Set.empty[Long]\n        val collisionsCount25\
    \ = mutable.Set.empty[Long]\n        val collisionsCount26 = mutable.Set.empty[Long]\n\
    \        val collisionsCount27 = mutable.Set.empty[Long]\n        val collisionsCount28\
    \ = mutable.Set.empty[Long]\n        val collisionsCount29 = mutable.Set.empty[Long]\n\
    \        val collisionsCount30 = mutable.Set.empty[Long]\n        val collisionsCount31\
    \ = mutable.Set.empty[Long]\n        val collisionsCount32 = mutable.Set.empty[Long]\n\
    \        val collisionsCount", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        carsLeft.foreach(c => collisions += carsRight.count(_.collidesWith(c)))\n\
    \        collisions.sum", "        val cars = mutable.ListBuffer(1 to n).map(i\
    \ => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        cars.foreach { cars =>\n            cars.foreach { car =>\n         \
    \       cars.foreach { car =>\n                    if (car.head == car.last) collisions\
    \ += car.last\n                }\n            }\n        }\n        collisions.sum",
  "        var collisions = 0\n        var currentCar = 0\n        var previousCar\
    \ = 0\n        var currentDistance = 0\n        var previousDistance = 0\n   \
    \     var currentSpeed = 0\n        var previousSpeed = 0\n        var currentDirection\
    \ = 0\n        var previousDirection = 0\n        var currentCollision = 0\n \
    \       var previousCollision = 0\n        var currentCollisionCount = 0\n   \
    \     var previousCollisionCount = 0\n        var currentCollisionCount2 = 0\n\
    \        var previousCollisionCount2 = 0\n        var currentCollisionCount3 =\
    \ 0\n        var previousCollisionCount3 = 0\n        var currentCollisionCount4\
    \ = 0\n        var previousCollisionCount4 = 0\n        var currentCollisionCount5\
    \ = 0\n        var previousCollisionCount5 = 0\n        var currentCollisionCount6\
    \ = 0\n        var previousCollisionCount6 = 0\n        var currentCollisionCount7\
    \ = 0\n        var previousCollisionCount7 = 0\n        var currentCollisionCount8\
    \ = 0\n        var previousCollisionCount8 = 0\n        var currentCollisionCount9\
    \ = 0\n        var previousCollisionCount9 = 0\n        var currentCollisionCount10\
    \ = 0\n        var previousCollisionCount10 = 0\n        var currentCollisionCount11\
    \ = 0\n        var previousCollisionCount11 = 0\n        var currentCollisionCount12\
    \ = 0\n        var previousCollisionCount12 = 0\n        var currentCollisionCount13\
    \ = 0\n        var previousCollisionCount13 = 0\n        var currentCollisionCount14\
    \ = 0\n        var previousCollisionCount14 = 0\n        var currentCollisionCount15\
    \ = 0\n        var previousCollisionCount15 = 0\n        var currentCollisionCount16\
    \ = 0\n        var previousCollisionCount16 = 0\n        var currentCollisionCount17\
    \ = 0\n        var previousCollisionCount17 = 0\n        var currentCollisionCount18\
    \ = 0\n        var previousCollisionCount18 = 0\n        var currentCollisionCount19\
    \ = 0\n        var previousCollisionCount19 = 0\n        var currentCollisionCount20\
    \ = 0\n        var previousCollisionCount20 = 0\n        var currentCollisionCount21\
    \ = 0\n        var previousCollisionCount21 = 0\n        var currentCollisionCount22\
    \ = 0\n        var previousCollisionCount22 = 0\n        var currentCollisionCount23\
    \ = 0\n        var previousCollisionCount23 = 0\n        var currentCollisionCount24\
    \ = 0\n        var previousCollisionCount24 = 0\n        var currentCollisionCount25\
    \ = 0\n        var previousCollisionCount25 = 0\n        var currentCollisionCount26\
    \ = 0\n        var previousCollisionCount26 = 0\n        var currentCollisionCount27\
    \ = 0\n        var previousCollisionCount27 = 0\n        var currentCollisionCount28\
    \ = 0\n        var previousCollisionCount28 = 0\n        var currentCollisionCount29\
    \ = 0\n        var previousCollisionCount29 = 0\n        var currentCollisionCount30\
    \ = 0\n        var previousCollisionCount30 = 0\n        var currentCollisionCount31\
    \ = 0\n        var previousCollisionCount31 = 0\n        var currentCollisionCount32\
    \ = 0\n        var previousCollisionCount32 = 0\n        var currentCollisionCount33\
    \ = 0\n        var previousCollisionCount33", "        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n      \
    \  val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n       \
    \ val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n",
  "        val cars = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1 to\
    \ n).map(j => i + j))\n        val collisions = mutable.ArrayBuffer(0)\n     \
    \   val carsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1\
    \ to n).map(j => i + j))\n        val carsRight = mutable.ArrayBuffer(1 to n).map(i\
    \ => mutable.ArrayBuffer(1 to n).map(j => i + j))\n        val carsLeft = carsLeft.zip(carsRight).map(x\
    \ => x._1 zip x._2).filter(x => x._1 == x._2).map(x => x._2).map(x => x._1).map(x\
    \ => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x =>\
    \ x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x\
    \ => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x =>\
    \ x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x\
    \ => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x =>\
    \ x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x\
    \ => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x =>\
    \ x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x\
    \ => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x =>\
    \ x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x\
    \ => x._1).map(x => x._2).map(x => x._1).map(x => x._2).map(x => x._1).map(x =>\
    \ x._2).map(x => ", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n     \
    \   val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val leftToRight = mutable.ArrayBuffer.fill(n)(0)\n        val rightToLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val leftToRightCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val rightToLeftCount = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val leftToRightCountCount = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ rightToLeftCountCount = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCountCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val leftToRightCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n   \
    \     val rightToLeftCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n      \
    \  val collisionsCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ speedCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n        val leftToRightCountCountCountCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val rightToLeftCountCountCountCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCountCountCountCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val leftToRightCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val rightToLeftCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val leftToRightCountCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val rightToLeftCountCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsCountCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedCountCountCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val leftToRightCountCountCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val rightToLeftCountCountCountCountCountCountCount = mutable.ArrayBuffer.fill(n)(0)",
  "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n  \
    \      val collisions = mutable.Set[Long]()\n        val collisionsCount = mutable.Set[Long]()\n\
    \        val collisionsCount2 = mutable.Set[Long]()\n        val collisionsCount3\
    \ = mutable.Set[Long]()\n        val collisionsCount4 = mutable.Set[Long]()\n\
    \        val collisionsCount5 = mutable.Set[Long]()\n        val collisionsCount6\
    \ = mutable.Set[Long]()\n        val collisionsCount7 = mutable.Set[Long]()\n\
    \        val collisionsCount8 = mutable.Set[Long]()\n        val collisionsCount9\
    \ = mutable.Set[Long]()\n        val collisionsCount10 = mutable.Set[Long]()\n\
    \        val collisionsCount11 = mutable.Set[Long]()\n        val collisionsCount12\
    \ = mutable.Set[Long]()\n        val collisionsCount13 = mutable.Set[Long]()\n\
    \        val collisionsCount14 = mutable.Set[Long]()\n        val collisionsCount15\
    \ = mutable.Set[Long]()\n        val collisionsCount16 = mutable.Set[Long]()\n\
    \        val collisionsCount17 = mutable.Set[Long]()\n        val collisionsCount18\
    \ = mutable.Set[Long]()\n        val collisionsCount19 = mutable.Set[Long]()\n\
    \        val collisionsCount20 = mutable.Set[Long]()\n        val collisionsCount21\
    \ = mutable.Set[Long]()\n        val collisionsCount22 = mutable.Set[Long]()\n\
    \        val collisionsCount23 = mutable.Set[Long]()\n        val collisionsCount24\
    \ = mutable.Set[Long]()\n        val collisionsCount25 = mutable.Set[Long]()\n\
    \        val collisionsCount26 = mutable.Set[Long]()\n        val collisionsCount27\
    \ = mutable.Set[Long]()\n        val collisionsCount28 = mutable.Set[Long]()\n\
    \        val collisionsCount29 = mutable.Set[Long]()\n        val collisionsCount30\
    \ = mutable.Set[Long]()\n        val collisionsCount31 = mutable.Set[Long]()\n\
    \        val collisionsCount32 = mutable.Set[Long]()\n        val collisionsCount33\
    \ = ", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(2), Vector.random(2)))\n\
    \        val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSo",
  "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collided = mutable.Set[Car]()\n        val collisions = mutable.Set[Car]()\n\
    \        val collisionsCount = mutable.Set[Car]()\n        val collisionsCount2\
    \ = mutable.Set[Car]()\n        val collisionsCount3 = mutable.Set[Car]()\n  \
    \      val collisionsCount4 = mutable.Set[Car]()\n        val collisionsCount5\
    \ = mutable.Set[Car]()\n        val collisionsCount6 = mutable.Set[Car]()\n  \
    \      val collisionsCount7 = mutable.Set[Car]()\n        val collisionsCount8\
    \ = mutable.Set[Car]()\n        val collisionsCount9 = mutable.Set[Car]()\n  \
    \      val collisionsCount10 = mutable.Set[Car]()\n        val collisionsCount11\
    \ = mutable.Set[Car]()\n        val collisionsCount12 = mutable.Set[Car]()\n \
    \       val collisionsCount13 = mutable.Set[Car]()\n        val collisionsCount14\
    \ = mutable.Set[Car]()\n        val collisionsCount15 = mutable.Set[Car]()\n \
    \       val collisionsCount16 = mutable.Set[Car]()\n        val collisionsCount17\
    \ = mutable.Set[Car]()\n        val collisionsCount18 = mutable.Set[Car]()\n \
    \       val collisionsCount19 = mutable.Set[Car]()\n        val collisionsCount20\
    \ = mutable.Set[Car]()\n        val collisionsCount21 = mutable.Set[Car]()\n \
    \       val collisionsCount22 = mutable.Set[Car]()\n        val collisionsCount23\
    \ = mutable.Set[Car]()\n        val collisionsCount24 = mutable.Set[Car]()\n \
    \       val collisionsCount25 = mutable.Set[Car]()\n        val collisionsCount26\
    \ = mutable.Set[Car]()\n        val collisionsCount27 = mutable.Set[Car]()\n \
    \       val collisionsCount28 = mutable.Set[Car]()\n        val collisionsCount29\
    \ = mutable.Set[Car]()\n        val collisionsCount30 = mutable.Set[Car]()\n \
    \       val collisionsCount31 = mutable.Set[Car]()\n        val collisionsCount32\
    \ = mut", "        val cars = mutable.ListBuffer[Long]()\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speeds2 = mutable.ListBuffer[Double]()\n\
    \        val speeds3 = mutable.ListBuffer[Double]()\n        val speeds4 = mutable.ListBuffer[Double]()\n\
    \        val speeds5 = mutable.ListBuffer[Double]()\n        val speeds6 = mutable.ListBuffer[Double]()\n\
    \        val speeds7 = mutable.ListBuffer[Double]()\n        val speeds8 = mutable.ListBuffer[Double]()\n\
    \        val speeds9 = mutable.ListBuffer[Double]()\n        val speeds10 = mutable.ListBuffer[Double]()\n\
    \        val speeds11 = mutable.ListBuffer[Double]()\n        val speeds12 = mutable.ListBuffer[Double]()\n\
    \        val speeds13 = mutable.ListBuffer[Double]()\n        val speeds14 = mutable.ListBuffer[Double]()\n\
    \        val speeds15 = mutable.ListBuffer[Double]()\n        val speeds16 = mutable.ListBuffer[Double]()\n\
    \        val speeds17 = mutable.ListBuffer[Double]()\n        val speeds18 = mutable.ListBuffer[Double]()\n\
    \        val speeds19 = mutable.ListBuffer[Double]()\n        val speeds20 = mutable.ListBuffer[Double]()\n\
    \        val speeds21 = mutable.ListBuffer[Double]()\n        val speeds22 = mutable.ListBuffer[Double]()\n\
    \        val speeds23 = mutable.ListBuffer[Double]()\n        val speeds24 = mutable.ListBuffer[Double]()\n\
    \        val speeds25 = mutable.ListBuffer[Double]()\n        val speeds26 = mutable.ListBuffer[Double]()\n\
    \        val speeds27 = mutable.ListBuffer[Double]()\n        val speeds28 = mutable.ListBuffer[Double]()\n\
    \        val speeds29 = mutable.ListBuffer[Double]()\n        val speeds30 = mutable.ListBuffer[Double]()\n\
    \        val speeds31 = mutable.ListBuffer[Double]()\n        val speeds32 = mutable.ListBuffer[Double]()\n\
    \        val speeds33 = mutable.List", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(",
  "        var collisions = 0\n        var currentCar = 0\n        var previousCar\
    \ = 0\n        var currentSpeed = 0\n        var previousSpeed = 0\n        var\
    \ currentDistance = 0\n        var previousDistance = 0\n        var currentDirection\
    \ = 0\n        var previousDirection = 0\n        var currentDistanceToPreviousCar\
    \ = 0\n        var previousDistanceToCurrentCar = 0\n        var currentDistanceToPreviousSpeed\
    \ = 0\n        var previousDistanceToCurrentSpeed = 0\n        var currentDistanceToPreviousDirection\
    \ = 0\n        var previousDistanceToCurrentDirection = 0\n        var currentDistanceToPreviousDistance\
    \ = 0\n        var previousDistanceToCurrentDistance = 0\n        var currentDistanceToPreviousCarDirection\
    \ = 0\n        var previousDistanceToCurrentCarDirection = 0\n        var currentDistanceToPreviousSpeedDirection\
    \ = 0\n        var previousDistanceToCurrentSpeedDirection = 0\n        var currentDistanceToPreviousDirectionDirection\
    \ = 0\n        var previousDistanceToCurrentDirectionDirection = 0\n        var\
    \ currentDistanceToPreviousDistanceDirection = 0\n        var previousDistanceToCurrentDistanceDirection\
    \ = 0\n        var currentDistanceToPreviousCarSpeedDirection = 0\n        var\
    \ previousDistanceToCurrentCarSpeedDirection = 0\n        var currentDistanceToPreviousSpeedSpeedDirection\
    \ = 0\n        var previousDistanceToCurrentSpeedSpeedDirection = 0\n        var\
    \ currentDistanceToPreviousDirectionSpeedDirection = 0\n        var previousDistanceToCurrentDirectionSpeedDirection\
    \ = 0\n        var currentDistanceToPreviousDistanceSpeedDirection = 0\n     \
    \   var previousDistanceToCurrentDistanceSpeedDirection = 0\n        var currentDistanceToPreviousCarSpeedSpeedDirection\
    \ = 0\n        var previousDistanceToCurrentCarSpeedSpeedDirection = 0\n     \
    \   var currentDistanceToPreviousSpeedSpeedSpeedDirection = 0\n        var previousDistanceToCurrentSpeedSpeedSpeedDirection\
    \ = 0\n        var currentDistanceToPreviousDirectionSpeedSpeedDirection = 0\n\
    \        var previousDistanceToCurrentDirectionSpeedSpeedDirection = 0\n     \
    \   var currentDistanceToPreviousDistanceSpeedSpeedDirection = 0\n        var\
    \ previousDistanceToCurrentDistanceSpeedSpeedDirection = 0\n        var currentDistanceToPreviousCarSpeedSpeedSpeedDirection\
    \ = 0\n        var previousDistanceToCurrentCarSpeedSpeedSpeedDirection = 0\n\
    \        var currentDistanceToPreviousSpeedSpeedSpeedDirection = 0\n        var\
    \ previousDistanceToCurrentSpeedSpeedSpeedDirection = 0\n        var currentDistanceToPreviousDirectionSpeedSpeedSpeedDirection\
    \ = 0\n        var previousDistanceToCurrentDirectionSpeedSpeedSpeedDirection\
    \ = 0\n        var currentDistanceToPreviousDistanceSpeedSpeedDirection = 0\n\
    \        var previousDistanceToCurrentDistanceSpeedSpeedDirection = 0\n      \
    \  var currentDistanceToPreviousCarSpeedSpeedSpeedDirection = 0\n        var previousDistanceToCurrentCarSpeedSpeedSpeedDirection\
    \ = 0\n        var currentDistanceToPreviousSpeedSpeedSpeedDirection = 0\n   \
    \     var previousDistanceToCurrentSpeedSpeedSpeedDirection = 0\n        var currentDistanceToPreviousDirectionSpeedSpeedSpeedDirection\
    \ = 0\n        var previousDistanceToCurrentDirectionSpeedSpeedSpeedDirection\
    \ = 0\n        var current", "        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.", "        val cars = Vector.tabulate(n)(i =>\
    \ Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsLeft = mutable.ListBuffer[Long]()\n        val collisionsRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothLeft = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothRight = mutable.ListBuffer[Long]()\n      \
    \  val collisionsBothBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothRight =\
    \ mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothRight = mutable.ListBuffer[",
  "        val cars = Vector.tabulate(n)(i => i)\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSize = n\n        val collisionsSoFar\
    \ = Vector.tabulate(n)(i => i)\n        val collisionsSoFarSize = n\n        val\
    \ collisionsSoFar = Vector.tabulate(n)(i => i)\n        val collisionsSoFarSize\
    \ = n\n        val collisionsSoFar = Vector.tabulate(n)(i => i)\n        val collisionsSoFarSize\
    \ = n\n        val collisionsSoFar = Vector.tabulate(n)(i => i)\n        val collisionsSoFarSize\
    \ = n\n        val collisionsSoFar = Vector.tabulate(n)(i => i)\n        val collisionsSoFarSize\
    \ = n\n        val collisionsSoFar = Vector.tabulate(n)(i => i)\n        val collisionsSoFarSize\
    \ = n\n        val collisionsSoFar = Vector.tabulate(n)(i => i)\n        val collisionsSoFarSize\
    \ = n\n        val collisionsSoFar = Vector.tabulate(n)(i => i)\n        val collisionsSoFarSize\
    \ = n\n        val collisionsSoFar = Vector.tabulate(n)(i => i)\n        val collisionsSoFarSize\
    \ = n\n        val collisionsSoFar = Vector.tabulate(n)(i => i)\n        val collisionsSoFarSize\
    \ = n\n        val collisionsSoFar = Vector.tabulate(n)(i => i)\n        val collisionsSoFarSize\
    \ = n\n        val collisionsSoFar = Vector.tabulate(n)(i => i)\n        val collisionsSoFarSize\
    \ = n\n        val collisionsSoFar = Vector.tabulate(n)(i => i)\n        val collisionsSoFarSize\
    \ = n\n        val collisionsSoFar = Vector.tabulate(n)(i => i)\n        val collisionsSoFarSize\
    \ = n\n        val collisionsSoFar = Vector.tabulate(n)(i => i)\n        val collisionsSoFarSize\
    \ = n\n        val collisionsSoFar = Vector.tabulate(n)(i => i)\n        val collisionsSoFarSize\
    \ = n\n        val collisionsSoFar = Vector.tabulate(n)(", "        val cars =\
    \ Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n     \
    \   val collisions = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount2 = mutable.Set.empty[Long]\n        val collisionsCount3\
    \ = mutable.Set.empty[Long]\n        val collisionsCount4 = mutable.Set.empty[Long]\n\
    \        val collisionsCount5 = mutable.Set.empty[Long]\n        val collisionsCount6\
    \ = mutable.Set.empty[Long]\n        val collisionsCount7 = mutable.Set.empty[Long]\n\
    \        val collisionsCount8 = mutable.Set.empty[Long]\n        val collisionsCount9\
    \ = mutable.Set.empty[Long]\n        val collisionsCount10 = mutable.Set.empty[Long]\n\
    \        val collisionsCount11 = mutable.Set.empty[Long]\n        val collisionsCount12\
    \ = mutable.Set.empty[Long]\n        val collisionsCount13 = mutable.Set.empty[Long]\n\
    \        val collisionsCount14 = mutable.Set.empty[Long]\n        val collisionsCount15\
    \ = mutable.Set.empty[Long]\n        val collisionsCount16 = mutable.Set.empty[Long]\n\
    \        val collisionsCount17 = mutable.Set.empty[Long]\n        val collisionsCount18\
    \ = mutable.Set.empty[Long]\n        val collisionsCount19 = mutable.Set.empty[Long]\n\
    \        val collisionsCount20 = mutable.Set.empty[Long]\n        val collisionsCount21\
    \ = mutable.Set.empty[Long]\n        val collisionsCount22 = mutable.Set.empty[Long]\n\
    \        val collisionsCount23 = mutable.Set.empty[Long]\n        val collisionsCount24\
    \ = mutable.Set.empty[Long]\n        val collisionsCount25 = mutable.Set.empty[Long]\n\
    \        val collisionsCount26 = mutable.Set.empty[Long]\n        val collisionsCount27\
    \ = mutable.Set.empty[Long]\n        val collisionsCount28 = mutable.Set.empty[Long]\n\
    \        val collisionsCount29 = mutable.Set.empty[Long]\n        val collisionsCount30\
    \ = mutable.Set.empty[Long]\n        val collisionsCount31 = mutable.Set.empty[Long]\n\
    \        val collisionsCount32 = mutable.Set.empty[Long]\n        val collisionsCount",
  "        val cars = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1 to\
    \ n).map(j => i + j))\n        val collisions = mutable.ArrayBuffer(0)\n     \
    \   val collisionsLeft = mutable.ArrayBuffer(0)\n        val collisionsRight =\
    \ mutable.ArrayBuffer(0)\n        val collisionsBoth = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothLeft = mutable.ArrayBuffer(0)\n        val collisionsBothRight\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBoth = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothLeft = mutable.ArrayBuffer(0)\n        val collisionsBothBothRight\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBoth = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothLeft = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothRight = mutable.ArrayBuffer(0)\n      \
    \  val collisionsBothBothBothBothBoth = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothLeft\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothRight =\
    \ mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBoth = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n   \
    \     val collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n     \
    \   val collisionsBothBothBothBothBothBoth = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothRight\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBoth = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n   \
    \     val collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n     \
    \   val collisionsBothBothBothBothBothBoth = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothRight\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBoth = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val ", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collides = mutable.ListBuffer.empty[Long]\n\
    \        val collide = mutable.ListBuffer.empty[Long]\n        val collide2 =\
    \ mutable.ListBuffer.empty[Long]\n        val collide3 = mutable.ListBuffer.empty[Long]\n\
    \        val collide4 = mutable.ListBuffer.empty[Long]\n        val collide5 =\
    \ mutable.ListBuffer.empty[Long]\n        val collide6 = mutable.ListBuffer.empty[Long]\n\
    \        val collide7 = mutable.ListBuffer.empty[Long]\n        val collide8 =\
    \ mutable.ListBuffer.empty[Long]\n        val collide9 = mutable.ListBuffer.empty[Long]\n\
    \        val collide10 = mutable.ListBuffer.empty[Long]\n        val collide11\
    \ = mutable.ListBuffer.empty[Long]\n        val collide12 = mutable.ListBuffer.empty[Long]\n\
    \        val collide13 = mutable.ListBuffer.empty[Long]\n        val collide14\
    \ = mutable.ListBuffer.empty[Long]\n        val collide15 = mutable.ListBuffer.empty[Long]\n\
    \        val collide16 = mutable.ListBuffer.empty[Long]\n        val collide17\
    \ = mutable.ListBuffer.empty[Long]\n        val collide18 = mutable.ListBuffer.empty[Long]\n\
    \        val collide19 = mutable.ListBuffer.empty[Long]\n        val collide20\
    \ = mutable.ListBuffer.empty[Long]\n        val collide21 = mutable.ListBuffer.empty[Long]\n\
    \        val collide22 = mutable.ListBuffer.empty[Long]\n        val collide23\
    \ = mutable.ListBuffer.empty[Long]\n        val collide24 = mutable.ListBuffer.empty[Long]\n\
    \        val collide25 = mutable.ListBuffer.empty[Long]\n        val collide26\
    \ = mutable.ListBuffer.empty[Long]\n        val collide27 = mutable.ListBuffer.empty[Long]\n\
    \        val collide28 = mutable.ListBuffer.empty[Long]\n        val collide29\
    \ = mutable.ListBuffer.empty[Long]\n        val collide30 = mutable.ListBuffer.empty[Long]\n\
    \        val collide31 = mutable.ListBuffer.empty[Long]\n        val collide32\
    \ = mutable.ListBuffer.empty[Long]\n        val ", "        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val collisions = mutable.Set[Long]()\n        val collisionsCount\
    \ = 0\n        val collisionsCountPerCar = mutable.Map[Long, Long]()\n       \
    \ val collisionsCountPerCarPerCar = mutable.Map[Long, mutable.Map[Long, Long]]()\n\
    \        val collisionsCountPerCarPerCarPerCar = mutable.Map[Long, mutable.Map[Long,\
    \ mutable.Map[Long, Long]]]()\n        val collisionsCountPerCarPerCarPerCarPerCar\
    \ = mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, Long]]]]()\n\
    \        val collisionsCountPerCarPerCarPerCarPerCarPerCar = mutable.Map[Long,\
    \ mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, Long]]]]]()\n\
    \        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Map[Long,\
    \ mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ Long]]]]]]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ mutable.Map[Long, Long]]]]]]]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ mutable.Map[Long, mutable.Map[Long, Long]]]]]]]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ mutable.Map[Long, mutable.Map[Long, Long]]]]]]]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, Long]]]]]]]]]()\n    \
    \    ", "        val cars = Array.fill(n / 2)(scala.math.random)\n        val\
    \ collisions = mutable.ListBuffer.empty[Long]\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisionsLeft = carsLeft.foldLeft(0)(_\
    \ + carRaceCollision(carsLeft.length))\n        val collisionsRight = carsRight.foldLeft(0)(_\
    \ + carRaceCollision(carsRight.length))\n        collisions += collisionsLeft\
    \ + collisionsRight\n        collisions.sum", "        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.", "        val cars = Vector.tabulate(n)(i =>\
    \ Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount33 = ", "        val cars\
    \ = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[",
  "        val cars = Vector.tabulate(n)(i => i)\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.List",
  "        val collisions = mutable.ListBuffer.empty[Long]\n        val cars = mutable.ListBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ListBuffer.fill(n)(0)\n        val carsRight =\
    \ mutable.ListBuffer.fill(n)(0)\n        val carsLeft = carsLeft.zip(carsRight)\n\
    \        val carsRight = carsRight.zip(carsLeft)\n        val carsLeft = carsLeft.zip(carsRight)\n\
    \        val carsRight = carsRight.zip(carsLeft)\n        val carsLeft = carsLeft.zip(carsRight)\n\
    \        val carsRight = carsRight.zip(carsLeft)\n        val carsLeft = carsLeft.zip(carsRight)\n\
    \        val carsRight = carsRight.zip(carsLeft)\n        val carsLeft = carsLeft.zip(carsRight)\n\
    \        val carsRight = carsRight.zip(carsLeft)\n        val carsLeft = carsLeft.zip(carsRight)\n\
    \        val carsRight = carsRight.zip(carsLeft)\n        val carsLeft = carsLeft.zip(carsRight)\n\
    \        val carsRight = carsRight.zip(carsLeft)\n        val carsLeft = carsLeft.zip(carsRight)\n\
    \        val carsRight = carsRight.zip(carsLeft)\n        val carsLeft = carsLeft.zip(carsRight)\n\
    \        val carsRight = carsRight.zip(carsLeft)\n        val carsLeft = carsLeft.zip(carsRight)\n\
    \        val carsRight = carsRight.zip(carsLeft)\n        val carsLeft = carsLeft.zip(carsRight)\n\
    \        val carsRight = carsRight.zip(carsLeft)\n        val carsLeft = carsLeft.zip(carsRight)\n\
    \        val carsRight = carsRight.zip(carsLeft)\n        val carsLeft = carsLeft.zip(carsRight)\n\
    \        val carsRight = carsRight.zip(carsLeft)\n        val carsLeft = carsLeft.zip(carsRight)\n\
    \        val carsRight = carsRight.zip(carsLeft)\n        val carsLeft = carsLeft.",
  "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collides = mutable.HashSet[Car]()\n        val collisions = mutable.HashSet[Car]()\n\
    \        val collisionCount = 0\n        val collisionsCount = 0\n        val\
    \ carsCount = cars.size\n        val carsCollisions = cars.map(c => c.collide(cars))\n\
    \        carsCollisions.foreach(c => {\n            if (c.collide(cars)) {\n \
    \               collides += c\n                collisions += c\n             \
    \   collisionCount += 1\n            } else {\n                collisions += c\n\
    \                collisionCount += 1\n            }\n        })\n        collisions.foreach(c\
    \ => {\n            if (collides.contains(c)) {\n                collisions +=\
    \ c\n                collisionCount += 1\n            }\n        })\n        collisionCount",
  "        val cars = Vector.tabulate(n)(i => i)\n        val carsLeft = cars.tail\n\
    \        val carsRight = cars.init\n\n        val collisions = mutable.Set[Long]()\n\
    \n        val carsCollisions = carsLeft.zip(\n            carsRight.tail).foldLeft(mutable.Set[Long]())(\n\
    \            (carsCollisions, carsLeft.get, carsRight.tail) => {\n           \
    \     val collision = carsLeft.zip(carsRight.tail).foldLeft(0)(\n            \
    \        (carsCollisions, carsLeft.get, carsRight.tail) => {\n               \
    \         val collisions = carsCollisions.union(\n                           \
    \ carsLeft.zip(carsRight.tail).foldLeft(0)(\n                                (carsCollisions,\
    \ carsLeft.get, carsRight.tail) => {\n                                    val\
    \ collision = carsLeft.zip(carsRight.tail).foldLeft(0)(\n                    \
    \                    (carsCollisions, carsLeft.get, carsRight.tail) => {\n   \
    \                                         val collisions = carsCollisions.union(\n\
    \                                                carsLeft.zip(carsRight.tail).foldLeft(0)(\n\
    \                                                    (carsCollisions, carsLeft.get,\
    \ carsRight.tail) => {\n                                                     \
    \   val collision = carsLeft.zip(carsRight.tail).foldLeft(0)(\n              \
    \                                              (carsCollisions, carsLeft.get,\
    \ carsRight.tail) => {\n                                                     \
    \           val collisions = carsCollisions.union(\n                         \
    \                                           carsLeft.zip(carsRight.tail).foldLeft(0)(\n\
    \                                                                        (carsCollisions,\
    \ carsLeft.get, carsRight.tail) => {\n                                       \
    \                                     val collision = carsLeft.zip(carsRight.tail).foldLeft(0)(\n\
    \                                                                            \
    \    (carsCollisions, carsLeft.get, carsRight.tail) => {\n                   \
    \                                                                 val collisions\
    \ = carsCollisions.union(\n                                                  \
    \                                      carsLeft.zip(carsRight.tail).foldLeft(0)(\n\
    \                                                                            \
    \                (carsCollisions, carsLeft.get, carsRight.tail) => {\n       \
    \                                                                            \
    \             val collision = carsLeft.zip(carsRight.tail).foldLeft(0)(\n    \
    \                                                                            \
    \                    (carsCollisions, carsLeft.get, carsRight.tail) => {\n", " \
    \       var collisions = 0\n        var cars = Vector.fill(n / 2)(Vector.zero)\n\
    \        cars(0) = Vector.fill(n / 2)(Vector.zero)\n        cars(1) = Vector.fill(n\
    \ / 2)(Vector.zero)\n        cars(2) = Vector.fill(n / 2)(Vector.zero)\n     \
    \   cars(3) = Vector.fill(n / 2)(Vector.zero)\n        cars(4) = Vector.fill(n\
    \ / 2)(Vector.zero)\n        cars(5) = Vector.fill(n / 2)(Vector.zero)\n     \
    \   cars(6) = Vector.fill(n / 2)(Vector.zero)\n        cars(7) = Vector.fill(n\
    \ / 2)(Vector.zero)\n        cars(8) = Vector.fill(n / 2)(Vector.zero)\n     \
    \   cars(9) = Vector.fill(n / 2)(Vector.zero)\n        cars(10) = Vector.fill(n\
    \ / 2)(Vector.zero)\n        cars(11) = Vector.fill(n / 2)(Vector.zero)\n    \
    \    cars(12) = Vector.fill(n / 2)(Vector.zero)\n        cars(13) = Vector.fill(n\
    \ / 2)(Vector.zero)\n        cars(14) = Vector.fill(n / 2)(Vector.zero)\n    \
    \    cars(15) = Vector.fill(n / 2)(Vector.zero)\n        cars(16) = Vector.fill(n\
    \ / 2)(Vector.zero)\n        cars(17) = Vector.fill(n / 2)(Vector.zero)\n    \
    \    cars(18) = Vector.fill(n / 2)(Vector.zero)\n        cars(19) = Vector.fill(n\
    \ / 2)(Vector.zero)\n        cars(20) = Vector.fill(n / 2)(Vector.zero)\n    \
    \    cars(21) = Vector.fill(n / 2)(Vector.zero)\n        cars(22) = Vector.fill(n\
    \ / 2)(Vector.zero)\n        cars(23) = Vector.fill(n / 2)(Vector.zero)\n    \
    \    cars(24) = Vector.fill(n / 2)(Vector.zero)\n        cars(25) = Vector.fill(n\
    \ / 2)(Vector.zero)\n        cars(26) = Vector.fill(n / 2)(Vector.zero)\n    \
    \    cars(27) = Vector.fill(n / 2)(Vector.zero)\n        cars(28) = Vector.fill(n\
    \ / 2)(Vector.zero)\n", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n      \
    \  val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]", "        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val ", "        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsCount = mutable.Set[Long]()\n        val collisionsCount2\
    \ = mutable.Set[Long]()\n        val collisionsCount3 = mutable.Set[Long]()\n\
    \        val collisionsCount4 = mutable.Set[Long]()\n        val collisionsCount5\
    \ = mutable.Set[Long]()\n        val collisionsCount6 = mutable.Set[Long]()\n\
    \        val collisionsCount7 = mutable.Set[Long]()\n        val collisionsCount8\
    \ = mutable.Set[Long]()\n        val collisionsCount9 = mutable.Set[Long]()\n\
    \        val collisionsCount10 = mutable.Set[Long]()\n        val collisionsCount11\
    \ = mutable.Set[Long]()\n        val collisionsCount12 = mutable.Set[Long]()\n\
    \        val collisionsCount13 = mutable.Set[Long]()\n        val collisionsCount14\
    \ = mutable.Set[Long]()\n        val collisionsCount15 = mutable.Set[Long]()\n\
    \        val collisionsCount16 = mutable.Set[Long]()\n        val collisionsCount17\
    \ = mutable.Set[Long]()\n        val collisionsCount18 = mutable.Set[Long]()\n\
    \        val collisionsCount19 = mutable.Set[Long]()\n        val collisionsCount20\
    \ = mutable.Set[Long]()\n        val collisionsCount21 = mutable.Set[Long]()\n\
    \        val collisionsCount22 = mutable.Set[Long]()\n        val collisionsCount23\
    \ = mutable.Set[Long]()\n        val collisionsCount24 = mutable.Set[Long]()\n\
    \        val collisionsCount25 = mutable.Set[Long]()\n        val collisionsCount26\
    \ = mutable.Set[Long]()\n        val collisionsCount27 = mutable.Set[Long]()\n\
    \        val collisionsCount28 = mutable.Set[Long]()\n        val collisionsCount29\
    \ = mutable.Set[Long]()\n        val collisionsCount30 = mutable.Set[Long]()\n\
    \        val collisionsCount31 = mutable.Set[Long]()\n        val collisionsCount32\
    \ = mutable.Set[Long]()\n        val collisionsCount33 = ", "        var collisions\
    \ = 0\n        var cars = mutable.ListBuffer(1 to n).reverse\n        var cars2\
    \ = mutable.ListBuffer(1 to n).reverse\n        var speed = mutable.ListBuffer(1\
    \ to n).reverse\n        var speed2 = mutable.ListBuffer(1 to n).reverse\n   \
    \     var collisionsCount = 0\n        var collisionsCount2 = 0\n        var collisionsCount3\
    \ = 0\n        var collisionsCount4 = 0\n        var collisionsCount5 = 0\n  \
    \      var collisionsCount6 = 0\n        var collisionsCount7 = 0\n        var\
    \ collisionsCount8 = 0\n        var collisionsCount9 = 0\n        var collisionsCount10\
    \ = 0\n        var collisionsCount11 = 0\n        var collisionsCount12 = 0\n\
    \        var collisionsCount13 = 0\n        var collisionsCount14 = 0\n      \
    \  var collisionsCount15 = 0\n        var collisionsCount16 = 0\n        var collisionsCount17\
    \ = 0\n        var collisionsCount18 = 0\n        var collisionsCount19 = 0\n\
    \        var collisionsCount20 = 0\n        var collisionsCount21 = 0\n      \
    \  var collisionsCount22 = 0\n        var collisionsCount23 = 0\n        var collisionsCount24\
    \ = 0\n        var collisionsCount25 = 0\n        var collisionsCount26 = 0\n\
    \        var collisionsCount27 = 0\n        var collisionsCount28 = 0\n      \
    \  var collisionsCount29 = 0\n        var collisionsCount30 = 0\n        var collisionsCount31\
    \ = 0\n        var collisionsCount32 = 0\n        var collisionsCount33 = 0\n\
    \        var collisionsCount34 = 0\n        var collisionsCount35 = 0\n      \
    \  var collisionsCount36 = 0\n        var collisionsCount37 = 0\n        var collisionsCount38\
    \ = 0\n        var collisionsCount39 = 0\n        var collisionsCount40 = 0\n\
    \        var collisionsCount41 = 0\n        var collisionsCount42 = 0\n      \
    \  var collisionsCount43 = 0\n        var collisionsCount44 = 0\n        var collisionsCount45\
    \ = 0\n        var collisionsCount46 = 0\n        var collisionsCount47 = 0\n\
    \        var collisionsCount48 = 0\n        var collisionsCount49 = 0\n      \
    \  var collisionsCount50 = 0\n        var collisionsCount51 = 0\n        var collisionsCount52\
    \ = 0\n        var collisionsCount53 = 0\n        var collisionsCount54 = 0\n\
    \        var collisionsCount55 = 0\n        var collisionsCount56 = 0\n      \
    \  var collisionsCount57 = 0\n        var collisionsCount58 = 0\n        var collisionsCount59\
    \ = 0\n        var collisionsCount60 = 0\n        var collisionsCount61 = 0\n\
    \        var collisionsCount62 = 0\n        var collisionsCount63 = 0\n      \
    \  var collisionsCount64 = 0\n        var collisionsCount65 = 0\n        var collisionsCount66\
    \ = 0", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collides = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = ", "        val collisions = mutable.ListBuffer[Long]()\n        val cars\
    \ = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.", "        val cars = mutable.ListBuffer(1 to\
    \ n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val carsLeft = cars.takeRight(n)\n        val carsRight\
    \ = cars.dropRight(n)\n        val carsCollisions = carsLeft.zip(\n          \
    \  carsRight.zipWithIndex.filter(_._2 % 2 == 1).map(_._1)\n        ).filter(_._2.size\
    \ == n).map(_._2.size).sum\n        carsCollisions", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit2 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit2s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit3\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit3s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit4 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit4s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit5 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit5s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit6\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit6s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit7 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit7s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit8 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit8s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit9\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit9s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit10 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit10s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit11 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit11s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit12\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit12s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit13 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit13s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit14 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit14s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit15\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit15s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit16 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit16s\
    \ = mutable.", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ collisions = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ collisionsSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill", "        val cars = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisions = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight\
    \ = mutable.", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val carsLeft = cars.tail\n        val carsRight = cars.init\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsLeft\
    \ = carsLeft.foldLeft(0)((acc, car) => acc + (car.zip(collisions)(car => car._2).sum))\n\
    \        val collisionsRight = carsRight.foldLeft(0)((acc, car) => acc + (car.zip(collisions)(car\
    \ => car._2).sum))\n        collisions += collisionsLeft\n        collisions +=\
    \ collisionsRight\n        collisions.sum", "        var collisions = 0\n    \
    \    var cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o\
    \ => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s\
    \ => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w\
    \ => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a\
    \ => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e\
    \ => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m\
    \ => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q\
    \ => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u\
    \ => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y\
    \ => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c\
    \ => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g\
    \ => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector", "        val cars = Vector.tabulate(n)(i\
    \ => new Car(Vector.random))\n        val collides = mutable.ListBuffer.empty[Long]\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount3 = mutable.ListBuffer.empty[Long]\n        val collisionsCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount6 = mutable.ListBuffer.empty[Long]\n        val collisionsCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount9 = mutable.ListBuffer.empty[Long]\n        val collisionsCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount12 = mutable.ListBuffer.empty[Long]\n        val collisionsCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount14 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount15 = mutable.ListBuffer.empty[Long]\n        val collisionsCount16\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount17 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount18 = mutable.ListBuffer.empty[Long]\n        val collisionsCount19\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount20 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount21 = mutable.ListBuffer.empty[Long]\n        val collisionsCount22\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount23 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount24 = mutable.ListBuffer.empty[Long]\n        val collisionsCount25\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount26 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount27 = mutable.ListBuffer.empty[Long]\n        val collisionsCount28\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount29 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount30 = mutable.ListBuffer.empty[", "        val cars\
    \ = Array.fill(n / 2)(mutable.Queue[Int]())\n        val carsLeft = Array.fill(n\
    \ / 2)(mutable.Queue[Int]())\n        val carsRight = Array.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val collisions = mutable.Queue[Int]()\n        val collisionsLeft = mutable.Queue[Int]()\n\
    \        val collisionsRight = mutable.Queue[Int]()\n        val speed = Array.fill(n\
    \ / 2)(mutable.Queue[Int]())\n        val speedLeft = Array.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val speedRight = Array.fill(n / 2)(mutable.Queue[Int]())\n        val\
    \ speedLeft = Array.fill(n / 2)(mutable.Queue[Int]())\n        val speedRight\
    \ = Array.fill(n / 2)(mutable.Queue[Int]())\n        val speedLeft = Array.fill(n\
    \ / 2)(mutable.Queue[Int]())\n        val speedRight = Array.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val speedLeft = Array.fill(n / 2)(mutable.Queue[Int]())\n        val\
    \ speedRight = Array.fill(n / 2)(mutable.Queue[Int]())\n        val speedLeft\
    \ = Array.fill(n / 2)(mutable.Queue[Int]())\n        val speedRight = Array.fill(n\
    \ / 2)(mutable.Queue[Int]())\n        val speedLeft = Array.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val speedRight = Array.fill(n / 2)(mutable.Queue[Int]())\n        val\
    \ speedLeft = Array.fill(n / 2)(mutable.Queue[Int]())\n        val speedRight\
    \ = Array.fill(n / 2)(mutable.Queue[Int]())\n        val speedLeft = Array.fill(n\
    \ / 2)(mutable.Queue[Int]())\n        val speedRight = Array.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val speedLeft = Array.fill(n / 2)(mutable.Queue[Int]())\n        val\
    \ speedRight = Array.fill(n / 2)(mutable.Queue[Int]())\n        val speedLeft\
    \ = Array.fill(n / 2)(mutable.Queue[Int]())\n        val speedRight = Array.fill(n\
    \ / 2)(mutable.Queue[Int]())\n        val speedLeft = Array.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val speedRight = Array.fill(n / 2)", "        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set[Car]()\n\
    \        val collisions = mutable.Set[Car]()\n        val collisionsCount = mutable.Set[Car]()\n\
    \        val collisionsCounts = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car]()\n \
    \       val collisionsCounts_ = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car]()\n \
    \       val collisionsCounts_ = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car]()\n \
    \       val collisionsCounts_ = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car]()\n \
    \       val collisionsCounts_ = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car]()\n \
    \       val collisionsCounts_ = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car]()\n \
    \       val collisionsCounts_ = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car]()\n \
    \       val collisionsCounts_ = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car]()\n \
    \       val collisionsCounts_ = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car]()\n \
    \       val collisionsCounts_ = mutable.Set[Car]()\n        val collisionsCounts_\
    \ = mutable.Set[Car]()\n        val collisionsCounts_ = mutable.Set[Car", "  \
    \      val cars = mutable.ListBuffer[Long]()\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.",
  "        val cars = mutable.ListBuffer[Car]()\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val startTime = System.currentTimeMillis()\n        val endTime = System.currentTimeMillis()\n\
    \        val startX = scala.math.random\n        val startY = scala.math.random\n\
    \        val endX = scala.math.random\n        val endY = scala.math.random\n\
    \        val startSpeed = scala.math.random\n        val endSpeed = scala.math.random\n\
    \        val startDir = scala.math.random\n        val endDir = scala.math.random\n\
    \        val startAngle = scala.math.random\n        val endAngle = scala.math.random\n\
    \        val startHeading = scala.math.random\n        val endHeading = scala.math.random\n\
    \        val startAccel = scala.math.random\n        val endAccel = scala.math.random\n\
    \        val startThrottle = scala.math.random\n        val endThrottle = scala.math.random\n\
    \        val startBrake = scala.math.random\n        val endBrake = scala.math.random\n\
    \        val startSteer = scala.math.random\n        val endSteer = scala.math.random\n\
    \        val startJump = scala.math.random\n        val endJump = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val startJumpForce = scala.math.random\n        val endJumpForce = scala.math.random\n\
    \        val ", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speeds = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill",
  "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n  \
    \      val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n    \
    \    val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]", "        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[", "        val cars = Vector.tabulate(n)(i => i)\n\
    \        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val carsCollisions = carsLeft.zip(carsRight).filter(_._1 == _._2).length\n\
    \        carsCollisions", "        val cars = Array.fill(2*n)(0)\n        val\
    \ collisions = mutable.ListBuffer[Long]()\n        val speed = Array.fill(2*n)(0)\n\
    \        val speeds = Array.fill(2*n)(0)\n        val speedsDiff = Array.fill(2*n)(0)\n\
    \        val speedsDiffs = Array.fill(2*n)(0)\n        val speedsDiffsSum = Array.fill(2*n)(0)\n\
    \        val speedsDiffsSums = Array.fill(2*n)(0)\n        val speedsDiffsSumsSum\
    \ = Array.fill(2*n)(0)\n        val speedsDiffsSumsSums = Array.fill(2*n)(0)\n\
    \        val speedsDiffsSumsSumsSum = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSums\
    \ = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSum = Array.fill(2*n)(0)\n\
    \        val speedsDiffsSumsSumsSumsSums = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSum\
    \ = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSums = Array.fill(2*n)(0)\n\
    \        val speedsDiffsSumsSumsSumsSumsSumsSum = Array.fill(2*n)(0)\n       \
    \ val speedsDiffsSumsSumsSumsSumsSumsSums = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSum\
    \ = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSums =\
    \ Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSum =\
    \ Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = ", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i +\
    \ j))\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSo",
  "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n  \
    \      val collisions = mutable.ListBuffer.empty[Long]\n        val carsLeft =\
    \ cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val carsCollisions\
    \ = carsLeft.zip(\n            carsRight.zipWithIndex.map { case (car, index)\
    \ =>\n                val carCollision = car.zip(\n                    carsLeft.zipWithIndex.map\
    \ { case (carLeft, indexLeft) =>\n                        val carRight = carsRight.drop(indexLeft)\n\
    \                        val carCollision = carLeft.zip(\n                   \
    \         carsRight.zipWithIndex.map { case (carRight, indexRight) =>\n      \
    \                          val carLeft = carsLeft.drop(indexRight)\n         \
    \                       val carCollision = carLeft.zip(\n                    \
    \                carsRight.zipWithIndex.map { case (carRight, indexRight) =>\n\
    \                                        val carLeft = carsLeft.drop(indexRight)\n\
    \                                        val carCollision = carLeft.zip(\n   \
    \                                         carsRight.zipWithIndex.map { case (carRight,\
    \ indexRight) =>\n                                                val carLeft\
    \ = carsLeft.drop(indexRight)\n                                              \
    \  val carCollision = carLeft.zip(\n                                         \
    \           carsRight.zipWithIndex.map { case (carRight, indexRight) =>\n    \
    \                                                    val carLeft = carsLeft.drop(indexRight)\n\
    \                                                        val carCollision = carLeft.zip(\n\
    \                                                            carsRight.zipWithIndex.map\
    \ { case (carRight, indexRight) =>\n                                         \
    \                       val carLeft = carsLeft.drop(indexRight)\n            \
    \                                                    val carCollision = carLeft.zip(\n\
    \                                                                    carsRight.zipWithIndex.map\
    \ { case (carRight, indexRight) =>\n                                         \
    \                               val carLeft = carsLeft.drop(indexRight)\n    \
    \                                                                    val carCollision\
    \ = carLeft.zip(\n                                                           \
    \                 carsRight.zipWithIndex.map { case (carRight, indexRight) =>\n\
    \                                                                            \
    \    val carLeft = carsLeft.drop(indexRight)\n                               \
    \                                                 val carCollision = carLeft.zip(\n\
    \                                                                            \
    \        carsRight.zipWithIndex.map { case (carRight, indexRight) =>\n       \
    \                                                                            \
    \     val carLeft = carsLeft.drop(indexRight)\n                              \
    \                                                          val carCollision = ",
  "        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to\
    \ n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long", "        val cars = mutable.ListBuffer(1 to n).map(i\
    \ => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSo", "        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.tail\n     \
    \   val carsRight = cars.init\n        val carsCollisions = mutable.ListBuffer.empty[Long]\n\
    \        val carsCollisionsLeft = carsLeft.tail.zip(carsRight.init).filter(_._1._1\
    \ == _._1._2).map(_._2._1).sum\n        val carsCollisionsRight = carsRight.tail.zip(carsLeft.init).filter(_._1._1\
    \ == _._1._2).map(_._2._1).sum\n        carsCollisions += carsCollisionsLeft\n\
    \        carsCollisions += carsCollisionsRight\n        carsCollisions.sum", " \
    \       val cars = Vector.tabulate(n)(i => i)\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = mutable.Set[Int]()\n\
    \        val collisionsLeft = carsLeft.foldLeft(0)((acc, car) => acc + (carRaceCollision(car,\
    \ collisions)))\n        val collisionsRight = carsRight.foldLeft(0)((acc, car)\
    \ => acc + (carRaceCollision(car, collisions)))\n        collisionsLeft + collisionsRight",
  "        val cars = Vector.tabulate(n)(i => new Car(Vector.random))\n        val\
    \ collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar", "        val\
    \ cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collides = mutable.Set[Car]()\n        val collisions = mutable.Set[Car]()\n\
    \        val collisionsCount = mutable.Set[Car]()\n        val collisionsCount2\
    \ = mutable.Set[Car]()\n        val collisionsCount3 = mutable.Set[Car]()\n  \
    \      val collisionsCount4 = mutable.Set[Car]()\n        val collisionsCount5\
    \ = mutable.Set[Car]()\n        val collisionsCount6 = mutable.Set[Car]()\n  \
    \      val collisionsCount7 = mutable.Set[Car]()\n        val collisionsCount8\
    \ = mutable.Set[Car]()\n        val collisionsCount9 = mutable.Set[Car]()\n  \
    \      val collisionsCount10 = mutable.Set[Car]()\n        val collisionsCount11\
    \ = mutable.Set[Car]()\n        val collisionsCount12 = mutable.Set[Car]()\n \
    \       val collisionsCount13 = mutable.Set[Car]()\n        val collisionsCount14\
    \ = mutable.Set[Car]()\n        val collisionsCount15 = mutable.Set[Car]()\n \
    \       val collisionsCount16 = mutable.Set[Car]()\n        val collisionsCount17\
    \ = mutable.Set[Car]()\n        val collisionsCount18 = mutable.Set[Car]()\n \
    \       val collisionsCount19 = mutable.Set[Car]()\n        val collisionsCount20\
    \ = mutable.Set[Car]()\n        val collisionsCount21 = mutable.Set[Car]()\n \
    \       val collisionsCount22 = mutable.Set[Car]()\n        val collisionsCount23\
    \ = mutable.Set[Car]()\n        val collisionsCount24 = mutable.Set[Car]()\n \
    \       val collisionsCount25 = mutable.Set[Car]()\n        val collisionsCount26\
    \ = mutable.Set[Car]()\n        val collisionsCount27 = mutable.Set[Car]()\n \
    \       val collisionsCount28 = mutable.Set[Car]()\n        val collisionsCount29\
    \ = mutable.Set[Car]()\n        val collisionsCount30 = mutable.Set[Car]()\n \
    \       val collisionsCount31 = mutable.Set[Car]()\n        val collisionsCount32\
    \ = ", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collides = mutable.Set[Car]()\n        val collide = mutable.Set[Car]()\n\
    \        val collisions = mutable.Set[Car]()\n        val collision = mutable.Set[Car]()\n\
    \        val collisionCount = mutable.Set[Car]()\n        val collisionCount =\
    \ mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n      \
    \  val collisionCount = mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n\
    \        val collisionCount = mutable.Set[Car]()\n        val collisionCount =\
    \ mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n      \
    \  val collisionCount = mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n\
    \        val collisionCount = mutable.Set[Car]()\n        val collisionCount =\
    \ mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n      \
    \  val collisionCount = mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n\
    \        val collisionCount = mutable.Set[Car]()\n        val collisionCount =\
    \ mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n      \
    \  val collisionCount = mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n\
    \        val collisionCount = mutable.Set[Car]()\n        val collisionCount =\
    \ mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n      \
    \  val collisionCount = mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n\
    \        val collisionCount = mutable.Set[Car]()\n        val collisionCount =\
    \ mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n      \
    \  val collisionCount = mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n\
    \        val collisionCount = mutable.Set[Car]()\n        val collisionCount =\
    \ mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n      \
    \  val collisionCount = mutable.Set[Car]()\n        val collisionCount = mutable.Set[Car]()\n\
    \        val collisionCount = mutable.Set[Car]()\n        val ", "        val\
    \ cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to n).map(j\
    \ => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n        val\
    \ collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long", "        var count = 0\n        var cars = Vector.fill(n\
    \ / 2)(Vector.zero)\n        var collisions = Vector.fill(n / 2)(Vector.zero)\n\
    \        var collisionsCount = 0\n        var collisionsCount2 = 0\n        var\
    \ collisionsCount3 = 0\n        var collisionsCount4 = 0\n        var collisionsCount5\
    \ = 0\n        var collisionsCount6 = 0\n        var collisionsCount7 = 0\n  \
    \      var collisionsCount8 = 0\n        var collisionsCount9 = 0\n        var\
    \ collisionsCount10 = 0\n        var collisionsCount11 = 0\n        var collisionsCount12\
    \ = 0\n        var collisionsCount13 = 0\n        var collisionsCount14 = 0\n\
    \        var collisionsCount15 = 0\n        var collisionsCount16 = 0\n      \
    \  var collisionsCount17 = 0\n        var collisionsCount18 = 0\n        var collisionsCount19\
    \ = 0\n        var collisionsCount20 = 0\n        var collisionsCount21 = 0\n\
    \        var collisionsCount22 = 0\n        var collisionsCount23 = 0\n      \
    \  var collisionsCount24 = 0\n        var collisionsCount25 = 0\n        var collisionsCount26\
    \ = 0\n        var collisionsCount27 = 0\n        var collisionsCount28 = 0\n\
    \        var collisionsCount29 = 0\n        var collisionsCount30 = 0\n      \
    \  var collisionsCount31 = 0\n        var collisionsCount32 = 0\n        var collisionsCount33\
    \ = 0\n        var collisionsCount34 = 0\n        var collisionsCount35 = 0\n\
    \        var collisionsCount36 = 0\n        var collisionsCount37 = 0\n      \
    \  var collisionsCount38 = 0\n        var collisionsCount39 = 0\n        var collisionsCount40\
    \ = 0\n        var collisionsCount41 = 0\n        var collisionsCount42 = 0\n\
    \        var collisionsCount43 = 0\n        var collisionsCount44 = 0\n      \
    \  var collisionsCount45 = 0\n        var collisionsCount46 = 0\n        var collisionsCount47\
    \ = 0\n        var collisionsCount48 = 0\n        var collisionsCount49 = 0\n\
    \        var collisionsCount50 = 0\n        var collisionsCount51 = 0\n      \
    \  var collisionsCount52 = 0\n        var collisionsCount53 = 0\n        var collisionsCount54\
    \ = 0\n        var collisionsCount55 = 0\n        var collisionsCount56 = 0\n\
    \        var collisionsCount57 = 0\n        var collisionsCount58 = 0\n      \
    \  var collisionsCount59 = 0\n        var collisionsCount60 = 0\n        var collisionsCount61\
    \ = 0\n        var collisionsCount62 = 0\n        var collisionsCount63 = 0\n\
    \        var collisionsCount64 = 0\n        var collisionsCount65 = 0\n      \
    \  var collisionsCount66 = 0\n        var collisionsCount67 = 0\n        var collisionsCount68\
    \ = 0\n        var collisionsCount", "        var collisions = 0\n        val\
    \ cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o\
    \ => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s\
    \ => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w\
    \ => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a\
    \ => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e\
    \ => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m\
    \ => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q\
    \ => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u\
    \ => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y\
    \ => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c\
    \ => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g\
    \ => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => ", "        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val speedSoFar\
    \ = mutable.ListBuffer[Double]()\n        val carsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val speedSoFarSoFar\
    \ = mutable.ListBuffer[Double]()\n        val carsSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val\
    \ speedSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n        val carsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val speedSoFarSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n      \
    \  val carsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val speedSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n\
    \        val carsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n    \
    \    val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n  \
    \      val speedSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n\
    \        val carsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val speedSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n\
    \        val carsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.List", " \
    \       val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n \
    \       val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSo",
  "        val cars = Vector.tabulate(n)(i => i)\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsLeft = mutable.Set[Long]()\n        val collisionsRight\
    \ = mutable.Set[Long]()\n        val collisionsBoth = mutable.Set[Long]()\n  \
    \      val collisionsBothLeft = mutable.Set[Long]()\n        val collisionsBothRight\
    \ = mutable.Set[Long]()\n        val collisionsBothBoth = mutable.Set[Long]()\n\
    \        val collisionsBothBothLeft = mutable.Set[Long]()\n        val collisionsBothBothRight\
    \ = mutable.Set[Long]()\n        val collisionsBothBothBoth = mutable.Set[Long]()\n\
    \        val collisionsBothBothBothLeft = mutable.Set[Long]()\n        val collisionsBothBothBothRight\
    \ = mutable.Set[Long]()\n        val collisionsBothBothBothBoth = mutable.Set[Long]()\n\
    \        val collisionsBothBothBothBothLeft = mutable.Set[Long]()\n        val\
    \ collisionsBothBothBothBothRight = mutable.Set[Long]()\n        val collisionsBothBothBothBothBoth\
    \ = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothLeft = mutable.Set[Long]()\n\
    \        val collisionsBothBothBothBothBothRight = mutable.Set[Long]()\n     \
    \   val collisionsBothBothBothBothBoth = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothBothLeft\
    \ = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothRight = mutable.Set[Long]()\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.Set[Long]()\n      \
    \  val collisionsBothBothBothBothBothBothLeft = mutable.Set[Long]()\n        val\
    \ collisionsBothBothBothBothBothBothRight = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothBothBoth\
    \ = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothBothBothLeft\
    \ = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothBothBothRight\
    \ = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothBothBothBoth\
    \ = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothBothBothBothLeft\
    \ = mutable.Set[", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n      \
    \  val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speeds = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBefore\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsAfter = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsBeforeAfter = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfter =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter",
  "        val cars = Vector.tabulate(n)(i => new Car(Vector.random(100), Vector.random(100)))\n\
    \        val collided = mutable.Set.empty[Car]\n        val colliding = mutable.Set.empty[Car]\n\
    \        val collisions = mutable.Set.empty[Car]\n        val collisionsSoFar\
    \ = mutable.Set.empty[Car]\n        val collisionsSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Car]\n        val collisionsSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Car]\n        val collisionsSoFarSoFarSoFarSoFarSoFar =\
    \ mutable.Set.empty[Car]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Car]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Car]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Car]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Car]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Car]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Car]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Car]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Car]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Car]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Car]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Car]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar",
  "        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to\
    \ n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n \
    \       val collisionsLeft = mutable.ListBuffer[Long]()\n        val collisionsRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothLeft = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothRight = mutable.ListBuffer[Long]()\n      \
    \  val collisionsBothBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothRight =\
    \ mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothBothRight", "        var collisions\
    \ = 0\n        var cars = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRightToLeft =\
    \ scala.collection.mutable.ListBuffer[Int]()\n        var carsLeftToRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsRightToLeftToRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeftToRightToLeft = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsRightToLeftToRightToLeft = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeftToRightToLeftToRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsRightToLeftToRightToLeftToRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeftToRightToLeftToRightToLeftToRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsRightToLeftToRightToLeftToRightToLeftToRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeftToRightToLeftToRightToLeftToRightToLeftToRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val collisions = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount2 = mutable.Set.empty[Long]\n\
    \        val collisionsCount3 = mutable.Set.empty[Long]\n        val collisionsCount4\
    \ = mutable.Set.empty[Long]\n        val collisionsCount5 = mutable.Set.empty[Long]\n\
    \        val collisionsCount6 = mutable.Set.empty[Long]\n        val collisionsCount7\
    \ = mutable.Set.empty[Long]\n        val collisionsCount8 = mutable.Set.empty[Long]\n\
    \        val collisionsCount9 = mutable.Set.empty[Long]\n        val collisionsCount10\
    \ = mutable.Set.empty[Long]\n        val collisionsCount11 = mutable.Set.empty[Long]\n\
    \        val collisionsCount12 = mutable.Set.empty[Long]\n        val collisionsCount13\
    \ = mutable.Set.empty[Long]\n        val collisionsCount14 = mutable.Set.empty[Long]\n\
    \        val collisionsCount15 = mutable.Set.empty[Long]\n        val collisionsCount16\
    \ = mutable.Set.empty[Long]\n        val collisionsCount17 = mutable.Set.empty[Long]\n\
    \        val collisionsCount18 = mutable.Set.empty[Long]\n        val collisionsCount19\
    \ = mutable.Set.empty[Long]\n        val collisionsCount20 = mutable.Set.empty[Long]\n\
    \        val collisionsCount21 = mutable.Set.empty[Long]\n        val collisionsCount22\
    \ = mutable.Set.empty[Long]\n        val collisionsCount23 = mutable.Set.empty[Long]\n\
    \        val collisionsCount24 = mutable.Set.empty[Long]\n        val collisionsCount25\
    \ = mutable.Set.empty[Long]\n        val collisionsCount26 = mutable.Set.empty[Long]\n\
    \        val collisionsCount27 = mutable.Set.empty[Long]\n        val collisionsCount28\
    \ = mutable.Set.empty[Long]\n        val collisionsCount29 = mutable.Set.empty[Long]\n\
    \        val collisionsCount30 = mutable.Set.empty[Long]\n        val collisionsCount31\
    \ = mutable.Set.empty[Long]\n        val collisionsCount32 = mutable.Set.empty[Long]\n\
    \        val collisionsCount33 = ", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(0.0,\
    \ 100.0), Vector.random(0.0, 100.0)))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n      \
    \  val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount4 = mutable.ListBuffer.empty[Long]\n        val collisionsCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount7 = mutable.ListBuffer.empty[Long]\n        val collisionsCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount10 = mutable.ListBuffer.empty[Long]\n        val collisionsCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount13 = mutable.ListBuffer.empty[Long]\n        val collisionsCount14\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount15 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount16 = mutable.ListBuffer.empty[Long]\n        val collisionsCount17\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount18 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount19 = mutable.ListBuffer.empty[Long]\n        val collisionsCount20\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount21 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount22 = mutable.ListBuffer.empty[Long]\n        val collisionsCount23\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount24 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount25 = mutable.ListBuffer.empty[Long]\n        val collisionsCount26\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount27 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount28 = mutable.ListBuffer.empty[Long]\n        val collisionsCount29\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount30 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount3", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collides = mutable.HashSet[Long]()\n     \
    \   val collisions = mutable.HashSet[Long]()\n        val collisionsSoFar = mutable.HashSet[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.HashSet[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.HashSet[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.HashSet[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.HashSet[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.HashSet[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.HashSet[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.HashSet[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.HashSet[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.HashSet[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.HashSet[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.HashSet[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.HashSet[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.HashSet[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.HashSet[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.HashSet[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.HashSet",
  "        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to\
    \ n).map(j => i))\n        val collisions = mutable.ListBuffer[Long]()\n     \
    \   val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSo", "        val cars = Array.fill(2\
    \ * n)(new Car)\n        val collisions = mutable.ListBuffer[Long]()\n       \
    \ val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = cars.zipWithIndex.filter(_._1 < n).map(_._2)\n       \
    \ val carsRight = cars.zipWithIndex.filter(_._1 > n).map(_._2)\n        val carsLeft\
    \ = carsLeft.take(n)\n        val carsRight = carsRight.take(n)\n        val collisionsLeft\
    \ = carsLeft.foldLeft(0)((acc, i) => acc + carsRight(i).collide(cars(i)))\n  \
    \      val collisionsRight = carsRight.foldLeft(0)((acc, i) => acc + carsLeft(i).collide(cars(i)))\n\
    \        collisions += collisionsLeft\n        collisions += collisionsRight\n\
    \        collisions.sum", "        var collisions = 0\n        var cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.zero))\n        cars.foreach(c => cars(0)\
    \ = c)\n        cars.foreach(c => cars(1) = c)\n        cars.foreach(c => cars(2)\
    \ = c)\n        cars.foreach(c => cars(3) = c)\n        cars.foreach(c => cars(4)\
    \ = c)\n        cars.foreach(c => cars(5) = c)\n        cars.foreach(c => cars(6)\
    \ = c)\n        cars.foreach(c => cars(7) = c)\n        cars.foreach(c => cars(8)\
    \ = c)\n        cars.foreach(c => cars(9) = c)\n        cars.foreach(c => cars(10)\
    \ = c)\n        cars.foreach(c => cars(11) = c)\n        cars.foreach(c => cars(12)\
    \ = c)\n        cars.foreach(c => cars(13) = c)\n        cars.foreach(c => cars(14)\
    \ = c)\n        cars.foreach(c => cars(15) = c)\n        cars.foreach(c => cars(16)\
    \ = c)\n        cars.foreach(c => cars(17) = c)\n        cars.foreach(c => cars(18)\
    \ = c)\n        cars.foreach(c => cars(19) = c)\n        cars.foreach(c => cars(20)\
    \ = c)\n        cars.foreach(c => cars(21) = c)\n        cars.foreach(c => cars(22)\
    \ = c)\n        cars.foreach(c => cars(23) = c)\n        cars.foreach(c => cars(24)\
    \ = c)\n        cars.foreach(c => cars(25) = c)\n        cars.foreach(c => cars(26)\
    \ = c)\n        cars.foreach(c => cars(27) = c)\n        cars.foreach(c => cars(28)\
    \ = c)\n        cars.foreach(c => cars(29) = c)\n        cars.foreach(c => cars(30)\
    \ = c)\n        cars.foreach(c => cars(31) = c)\n        cars.foreach(c => cars(32)\
    \ = c)\n        cars.foreach(c => cars(33) = c)\n        cars.foreach(c => cars(34)\
    \ = c)\n        cars.foreach(c => cars(35) = c)\n        cars.foreach(c => cars(36)\
    \ = c)\n", "        var collisions = 0\n        var currentCar = 0\n        var\
    \ previousCar = 0\n        var currentCollision = 0\n        var previousCollision\
    \ = 0\n        var currentSpeed = 0\n        var previousSpeed = 0\n        var\
    \ currentCollisionDistance = 0\n        var previousCollisionDistance = 0\n  \
    \      var currentCollisionDistanceSquared = 0\n        var previousCollisionDistanceSquared\
    \ = 0\n        var currentCollisionDistanceSquared2 = 0\n        var previousCollisionDistanceSquared2\
    \ = 0\n        var currentSpeedSquared = 0\n        var previousSpeedSquared =\
    \ 0\n        var currentSpeedSquared2 = 0\n        var previousSpeedSquared2 =\
    \ 0\n        var currentSpeedSquared3 = 0\n        var previousSpeedSquared3 =\
    \ 0\n        var currentSpeedSquared4 = 0\n        var previousSpeedSquared4 =\
    \ 0\n        var currentSpeedSquared5 = 0\n        var previousSpeedSquared5 =\
    \ 0\n        var currentSpeedSquared6 = 0\n        var previousSpeedSquared6 =\
    \ 0\n        var currentSpeedSquared7 = 0\n        var previousSpeedSquared7 =\
    \ 0\n        var currentSpeedSquared8 = 0\n        var previousSpeedSquared8 =\
    \ 0\n        var currentSpeedSquared9 = 0\n        var previousSpeedSquared9 =\
    \ 0\n        var currentSpeedSquared10 = 0\n        var previousSpeedSquared10\
    \ = 0\n        var currentSpeedSquared11 = 0\n        var previousSpeedSquared11\
    \ = 0\n        var currentSpeedSquared12 = 0\n        var previousSpeedSquared12\
    \ = 0\n        var currentSpeedSquared13 = 0\n        var previousSpeedSquared13\
    \ = 0\n        var currentSpeedSquared14 = 0\n        var previousSpeedSquared14\
    \ = 0\n        var currentSpeedSquared15 = 0\n        var previousSpeedSquared15\
    \ = 0\n        var currentSpeedSquared16 = 0\n        var previousSpeedSquared16\
    \ = 0\n        var currentSpeedSquared17 = 0\n        var previousSpeedSquared17\
    \ = 0\n        var currentSpeedSquared18 = 0\n        var previousSpeedSquared18\
    \ = 0\n        var currentSpeedSquared19 = 0\n        var previousSpeedSquared19\
    \ = 0\n        var currentSpeedSquared20 = 0\n        var previousSpeedSquared20\
    \ = 0\n        var currentSpeedSquared21 = 0\n        var previousSpeedSquared21\
    \ = 0\n        var currentSpeedSquared22 = 0\n        var previousSpeedSquared22\
    \ = 0\n        var currentSpeedSquared23 = 0\n        var previousSpeedSquared23\
    \ = 0\n        var currentSpeedSquared24 = 0\n        var previousSpeedSquared24\
    \ = 0\n        var currentSpeedSquared25 = 0\n        var previousSpeedSquared25\
    \ = 0\n        var currentSpeedSquared26 = 0\n        var previousSpeedSquared26\
    \ = 0\n        var currentSpeedSquared27 = 0\n        var previousSpeedSquared27\
    \ = 0\n        var current", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val carsLeft = cars.tail\n        val carsRight = cars.init\n\
    \        val collisions = mutable.ListBuffer[Long]()\n        val collisionsLeft\
    \ = carsLeft.foldLeft(0)((acc, car) => acc + (car.last.last.last - car.last.last.first))\n\
    \        val collisionsRight = carsRight.foldLeft(0)((acc, car) => acc + (car.last.last.first\
    \ - car.last.last.last))\n        val collisionsTotal = collisionsLeft + collisionsRight\n\
    \        val collisionsTotalInt = collisionsTotal.toInt\n        val collisionsTotalFloat\
    \ = collisionsTotal.toFloat\n        val collisionsTotalInt = collisionsTotal.toInt\n\
    \        val collisionsTotalFloat = collisionsTotal.toFloat\n        val collisionsTotalInt\
    \ = collisionsTotal.toInt\n        val collisionsTotalFloat = collisionsTotal.toFloat\n\
    \        val collisionsTotalInt = collisionsTotal.toInt\n        val collisionsTotalFloat\
    \ = collisionsTotal.toFloat\n        val collisionsTotalInt = collisionsTotal.toInt\n\
    \        val collisionsTotalFloat = collisionsTotal.toFloat\n        val collisionsTotalInt\
    \ = collisionsTotal.toInt\n        val collisionsTotalFloat = collisionsTotal.toFloat\n\
    \        val collisionsTotalInt = collisionsTotal.toInt\n        val collisionsTotalFloat\
    \ = collisionsTotal.toFloat\n        val collisionsTotalInt = collisionsTotal.toInt\n\
    \        val collisionsTotalFloat = collisionsTotal.toFloat\n        val collisionsTotalInt\
    \ = collisionsTotal.toInt\n        val collisionsTotalFloat = collisionsTotal.toFloat\n\
    \        val collisionsTotalInt = collisionsTotal.toInt\n        val collisionsTotalFloat\
    \ = collisionsTotal.toFloat\n        val collisionsTotalInt = collisionsTotal.toInt\n\
    \        val collisionsTotalFloat = collisionsTotal.toFloat\n        val collisionsTotalInt\
    \ = collisionsTotal.toInt\n        val collisionsTotalFloat = collisionsTotal.toFloat\n\
    \        val collisionsTotalInt = collisionsTotal.toInt\n        val collisionsTotalFloat\
    \ = collisionsTotal.toFloat\n        val collisionsTotalInt = collisionsTotal.toInt\n\
    \        val collisionsTotalFloat = collisionsTotal.toFloat\n", "        val cars\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsBoth = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ collisionsBothRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsBothBoth\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n      \
    \  val collisionsBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsBothBothBothLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsBothBothBothRight =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val collisionsBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsBothBothBothBoth", "        val cars = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mut", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n   \
    \     val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount", "        val cars =\
    \ Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n     \
    \   val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val collisions = carsLeft.zip(carsRight).filter(_._1.x == _._1.x).length\n\
    \        collisions", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val collisions = mutable.Set[Long]()\n        val collisionsCount\
    \ = mutable.Set[Long]()\n        val collisionsCount2 = mutable.Set[Long]()\n\
    \        val collisionsCount3 = mutable.Set[Long]()\n        val collisionsCount4\
    \ = mutable.Set[Long]()\n        val collisionsCount5 = mutable.Set[Long]()\n\
    \        val collisionsCount6 = mutable.Set[Long]()\n        val collisionsCount7\
    \ = mutable.Set[Long]()\n        val collisionsCount8 = mutable.Set[Long]()\n\
    \        val collisionsCount9 = mutable.Set[Long]()\n        val collisionsCount10\
    \ = mutable.Set[Long]()\n        val collisionsCount11 = mutable.Set[Long]()\n\
    \        val collisionsCount12 = mutable.Set[Long]()\n        val collisionsCount13\
    \ = mutable.Set[Long]()\n        val collisionsCount14 = mutable.Set[Long]()\n\
    \        val collisionsCount15 = mutable.Set[Long]()\n        val collisionsCount16\
    \ = mutable.Set[Long]()\n        val collisionsCount17 = mutable.Set[Long]()\n\
    \        val collisionsCount18 = mutable.Set[Long]()\n        val collisionsCount19\
    \ = mutable.Set[Long]()\n        val collisionsCount20 = mutable.Set[Long]()\n\
    \        val collisionsCount21 = mutable.Set[Long]()\n        val collisionsCount22\
    \ = mutable.Set[Long]()\n        val collisionsCount23 = mutable.Set[Long]()\n\
    \        val collisionsCount24 = mutable.Set[Long]()\n        val collisionsCount25\
    \ = mutable.Set[Long]()\n        val collisionsCount26 = mutable.Set[Long]()\n\
    \        val collisionsCount27 = mutable.Set[Long]()\n        val collisionsCount28\
    \ = mutable.Set[Long]()\n        val collisionsCount29 = mutable.Set[Long]()\n\
    \        val collisionsCount30 = mutable.Set[Long]()\n        val collisionsCount31\
    \ = mutable.Set[Long]()\n        val collisionsCount32 = mutable.Set[Long]()\n\
    \        val collisionsCount33 = ", "        val cars = Array.fill(2 * n)(new\
    \ Car)\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = 0\n        val collisionsSoFarSoFar = 0\n        val collisionsSoFarSoFarSoFar\
    \ = 0\n        val collisionsSoFarSoFarSoFarSoFar = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n  \
    \      val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n  \
    \      val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n  \
    \      val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n      \
    \  val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        val ",
  "        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.",
  "        val collisions = mutable.ListBuffer.empty[Long]\n        val cars = mutable.ListBuffer.fill(n)(new\
    \ Car)\n        val carsRight = mutable.ListBuffer.fill(n)(new Car)\n        val\
    \ carsLeft = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeft\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsLeftToRight = mutable.ListBuffer.fill(n)(new\
    \ Car)\n        val carsRightToLeftToRight = mutable.ListBuffer.fill(n)(new Car)\n\
    \        val carsLeftToRightToLeft = mutable.ListBuffer.fill(n)(new Car)\n   \
    \     val carsRightToLeftToRightToLeft = mutable.ListBuffer.fill(n)(new Car)\n\
    \        val carsLeftToRightToLeftToRight = mutable.ListBuffer.fill(n)(new Car)\n\
    \        val carsRightToLeftToRightToLeftToRight = mutable.ListBuffer.fill(n)(new\
    \ Car)\n        val carsLeftToRightToLeftToRightToLeftToRight = mutable.ListBuffer.fill(n)(new\
    \ Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRight = mutable.ListBuffer.fill(n)(new\
    \ Car)\n        val carsLeftToRightToLeftToRightToLeftToRightToLeftToRight = mutable.ListBuffer.fill(n)(new\
    \ Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight",
  "        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed = mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRightToLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeftToRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRightToLeftToRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeftToRightToLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRightToLeftToRightToLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeftToRightToLeftToRightToLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRightToLeftToRightToLeftToRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeftToRightToLeftToRightToLeftToRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRightToLeftToRightToLeftToRightToLeftToRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeftToRightToLeftToRightToLeftToRightToLeftToRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRightToLeft", "        val\
    \ collisions = mutable.ListBuffer.empty[Long]\n        val cars = mutable.ListBuffer.empty[Int]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Int]\n        val carsRight =\
    \ mutable.ListBuffer.empty[Int]\n        val carsLeft = mutable.ListBuffer.empty[Int]\n\
    \        val carsRight = mutable.ListBuffer.empty[Int]\n        val carsLeft =\
    \ mutable.ListBuffer.empty[Int]\n        val carsRight = mutable.ListBuffer.empty[Int]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Int]\n        val carsRight =\
    \ mutable.ListBuffer.empty[Int]\n        val carsLeft = mutable.ListBuffer.empty[Int]\n\
    \        val carsRight = mutable.ListBuffer.empty[Int]\n        val carsLeft =\
    \ mutable.ListBuffer.empty[Int]\n        val carsRight = mutable.ListBuffer.empty[Int]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Int]\n        val carsRight =\
    \ mutable.ListBuffer.empty[Int]\n        val carsLeft = mutable.ListBuffer.empty[Int]\n\
    \        val carsRight = mutable.ListBuffer.empty[Int]\n        val carsLeft =\
    \ mutable.ListBuffer.empty[Int]\n        val carsRight = mutable.ListBuffer.empty[Int]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Int]\n        val carsRight =\
    \ mutable.ListBuffer.empty[Int]\n        val carsLeft = mutable.ListBuffer.empty[Int]\n\
    \        val carsRight = mutable.ListBuffer.empty[Int]\n        val carsLeft =\
    \ mutable.ListBuffer.empty[Int]\n        val carsRight = mutable.ListBuffer.empty[Int]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Int]\n        val carsRight =\
    \ mutable.ListBuffer.empty[Int]\n        val carsLeft = mutable.ListBuffer.empty[Int]\n\
    \        val carsRight = mutable.ListBuffer.empty[Int]\n        val carsLeft =\
    \ mutable.ListBuffer.empty[Int]\n        val carsRight = mutable.ListBuffer.empty[Int]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Int]\n        val carsRight =\
    \ mutable.ListBuffer.empty[Int]\n        val carsLeft = mutable.ListBuffer.empty[Int]\n\
    \        val carsRight = mutable.", "        val cars = Vector.tabulate(n)(i =>\
    \ Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisions", "        val collisions = 0\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        ", "        val\
    \ cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n    \
    \    val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[", "        val cars = Vector.tabulate(n)(i => i)\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n    \
    \    val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.List",
  '        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k
    => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o
    => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s
    => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w
    => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a
    => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e
    => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i
    => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m
    => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q
    => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u
    => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y
    => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c
    => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g
    => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k
    => Vector.tabulate(n)(l => Vector.tabul', "        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsCount = mutable.Set[Long]()\n        val collisionsCount2\
    \ = mutable.Set[Long]()\n        val collisionsCount3 = mutable.Set[Long]()\n\
    \        val collisionsCount4 = mutable.Set[Long]()\n        val collisionsCount5\
    \ = mutable.Set[Long]()\n        val collisionsCount6 = mutable.Set[Long]()\n\
    \        val collisionsCount7 = mutable.Set[Long]()\n        val collisionsCount8\
    \ = mutable.Set[Long]()\n        val collisionsCount9 = mutable.Set[Long]()\n\
    \        val collisionsCount10 = mutable.Set[Long]()\n        val collisionsCount11\
    \ = mutable.Set[Long]()\n        val collisionsCount12 = mutable.Set[Long]()\n\
    \        val collisionsCount13 = mutable.Set[Long]()\n        val collisionsCount14\
    \ = mutable.Set[Long]()\n        val collisionsCount15 = mutable.Set[Long]()\n\
    \        val collisionsCount16 = mutable.Set[Long]()\n        val collisionsCount17\
    \ = mutable.Set[Long]()\n        val collisionsCount18 = mutable.Set[Long]()\n\
    \        val collisionsCount19 = mutable.Set[Long]()\n        val collisionsCount20\
    \ = mutable.Set[Long]()\n        val collisionsCount21 = mutable.Set[Long]()\n\
    \        val collisionsCount22 = mutable.Set[Long]()\n        val collisionsCount23\
    \ = mutable.Set[Long]()\n        val collisionsCount24 = mutable.Set[Long]()\n\
    \        val collisionsCount25 = mutable.Set[Long]()\n        val collisionsCount26\
    \ = mutable.Set[Long]()\n        val collisionsCount27 = mutable.Set[Long]()\n\
    \        val collisionsCount28 = mutable.Set[Long]()\n        val collisionsCount29\
    \ = mutable.Set[Long]()\n        val collisionsCount30 = mutable.Set[Long]()\n\
    \        val collisionsCount31 = mutable.Set[Long]()\n        val collisionsCount32\
    \ = mutable.Set[Long]()\n        val collisionsCount33 = ", "        val cars\
    \ = Vector.tabulate(n)(i => new Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.Set.empty[Long]\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val carsLeft = carsLeft.zip(carsRight)\n\
    \        val carsRight = carsRight.zip(carsLeft)\n        carsLeft.foreach(c =>\
    \ collisions += c._1.collidesWith(c._2))\n        carsRight.foreach(c => collisions\
    \ += c._1.collidesWith(c._2))\n        collisions.size", "        val cars = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mut", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n   \
    \     val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarIter\
    \ = collisionsSoFar.iterator\n        val collisionsSoFarIterIter = collisionsSoFarIter.iterator\n\
    \        val collisionsSoFarIterIterIter = collisionsSoFarIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIter = collisionsSoFarIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIter = collisionsSoFarIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter =\
    \ collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter =\
    \ collisionsSoFarIter", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collisions = mutable.Set.empty[Car]\n    \
    \    val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount", "        val cars =\
    \ Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n     \
    \   val collisions = mutable.ListBuffer.empty[Long]\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val carsCollisions = carsLeft.zip(\n\
    \            carsRight.zip(carsLeft.tail, carsRight.head))\n            .filter(_._1.collidesWith(_._2))\n\
    \            .filter(_._1.collidesWith(_._3))\n            .filter(_._1.collidesWith(_._4))\n\
    \            .filter(_._1.collidesWith(_._5))\n            .filter(_._1.collidesWith(_._6))\n\
    \            .filter(_._1.collidesWith(_._7))\n            .filter(_._1.collidesWith(_._8))\n\
    \            .filter(_._1.collidesWith(_._9))\n            .filter(_._1.collidesWith(_._10))\n\
    \            .filter(_._1.collidesWith(_._11))\n            .filter(_._1.collidesWith(_._12))\n\
    \            .filter(_._1.collidesWith(_._13))\n            .filter(_._1.collidesWith(_._14))\n\
    \            .filter(_._1.collidesWith(_._15))\n            .filter(_._1.collidesWith(_._16))\n\
    \            .filter(_._1.collidesWith(_._17))\n            .filter(_._1.collidesWith(_._18))\n\
    \            .filter(_._1.collidesWith(_._19))\n            .filter(_._1.collidesWith(_._20))\n\
    \            .filter(_._1.collidesWith(_._21))\n            .filter(_._1.collidesWith(_._22))\n\
    \            .filter(_._1.collidesWith(_._23))\n            .filter(_._1.collidesWith(_._24))\n\
    \            .filter(_._1.collidesWith(_._25))\n            .filter(_._1.collidesWith(_._26))\n\
    \            .filter(_._1.collidesWith(_._27))\n            .filter(_._1.collidesWith(_._28))\n\
    \            .filter(_._1.collidesWith(_._29))\n            .filter(_._1.collidesWith(_._30))\n\
    \            .filter(_._1.collidesWith(_._31))\n            .filter(_._1.collidesWith(_._32))\n\
    \            .filter(_._1.collidesWith(_._33))\n            .filter(_._1.collidesWith(_._",
  "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n  \
    \      val carsLeft = cars.filter(_(0) < 0)\n        val carsRight = cars.filter(_(0)\
    \ >= 0)\n        val carsCollisions = carsLeft.filter(_(0) != _(0) && _(0) !=\
    \ _(1) && _(1) != _(0) && _(1) != _(1)).length\n        carsCollisions", "   \
    \     val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.", "        val cars = mutable.ListBuffer(1 to\
    \ n).map(i => mutable.ListBuffer(1 to n).map(j => i))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsRight = mutable.ListBuffer[Long]()\n        val collisionsBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothRight = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBoth = mutable.ListBuffer[Long]()\n       \
    \ val collisionsBothBothBothBothLeft = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothBothRight\
    \ = mut", "        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1\
    \ to n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val maxSpeed\
    \ = 100\n        val minSpeed = -10\n        val maxDistance = 10000\n       \
    \ val minDistance = -10\n        val maxTime = 10\n        val minTime = -100\n\
    \        val maxDistance2 = 10000\n        val minDistance2 = -10\n        val\
    \ maxTime2 = 10\n        val minTime2 = -100\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val distance = mutable.ArrayBuffer.fill(n)(0)\n        val time = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed2 = mutable.ArrayBuffer.fill(n)(0)\n        val distance2 =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val time2 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed3 = mutable.ArrayBuffer.fill(n)(0)\n        val distance3 =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val time3 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed4 = mutable.ArrayBuffer.fill(n)(0)\n        val distance4 =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val time4 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed5 = mutable.ArrayBuffer.fill(n)(0)\n        val distance5 =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val time5 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed6 = mutable.ArrayBuffer.fill(n)(0)\n        val distance6 =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val time6 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed7 = mutable.ArrayBuffer.fill(n)(0)\n        val distance7 =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val time7 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed8 = mutable.ArrayBuffer.fill(n)(0)\n        val distance8 =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val time8 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed9 = mutable.ArrayBuffer.fill(n)(0)\n        val distance9 =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val time9 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed10 = mutable.ArrayBuffer.fill(n)(0)\n        val distance10\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val time10 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed11 = mutable.ArrayBuffer.fill(n)(0)\n        val distance11\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val time", "        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set[Car]()\n\
    \        val collisions = mutable.Set[Car]()\n        val collisionsCount = mutable.Set[Car]()\n\
    \        val collisionsCount2 = mutable.Set[Car]()\n        val collisionsCount3\
    \ = mutable.Set[Car]()\n        val collisionsCount4 = mutable.Set[Car]()\n  \
    \      val collisionsCount5 = mutable.Set[Car]()\n        val collisionsCount6\
    \ = mutable.Set[Car]()\n        val collisionsCount7 = mutable.Set[Car]()\n  \
    \      val collisionsCount8 = mutable.Set[Car]()\n        val collisionsCount9\
    \ = mutable.Set[Car]()\n        val collisionsCount10 = mutable.Set[Car]()\n \
    \       val collisionsCount11 = mutable.Set[Car]()\n        val collisionsCount12\
    \ = mutable.Set[Car]()\n        val collisionsCount13 = mutable.Set[Car]()\n \
    \       val collisionsCount14 = mutable.Set[Car]()\n        val collisionsCount15\
    \ = mutable.Set[Car]()\n        val collisionsCount16 = mutable.Set[Car]()\n \
    \       val collisionsCount17 = mutable.Set[Car]()\n        val collisionsCount18\
    \ = mutable.Set[Car]()\n        val collisionsCount19 = mutable.Set[Car]()\n \
    \       val collisionsCount20 = mutable.Set[Car]()\n        val collisionsCount21\
    \ = mutable.Set[Car]()\n        val collisionsCount22 = mutable.Set[Car]()\n \
    \       val collisionsCount23 = mutable.Set[Car]()\n        val collisionsCount24\
    \ = mutable.Set[Car]()\n        val collisionsCount25 = mutable.Set[Car]()\n \
    \       val collisionsCount26 = mutable.Set[Car]()\n        val collisionsCount27\
    \ = mutable.Set[Car]()\n        val collisionsCount28 = mutable.Set[Car]()\n \
    \       val collisionsCount29 = mutable.Set[Car]()\n        val collisionsCount30\
    \ = mutable.Set[Car]()\n        val collisionsCount31 = mutable.Set[Car]()\n \
    \       val collisionsCount32 = ", "        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val xs = mutable.ListBuffer[Double]()\n        val ys = mutable.ListBuffer[Double]()\n\
    \        val xs1 = mutable.ListBuffer[Double]()\n        val ys1 = mutable.ListBuffer[Double]()\n\
    \        val xs2 = mutable.ListBuffer[Double]()\n        val ys2 = mutable.ListBuffer[Double]()\n\
    \        val xs3s = mutable.ListBuffer[Double]()\n        val ys3s = mutable.ListBuffer[Double]()\n\
    \        val xs3t = mutable.ListBuffer[Double]()\n        val ys3t = mutable.ListBuffer[Double]()\n\
    \        val xs3b = mutable.ListBuffer[Double]()\n        val ys3b = mutable.ListBuffer[Double]()\n\
    \        val xs3l = mutable.ListBuffer[Double]()\n        val ys3l = mutable.ListBuffer[Double]()\n\
    \        val xs3r = mutable.ListBuffer[Double]()\n        val ys3r = mutable.ListBuffer[Double]()\n\
    \        val xs3t = mutable.ListBuffer[Double]()\n        val ys3t = mutable.ListBuffer[Double]()\n\
    \        val xs3b = mutable.ListBuffer[Double]()\n        val ys3b = mutable.ListBuffer[Double]()\n\
    \        val xs3l = mutable.ListBuffer[Double]()\n        val ys3l = mutable.ListBuffer[Double]()\n\
    \        val xs3r = mutable.ListBuffer[Double]()\n        val ys3r = mutable.ListBuffer[Double]()\n\
    \        val xs3t = mutable.ListBuffer[Double]()\n        val ys3t = mutable.ListBuffer[Double]()\n\
    \        val xs3b = mutable.ListBuffer[Double]()\n        val ys3b = mutable.ListBuffer[Double]()\n\
    \        val xs3l = mutable.ListBuffer[Double]()\n        val ys3l = mutable.ListBuffer[Double]()\n\
    \        val xs3r = mutable.ListBuffer[Double]()\n        val ys3r = mutable.ListBuffer[Double]()\n\
    \        val xs3t = mutable.ListBuffer[Double]()\n        val ys3t = mutable.ListBuffer[Double]()\n\
    \        val x", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n      \
    \  val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val carsLeft = carsLeft.zip(carsRight)\n        val carsRight = carsRight.zip(carsLeft)\n\
    \        carsLeft.foreach { case (left, right) => if (left.zip(right).forall(_.forall(_.isDefined)))\
    \ collisions += 1 }\n        carsRight.foreach { case (left, right) => if (left.zip(right).forall(_.forall(_.isDefined)))\
    \ collisions += 1 }\n        collisions.sum", "        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(2), Vector.random(2), Vector.random(2)))\n        val collisions\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[",
  "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val collisions = carsLeft.zip(carsRight).filter(_._1.collidesWith(_._2)).length\n\
    \        collisions", "        val cars = mutable.ListBuffer[Long]()\n       \
    \ val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mut", "        val cars = Array.fill(2*n)(new Car)\n \
    \       val collisions = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val leftToRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val rightToLeft = mutable.ArrayBuffer.fill(n)(0)\n        val leftToRightCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val rightToLeftCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedCount = mutable.ArrayBuffer.fill(n)(0)\n        val collisionCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val leftToRightCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val rightToLeftCount = mutable.ArrayBuffer.fill(n)(0)\n        val speedCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val leftToRightCount = mutable.ArrayBuffer.fill(n)(0)\n        val rightToLeftCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionCount = mutable.ArrayBuffer.fill(n)(0)\n        val leftToRightCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val rightToLeftCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedCount = mutable.ArrayBuffer.fill(n)(0)\n        val collisionCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val leftToRightCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val rightToLeftCount = mutable.ArrayBuffer.fill(n)(0)\n        val speedCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val leftToRightCount = mutable.ArrayBuffer.fill(n)(0)\n        val rightToLeftCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionCount = mutable.ArrayBuffer.fill(n)(0)\n        val leftToRightCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val rightToLeftCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedCount = mutable.ArrayBuffer.fill(n)(0)\n        val collisionCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val leftToRightCount = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val rightToLeftCount = mutable.ArrayBuffer.fill(n)(0)\n        val speedCount\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionCount = mutable.ArrayBuffer.fill",
  "        var collisions = 0\n        var cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        var collisionsLeft = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        var collisionsRight = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        cars.foreach(c => collisions += c.forall(x => collisionsLeft.exists(y\
    \ => x == y) || collisionsRight.exists(y => x == y)))\n        collisions", " \
    \       val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount2 = mutable.Set.empty[Long]\n\
    \        val collisionsCount3 = mutable.Set.empty[Long]\n        val collisionsCount4\
    \ = mutable.Set.empty[Long]\n        val collisionsCount5 = mutable.Set.empty[Long]\n\
    \        val collisionsCount6 = mutable.Set.empty[Long]\n        val collisionsCount7\
    \ = mutable.Set.empty[Long]\n        val collisionsCount8 = mutable.Set.empty[Long]\n\
    \        val collisionsCount9 = mutable.Set.empty[Long]\n        val collisionsCount10\
    \ = mutable.Set.empty[Long]\n        val collisionsCount11 = mutable.Set.empty[Long]\n\
    \        val collisionsCount12 = mutable.Set.empty[Long]\n        val collisionsCount13\
    \ = mutable.Set.empty[Long]\n        val collisionsCount14 = mutable.Set.empty[Long]\n\
    \        val collisionsCount15 = mutable.Set.empty[Long]\n        val collisionsCount16\
    \ = mutable.Set.empty[Long]\n        val collisionsCount17 = mutable.Set.empty[Long]\n\
    \        val collisionsCount18 = mutable.Set.empty[Long]\n        val collisionsCount19\
    \ = mutable.Set.empty[Long]\n        val collisionsCount20 = mutable.Set.empty[Long]\n\
    \        val collisionsCount21 = mutable.Set.empty[Long]\n        val collisionsCount22\
    \ = mutable.Set.empty[Long]\n        val collisionsCount23 = mutable.Set.empty[Long]\n\
    \        val collisionsCount24 = mutable.Set.empty[Long]\n        val collisionsCount25\
    \ = mutable.Set.empty[Long]\n        val collisionsCount26 = mutable.Set.empty[Long]\n\
    \        val collisionsCount27 = mutable.Set.empty[Long]\n        val collisionsCount28\
    \ = mutable.Set.empty[Long]\n        val collisionsCount29 = mutable.Set.empty[Long]\n\
    \        val collisionsCount30 = mutable.Set.empty[Long]\n        val collisionsCount31\
    \ = mutable.Set.empty[Long]\n        val collisionsCount32 = mutable.Set.empty[Long]\n\
    \        val collisionsCount", "        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val carsSoFar = mutable.ListBuffer[Long]()\n\
    \        val speedsSoFar = mutable.ListBuffer[Double]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val carsSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val speedsSoFarSoFar = mutable.ListBuffer[Double]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val carsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val speedsSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val carsSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val speedsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val carsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n    \
    \    val speedsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n    \
    \    val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val carsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val speedsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val carsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val speedsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Double]()\n\
    \        val collisions", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n      \
    \  val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]", "        val cars = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsLeft = Array.fill(n / 2)(Array[Int]())\n        val carsRight\
    \ = Array.fill(n / 2)(Array[Int]())\n        val carsLeft = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsRight = Array.fill(n / 2)(Array[Int]())\n        val carsLeft\
    \ = Array.fill(n / 2)(Array[Int]())\n        val carsRight = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsLeft = Array.fill(n / 2)(Array[Int]())\n        val carsRight\
    \ = Array.fill(n / 2)(Array[Int]())\n        val carsLeft = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsRight = Array.fill(n / 2)(Array[Int]())\n        val carsLeft\
    \ = Array.fill(n / 2)(Array[Int]())\n        val carsRight = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsLeft = Array.fill(n / 2)(Array[Int]())\n        val carsRight\
    \ = Array.fill(n / 2)(Array[Int]())\n        val carsLeft = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsRight = Array.fill(n / 2)(Array[Int]())\n        val carsLeft\
    \ = Array.fill(n / 2)(Array[Int]())\n        val carsRight = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsLeft = Array.fill(n / 2)(Array[Int]())\n        val carsRight\
    \ = Array.fill(n / 2)(Array[Int]())\n        val carsLeft = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsRight = Array.fill(n / 2)(Array[Int]())\n        val carsLeft\
    \ = Array.fill(n / 2)(Array[Int]())\n        val carsRight = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsLeft = Array.fill(n / 2)(Array[Int]())\n        val carsRight\
    \ = Array.fill(n / 2)(Array[Int]())\n        val carsLeft = Array.fill(n / 2)(Array[Int]())\n\
    \        val carsRight = Array.fill(n / 2)(Array[Int]())\n        val carsLeft\
    \ = Array.", '        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j
    => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n
    => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r
    => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v
    => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z
    => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d
    => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h
    => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l
    => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p
    => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t
    => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x
    => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b
    => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f
    => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j
    => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul', "        val\
    \ cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val\
    \ carsLeft = cars.filter(_ < n)\n        val carsRight = cars.filter(_ >= n)\n\
    \        val carsCollisions = carsLeft.filter(_ => carsRight.contains(_)).length\n\
    \        carsCollisions", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[", "        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val left = mutable.ListBuffer[Long]()\n        val right = mutable.ListBuffer[Long]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val car = mutable.ListBuffer[Long]()\n\
    \        val car2 = mutable.ListBuffer[Long]()\n        val car3 = mutable.ListBuffer[Long]()\n\
    \        val car4 = mutable.ListBuffer[Long]()\n        val car5 = mutable.ListBuffer[Long]()\n\
    \        val car6 = mutable.ListBuffer[Long]()\n        val car7 = mutable.ListBuffer[Long]()\n\
    \        val car8 = mutable.ListBuffer[Long]()\n        val car9 = mutable.ListBuffer[Long]()\n\
    \        val car10 = mutable.ListBuffer[Long]()\n        val car11 = mutable.ListBuffer[Long]()\n\
    \        val car12 = mutable.ListBuffer[Long]()\n        val car13 = mutable.ListBuffer[Long]()\n\
    \        val car14 = mutable.ListBuffer[Long]()\n        val car15 = mutable.ListBuffer[Long]()\n\
    \        val car16 = mutable.ListBuffer[Long]()\n        val car17 = mutable.ListBuffer[Long]()\n\
    \        val car18 = mutable.ListBuffer[Long]()\n        val car19 = mutable.ListBuffer[Long]()\n\
    \        val car20 = mutable.ListBuffer[Long]()\n        val car21 = mutable.ListBuffer[Long]()\n\
    \        val car22 = mutable.ListBuffer[Long]()\n        val car23 = mutable.ListBuffer[Long]()\n\
    \        val car24 = mutable.ListBuffer[Long]()\n        val car25 = mutable.ListBuffer[Long]()\n\
    \        val car26 = mutable.ListBuffer[Long]()\n        val car27 = mutable.ListBuffer[Long]()\n\
    \        val car28 = mutable.ListBuffer[Long]()\n        val car29 = mutable.ListBuffer[Long]()\n\
    \        val car30 = mutable.ListBuffer[Long]()\n        val car31 = mutable.ListBuffer[Long]()\n\
    \        val car32 = mutable.ListBuffer[Long]()\n", "        val cars = mutable.ListBuffer(1\
    \ to n)\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsCount\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount2 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount3 = mutable.ListBuffer[Long]()\n        val collisionsCount4\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount5 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount6 = mutable.ListBuffer[Long]()\n        val collisionsCount7\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount8 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount9 = mutable.ListBuffer[Long]()\n        val collisionsCount10\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount11 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount12 = mutable.ListBuffer[Long]()\n        val collisionsCount13\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount14 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount15 = mutable.ListBuffer[Long]()\n        val collisionsCount16\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount17 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount18 = mutable.ListBuffer[Long]()\n        val collisionsCount19\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount20 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount21 = mutable.ListBuffer[Long]()\n        val collisionsCount22\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount23 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount24 = mutable.ListBuffer[Long]()\n        val collisionsCount25\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount26 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount27 = mutable.ListBuffer[Long]()\n        val collisionsCount28\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount29 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount30 = mutable.ListBuffer[Long]()\n        val collisionsCount31\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount", "        val cars\
    \ = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n   \
    \     val collided = mutable.Set[Car]()\n        val colliding = mutable.Set[Car]()\n\
    \        val collisions = mutable.Set[Car]()\n        val collisionsCount = mutable.Set[Car]()\n\
    \        val collisionsCount2 = mutable.Set[Car]()\n        val collisionsCount3\
    \ = mutable.Set[Car]()\n        val collisionsCount4 = mutable.Set[Car]()\n  \
    \      val collisionsCount5 = mutable.Set[Car]()\n        val collisionsCount6\
    \ = mutable.Set[Car]()\n        val collisionsCount7 = mutable.Set[Car]()\n  \
    \      val collisionsCount8 = mutable.Set[Car]()\n        val collisionsCount9\
    \ = mutable.Set[Car]()\n        val collisionsCount10 = mutable.Set[Car]()\n \
    \       val collisionsCount11 = mutable.Set[Car]()\n        val collisionsCount12\
    \ = mutable.Set[Car]()\n        val collisionsCount13 = mutable.Set[Car]()\n \
    \       val collisionsCount14 = mutable.Set[Car]()\n        val collisionsCount15\
    \ = mutable.Set[Car]()\n        val collisionsCount16 = mutable.Set[Car]()\n \
    \       val collisionsCount17 = mutable.Set[Car]()\n        val collisionsCount18\
    \ = mutable.Set[Car]()\n        val collisionsCount19 = mutable.Set[Car]()\n \
    \       val collisionsCount20 = mutable.Set[Car]()\n        val collisionsCount21\
    \ = mutable.Set[Car]()\n        val collisionsCount22 = mutable.Set[Car]()\n \
    \       val collisionsCount23 = mutable.Set[Car]()\n        val collisionsCount24\
    \ = mutable.Set[Car]()\n        val collisionsCount25 = mutable.Set[Car]()\n \
    \       val collisionsCount26 = mutable.Set[Car]()\n        val collisionsCount27\
    \ = mutable.Set[Car]()\n        val collisionsCount28 = mutable.Set[Car]()\n \
    \       val collisionsCount29 = mutable.Set[Car]()\n        val collisionsCount30\
    \ = mutable.Set[Car]()\n        val collisionsCount31 = mutable.Set", "      \
    \  val cars = Vector.tabulate(n)(i => new Car(Vector.random))\n        val collisions\
    \ = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n      \
    \  val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n      \
    \  val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n      \
    \  val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n      \
    \  val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n      \
    \  val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n      \
    \  val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n      \
    \  val collisionsCounts = mutable.Map.empty[Long, Long]\n        val ", "    \
    \    val cars = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsRight = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisions = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsRight = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsRight = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsRight = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsRight = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsRight = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsRight = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsRight = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n\
    \        val carsCollisionsRight = mutable.ArrayBuffer(1 to n).map(i => ", " \
    \       val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collides = mutable.Set.empty[Car]\n        val collide = mutable.Set.empty[Car]\n\
    \        val collisions = mutable.Set.empty[Car]\n        val collision = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount\
    \ = mutable.Set.empty[Car]\n        val collisionCount = mutable.Set.empty[Car]\n\
    \        val ", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[", "        val cars = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mut", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collisions = mutable.Set[Long]()\n       \
    \ val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar2 = mutable.Set[Long]()\n\
    \        val collisionsSoFar3 = mutable.Set[Long]()\n        val collisionsSoFar4\
    \ = mutable.Set[Long]()\n        val collisionsSoFar5 = mutable.Set[Long]()\n\
    \        val collisionsSoFar6 = mutable.Set[Long]()\n        val collisionsSoFar7\
    \ = mutable.Set[Long]()\n        val collisionsSoFar8 = mutable.Set[Long]()\n\
    \        val collisionsSoFar9 = mutable.Set[Long]()\n        val collisionsSoFar10\
    \ = mutable.Set[Long]()\n        val collisionsSoFar11 = mutable.Set[Long]()\n\
    \        val collisionsSoFar12 = mutable.Set[Long]()\n        val collisionsSoFar13\
    \ = mutable.Set[Long]()\n        val collisionsSoFar14 = mutable.Set[Long]()\n\
    \        val collisionsSoFar15 = mutable.Set[Long]()\n        val collisionsSoFar16\
    \ = mutable.Set[Long]()\n        val collisionsSoFar17 = mutable.Set[Long]()\n\
    \        val collisionsSoFar18 = mutable.Set[Long]()\n        val collisionsSoFar19\
    \ = mutable.Set[Long]()\n        val collisionsSoFar20 = mutable.Set[Long]()\n\
    \        val collisionsSoFar21 = mutable.Set[Long]()\n        val collisionsSoFar22\
    \ = mutable.Set[Long]()\n        val collisionsSoFar23 = mutable.Set[Long]()\n\
    \        val collisionsSoFar24 = mutable.Set[Long]()\n        val collisionsSoFar25\
    \ = mutable.Set[Long]()\n        val collisionsSoFar26 = mutable.Set[Long]()\n\
    \        val collisionsSoFar27 = mutable.Set[Long]()\n        val collisionsSoFar28\
    \ = mutable.Set[Long]()\n        val collisionsSoFar29 = mutable.Set[Long]()\n\
    \        val collisionsSoFar30 = mutable.Set[Long]()\n        val collisions",
  "        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to\
    \ n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n \
    \       cars.foreach { cars =>\n            cars.foreach { car =>\n          \
    \      cars.foreach { car2 =>\n                    val collision = car.zip(car2).forall\
    \ { case (c1, c2) => c1.zip(c2).forall { case (c1, c2) => c1 == c2 } }\n     \
    \               if (collision) collisions += cars.count(_ == car)\n          \
    \      }\n            }\n        }\n        collisions.sum", "        val cars\
    \ = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val carsLeft\
    \ = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val\
    \ collisions = mutable.ListBuffer.empty[Long]\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until n) {\n                if (i != j) {\n         \
    \           val collision = carsLeft.exists(carsRight.contains(_ + j))\n     \
    \               if (collision) collisions += collision\n                }\n  \
    \          }\n        }\n        collisions.sum", "        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer.empty[Long]\n        cars.foreach { cars =>\n         \
    \   cars.foreach { car =>\n                val collision = cars.foldLeft(0) {\
    \ (acc, car) =>\n                    val carLeft = car.head\n                \
    \    val carRight = car.last\n                    val carLeftRight = carLeft.last\
    \ + carLeft.head\n                    val carRightLeft = carRight.last + carRight.head\n\
    \                    if (carLeftRight == carRightLeft) {\n                   \
    \     acc + 1\n                    } else {\n                        acc\n   \
    \                 }\n                }\n                collisions += collision\n\
    \            }\n        }\n        collisions.sum", "        val cars = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ArrayBuffer(1 to n).map(j => Car(i, j)))\n        val\
    \ collisions = mutable.ArrayBuffer(0)\n        val collisionsLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsRight = mutable.ArrayBuffer(0)\n        val collisionsBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothRight = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBoth = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothLeft\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothRight = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothBoth = mutable.ArrayBuffer(0)\n       \
    \ val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n  \
    \      val collisionsBothBothBothBothBothBoth = mutable.ArrayBuffer(0)\n     \
    \   val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n  \
    \      val collisionsBothBothBothBothBothBoth = mutable.ArrayBuffer(0)\n     \
    \   val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBothLeft\
    \ = mutable.ArrayBuffer(0)\n        ", "        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val carsCollisions = carsLeft.zip(carsRight).filter(_._1._\
    \ == _._2._).length\n        carsCollisions", "        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.", "        val cars = Vector.tabulate(n)(i =>\
    \ new Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.ListBuffer.empty[Long]\n\
    \        val collide = mutable.ListBuffer.empty[Long]\n        val collide2 =\
    \ mutable.ListBuffer.empty[Long]\n        val collide3 = mutable.ListBuffer.empty[Long]\n\
    \        val collide4 = mutable.ListBuffer.empty[Long]\n        val collide5 =\
    \ mutable.ListBuffer.empty[Long]\n        val collide6 = mutable.ListBuffer.empty[Long]\n\
    \        val collide7 = mutable.ListBuffer.empty[Long]\n        val collide8 =\
    \ mutable.ListBuffer.empty[Long]\n        val collide9 = mutable.ListBuffer.empty[Long]\n\
    \        val collide10 = mutable.ListBuffer.empty[Long]\n        val collide11\
    \ = mutable.ListBuffer.empty[Long]\n        val collide12 = mutable.ListBuffer.empty[Long]\n\
    \        val collide13 = mutable.ListBuffer.empty[Long]\n        val collide14\
    \ = mutable.ListBuffer.empty[Long]\n        val collide15 = mutable.ListBuffer.empty[Long]\n\
    \        val collide16 = mutable.ListBuffer.empty[Long]\n        val collide17\
    \ = mutable.ListBuffer.empty[Long]\n        val collide18 = mutable.ListBuffer.empty[Long]\n\
    \        val collide19 = mutable.ListBuffer.empty[Long]\n        val collide20\
    \ = mutable.ListBuffer.empty[Long]\n        val collide21 = mutable.ListBuffer.empty[Long]\n\
    \        val collide22 = mutable.ListBuffer.empty[Long]\n        val collide23\
    \ = mutable.ListBuffer.empty[Long]\n        val collide24 = mutable.ListBuffer.empty[Long]\n\
    \        val collide25 = mutable.ListBuffer.empty[Long]\n        val collide26\
    \ = mutable.ListBuffer.empty[Long]\n        val collide27 = mutable.ListBuffer.empty[Long]\n\
    \        val collide28 = mutable.ListBuffer.empty[Long]\n        val collide29\
    \ = mutable.ListBuffer.empty[Long]\n        val collide30 = mutable.ListBuffer.empty[Long]\n\
    \        val collide31 = mutable.ListBuffer.empty[Long]\n        val collide32\
    \ = mutable.ListBuffer.empty[Long]\n        ", "        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]", "        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.", '        val cars = Vector.tabulate(n)(i =>
    Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m
    => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q
    => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u
    => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y
    => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c
    => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g
    => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k
    => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o
    => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s
    => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w
    => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a
    => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e
    => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i
    => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul',
  "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount2 = mutable.Set.empty[Long]\n\
    \        val collisionsCount3 = mutable.Set.empty[Long]\n        val collisionsCount4\
    \ = mutable.Set.empty[Long]\n        val collisionsCount5 = mutable.Set.empty[Long]\n\
    \        val collisionsCount6 = mutable.Set.empty[Long]\n        val collisionsCount7\
    \ = mutable.Set.empty[Long]\n        val collisionsCount8 = mutable.Set.empty[Long]\n\
    \        val collisionsCount9 = mutable.Set.empty[Long]\n        val collisionsCount10\
    \ = mutable.Set.empty[Long]\n        val collisionsCount11 = mutable.Set.empty[Long]\n\
    \        val collisionsCount12 = mutable.Set.empty[Long]\n        val collisionsCount13\
    \ = mutable.Set.empty[Long]\n        val collisionsCount14 = mutable.Set.empty[Long]\n\
    \        val collisionsCount15 = mutable.Set.empty[Long]\n        val collisionsCount16\
    \ = mutable.Set.empty[Long]\n        val collisionsCount17 = mutable.Set.empty[Long]\n\
    \        val collisionsCount18 = mutable.Set.empty[Long]\n        val collisionsCount19\
    \ = mutable.Set.empty[Long]\n        val collisionsCount20 = mutable.Set.empty[Long]\n\
    \        val collisionsCount21 = mutable.Set.empty[Long]\n        val collisionsCount22\
    \ = mutable.Set.empty[Long]\n        val collisionsCount23 = mutable.Set.empty[Long]\n\
    \        val collisionsCount24 = mutable.Set.empty[Long]\n        val collisionsCount25\
    \ = mutable.Set.empty[Long]\n        val collisionsCount26 = mutable.Set.empty[Long]\n\
    \        val collisionsCount27 = mutable.Set.empty[Long]\n        val collisionsCount28\
    \ = mutable.Set.empty[Long]\n        val collisionsCount29 = mutable.Set.empty[Long]\n\
    \        val collisionsCount30 = mutable.Set.empty[Long]\n        val collisionsCount31\
    \ = mutable.Set.empty[Long]\n        val collisionsCount32 = mutable.Set.empty[Long]\n\
    \        val collisionsCount", "        val collisions = 0\n        val cars =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val left = mutable.ArrayBuffer.fill(n)(0)\n        val right = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable."]
stop_tokens:
- "\n    }\n"
