name: HumanEval_41_car_race_collision
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Imagine a road that's a perfectly straight infinitely long line.\n    //\
  \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
  \    // are driving right to left.   The two sets of cars start out being very far\
  \ from\n    // each other.  All cars move in the same speed.  Two cars are said\
  \ to collide\n    // when a car that's moving left to right hits a car that's moving\
  \ right to left.\n    // However, the cars are infinitely sturdy and strong; as\
  \ a result, they continue moving\n    // in their trajectory as if they did not\
  \ collide.\n    // This function outputs the number of such collisions.\n    def\
  \ carRaceCollision(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
  \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
  \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
  \ == (100l));\n    }\n\n}\n"
completions: ["        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collisions = mutable.Set[Car]()\n        val\
    \ collisionsCount = mutable.Set[Car]()\n        val collisionsCount2 = mutable.Set[Car]()\n\
    \        val collisionsCount3 = mutable.Set[Car]()\n        val collisionsCount4\
    \ = mutable.Set[Car]()\n        val collisionsCount5 = mutable.Set[Car]()\n  \
    \      val collisionsCount6 = mutable.Set[Car]()\n        val collisionsCount7\
    \ = mutable.Set[Car]()\n        val collisionsCount8 = mutable.Set[Car]()\n  \
    \      val collisionsCount9 = mutable.Set[Car]()\n        val collisionsCount10\
    \ = mutable.Set[Car]()\n        val collisionsCount11 = mutable.Set[Car]()\n \
    \       val collisionsCount12 = mutable.Set[Car]()\n        val collisionsCount13\
    \ = mutable.Set[Car]()\n        val collisionsCount14 = mutable.Set[Car]()\n \
    \       val collisionsCount15 = mutable.Set[Car]()\n        val collisionsCount16\
    \ = mutable.Set[Car]()\n        val collisionsCount17 = mutable.Set[Car]()\n \
    \       val collisionsCount18 = mutable.Set[Car]()\n        val collisionsCount19\
    \ = mutable.Set[Car]()\n        val collisionsCount20 = mutable.Set[Car]()\n \
    \       val collisionsCount21 = mutable.Set[Car]()\n        val collisionsCount22\
    \ = mutable.Set[Car]()\n        val collisionsCount23 = mutable.Set[Car]()\n \
    \       val collisionsCount24 = mutable.Set[Car]()\n        val collisionsCount25\
    \ = mutable.Set[Car]()\n        val collisionsCount26 = mutable.Set[Car]()\n \
    \       val collisionsCount27 = mutable.Set[Car]()\n        val collisionsCount28\
    \ = mutable.Set[Car]()\n        val collisionsCount29 = mutable.Set[Car]()\n \
    \       val collisionsCount30 = mutable.Set[Car]()\n        val collisionsCount31\
    \ = mutable.Set[Car]()\n        val collisionsCount32 = mutable.Set[Car]()\n \
    \       val collisionsCount", "        val cars = mutable.ListBuffer(1 to n).map(i\
    \ => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long", "        val collisions = mutable.Set[Long]()\n\
    \        val cars = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val ", "        val cars\
    \ = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n   \
    \     val collided = mutable.Set[Car]()\n        val collisions = mutable.Set[Car]()\n\
    \        val collisionsCount = mutable.Set[Car]()\n        val collisionsCount2\
    \ = mutable.Set[Car]()\n        val collisionsCount3 = mutable.Set[Car]()\n  \
    \      val collisionsCount4 = mutable.Set[Car]()\n        val collisionsCount5\
    \ = mutable.Set[Car]()\n        val collisionsCount6 = mutable.Set[Car]()\n  \
    \      val collisionsCount7 = mutable.Set[Car]()\n        val collisionsCount8\
    \ = mutable.Set[Car]()\n        val collisionsCount9 = mutable.Set[Car]()\n  \
    \      val collisionsCount10 = mutable.Set[Car]()\n        val collisionsCount11\
    \ = mutable.Set[Car]()\n        val collisionsCount12 = mutable.Set[Car]()\n \
    \       val collisionsCount13 = mutable.Set[Car]()\n        val collisionsCount14\
    \ = mutable.Set[Car]()\n        val collisionsCount15 = mutable.Set[Car]()\n \
    \       val collisionsCount16 = mutable.Set[Car]()\n        val collisionsCount17\
    \ = mutable.Set[Car]()\n        val collisionsCount18 = mutable.Set[Car]()\n \
    \       val collisionsCount19 = mutable.Set[Car]()\n        val collisionsCount20\
    \ = mutable.Set[Car]()\n        val collisionsCount21 = mutable.Set[Car]()\n \
    \       val collisionsCount22 = mutable.Set[Car]()\n        val collisionsCount23\
    \ = mutable.Set[Car]()\n        val collisionsCount24 = mutable.Set[Car]()\n \
    \       val collisionsCount25 = mutable.Set[Car]()\n        val collisionsCount26\
    \ = mutable.Set[Car]()\n        val collisionsCount27 = mutable.Set[Car]()\n \
    \       val collisionsCount28 = mutable.Set[Car]()\n        val collisionsCount29\
    \ = mutable.Set[Car]()\n        val collisionsCount30 = mutable.Set[Car]()\n \
    \       val collisionsCount31 = mutable.Set[Car]()\n        val collisionsCount32\
    \ = mut", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speeds = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBefore\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsAfter = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsBeforeAfter = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfter =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val ", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(",
  "        var collisions = 0\n        var currentCar = 0\n        var previousCar\
    \ = 0\n        var currentSpeed = 0\n        var previousSpeed = 0\n        var\
    \ currentCollision = 0\n        var previousCollision = 0\n        var currentCollisionCount\
    \ = 0\n        var previousCollisionCount = 0\n        var currentCollisionCount2\
    \ = 0\n        var previousCollisionCount2 = 0\n        var currentCollisionCount3\
    \ = 0\n        var previousCollisionCount3 = 0\n        var currentCollisionCount4\
    \ = 0\n        var previousCollisionCount4 = 0\n        var currentCollisionCount5\
    \ = 0\n        var previousCollisionCount5 = 0\n        var currentCollisionCount6\
    \ = 0\n        var previousCollisionCount6 = 0\n        var currentCollisionCount7\
    \ = 0\n        var previousCollisionCount7 = 0\n        var currentCollisionCount8\
    \ = 0\n        var previousCollisionCount8 = 0\n        var currentCollisionCount9\
    \ = 0\n        var previousCollisionCount9 = 0\n        var currentCollisionCount10\
    \ = 0\n        var previousCollisionCount10 = 0\n        var currentCollisionCount11\
    \ = 0\n        var previousCollisionCount11 = 0\n        var currentCollisionCount12\
    \ = 0\n        var previousCollisionCount12 = 0\n        var currentCollisionCount13\
    \ = 0\n        var previousCollisionCount13 = 0\n        var currentCollisionCount14\
    \ = 0\n        var previousCollisionCount14 = 0\n        var currentCollisionCount15\
    \ = 0\n        var previousCollisionCount15 = 0\n        var currentCollisionCount16\
    \ = 0\n        var previousCollisionCount16 = 0\n        var currentCollisionCount17\
    \ = 0\n        var previousCollisionCount17 = 0\n        var currentCollisionCount18\
    \ = 0\n        var previousCollisionCount18 = 0\n        var currentCollisionCount19\
    \ = 0\n        var previousCollisionCount19 = 0\n        var currentCollisionCount20\
    \ = 0\n        var previousCollisionCount20 = 0\n        var currentCollisionCount21\
    \ = 0\n        var previousCollisionCount21 = 0\n        var currentCollisionCount22\
    \ = 0\n        var previousCollisionCount22 = 0\n        var currentCollisionCount23\
    \ = 0\n        var previousCollisionCount23 = 0\n        var currentCollisionCount24\
    \ = 0\n        var previousCollisionCount24 = 0\n        var currentCollisionCount25\
    \ = 0\n        var previousCollisionCount25 = 0\n        var currentCollisionCount26\
    \ = 0\n        var previousCollisionCount26 = 0\n        var currentCollisionCount27\
    \ = 0\n        var previousCollisionCount27 = 0\n        var currentCollisionCount28\
    \ = 0\n        var previousCollisionCount28 = 0\n        var currentCollisionCount29\
    \ = 0\n        var previousCollisionCount29 = 0\n        var currentCollisionCount30\
    \ = 0\n        var previousCollisionCount30 = 0\n        var currentCollisionCount31\
    \ = 0\n        var previousCollisionCount31 = 0\n        var currentCollisionCount32\
    \ = 0\n        var previousCollisionCount32 = 0\n        var currentCollisionCount33\
    \ = 0\n        var previousCollisionCount33 = 0\n        var currentCollisionCount34\
    \ = 0\n        var previousCollisionCount34 = 0\n        var currentCollisionCount",
  "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n  \
    \      val collisions = mutable.Set[Long]()\n        val collisionsCount = 0\n\
    \        val collisionsCountPerCar = mutable.Set[Long]()\n        val collisionsCountPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCar = mutable.Set[Long]()\n\
    \        val collisionsCountPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n \
    \       val collisionsCountPerCarPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n\
    \        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n\
    \        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n\
    \        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar =\
    \ mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar",
  "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        val carsLeft\
    \ = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val\
    \ carsCollisions = carsLeft.zip(carsRight).filter(_._1.x == _._1.x).filter(_._1.y\
    \ == _._1.y).filter(_._1.z == _._1.z).filter(_._1.x == _._2.x).filter(_._1.y ==\
    \ _._2.y).filter(_._1.z == _._2.z).filter(_._2.x == _._1.x).filter(_._2.y == _._1.y).filter(_._2.z\
    \ == _._1.z).filter(_._2.x == _._2.x).filter(_._2.y == _._2.y).filter(_._2.z ==\
    \ _._2.z).length\n        collisions += carsCollisions\n        collisions.sum",
  "        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.",
  "        val cars = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsLeft\
    \ = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsRight = Array.fill(n\
    \ / 2)(mutable.Stack.empty[Int])\n        val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n\
    \        val carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n       \
    \ val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsRight\
    \ = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsLeft = Array.fill(n\
    \ / 2)(mutable.Stack.empty[Int])\n        val carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n\
    \        val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val\
    \ carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsLeft\
    \ = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsRight = Array.fill(n\
    \ / 2)(mutable.Stack.empty[Int])\n        val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n\
    \        val carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n       \
    \ val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsRight\
    \ = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsLeft = Array.fill(n\
    \ / 2)(mutable.Stack.empty[Int])\n        val carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n\
    \        val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val\
    \ carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsLeft\
    \ = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        val carsRight = Array.fill(n\
    \ / 2)(mutable.Stack.empty[Int])\n        val carsLeft = Array.fill(n / 2)(mutable.Stack.empty[Int])\n\
    \        val carsRight = Array.fill(n / 2)(mutable.Stack.empty[Int])\n        ",
  "        val cars = mutable.ListBuffer[Long]()\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.",
  "        val collisions = mutable.Set[Long]()\n        val cars = mutable.Set[Long]()\n\
    \        val speed = mutable.Set[Double]()\n        val speeds = mutable.Set[Double]()\n\
    \        val speedLimit = mutable.Set[Double]()\n        val speedLimits = mutable.Set[Double]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mut", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collisions = mutable.Set[Car]()\n        val\
    \ collisionCount = 0\n        val collisionsSoFar = mutable.Set[Car]()\n     \
    \   val collisionsSoFarCount = 0\n        val carsMovingLeft = cars.filter(_.getDirection.x\
    \ < 0).map(_.getSpeed)\n        val carsMovingRight = cars.filter(_.getDirection.x\
    \ > 0).map(_.getSpeed)\n        carsMovingLeft.foreach(speed => collisions +=\
    \ cars.find(_.getSpeed == speed))\n        carsMovingRight.foreach(speed => collisions\
    \ += cars.find(_.getSpeed == speed))\n        collisions.foreach(c => {\n    \
    \        collisionCount += 1\n            collisionsSoFar += c\n            collisionsSoFarCount\
    \ += 1\n        })\n        collisionCount - collisionsSoFarCount", "        val\
    \ cars = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisions\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speed\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLeft = mutable.ArrayBuffer.fill(n",
  "        val cars = Vector.tabulate(n)(i => i)\n        val carsLeft = cars.tail\n\
    \        val carsRight = cars.init\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n        val collisionsRight = collisions.init\n\
    \        val collisionsLeft = collisions.tail\n", "        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.filter(_ < n)\n\
    \        val carsRight = cars.filter(_ >= n)\n        val collisions = carsLeft.filter(_\
    \ => carsRight.contains(_)).size\n        collisions", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.",
  "        val cars = Vector.tabulate(n)(i => Car(Vector.random(2), Vector.random(2),\
    \ Vector.random(2)))\n        val collided = cars.foldLeft(0)((acc, car) => acc\
    \ + (car.collide(cars)))\n        collided", "        val cars = mutable.ListBuffer(1\
    \ to n).map(i => new Car(i))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar"]
stop_tokens:
- "\n    }\n"
