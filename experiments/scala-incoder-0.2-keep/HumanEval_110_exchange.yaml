name: HumanEval_110_exchange
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this problem, you will implement a function that takes two lists of numbers,\n\
  \    // and determines whether it is possible to perform an exchange of elements\n\
  \    // between them to make lst1 a list of only even numbers.\n    // There is\
  \ no limit on the number of exchanged elements between lst1 and lst2.\n    // If\
  \ it is possible to exchange elements between the lst1 and lst2 to make\n    //\
  \ all the elements of lst1 to be even, return \"YES\".\n    // Otherwise, return\
  \ \"NO\".\n    // For example:\n    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"\
  YES\"\n    // exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    // It is assumed\
  \ that the input lists will be non-empty.\n    def exchange(lst1 : List[Long], lst2\
  \ : List[Long]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(exchange((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 5l.toLong, 3l.toLong, 4l.toLong))).equals((\"\
  NO\")));\n    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)),\
  \ (List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong))).equals((\"YES\")));\n\
  \    assert(exchange((List[Long](5l.toLong, 7l.toLong, 3l.toLong)), (List[Long](2l.toLong,\
  \ 6l.toLong, 4l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](5l.toLong,\
  \ 7l.toLong, 3l.toLong)), (List[Long](2l.toLong, 6l.toLong, 3l.toLong))).equals((\"\
  NO\")));\n    assert(exchange((List[Long](3l.toLong, 2l.toLong, 6l.toLong, 1l.toLong,\
  \ 8l.toLong, 9l.toLong)), (List[Long](3l.toLong, 5l.toLong, 5l.toLong, 1l.toLong,\
  \ 1l.toLong, 1l.toLong))).equals((\"NO\")));\n    assert(exchange((List[Long](100l.toLong,\
  \ 200l.toLong)), (List[Long](200l.toLong, 200l.toLong))).equals((\"YES\")));\n \
  \   }\n\n}\n"
completions: ["        val even = lst1.filter(x => x % 2 == 0).size\n        val odd\
    \ = lst2.filter(x => x % 2 == 1).size\n        if (even == odd) {\n          \
    \  return \"YES\"\n        } else {\n            return \"NO\"\n        }", '        //
    Your code here', "        val even = lst1.filter(_ % 2 == 0)\n        val odd\
    \ = lst2.filter(_ % 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n  \
    \      val evenAndEven = even.intersect(even)\n        val evenAndOddAndEven =\
    \ evenAndEven.intersect(evenAndOdd)\n        val evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n\
    \        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven",
  "        // Your code here\n        val even = lst1.filter(x => x % 2 == 0).size\n\
    \        val odd = lst2.filter(x => x % 2 == 1).size\n        if (even > odd)\
    \ {\n            return \"NO\"\n        } else {\n            return \"YES\"\n\
    \        }", "        val even = lst1.filter(x => x % 2 == 0)\n        val odd\
    \ = lst2.filter(x => x % 2 == 1)\n        if (even.size == odd.size) {\n     \
    \       val evenList = even.map(x => x * 2)\n            val oddList = odd.map(x\
    \ => x * 2)\n            val evenList = evenList.filter(x => x % 2 == 0)\n   \
    \         val oddList = oddList.filter(x => x % 2 == 1)\n            if (evenList.size\
    \ == oddList.size) {\n                val evenList = evenList.map(x => x * 2)\n\
    \                val oddList = oddList.map(x => x * 2)\n                val evenList\
    \ = evenList.filter(x => x % 2 == 0)\n                val oddList = oddList.filter(x\
    \ => x % 2 == 1)\n                if (evenList.size == oddList.size) {\n     \
    \               val evenList = evenList.map(x => x * 2)\n                    val\
    \ oddList = oddList.map(x => x * 2)\n                    val evenList = evenList.filter(x\
    \ => x % 2 == 0)\n                    val oddList = oddList.filter(x => x % 2\
    \ == 1)\n                    if (evenList.size == oddList.size) {\n          \
    \              val evenList = evenList.map(x => x * 2)\n                     \
    \   val oddList = oddList.map(x => x * 2)\n                        val evenList\
    \ = evenList.filter(x => x % 2 == 0)\n                        val oddList = oddList.filter(x\
    \ => x % 2 == 1)\n                        if (evenList.size == oddList.size) {\n\
    \                            val evenList = evenList.map(x => x * 2)\n       \
    \                     val oddList = oddList.map(x => x * 2)\n                \
    \            val evenList = evenList.filter(x => x % 2 == 0)\n               \
    \             val oddList = oddList.filter(x => x % 2 == 1)\n                \
    \            if (evenList.size == oddList.size) {\n                          \
    \      val evenList = evenList.map(x => x * 2)\n                             \
    \   val oddList = oddList.map(x => x * 2)\n                                val\
    \ evenList = evenList.filter(x => x % 2 == 0)\n                              \
    \  val oddList = oddList.filter(x => x % 2 == 1)\n                           \
    \     if (evenList.size == oddList.size) {\n                                 \
    \   val evenList = evenList.map(x => x * 2)\n                                \
    \    val oddList = oddList.map(x => x * 2)\n                                 \
    \   val evenList = evenList.filter(x => x % 2 == 0)\n                        \
    \            val oddList = oddList.filter(x => x % 2 == 1)\n                 \
    \                   if (evenList.size == oddList.size) {\n                   \
    \                     val evenList = evenList.map(x => x * 2)\n              \
    \                          val oddList = oddList.map(x => x * 2)\n           \
    \                             val evenList = evenList.filter(x => x % 2 == 0)\n\
    \                                        val oddList = oddList.filter(x => x %\
    \ 2 == 1)\n                                ", "        val even = lst1.filter(x\
    \ => x % 2 == 0).length\n        val odd = lst2.filter(x => x % 2 == 1).length\n\
    \        if (even > odd) {\n            return \"NO\"\n        }\n        if (even\
    \ < odd) {\n            return \"YES\"\n        }\n        val lst3 = lst1.filter(x\
    \ => x % 2 == 0).zip(lst2.filter(x => x % 2 == 1))\n        val lst4 = lst3.toList\n\
    \        val lst5 = lst4.filter(x => x._1 == x._2)\n        val lst6 = lst5.map(x\
    \ => x._1)\n        val lst7 = lst6.filter(x => x % 2 == 0).map(x => x.toLong)\n\
    \        val lst8 = lst7.filter(x => x % 2 == 1).map(x => x.toLong)\n        val\
    \ lst9 = lst8.filter(x => x % 2 == 0).map(x => x.toLong)\n        val lst10 =\
    \ lst9.filter(x => x % 2 == 1).map(x => x.toLong)\n        val lst11 = lst10.filter(x\
    \ => x % 2 == 0).map(x => x.toLong)\n        val lst12 = lst11.filter(x => x %\
    \ 2 == 1).map(x => x.toLong)\n        val lst13 = lst12.filter(x => x % 2 == 0).map(x\
    \ => x.toLong)\n        val lst14 = lst13.filter(x => x % 2 == 1).map(x => x.toLong)\n\
    \        val lst15 = lst14.filter(x => x % 2 == 0).map(x => x.toLong)\n      \
    \  val lst16 = lst15.filter(x => x % 2 == 1).map(x => x.toLong)\n        val lst17\
    \ = lst16.filter(x => x % 2 == 0).map(x => x.toLong)\n        val lst18 = lst17.filter(x\
    \ => x % 2 == 1).map(x => x.toLong)\n        val lst19 = lst18.filter(x => x %\
    \ 2 == 0).map(x => x.toLong)\n        val lst20 = lst19.filter(x => x % 2 == 1).map(x\
    \ => x.toLong)\n        val lst21 = lst20.filter(x => x % 2 == 0).map(x => x.toLong)\n\
    \        val lst22 = lst21.filter(x => x % 2 == 1).map(x => x.toLong)\n      \
    \  val lst23 = lst22.filter(x => x % 2 == 0).map(x => x.toLong)\n        val lst24\
    \ = lst23.filter(x => x % 2 == 1).map(x => x.toLong)\n        val lst25 = lst",
  "        val even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ % 2\
    \ == 1)\n        val evenAndOdd = even.intersect(odd)\n        val evenAndEven\
    \ = even.intersect(even)\n        val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n\
    \        val evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n        val\
    \ evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n  \
    \      val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        ", "        val even = lst1.filter(x => x % 2 == 0).size\n        val\
    \ odd = lst2.filter(x => x % 2 == 1).size\n        if (even == odd) {\n      \
    \      return \"YES\"\n        } else {\n            return \"NO\"\n        }",
  "        // Your code goes here\n        val even = lst1.filter(x => x % 2 == 0)\n\
    \        val odd = lst2.filter(x => x % 2 == 1)\n        val evenOdd = even.zip(odd)\n\
    \        val evenOddMap = evenOdd.map(x => (x._1, x._2)).toMap\n        val evenOddMap2\
    \ = evenOddMap.filter(_._1 == evenOddMap(_._1))\n        val evenOddMap3 = evenOddMap2.filter(_._2\
    \ == evenOddMap(_._2))\n        val evenOddMap4 = evenOddMap3.filter(_._1 == evenOddMap(_._1))\n\
    \        val evenOddMap5 = evenOddMap4.filter(_._2 == evenOddMap(_._2))\n    \
    \    val evenOddMap6 = evenOddMap5.filter(_._1 == evenOddMap(_._1))\n        val\
    \ evenOddMap7 = evenOddMap6.filter(_._2 == evenOddMap(_._2))\n        val evenOddMap8\
    \ = evenOddMap7.filter(_._1 == evenOddMap(_._1))\n        val evenOddMap9 = evenOddMap8.filter(_._2\
    \ == evenOddMap(_._2))\n        val evenOddMap10 = evenOddMap9.filter(_._1 ==\
    \ evenOddMap(_._1))\n        val evenOddMap11 = evenOddMap10.filter(_._2 == evenOddMap(_._2))\n\
    \        val evenOddMap12 = evenOddMap11.filter(_._1 == evenOddMap(_._1))\n  \
    \      val evenOddMap13 = evenOddMap12.filter(_._2 == evenOddMap(_._2))\n    \
    \    val evenOddMap14 = evenOddMap13.filter(_._1 == evenOddMap(_._1))\n      \
    \  val evenOddMap15 = evenOddMap14.filter(_._2 == evenOddMap(_._2))\n        val\
    \ evenOddMap16 = evenOddMap15.filter(_._1 == evenOddMap(_._1))\n        val evenOddMap17\
    \ = evenOddMap16.filter(_._2 == evenOddMap(_._2))\n        val evenOddMap18 =\
    \ evenOddMap17.filter(_._1 == evenOddMap(_._1))\n        val evenOddMap19 = evenOddMap18.filter(_._2\
    \ == evenOddMap(_._2))\n        val evenOddMap", "        val lst3 = lst1.toSet.diff(lst2.toSet)\n\
    \        if (lst3.isEmpty) \"\"\n        else lst3.toList.mkString(\"\").equals(\"\
    YES\") ? \"YES\" : \"NO\"", "        val lst1Even = lst1.filter(x => x % 2 ==\
    \ 0)\n        val lst2Even = lst2.filter(x => x % 2 == 0)\n        val lst1Odd\
    \ = lst1.filter(x => x % 2 != 0)\n        val lst2Odd = lst2.filter(x => x % 2\
    \ != 0)\n        val lst1EvenOdd = lst1Even.filter(x => x % 2 != 0)\n        val\
    \ lst2EvenOdd = lst2Even.filter(x => x % 2 != 0)\n        val lst1EvenOddOdd =\
    \ lst1EvenOdd.filter(x => x % 2 != 0)\n        val lst2EvenOddOdd = lst2EvenOdd.filter(x\
    \ => x % 2 != 0)\n        val lst1EvenOddEvenOdd = lst1EvenOddOdd.filter(x =>\
    \ x % 2 != 0)\n        val lst2EvenOddEvenOdd = lst2EvenOddOdd.filter(x => x %\
    \ 2 != 0)\n        val lst1EvenOddEvenOddOdd = lst1EvenOddEvenOdd.filter(x =>\
    \ x % 2 != 0)\n        val lst2EvenOddEvenOddOdd = lst2EvenOddEvenOdd.filter(x\
    \ => x % 2 != 0)\n        val lst1EvenOddEvenOddEvenOdd = lst1EvenOddEvenOddOdd.filter(x\
    \ => x % 2 != 0)\n        val lst2EvenOddEvenOddEvenOdd = lst2EvenOddEvenOddOdd.filter(x\
    \ => x % 2 != 0)\n        val lst1EvenOddEvenOddEvenOddOdd = lst1EvenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 != 0)\n        val lst2EvenOddEvenOddEvenOddOdd = lst2EvenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 != 0)\n        val lst1EvenOddEvenOddEvenOddEvenOdd = lst1EvenOddEvenOddEvenOddOdd.filter(x\
    \ => x % 2 != 0)\n        val lst2EvenOddEvenOddEvenOddEvenOdd = lst2EvenOddEvenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 != 0)\n        val lst1EvenOddEvenOddEven", "        val even = lst1.filter(_\
    \ % 2 == 0)\n        val odd = lst2.filter(_ % 2 != 0)\n        val evenOdd =\
    \ even.zip(odd)\n        val evenOddMap = evenOdd.toMap\n        val evenOddMapKeys\
    \ = evenOddMap.keys\n        val evenOddMapValues = evenOddMap.values.toList\n\
    \        val evenOddMapValuesSum = evenOddMapValues.sum\n        val evenOddMapValuesSumEven\
    \ = evenOddMapValuesSum.filter(_ % 2 == 0)\n        val evenOddMapValuesSumOdd\
    \ = evenOddMapValuesSum.filter(_ % 2 != 0)\n        val evenOddMapValuesSumEvenOdd\
    \ = evenOddMapValuesSumEven.zip(evenOddMapValuesSumOdd)\n        val evenOddMapValuesSumEvenOddMap\
    \ = evenOddMapValuesSumEvenOdd.toMap\n        val evenOddMapValuesSumEvenOddMapKeys\
    \ = evenOddMapValuesSumEvenOddMap.keys\n        val evenOddMapValuesSumEvenOddMapValues\
    \ = evenOddMapValuesSumEvenOddMap.values.toList\n        val evenOddMapValuesSumEvenOddMapValuesSum\
    \ = evenOddMapValuesSumEvenOddMapValues.sum\n        val evenOddMapValuesSumEvenOddMapValuesSumEven\
    \ = evenOddMapValuesSumEvenOddMapValuesSum.filter(_ % 2 == 0)\n        val evenOddMapValuesSumEvenOddMapValuesSumOdd\
    \ = evenOddMapValuesSumEvenOddMapValuesSum.filter(_ % 2 != 0)\n        val evenOddMapValuesSumEvenOddMapValuesSumEvenOdd\
    \ = evenOddMapValuesSumEvenOddMapValuesSumEven.zip(evenOddMapValuesSumEvenOddMapValuesSumOdd)\n\
    \        val evenOddMapValuesSumEvenOddMapValuesSumEvenOddMap = evenOddMapValuesSumEvenOddMapValuesSumEvenOdd.toMap\n\
    \        val evenOddMapValuesSumEvenOddMapValuesSumEvenOddMapKeys = evenOddMapValuesSumEvenOddMapValuesSumEvenOddMapKeys.keys\n\
    \        val evenOddMapValuesSumEvenOddMapValuesSumEvenOddMapValues = evenOddMapValuesSumEvenOdd",
  "        val lst1Set = lst1.toSet\n        val lst2Set = lst2.toSet\n        val\
    \ lst1Set2 = lst1Set.intersect(lst2Set)\n        if(lst1Set2.isEmpty){\n     \
    \       return \"NO\"\n        }\n        else{\n            return \"YES\"\n\
    \        }", "        val even = lst1.filter(x => x % 2 == 0).length\n       \
    \ val odd = lst2.filter(x => x % 2 == 1).length\n        if (even > odd) \n  \
    \          \"NO\"\n        else if (even < odd)\n            \"YES\"\n       \
    \ else\n            exchange(lst1.filter(_ % 2 == 0), lst2.filter(_ % 2 == 1))",
  "        // Your code here\n        val lst3 = lst1.filter(_ % 2 == 0).filter(_\
    \ != lst2.head).filter(_ != lst2.last)\n        if(lst3.isEmpty) \"\"\n      \
    \  else exchange(lst3, lst2)", "        val even = lst1.filter(x => x % 2 == 0)\n\
    \        val odd = lst2.filter(x => x % 2 == 0)\n        val evenAndOdd = even.intersect(odd)\n\
    \        val evenAndOddAndEven = evenAndOdd.intersect(even)\n        val evenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEven.intersect(odd)\n        val evenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOdd.intersect(even)\n        val evenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEven.intersect(odd)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAnd", " \
    \       val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n        val evenAndOddAndEven\
    \ = evenAndOdd.intersect(even)\n        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd",
  "        val even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ % 2\
    \ == 1)\n        val evenAndOdd = even.intersect(odd)\n        if (evenAndOdd.isEmpty)\
    \ \"\" else \"NO\"", "        val lst3 = lst1.toSet\n        val lst4 = lst2.toSet\n\
    \        val lst5 = lst3.intersect(lst4)\n        val lst6 = lst5.filter(x =>\
    \ x % 2 == 0)\n        if (lst6.size == lst5.size) {\n            return \"YES\"\
    \n        }\n        else {\n            return \"NO\"\n        }", "        val\
    \ lst1Even = lst1.filter(_ % 2 == 0)\n        val lst2Even = lst2.filter(_ % 2\
    \ == 0)\n        val lst1Odd = lst1.filter(_ % 2 != 0)\n        val lst2Odd =\
    \ lst2.filter(_ % 2 != 0)\n        val lst1EvenAndOdd = lst1Even.zip(lst1Odd)\n\
    \        val lst2EvenAndOdd = lst2Even.zip(lst2Odd)\n        val lst1EvenAndOddAndLst2EvenAndOdd\
    \ = lst1EvenAndOdd.zip(lst2EvenAndOdd)\n        val lst1EvenAndOddAndLst2EvenAndOddAndLst1EvenAndOdd\
    \ = lst1EvenAndOddAndLst2EvenAndOdd.filter(_._1 == _._2)\n        val lst1EvenAndOddAndLst2EvenAndOddAndLst1EvenAndOddAndLst2EvenAndOdd\
    \ = lst1EvenAndOddAndLst2EvenAndOddAndLst1EvenAndOdd.filter(_._2 == _._1)\n  \
    \      val lst1EvenAndOddAndLst2EvenAndOddAndLst1EvenAndOddAndLst2EvenAndOddAndLst1EvenAndOdd\
    \ = lst1EvenAndOddAndLst2EvenAndOddAndLst1EvenAndOddAndLst2EvenAndOdd.filter(_._1\
    \ == _._2)\n        val lst1EvenAndOddAndLst2EvenAndOddAndLst1EvenAndOddAndLst2EvenAndOddAndLst1EvenAndOddAndLst2EvenAndOdd\
    \ = lst1EvenAndOddAndLst2EvenAndOddAndLst1EvenAndOddAndLst2EvenAndOddAndLst1EvenAndOddAndLst2EvenAndOdd.filter(_._2\
    \ == _._1)\n        val lst1EvenAndOddAndLst2EvenAndOddAndLst1EvenAndOddAndLst2EvenAndOddAndLst1EvenAndOddAndLst2EvenAndOddAndLst1EvenAndOdd\
    \ = lst1EvenAndOddAndLst2EvenAndOddAndLst1EvenAndOddAndLst2", "        val lst3\
    \ = lst1.toList ++ lst2.toList\n        val lst4 = lst3.filter(_ % 2 == 0)\n \
    \       val lst5 = lst3.filter(_ % 2 != 0)\n        if (lst4.size == lst5.size)\
    \ {\n            return \"YES\"\n        } else {\n            return \"NO\"\n\
    \        }", "        val even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_\
    \ % 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n        val evenAndOddAndEven\
    \ = evenAndOdd.intersect(even)\n        if(evenAndOddAndEven.isEmpty) \"YES\"\
    \ else \"NO\"", "        val lst3 = lst1.filter(_ % 2 == 0).sortWith(_ < _)\n\
    \        val lst4 = lst2.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst5\
    \ = lst3.zip(lst4).filter(_._1 == _._2).map(_._1).distinct\n        val lst6 =\
    \ lst5.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst7 = lst6.filter(_ %\
    \ 2 == 0).sortWith(_ < _)\n        val lst8 = lst7.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n        val lst9 = lst8.filter(_ % 2 == 0).sortWith(_ < _)\n        val\
    \ lst10 = lst9.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst11 = lst10.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n        val lst12 = lst11.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n        val lst13 = lst12.filter(_ % 2 == 0).sortWith(_ < _)\n       \
    \ val lst14 = lst13.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst15 = lst14.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n        val lst16 = lst15.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n        val lst17 = lst16.filter(_ % 2 == 0).sortWith(_ < _)\n       \
    \ val lst18 = lst17.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst19 = lst18.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n        val lst20 = lst19.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n        val lst21 = lst20.filter(_ % 2 == 0).sortWith(_ < _)\n       \
    \ val lst22 = lst21.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst23 = lst22.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n        val lst24 = lst23.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n        val lst25 = lst24.filter(_ % 2 == 0).sortWith(_ < _)\n       \
    \ val lst26 = lst25.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst27 = lst26.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n        val lst28 = lst27.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n        val lst29 = lst28.filter(_ % 2 == 0).sortWith(_ < _)\n       \
    \ val lst30", "        val evens = lst1.filter(_ % 2 == 0)\n        val odds =\
    \ lst2.filter(_ % 2 == 1)\n        val evenAndOdds = evens.zip(odds)\n       \
    \ val evenAndOddsSet = evenAndOdds.toSet\n        val lst1Set = lst1.toSet\n \
    \       val lst2Set = lst2.toSet\n        val result = evenAndOddsSet.intersect(lst1Set).intersect(lst2Set)\n\
    \        result match {\n            case Nil => \"NO\"\n            case x =>\
    \ x\n        }", "        val even = lst1.filter(x => x % 2 == 0)\n        val\
    \ odd = lst2.filter(x => x % 2 == 1)\n        val evenAndOdd = even.zip(odd)\n\
    \        val evenAndOdd2 = evenAndOdd.filter(x => x._1 == x._2)\n        val evenAndOdd3\
    \ = evenAndOdd2.filter(x => x._1 == x._2)\n        val evenAndOdd4 = evenAndOdd3.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd5 = evenAndOdd4.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd6 = evenAndOdd5.filter(x => x._1 == x._2)\n   \
    \     val evenAndOdd7 = evenAndOdd6.filter(x => x._1 == x._2)\n        val evenAndOdd8\
    \ = evenAndOdd7.filter(x => x._1 == x._2)\n        val evenAndOdd9 = evenAndOdd8.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd10 = evenAndOdd9.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd11 = evenAndOdd10.filter(x => x._1 == x._2)\n \
    \       val evenAndOdd12 = evenAndOdd11.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd13 = evenAndOdd12.filter(x => x._1 == x._2)\n        val evenAndOdd14\
    \ = evenAndOdd13.filter(x => x._1 == x._2)\n        val evenAndOdd15 = evenAndOdd14.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd16 = evenAndOdd15.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd17 = evenAndOdd16.filter(x => x._1 == x._2)\n \
    \       val evenAndOdd18 = evenAndOdd17.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd19 = evenAndOdd18.filter(x => x._1 == x._2)\n        val evenAndOdd20\
    \ = evenAndOdd19.filter(x => x._1 == x._2)\n        val evenAndOdd21 = evenAndOdd20.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd22 = evenAndOdd21.filter(x => x._1 ==\
    \ x._2)", '        // Your code here', '        // Your code here', '        //
    Your code here', "        // Your code here\n        val lst3 = lst1.toSet ++\
    \ lst2.toSet\n        val lst4 = lst3.toList\n        val lst5 = lst4.filter(_\
    \ % 2 == 0)\n        val lst6 = lst5.filter(_ != lst4(0))\n        val lst7 =\
    \ lst6.filter(_ != lst6(0))\n        val lst8 = lst7.filter(_ != lst7(0))\n  \
    \      val lst9 = lst8.filter(_ != lst8(0))\n        val lst10 = lst9.filter(_\
    \ != lst9(0))\n        val lst11 = lst10.filter(_ != lst10(0))\n        val lst12\
    \ = lst11.filter(_ != lst11(0))\n        val lst13 = lst12.filter(_ != lst12(0))\n\
    \        val lst14 = lst13.filter(_ != lst13(0))\n        val lst15 = lst14.filter(_\
    \ != lst14(0))\n        val lst16 = lst15.filter(_ != lst15(0))\n        val lst17\
    \ = lst16.filter(_ != lst16(0))\n        val lst18 = lst17.filter(_ != lst17(0))\n\
    \        val lst19 = lst18.filter(_ != lst18(0))\n        val lst20 = lst19.filter(_\
    \ != lst19(0))\n        val lst21 = lst20.filter(_ != lst20(0))\n        val lst22\
    \ = lst21.filter(_ != lst21(0))\n        val lst23 = lst22.filter(_ != lst22(0))\n\
    \        val lst24 = lst23.filter(_ != lst23(0))\n        val lst25 = lst24.filter(_\
    \ != lst24(0))\n        val lst26 = lst25.filter(_ != lst25(0))\n        val lst27\
    \ = lst26.filter(_ != lst26(0))\n        val lst28 = lst27.filter(_ != lst27(0))\n\
    \        val lst29 = lst28.filter(_ != lst28(0))\n        val lst30 = lst29.filter(_\
    \ != lst29(0))\n        val lst31 = lst30.filter(_ != lst30(0))\n        val lst32\
    \ = lst31.filter(_ != lst31(0))\n        val lst33 = lst32.filter(_ != lst32(0))\n\
    \        val lst34 = lst33.filter(_ != lst33(0))\n        val lst35 = lst34.filter(_\
    \ != lst34(0))\n        val lst36 = lst35.filter(_ != lst35(0))\n        val lst37\
    \ = lst36.filter(_ != lst36(0))\n        val lst38 = lst37.filter(_ != lst37(0))\n\
    \        val lst39 = lst38.filter(_ != lst38(0))\n        val ", '        // Your
    code here', "        // Your code here\n        val evens = lst1.filter(x => x\
    \ % 2 == 0)\n        val odds = lst2.filter(x => x % 2 == 1)\n        val evensAndOdds\
    \ = evens ++ odds\n        val evensAndOddsSet = evensAndOdds.toSet\n        val\
    \ evensAndOddsSetSize = evensAndOddsSet.size\n        val evensAndOddsSetSet =\
    \ evensAndOddsSet.toSet\n        val evensAndOddsSetSetSize = evensAndOddsSetSet.size\n\
    \        if (evensAndOddsSetSetSize == evensAndOddsSetSize) {\n            val\
    \ evensAndOddsSetSetSet = evensAndOddsSetSet.toSet\n            val evensAndOddsSetSetSetSize\
    \ = evensAndOddsSetSet.size\n            if (evensAndOddsSetSetSize == evensAndOddsSetSetSize)\
    \ {\n                val evensAndOddsSetSetSetSize = evensAndOddsSetSetSet.size\n\
    \                if (evensAndOddsSetSetSize == evensAndOddsSetSetSetSize) {\n\
    \                    val evensAndOddsSetSetSetSetSize = evensAndOddsSetSetSetSet.size\n\
    \                    if (evensAndOddsSetSetSetSetSize == evensAndOddsSetSetSetSetSize)\
    \ {\n                        val evensAndOddsSetSetSetSetSetSize = evensAndOddsSetSetSetSetSize.size\n\
    \                        if (evensAndOddsSetSetSetSetSize == evensAndOddsSetSetSetSetSetSize)\
    \ {\n                            val evensAndOddsSetSetSetSetSetSetSize = evensAndOddsSetSetSetSetSetSetSize.size\n\
    \                            if (evensAndOddsSetSetSetSetSetSize == evensAndOddsSetSetSetSetSetSetSize)\
    \ {\n                                val evensAndOddsSetSetSetSetSetSetSetSize\
    \ = evensAndOddsSetSetSetSetSetSetSetSize.size\n                             \
    \   if (evensAndOddsSetSetSetSetSetSetSize == evensAndOddsSetSetSetSetSetSetSize)\
    \ {\n                                    val evensAndOddsSetSetSetSetSetSetSetSetSize\
    \ = evensAndOddsSetSetSetSetSetSetSetSetSize.size\n                          \
    \          if (evensAndOddsSetSetSetSetSetSetSetSize == evensAndOddsSetSetSetSetSetSetSet",
  "        // Your code here\n        val lst3 = lst1.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n        val lst4 = lst2.filter(_ % 2 == 0).sortWith(_ < _)\n        val\
    \ lst5 = lst3.filter(_ != lst4).filter(_ != lst3).filter(_ != lst4).filter(_ !=\
    \ lst5).filter(_ != lst2)\n        val lst6 = lst5.filter(_ != lst3).filter(_\
    \ != lst4).filter(_ != lst5).filter(_ != lst6).filter(_ != lst2)\n        val\
    \ lst7 = lst6.filter(_ != lst3).filter(_ != lst4).filter(_ != lst5).filter(_ !=\
    \ lst6).filter(_ != lst7)\n        val lst8 = lst7.filter(_ != lst3).filter(_\
    \ != lst4).filter(_ != lst5).filter(_ != lst6).filter(_ != lst8)\n        val\
    \ lst9 = lst8.filter(_ != lst3).filter(_ != lst4).filter(_ != lst5).filter(_ !=\
    \ lst6).filter(_ != lst9)\n        val lst10 = lst9.filter(_ != lst3).filter(_\
    \ != lst4).filter(_ != lst5).filter(_ != lst6).filter(_ != lst10)\n        val\
    \ lst11 = lst10.filter(_ != lst3).filter(_ != lst4).filter(_ != lst5).filter(_\
    \ != lst6).filter(_ != lst11)\n        val lst12 = lst11.filter(_ != lst3).filter(_\
    \ != lst4).filter(_ != lst5).filter(_ != lst6).filter(_ != lst12)\n        val\
    \ lst13 = lst12.filter(_ != lst3).filter(_ != lst4).filter(_ != lst5).filter(_\
    \ != lst6).filter(_ != lst13)\n        val lst14 = lst13.filter(_ != lst3).filter(_\
    \ != lst4).filter(_ != lst5).filter(_ != lst6).filter(_ != lst14)\n        val\
    \ lst15 = lst14.filter(_ != lst3).filter(_ != lst4).filter(_ != lst5).filter(_\
    \ != lst6).filter(_ != lst15)\n        val lst16 = lst15.filter(_ != lst3).filter(_\
    \ != lst4).filter(_ != lst5).filter(_ != lst6).filter(_ != lst16)\n        val\
    \ lst17 = lst16.filter(_ != lst3).filter(_ != lst4).filter(_ != lst5).filter(_\
    \ != lst6).filter(_ != lst17)\n        val lst18 = lst17.filter(_ != lst", " \
    \       val even = lst1.filter(x => x % 2 == 0).length\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).length\n        if (even > odd) {\n            return \"NO\"\n\
    \        } else {\n            return \"YES\"\n        }", "        val even =\
    \ lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ % 2 == 1)\n       \
    \ val evenAndOdd = even.intersect(odd)\n        val evenAndOddIsEven = evenAndOdd.forall(x\
    \ => x == 0)\n        if(evenAndOddIsEven) {\n            \"YES\"\n        } else\
    \ {\n            \"NO\"\n        }", "        val even = lst1.filter(x => x %\
    \ 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n        val evenAndOdd\
    \ = even.intersect(odd)\n        if (evenAndOdd.isEmpty) \"\"\n        else evenAndOdd.toSet.size\
    \ == even.size ? \"YES\" : \"NO\"", '        // Your code here', "        // Your\
    \ code here\n        val lst3 = lst1.filter(_ % 2 == 0).sortWith(_ < _)\n    \
    \    val lst4 = lst2.filter(_ % 2 == 0).sortWith(_ < _)\n        if(lst3.size\
    \ == lst4.size){\n            val lst5 = lst3.zip(lst4).filter(_._1 == _._2).map(_._1).sortWith(_\
    \ < _)\n            if(lst5.size == lst1.size){\n                val lst6 = lst5.zip(lst1).filter(_._1\
    \ == _._2).map(_._1).sortWith(_ < _)\n                if(lst6.size == lst2.size){\n\
    \                    if(lst5.size == lst6.size){\n                        if(lst5.size\
    \ == lst1.size){\n                            if(lst5.size == lst2.size){\n  \
    \                              if(lst5.size == lst6.size){\n                 \
    \                   if(lst5.size == lst1.size){\n                            \
    \            if(lst5.size == lst2.size){\n                                   \
    \         return \"YES\"\n                                        }\n        \
    \                            }\n                                }\n          \
    \                  }\n                        }\n                    }\n     \
    \           }\n            }\n        }\n        return \"NO\"", "        val\
    \ even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x => x %\
    \ 2 == 1)\n        val evenAndOdd = even.zip(odd)\n        val evenAndOddSet =\
    \ evenAndOdd.toSet\n        if (evenAndOddSet.size == lst1.size) {\n         \
    \   evenAndOddSet.forall(x => x % 2 == 0)\n        } else {\n            \"NO\"\
    \n        }", "        val even = lst1.filter(x => x % 2 == 0).length\n      \
    \  val odd = lst2.filter(x => x % 2 == 1).length\n        if (even > odd) {\n\
    \            val evenList = lst1.filter(x => x % 2 == 0)\n            val oddList\
    \ = lst2.filter(x => x % 2 == 1)\n            val evenList2 = evenList.zip(oddList).filter(_._1\
    \ == _._2)\n            val evenList3 = evenList2.map(x => x._1)\n           \
    \ val evenList4 = evenList3.filter(x => x % 2 == 0)\n            if (evenList4.length\
    \ == evenList3.length) {\n                return \"YES\"\n            } else {\n\
    \                return \"NO\"\n            }\n        } else {\n            val\
    \ oddList = lst2.filter(x => x % 2 == 1)\n            val evenList = lst1.filter(x\
    \ => x % 2 == 0)\n            val oddList2 = oddList.zip(evenList).filter(_._1\
    \ == _._2)\n            val oddList3 = oddList2.map(x => x._1)\n            val\
    \ oddList4 = oddList3.filter(x => x % 2 == 1)\n            if (oddList4.length\
    \ == oddList3.length) {\n                return \"YES\"\n            } else {\n\
    \                return \"NO\"\n            }\n        }", "        // Your code\
    \ here\n        val lst3 = lst1.filter(_ % 2 == 0).sortWith(_ < _)\n        val\
    \ lst4 = lst2.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst5 = lst3.zip(lst4).filter(_._1\
    \ == _._2).map(_._1)\n        val lst6 = lst5.filter(_ % 2 == 0).sortWith(_ <\
    \ _)\n        val lst7 = lst6.filter(_ % 2 == 0).sortWith(_ < _)\n        val\
    \ lst8 = lst7.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst9 = lst8.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n        val lst10 = lst9.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n        val lst11 = lst10.filter(_ % 2 == 0).sortWith(_ < _)\n       \
    \ val lst12 = lst11.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst13 = lst12.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n        val lst14 = lst13.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n        val lst15 = lst14.filter(_ % 2 == 0).sortWith(_ < _)\n       \
    \ val lst16 = lst15.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst17 = lst16.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n        val lst18 = lst17.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n        val lst19 = lst18.filter(_ % 2 == 0).sortWith(_ < _)\n       \
    \ val lst20 = lst19.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst21 = lst20.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n        val lst22 = lst21.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n        val lst23 = lst22.filter(_ % 2 == 0).sortWith(_ < _)\n       \
    \ val lst24 = lst23.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst25 = lst24.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n        val lst26 = lst25.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n        val lst27 = lst26.filter(_ % 2 == 0).sortWith(_ < _)\n       \
    \ val lst28 = lst27.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst29 = lst28.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n", "        // Your code here\n        val lst1Copy\
    \ = lst1.toList\n        val lst2Copy = lst2.toList\n        val even = lst1Copy.filter(x\
    \ => x % 2 == 0)\n        val odd = lst2Copy.filter(x => x % 2 == 1)\n       \
    \ val evenAndOdd = even.intersect(odd)\n        val evenAndEven = even.intersect(even)\n\
    \        val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n        val\
    \ evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n        val evenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n        val evenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n        val evenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.inter",
  "        val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 == 1)\n        if (even.size == 0 && odd.size == 0) \"YES\"\n     \
    \   else if (even.size == 0 && odd.size != 0) \"NO\"\n        else if (even.size\
    \ != 0 && odd.size == 0) \"NO\"\n        else if (even.size != 0 && odd.size !=\
    \ 0) \"YES\"\n        else exchange(even, odd)", "        val even = lst1.filter(x\
    \ => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 0)\n        val\
    \ evenAndOdd = even.intersect(odd)\n        val evenAndEven = even.intersect(even)\n\
    \        val evenAndOddAndEven = evenAndOdd.intersect(evenAndEven)\n        val\
    \ evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n        val evenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n        val evenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n        val evenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd",
  '        // Your code here', "        // Your code here\n        val lst3 = lst1.toSet\n\
    \        val lst4 = lst2.toSet\n        val lst5 = lst3.intersect(lst4)\n    \
    \    val lst6 = lst5.toList\n        val lst7 = lst6.filter(x => x % 2 == 0)\n\
    \        if(lst7.size == lst6.size) {\n            return \"YES\"\n        }\n\
    \        else {\n            return \"NO\"\n        }", "        val even = lst1.filter(x\
    \ => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n        val\
    \ evenAndOdd = even.zip(odd)\n        val evenAndOdd2 = evenAndOdd.filter(x =>\
    \ x._1 == x._2)\n        val evenAndOdd3 = evenAndOdd2.filter(x => x._1 == x._2)\n\
    \        val evenAndOdd4 = evenAndOdd3.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd5 = evenAndOdd4.filter(x => x._1 == x._2)\n        val evenAndOdd6\
    \ = evenAndOdd5.filter(x => x._1 == x._2)\n        val evenAndOdd7 = evenAndOdd6.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd8 = evenAndOdd7.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd9 = evenAndOdd8.filter(x => x._1 == x._2)\n   \
    \     val evenAndOdd10 = evenAndOdd9.filter(x => x._1 == x._2)\n        val evenAndOdd11\
    \ = evenAndOdd10.filter(x => x._1 == x._2)\n        val evenAndOdd12 = evenAndOdd11.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd13 = evenAndOdd12.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd14 = evenAndOdd13.filter(x => x._1 == x._2)\n \
    \       val evenAndOdd15 = evenAndOdd14.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd16 = evenAndOdd15.filter(x => x._1 == x._2)\n        val evenAndOdd17\
    \ = evenAndOdd16.filter(x => x._1 == x._2)\n        val evenAndOdd18 = evenAndOdd17.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd19 = evenAndOdd18.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd20 = evenAndOdd19.filter(x => x._1 == x._2)\n \
    \       val evenAndOdd21 = evenAndOdd20.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd22 = evenAndOdd21.filter(x => x._1 == x._2)", "        val even =\
    \ lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n\
    \        val evenAndOdd = even.intersect(odd)\n        val evenAndEven = even.intersect(even)\n\
    \        val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n        if\
    \ (evenAndOddAndEven.isEmpty) {\n            return \"NO\"\n        }\n      \
    \  if (evenAndOddAndEven.size == evenAndEven.size && evenAndEven.size == evenAndOdd.size)\
    \ {\n            return \"YES\"\n        }\n        return \"NO\"", "        val\
    \ even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x => x %\
    \ 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n        val evenAndEven\
    \ = even.intersect(even)\n        val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n\
    \        val evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n        val\
    \ evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n  \
    \      val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAnd",
  "        // Your code here\n        val even = lst1.filter(_ % 2 == 0)\n       \
    \ val odd = lst2.filter(_ % 2 != 0)\n        val evenOdd = even.zip(odd)\n   \
    \     val evenOddMap = evenOdd.toMap\n        val evenOddMapKeys = evenOddMap.keys\n\
    \        val evenOddMapValues = evenOddMap.values\n        val evenOddMapKeysSet\
    \ = evenOddMapKeys.toSet\n        val evenOddMapValuesSet = evenOddMapValues.toSet\n\
    \        val evenOddMapKeysSet = evenOddMapKeys.toSet\n        val evenOddMapValuesSet\
    \ = evenOddMapValues.toSet\n        val evenOddMapKeysSet = evenOddMapKeys.toSet\n\
    \        val evenOddMapValuesSet = evenOddMapValues.toSet\n        val evenOddMapKeysSet\
    \ = evenOddMapKeys.toSet\n        val evenOddMapValuesSet = evenOddMapValues.toSet\n\
    \        val evenOddMapKeysSet = evenOddMapKeys.toSet\n        val evenOddMapValuesSet\
    \ = evenOddMapValues.toSet\n        val evenOddMapKeysSet = evenOddMapKeys.toSet\n\
    \        val evenOddMapValuesSet = evenOddMapValues.toSet\n        val evenOddMapKeysSet\
    \ = evenOddMapKeys.toSet\n        val evenOddMapValuesSet = evenOddMapValues.toSet\n\
    \        val evenOddMapKeysSet = evenOddMapKeys.toSet\n        val evenOddMapValuesSet\
    \ = evenOddMapValues.toSet\n        val evenOddMapKeysSet = evenOddMapKeys.toSet\n\
    \        val evenOddMapValuesSet = evenOddMapValues.toSet\n        val evenOddMapKeysSet\
    \ = evenOddMapKeys.toSet\n        val evenOddMapValuesSet = evenOddMapValues.toSet\n\
    \        val evenOddMapKeysSet = evenOddMapKeys.toSet\n        val evenOddMapValuesSet\
    \ = evenOddMapValues.toSet\n        val evenOddMapKeysSet = evenOddMapKeys.toSet\n\
    \        val evenOddMapValuesSet = evenOddMapValues.", "        val even = lst1.filter(x\
    \ => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n        val\
    \ evenAndOdd = even.intersect(odd)\n        val evenAndEven = even.intersect(even)\n\
    \        val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n        val\
    \ evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n        val evenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n        val evenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n        val evenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd",
  "        val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 == 1)\n        val evenOdd = even.zip(odd)\n        val evenOddList\
    \ = evenOdd.toList\n        val evenOddList2 = evenOddList.map(x => x._2)\n  \
    \      val evenOddList3 = evenOddList2.filter(x => x % 2 == 0)\n        val evenOddList4\
    \ = evenOddList3.filter(x => x % 2 == 1)\n        val evenOddList5 = evenOddList4.map(x\
    \ => x._2)\n        val evenOddList6 = evenOddList5.filter(x => x % 2 == 0)\n\
    \        val evenOddList7 = evenOddList6.filter(x => x % 2 == 1)\n        val\
    \ evenOddList8 = evenOddList7.map(x => x._2)\n        val evenOddList9 = evenOddList8.filter(x\
    \ => x % 2 == 0)\n        val evenOddList10 = evenOddList9.filter(x => x % 2 ==\
    \ 1)\n        val evenOddList11 = evenOddList10.map(x => x._2)\n        val evenOddList12\
    \ = evenOddList11.filter(x => x % 2 == 0)\n        val evenOddList13 = evenOddList12.filter(x\
    \ => x % 2 == 1)\n        val evenOddList14 = evenOddList13.map(x => x._2)\n \
    \       val evenOddList15 = evenOddList14.filter(x => x % 2 == 0)\n        val\
    \ evenOddList16 = evenOddList15.filter(x => x % 2 == 1)\n        val evenOddList17\
    \ = evenOddList16.map(x => x._2)\n        val evenOddList18 = evenOddList17.filter(x\
    \ => x % 2 == 0)\n        val evenOddList19 = evenOddList18.filter(x => x % 2\
    \ == 1)\n        val evenOddList20 = evenOddList19.map(x => x._2)\n        val\
    \ evenOddList21 = evenOddList20.filter(x => x % 2 == 0)\n        val evenOddList22\
    \ = evenOddList21.filter(x => x % 2 == 1)\n        val evenOddList23 = evenOddList22.map(x\
    \ => x._2)\n        val evenOddList24 = evenOddList23.filter(x => x ", "     \
    \   // Your code here\n        val evens = lst1.filter(x => x % 2 == 0)\n    \
    \    val odds = lst2.filter(x => x % 2 == 0)\n        val exchanged = evens.zip(odds).filter(x\
    \ => x._1 == x._2)\n        if (exchanged.isEmpty) \"\"\n        else exchanged.map(x\
    \ => x._1).mkString(\" \")", "        val even = lst1.filter(_ % 2 == 0)\n   \
    \     val odd = lst2.filter(_ % 2 == 1)\n        val evenAndOdd = even.zip(odd)\n\
    \        val evenAndOddSet = evenAndOdd.toSet\n        val lst1Set = lst1.toSet\n\
    \        val lst2Set = lst2.toSet\n        if (evenAndOddSet.size == lst1Set.size\
    \ + lst2Set.size && evenAndOddSet == lst1Set && lst1Set == lst2Set) {\n      \
    \      return \"YES\"\n        } else {\n            return \"NO\"\n        }",
  "        val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 == 0)\n        val evenAndOdd = even.intersect(odd)\n        if(evenAndOdd.isEmpty)\
    \ {\n            \"NO\"\n        } else {\n            \"YES\"\n        }", " \
    \       val lst1Even = lst1.filter(x => x % 2 == 0).sorted\n        val lst2Even\
    \ = lst2.filter(x => x % 2 == 0).sorted\n        val lst1Odd = lst1.filter(x =>\
    \ x % 2 != 0).sorted\n        val lst2Odd = lst2.filter(x => x % 2 != 0).sorted\n\
    \        val lst1EvenOdd = lst1Even.zip(lst1Odd).filter(x => x._1 == x._2).sorted\n\
    \        val lst2EvenOdd = lst2Even.zip(lst2Odd).filter(x => x._1 == x._2).sorted\n\
    \        val lst1EvenOddOdd = lst1EvenOdd.zip(lst2EvenOdd).filter(x => x._1 ==\
    \ x._2).sorted\n        val lst2EvenOddOdd = lst2EvenOdd.zip(lst1EvenOdd).filter(x\
    \ => x._1 == x._2).sorted\n        val lst1EvenOddOddOdd = lst1EvenOddOdd.zip(lst2EvenOddOdd).filter(x\
    \ => x._1 == x._2).sorted\n        val lst2EvenOddOddOdd = lst2EvenOddOdd.zip(lst1EvenOddOdd).filter(x\
    \ => x._1 == x._2).sorted\n        val lst1EvenOddOddOddOdd = lst1EvenOddOddOdd.zip(lst2EvenOddOddOdd).filter(x\
    \ => x._1 == x._2).sorted\n        val lst2EvenOddOddOddOdd = lst2EvenOddOddOdd.zip(lst1EvenOddOddOdd).filter(x\
    \ => x._1 == x._2).sorted\n        val lst1EvenOddOddOddOddOdd = lst1EvenOddOddOddOdd.zip(lst2EvenOddOddOddOdd).filter(x\
    \ => x._1 == x._2).sorted\n        val lst2EvenOddOddOddOddOdd = lst2EvenOddOddOddOdd.zip(lst1EvenOddOddOddOdd).filter(x\
    \ => x._1 == x._2).sorted\n        val lst1EvenOddOddOddOddOddOdd = lst1EvenOddOddOddOddOdd.zip(lst2EvenOdd",
  "        // Your code here\n        val lst3 = lst1.toSet\n        val lst4 = lst2.toSet\n\
    \        val lst5 = lst3.intersect(lst4)\n        val lst6 = lst5.toList\n   \
    \     val lst7 = lst6.filter(_%2 == 0)\n        val lst8 = lst7.filter(_%2 ==\
    \ 0)\n        val lst9 = lst8.filter(_%2 == 0)\n        val lst10 = lst9.filter(_%2\
    \ == 0)\n        if(lst10.size == 0){\n            return \"NO\"\n        }\n\
    \        else{\n            return \"YES\"\n        }", "        val even = lst1.filter(x\
    \ => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n        val\
    \ evenAndOdd = even.intersect(odd)\n        val evenAndEven = even.intersect(even)\n\
    \        val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n        val\
    \ evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n        val evenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n        val evenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n        val evenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd",
  "        val even = lst1.filter(x => x % 2 == 0).length\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).length\n        if (even > odd) {\n            return \"NO\"\n\
    \        } else {\n            return \"YES\"\n        }", "        val evens\
    \ = lst1.filter(x => x % 2 == 0)\n        val odds = lst2.filter(x => x % 2 ==\
    \ 1)\n        val evensOdds = evens.zip(odds)\n        val evensOddsSet = evensOdds.toSet\n\
    \        val evensOddsSetSize = evensOddsSet.size\n        val evensOddsSetIsEven\
    \ = evensOddsSet.forall(x => x % 2 == 0)\n        if (evensOddsSetSize == evensOddsSetIsEven)\
    \ {\n            return \"YES\"\n        } else {\n            return \"NO\"\n\
    \        }", '        // Your code here', "        // Your code here\n       \
    \ val even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ % 2 != 0)\n\
    \        if(even.size == 0 && odd.size == 0) \"YES\" else \"NO\"", "        val\
    \ even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ % 2 == 1)\n\
    \        val evenAndOdd = even.intersect(odd)\n        val evenAndEven = even.intersect(even)\n\
    \        val evenAndOddAndEven = evenAndOdd.intersect(evenAndEven)\n        val\
    \ evenAndOddAndEvenAndOdd = evenAndOdd.intersect(evenAndEvenAndOdd)\n        val\
    \ evenAndOddAndEvenAndOddAndEven = evenAndOddAndEven.intersect(evenAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndO",
  '        // Your code here', "        val evens = lst1.filter(x => x % 2 == 0)\n\
    \        val odds = lst2.filter(x => x % 2 == 1)\n        val evensOdds = evens.zip(odds)\n\
    \        val evensOddsSet = evensOdds.toSet\n        val lst1Evens = lst1.filter(x\
    \ => evensOddsSet.contains(x))\n        val lst2Evens = lst2.filter(x => evensOddsSet.contains(x))\n\
    \        if (lst1Evens.size == lst2Evens.size) {\n            val evensOddsSet\
    \ = evensOdds.toSet\n            val lst1Evens = lst1.filter(x => evensOddsSet.contains(x))\n\
    \            val lst2Evens = lst2.filter(x => evensOddsSet.contains(x))\n    \
    \        if (lst1Evens.size == lst2Evens.size) {\n                val evensOddsSet\
    \ = evensOdds.toSet\n                val lst1Evens = lst1.filter(x => evensOddsSet.contains(x))\n\
    \                val lst2Evens = lst2.filter(x => evensOddsSet.contains(x))\n\
    \                if (lst1Evens.size == lst2Evens.size) {\n                   \
    \ val evensOddsSet = evensOdds.toSet\n                    val lst1Evens = lst1.filter(x\
    \ => evensOddsSet.contains(x))\n                    val lst2Evens = lst2.filter(x\
    \ => evensOddsSet.contains(x))\n                    if (lst1Evens.size == lst2Evens.size)\
    \ {\n                        val evensOddsSet = evensOdds.toSet\n            \
    \            val lst1Evens = lst1.filter(x => evensOddsSet.contains(x))\n    \
    \                    val lst2Evens = lst2.filter(x => evensOddsSet.contains(x))\n\
    \                        if (lst1Evens.size == lst2Evens.size) {\n           \
    \                 val evensOddsSet = evensOdds.toSet\n                       \
    \     val lst1Evens = lst1.filter(x => evensOddsSet.contains(x))\n           \
    \                 val lst2Evens = lst2.filter(x => evensOddsSet.contains(x))\n\
    \                            if (lst1Evens.size == lst2Evens.size) {\n       \
    \                         val evensOddsSet = evensOdds.toSet\n               \
    \                 val lst1Evens = lst1.filter(x => evensOddsSet.contains(x))\n\
    \                                val lst2Evens = lst2.filter(x => evensOddsSet.contains(x))",
  "        val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n        val evenAndEven\
    \ = even.intersect(even)\n        val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n\
    \        val evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n        val\
    \ evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n  \
    \      val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd",
  '        // Your code here', "        // Your code here\n        val lst1Copy =\
    \ lst1.toList\n        val lst2Copy = lst2.toList\n        val lst1Copy2 = lst1Copy.filter(_%2==0)\n\
    \        val lst2Copy2 = lst2Copy.filter(_%2==0)\n        val lst1Copy3 = lst1Copy2.filter(_%2==0)\n\
    \        val lst2Copy3 = lst2Copy2.filter(_%2==0)\n        val lst1Copy4 = lst1Copy3.filter(_%2==0)\n\
    \        val lst2Copy4 = lst2Copy3.filter(_%2==0)\n        val lst1Copy5 = lst1Copy4.filter(_%2==0)\n\
    \        val lst2Copy5 = lst2Copy4.filter(_%2==0)\n        val lst1Copy6 = lst1Copy5.filter(_%2==0)\n\
    \        val lst2Copy6 = lst2Copy5.filter(_%2==0)\n        val lst1Copy7 = lst1Copy6.filter(_%2==0)\n\
    \        val lst2Copy7 = lst2Copy6.filter(_%2==0)\n        val lst1Copy8 = lst1Copy7.filter(_%2==0)\n\
    \        val lst2Copy8 = lst2Copy7.filter(_%2==0)\n        val lst1Copy9 = lst1Copy8.filter(_%2==0)\n\
    \        val lst2Copy9 = lst2Copy8.filter(_%2==0)\n        val lst1Copy10 = lst1Copy9.filter(_%2==0)\n\
    \        val lst2Copy10 = lst2Copy9.filter(_%2==0)\n        val lst1Copy11 = lst1Copy10.filter(_%2==0)\n\
    \        val lst2Copy11 = lst2Copy10.filter(_%2==0)\n        val lst1Copy12 =\
    \ lst1Copy11.filter(_%2==0)\n        val lst2Copy12 = lst2Copy11.filter(_%2==0)\n\
    \        val lst1Copy13 = lst1Copy12.filter(_%2==0)\n        val lst2Copy13 =\
    \ lst2Copy12.filter(_%2==0)\n        val lst1Copy14 = lst1Copy13.filter(_%2==0)\n\
    \        val lst2Copy14 = lst2Copy13.filter(_%2==0)\n        val lst1Copy15 =\
    \ lst1Copy14.filter(_%2==0)\n        val lst2Copy15 = lst2Copy14.filter(_%2==0)\n\
    \        val lst", '        // Your code goes here', "        val lst3 = lst1.toSet\n\
    \        val lst4 = lst2.toSet\n        val lst5 = lst3.intersect(lst4)\n    \
    \    val lst6 = lst5.toList\n        val lst7 = lst6.filter(_ % 2 == 0)\n    \
    \    val lst8 = lst7.filter(_ < lst1.size)\n        val lst9 = lst8.filter(_ <\
    \ lst2.size)\n        val lst10 = lst9.filter(_ < lst3.size)\n        val lst11\
    \ = lst10.filter(_ < lst4.size)\n        val lst12 = lst11.filter(_ < lst5.size)\n\
    \        val lst13 = lst12.filter(_ < lst6.size)\n        val lst14 = lst13.filter(_\
    \ < lst7.size)\n        val lst15 = lst14.filter(_ < lst8.size)\n        val lst16\
    \ = lst15.filter(_ < lst9.size)\n        val lst17 = lst16.filter(_ < lst10.size)\n\
    \        val lst18 = lst17.filter(_ < lst11.size)\n        val lst19 = lst18.filter(_\
    \ < lst12.size)\n        val lst20 = lst19.filter(_ < lst13.size)\n        val\
    \ lst21 = lst20.filter(_ < lst14.size)\n        val lst22 = lst21.filter(_ < lst15.size)\n\
    \        val lst23 = lst22.filter(_ < lst16.size)\n        val lst24 = lst23.filter(_\
    \ < lst17.size)\n        val lst25 = lst24.filter(_ < lst18.size)\n        val\
    \ lst26 = lst25.filter(_ < lst19.size)\n        val lst27 = lst26.filter(_ < lst20.size)\n\
    \        val lst28 = lst27.filter(_ < lst21.size)\n        val lst29 = lst28.filter(_\
    \ < lst22.size)\n        val lst30 = lst29.filter(_ < lst23.size)\n        val\
    \ lst31 = lst30.filter(_ < lst24.size)\n        val lst32 = lst31.filter(_ < lst25.size)\n\
    \        val lst33 = lst32.filter(_ < lst26.size)\n        val lst34 = lst33.filter(_\
    \ < lst27.size)\n        val lst35 = lst34.filter(_ < lst28.size)\n        val\
    \ lst36 = lst35.filter(_ < lst29.size)\n        val lst37 = lst36.filter(_ < lst30.size)\n\
    \        val lst38 = lst37.filter(_ < lst31.size)\n        val lst39 = lst38.filter(_\
    \ < lst32.size)\n        val lst40 = lst39.filter(_ < lst33.size)\n        val\
    \ lst", "        // Your code here\n        val even = lst1.filter(x => x % 2\
    \ == 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n        val evenAndOdd\
    \ = even.intersect(odd)\n        if(evenAndOdd.isEmpty){\n            return \"\
    NO\"\n        }\n        else{\n            return \"YES\"\n        }", '        //
    Your code goes here', '        // Your code here', "        // Your code goes\
    \ here\n        val lst1 = lst1.toSet\n        val lst2 = lst2.toSet\n       \
    \ val lst3 = lst1.union(lst2)\n        if(lst3.size == lst1.size + lst2.size)\
    \ {\n            val lst4 = lst3.toList\n            val lst5 = lst4.filter(x\
    \ => x % 2 == 0)\n            if(lst5.size == lst4.size) {\n                val\
    \ lst6 = lst5.toList\n                val lst7 = lst6.filter(x => x % 2 == 0)\n\
    \                if(lst7.size == lst5.size) {\n                    val lst8 =\
    \ lst7.toList\n                    val lst9 = lst8.filter(x => x % 2 == 0)\n \
    \                   if(lst9.size == lst7.size) {\n                        val\
    \ lst10 = lst9.toList\n                        val lst11 = lst10.filter(x => x\
    \ % 2 == 0)\n                        if(lst11.size == lst9.size) {\n         \
    \                   val lst12 = lst11.toList\n                            val\
    \ lst13 = lst12.filter(x => x % 2 == 0)\n                            if(lst13.size\
    \ == lst11.size) {\n                                val lst14 = lst13.toList\n\
    \                                val lst15 = lst14.filter(x => x % 2 == 0)\n \
    \                               if(lst15.size == lst13.size) {\n             \
    \                       val lst16 = lst15.toList\n                           \
    \         val lst17 = lst16.filter(x => x % 2 == 0)\n                        \
    \            if(lst17.size == lst15.size) {\n                                \
    \        val lst18 = lst17.toList\n                                        val\
    \ lst19 = lst18.filter(x => x % 2 == 0)\n                                    \
    \    if(lst19.size == lst17.size) {\n                                        \
    \    val lst20 = lst19.toList\n                                            val\
    \ lst21 = lst20.filter(x => x % 2 == 0)\n                                    \
    \        if(lst21.size == lst19.size) {\n                                    \
    \            val lst22 = lst21.toList\n                                      \
    \          val lst23 = lst22.filter(x => x % 2 == 0)\n                       \
    \                         if(lst23.size == lst21.size) {\n                   \
    \                                 val lst24 = lst23.toList\n                 \
    \                                   val lst25 = lst24.filter(x => x % 2 == 0)\n\
    \                                                    if(lst25.size == lst23.size)\
    \ {\n                                                        val lst26 = lst25.toList\n\
    \                                                        val lst27 = lst26.filter(x\
    \ => x % 2 == 0)\n                                                        if(lst27.size\
    \ == lst25.size) {\n                                                         \
    \   val lst28 = lst27.toList\n                                               \
    \             val lst29 = lst28.filter(x => x % 2 == 0)\n                    \
    \                                        if(lst29.size == lst27.size) {\n    \
    \                                                            val lst30 = lst29.toList\n\
    \                                                                val lst31 = lst30.filter(x\
    \ => x % 2 == 0)\n                                                           \
    \     if(lst31.size == lst29.size) {\n                                       \
    \                             ", "        val even = lst1.filter(x => x % 2 ==\
    \ 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n        val evenAndOdd =\
    \ even.intersect(odd)\n        val evenAndOddAndEven = evenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(odd)\n    \
    \    val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd",
  "        val lst3 = lst1.toList ++ lst2.toList\n        val even = lst3.filter(_\
    \ % 2 == 0)\n        val odd = lst3.filter(_ % 2 != 0)\n        val evenCount\
    \ = even.count\n        val oddCount = odd.count\n        if (evenCount == oddCount)\
    \ {\n            even.foreach(x => lst3.remove(x))\n            lst3.foreach(x\
    \ => lst3.remove(x))\n            lst3.foreach(x => lst3.remove(x))\n        \
    \    lst3.foreach(x => lst3.remove(x))\n            lst3.foreach(x => lst3.remove(x))\n\
    \            lst3.foreach(x => lst3.remove(x))\n            lst3.foreach(x =>\
    \ lst3.remove(x))\n            lst3.foreach(x => lst3.remove(x))\n           \
    \ lst3.foreach(x => lst3.remove(x))\n            lst3.foreach(x => lst3.remove(x))\n\
    \            lst3.foreach(x => lst3.remove(x))\n            lst3.foreach(x =>\
    \ lst3.remove(x))\n            lst3.foreach(x => lst3.remove(x))\n           \
    \ lst3.foreach(x => lst3.remove(x))\n            lst3.foreach(x => lst3.remove(x))\n\
    \            lst3.foreach(x => lst3.remove(x))\n            lst3.foreach(x =>\
    \ lst3.remove(x))\n            lst3.foreach(x => lst3.remove(x))\n           \
    \ lst3.foreach(x => lst3.remove(x))\n            lst3.foreach(x => lst3.remove(x))\n\
    \            lst3.foreach(x => lst3.remove(x))\n            lst3.foreach(x =>\
    \ lst3.remove(x))\n            lst3.foreach(x => lst3.remove(x))\n           \
    \ lst3.foreach(x => lst3.remove(x))\n            lst3.foreach(x => lst3.remove(x))\n\
    \            lst3.foreach(x => lst3.remove(x))\n            lst3.foreach(x =>\
    \ lst3.remove(x))\n            lst3.foreach(x => lst3.remove(x))\n           \
    \ lst3.foreach(x => lst3.remove(x))\n            lst3.foreach(x => lst3.remove(x))\n\
    \            lst3.foreach(x => lst3.remove(x))\n            lst3.foreach(x =>\
    \ lst3.remove(x))\n            lst3.foreach(x => lst3.remove(x))\n           \
    \ lst3.foreach(x => lst3.remove(x))\n            lst3.foreach(x => lst3.remove(x))\n\
    \            lst3.foreach(x => lst3.remove(x))\n            lst3.foreach(x =>\
    \ lst3.remove(x))\n            lst3.foreach(", "        val even = lst1.filter(x\
    \ => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n        val\
    \ evenOdd = even.zip(odd)\n        val evenOddList = evenOdd.toList\n        val\
    \ evenOddList2 = evenOddList.filter(x => x._1 == x._2)\n        val evenOddList3\
    \ = evenOddList2.toList\n        val evenOddList4 = evenOddList3.filter(x => x._1\
    \ == x._2)\n        val evenOddList5 = evenOddList4.toList\n        val evenOddList6\
    \ = evenOddList5.filter(x => x._1 == x._2)\n        val evenOddList7 = evenOddList6.toList\n\
    \        val evenOddList8 = evenOddList7.filter(x => x._1 == x._2)\n        val\
    \ evenOddList9 = evenOddList8.toList\n        val evenOddList10 = evenOddList9.filter(x\
    \ => x._1 == x._2)\n        val evenOddList11 = evenOddList10.filter(x => x._1\
    \ == x._2)\n        val evenOddList12 = evenOddList11.filter(x => x._1 == x._2)\n\
    \        val evenOddList13 = evenOddList12.filter(x => x._1 == x._2)\n       \
    \ val evenOddList14 = evenOddList13.filter(x => x._1 == x._2)\n        val evenOddList15\
    \ = evenOddList14.filter(x => x._1 == x._2)\n        val evenOddList16 = evenOddList15.filter(x\
    \ => x._1 == x._2)\n        val evenOddList17 = evenOddList16.filter(x => x._1\
    \ == x._2)\n        val evenOddList18 = evenOddList17.filter(x => x._1 == x._2)\n\
    \        val evenOddList19 = evenOddList18.filter(x => x._1 == x._2)\n       \
    \ val evenOddList20 = evenOddList19.filter(x => x._1 == x._2)\n        val evenOddList21\
    \ = evenOddList20.filter(x => x._1 == x._2)\n        val evenOddList22 = evenOddList21.filter(x\
    \ => x._1 == x._2)\n        val evenOddList23 = evenOddList22.filter(x => ", " \
    \       val even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ %\
    \ 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n        if(evenAndOdd.isEmpty)\
    \ \"NO\" else \"YES\"", '        // Your code here', "        // Your code here\n\
    \        val lst3 = lst1.filter(_ % 2 == 0).zip(lst2.filter(_ % 2 == 0)).filter(_._1\
    \ == _._1).map(_._2)\n        if(lst3.isEmpty) \"\"\n        else lst3.foldLeft(\"\
    \"){ (acc, x) => acc + \"YES\" + x }", "        val even = lst1.filter(x => x\
    \ % 2 == 0).length\n        val odd = lst2.filter(x => x % 2 == 1).length\n  \
    \      if (even == odd) {\n            return \"YES\"\n        } else {\n    \
    \        return \"NO\"\n        }", "        val even = lst1.filter(_ % 2 == 0)\n\
    \        val odd = lst2.filter(_ % 2 != 0)\n        val evenOdd = even.zip(odd)\n\
    \        val evenOddMap = evenOdd.toMap\n        val evenOddMapKeys = evenOddMap.keys\n\
    \        val evenOddMapValues = evenOddMap.values\n        val evenOddMapKeysSet\
    \ = evenOddMapKeys.toSet\n        val evenOddMapValuesSet = evenOddMapValues.toSet\n\
    \        val evenOddMapKeysSet = evenOddMapKeys.toSet\n        val evenOddMapValuesSet\
    \ = evenOddMapValues.toSet\n        val evenOddMapKeysSet = evenOddMapKeys.toSet\n\
    \        val evenOddMapValuesSet = evenOddMapValues.toSet\n        val evenOddMapKeysSet\
    \ = evenOddMapKeys.toSet\n        val evenOddMapValuesSet = evenOddMapValues.toSet\n\
    \        val evenOddMapKeysSet = evenOddMapKeys.toSet\n        val evenOddMapValuesSet\
    \ = evenOddMapValues.toSet\n        val evenOddMapKeysSet = evenOddMapKeys.toSet\n\
    \        val evenOddMapValuesSet = evenOddMapValues.toSet\n        val evenOddMapKeysSet\
    \ = evenOddMapKeys.toSet\n        val evenOddMapValuesSet = evenOddMapValues.toSet\n\
    \        val evenOddMapKeysSet = evenOddMapKeys.toSet\n        val evenOddMapValuesSet\
    \ = evenOddMapValues.toSet\n        val evenOddMapKeysSet = evenOddMapKeys.toSet\n\
    \        val evenOddMapValuesSet = evenOddMapValues.toSet\n        val evenOddMapKeysSet\
    \ = evenOddMapKeys.toSet\n        val evenOddMapValuesSet = evenOddMapValues.toSet\n\
    \        val evenOddMapKeysSet = evenOddMapKeys.toSet\n        val evenOddMapValuesSet\
    \ = evenOddMapValues.toSet\n        val evenOddMapKeysSet = evenOddMapKeys.toSet\n\
    \        val evenOddMapValuesSet = evenOddMapValues.toSet\n        val ", "  \
    \      // Your code here\n        val lst1 = lst1.toList\n        val lst2 = lst2.toList\n\
    \        val lst3 = lst1.zip(lst2).filter(_._1 % 2 == 0).map(_._2)\n        val\
    \ lst4 = lst1.zip(lst2).filter(_._1 % 2 == 1).map(_._2)\n        val lst5 = lst3.zip(lst4).filter(_._1\
    \ % 2 == 0).map(_._2)\n        val lst6 = lst3.zip(lst4).filter(_._1 % 2 == 1).map(_._2)\n\
    \        val lst7 = lst5.zip(lst6).filter(_._1 % 2 == 0).map(_._2)\n        val\
    \ lst8 = lst5.zip(lst6).filter(_._1 % 2 == 1).map(_._2)\n        val lst9 = lst7.zip(lst8).filter(_._1\
    \ % 2 == 0).map(_._2)\n        val lst10 = lst7.zip(lst8).filter(_._1 % 2 == 1).map(_._2)\n\
    \        val lst11 = lst9.zip(lst10).filter(_._1 % 2 == 0).map(_._2)\n       \
    \ val lst12 = lst9.zip(lst10).filter(_._1 % 2 == 1).map(_._2)\n        val lst13\
    \ = lst11.zip(lst12).filter(_._1 % 2 == 0).map(_._2)\n        val lst14 = lst11.zip(lst12).filter(_._1\
    \ % 2 == 1).map(_._2)\n        val lst15 = lst13.zip(lst14).filter(_._1 % 2 ==\
    \ 0).map(_._2)\n        val lst16 = lst13.zip(lst14).filter(_._1 % 2 == 1).map(_._2)\n\
    \        val lst17 = lst15.zip(lst16).filter(_._1 % 2 == 0).map(_._2)\n      \
    \  val lst18 = lst15.zip(lst16).filter(_._1 % 2 == 1).map(_._2)\n        val lst19\
    \ = lst17.zip(lst18).filter(_._1 % 2 == 0).map(_._2)\n        val lst20 = lst17.zip(lst18).filter(_._1\
    \ % 2 == 1).map(_._2)\n        val lst21 = lst19.zip(lst20).filter(_._1 % 2 ==\
    \ 0).map(_._2)\n        val lst22 = lst19.zip(lst20).filter(_._1 % 2 == 1).map(_._2)\n\
    \        val lst23 = lst21.zip(lst22).filter(_._1 % 2 == 0).map(_._2)\n      \
    \  val lst24 = lst21.zip(lst22).filter(_._1 % 2 == 1).map(_._2)\n        val lst25\
    \ = lst23.zip(lst24).filter(_._1 % 2 == 0).", "        // Your code here\n   \
    \     val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 == 1)\n        if (even.size == odd.size) {\n            val evenList\
    \ = even.toList\n            val oddList = odd.toList\n            val exchanged\
    \ = evenList.zip(oddList).filter(x => x._1 == x._2)\n            val evenList\
    \ = exchanged.map(x => x._1)\n            val oddList = exchanged.map(x => x._2)\n\
    \            val evenList = evenList.filter(x => x % 2 == 0)\n            val\
    \ oddList = oddList.filter(x => x % 2 == 1)\n            if (evenList.size ==\
    \ oddList.size) {\n                val evenList = even.toList\n              \
    \  val oddList = odd.toList\n                val exchanged = evenList.zip(oddList).filter(x\
    \ => x._1 == x._2)\n                val evenList = exchanged.map(x => x._1)\n\
    \                val oddList = exchanged.map(x => x._2)\n                val evenList\
    \ = evenList.filter(x => x % 2 == 0)\n                val oddList = oddList.filter(x\
    \ => x % 2 == 1)\n                if (evenList.size == oddList.size) {\n     \
    \               val evenList = even.toList\n                    val oddList =\
    \ odd.toList\n                    val exchanged = evenList.zip(oddList).filter(x\
    \ => x._1 == x._2)\n                    val evenList = exchanged.map(x => x._1)\n\
    \                    val oddList = exchanged.map(x => x._2)\n                \
    \    val evenList = evenList.filter(x => x % 2 == 0)\n                    val\
    \ oddList = oddList.filter(x => x % 2 == 1)\n                    if (evenList.size\
    \ == oddList.size) {\n                        val evenList = even.toList\n   \
    \                     val oddList = odd.toList\n                        val exchanged\
    \ = evenList.zip(oddList).filter(x => x._1 == x._2)\n                        val\
    \ evenList = exchanged.map(x => x._1)\n                        val oddList = exchanged.map(x\
    \ => x._2)\n                        val evenList = evenList.filter(x => x % 2\
    \ == 0)\n                        val oddList = oddList.filter(x => x % 2 == 1)\n\
    \                        if (evenList.size == oddList.size) {\n              \
    \              val evenList = even.toList\n                            val oddList\
    \ = odd.toList\n                            val exchanged = evenList.zip(oddList).filter(x\
    \ => x._1 == x._2)\n                            val evenList = exchanged.map(x\
    \ => x._1)\n                            val oddList = exchanged.map(x => x._2)\n\
    \                            val evenList = evenList.filter(x => x % 2 == ", " \
    \       // Your code here\n        val lst3 = lst1.toSet ++ lst2.toSet\n     \
    \   val lst4 = lst3.toList\n        val lst5 = lst4.filter(_ % 2 == 0)\n     \
    \   val lst6 = lst5.filter(_ != 0)\n        val lst7 = lst6.filter(_ != lst5.last)\n\
    \        val lst8 = lst7.filter(_ != lst5.last)\n        val lst9 = lst8.filter(_\
    \ != lst5.last)\n        val lst10 = lst9.filter(_ != lst5.last)\n        val\
    \ lst11 = lst10.filter(_ != lst5.last)\n        val lst12 = lst11.filter(_ !=\
    \ lst5.last)\n        val lst13 = lst12.filter(_ != lst5.last)\n        val lst14\
    \ = lst13.filter(_ != lst5.last)\n        val lst15 = lst14.filter(_ != lst5.last)\n\
    \        val lst16 = lst15.filter(_ != lst5.last)\n        val lst17 = lst16.filter(_\
    \ != lst5.last)\n        val lst18 = lst17.filter(_ != lst5.last)\n        val\
    \ lst19 = lst18.filter(_ != lst5.last)\n        val lst20 = lst19.filter(_ !=\
    \ lst5.last)\n        val lst21 = lst20.filter(_ != lst5.last)\n        val lst22\
    \ = lst21.filter(_ != lst5.last)\n        val lst23 = lst22.filter(_ != lst5.last)\n\
    \        val lst24 = lst23.filter(_ != lst5.last)\n        val lst25 = lst24.filter(_\
    \ != lst5.last)\n        val lst26 = lst25.filter(_ != lst5.last)\n        val\
    \ lst27 = lst26.filter(_ != lst5.last)\n        val lst28 = lst27.filter(_ !=\
    \ lst5.last)\n        val lst29 = lst28.filter(_ != lst5.last)\n        val lst30\
    \ = lst29.filter(_ != lst5.last)\n        val lst31 = lst30.filter(_ != lst5.last)\n\
    \        val lst32 = lst31.filter(_ != lst5.last)\n        val lst33 = lst32.filter(_\
    \ != lst5.last)\n        val lst34 = lst33.filter(_ != lst5.last)\n        val\
    \ lst35 = lst34.filter(_ != lst5.last)\n        val lst36 = lst35.filter(_ !=\
    \ lst5.last)\n        val lst37 = lst36.filter(_ != lst5.last)\n        val ",
  "        val even = lst1.filter(_ % 2 == 0).length\n        val odd = lst2.filter(_\
    \ % 2 == 1).length\n        if (even > odd) \n            \"NO\"\n        else\
    \ if (even < odd)\n            \"YES\"\n        else\n            exchange(lst1.filter(_\
    \ % 2 == 0), lst2.filter(_ % 2 == 1))", "        // Your code here\n        val\
    \ even = lst1.filter(x => x % 2 == 0).length\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).length\n        if (even > odd) {\n            return \"NO\"\n\
    \        } else {\n            return \"YES\"\n        }", '        // Your code
    here', "        // Your code goes here\n        val even = lst1.filter(x => x\
    \ % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n        val evenodd\
    \ = even.union(odd)\n        val eveneven = even.intersect(even)\n        val\
    \ evenoddodd = even.intersect(odd)\n        val evenevenodd = eveneven.intersect(evenodd)\n\
    \        val eveneveneven = eveneven.intersect(eveneven)\n        val evenevenoddodd\
    \ = eveneven.intersect(odd)\n        val evenevenevenodd = eveneveneven.intersect(evenodd)\n\
    \        val eveneveneveneven = eveneveneven.intersect(eveneven)\n        val\
    \ eveneveneveneven = eveneveneven.intersect(eveneven)\n        val eveneveneveneven\
    \ = eveneveneven.intersect(eveneven)\n        val eveneveneveneven = eveneveneven.intersect(eveneven)\n\
    \        val eveneveneveneven = eveneveneven.intersect(eveneven)\n        val\
    \ eveneveneveneven = eveneveneven.intersect(eveneven)\n        val eveneveneveneven\
    \ = eveneveneven.intersect(eveneven)\n        val eveneveneveneven = eveneveneven.intersect(eveneven)\n\
    \        val eveneveneveneven = eveneveneven.intersect(eveneven)\n        val\
    \ eveneveneveneven = eveneveneven.intersect(eveneven)\n        val eveneveneveneven\
    \ = eveneveneven.intersect(eveneven)\n        val eveneveneveneven = eveneveneven.intersect(eveneven)\n\
    \        val eveneveneveneven = eveneveneven.intersect(eveneven)\n        val\
    \ eveneveneveneven = eveneveneven.intersect(eveneven)\n        val eveneveneveneven\
    \ = eveneveneven.intersect(eveneven)\n        val eveneveneveneven = eveneveneven.intersect(eveneven)\n\
    \        val eveneveneveneven = eveneveneven.intersect(eveneven)\n        val\
    \ eveneveneveneven = eveneveneven.intersect(eveneven)\n        val eveneveneveneven\
    \ = eveneveneven.intersect(eveneven)\n        val eveneveneveneven = eveneveneven.intersect(eveneven)\n\
    \        val eveneveneveneven = eveneveneven.inter", "        val even = lst1.filter(x\
    \ => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n        val\
    \ evenAndOdd = even.intersect(odd)\n        val evenAndEven = even.intersect(even)\n\
    \        val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n        val\
    \ evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOddAndEven)\n \
    \       val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEven", "        val even = lst1.filter(x => x % 2 ==\
    \ 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n        val evenAndOdd =\
    \ even.zip(odd)\n        val evenAndOdd2 = evenAndOdd.filter(x => x._1 == x._2)\n\
    \        val evenAndOdd3 = evenAndOdd2.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd4 = evenAndOdd3.filter(x => x._1 == x._2)\n        val evenAndOdd5\
    \ = evenAndOdd4.filter(x => x._1 == x._2)\n        val evenAndOdd6 = evenAndOdd5.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd7 = evenAndOdd6.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd8 = evenAndOdd7.filter(x => x._1 == x._2)\n   \
    \     val evenAndOdd9 = evenAndOdd8.filter(x => x._1 == x._2)\n        val evenAndOdd10\
    \ = evenAndOdd9.filter(x => x._1 == x._2)\n        val evenAndOdd11 = evenAndOdd10.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd12 = evenAndOdd11.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd13 = evenAndOdd12.filter(x => x._1 == x._2)\n \
    \       val evenAndOdd14 = evenAndOdd13.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd15 = evenAndOdd14.filter(x => x._1 == x._2)\n        val evenAndOdd16\
    \ = evenAndOdd15.filter(x => x._1 == x._2)\n        val evenAndOdd17 = evenAndOdd16.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd18 = evenAndOdd17.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd19 = evenAndOdd18.filter(x => x._1 == x._2)\n \
    \       val evenAndOdd20 = evenAndOdd19.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd21 = evenAndOdd20.filter(x => x._1 == x._2)\n        val evenAndOdd22\
    \ = evenAndOdd21.filter(x => x._1 == x._2)", '        // Your code here', "  \
    \      val lst1Copy = lst1.toList\n        val lst2Copy = lst2.toList\n      \
    \  val lst1Copy2 = lst1Copy.filter(_ % 2 == 0)\n        val lst2Copy2 = lst2Copy.filter(_\
    \ % 2 == 0)\n        val lst1Copy3 = lst1Copy2.filter(_ % 2 == 0)\n        val\
    \ lst2Copy3 = lst2Copy2.filter(_ % 2 == 0)\n        val lst1Copy4 = lst1Copy3.filter(_\
    \ % 2 == 0)\n        val lst2Copy4 = lst2Copy3.filter(_ % 2 == 0)\n        val\
    \ lst1Copy5 = lst1Copy4.filter(_ % 2 == 0)\n        val lst2Copy5 = lst2Copy4.filter(_\
    \ % 2 == 0)\n        val lst1Copy6 = lst1Copy5.filter(_ % 2 == 0)\n        val\
    \ lst2Copy6 = lst2Copy5.filter(_ % 2 == 0)\n        val lst1Copy7 = lst1Copy6.filter(_\
    \ % 2 == 0)\n        val lst2Copy7 = lst2Copy6.filter(_ % 2 == 0)\n        val\
    \ lst1Copy8 = lst1Copy7.filter(_ % 2 == 0)\n        val lst2Copy8 = lst2Copy7.filter(_\
    \ % 2 == 0)\n        val lst1Copy9 = lst1Copy8.filter(_ % 2 == 0)\n        val\
    \ lst2Copy9 = lst2Copy8.filter(_ % 2 == 0)\n        val lst1Copy10 = lst1Copy9.filter(_\
    \ % 2 == 0)\n        val lst2Copy10 = lst2Copy9.filter(_ % 2 == 0)\n        val\
    \ lst1Copy11 = lst1Copy10.filter(_ % 2 == 0)\n        val lst2Copy11 = lst2Copy10.filter(_\
    \ % 2 == 0)\n        val lst1Copy12 = lst1Copy11.filter(_ % 2 == 0)\n        val\
    \ lst2Copy12 = lst2Copy11.filter(_ % 2 == 0)\n        val lst1Copy13 = lst1Copy12.filter(_\
    \ % 2 == 0)\n        val lst2Copy13 = lst2Copy12.filter(_ % 2 == 0)\n        val\
    \ lst1Copy14 = lst1Copy13.filter(_ % 2 == 0)\n        val lst2Copy14 = lst2Copy13.filter(_\
    \ % 2 == 0)\n        val lst1Copy15 = lst1Copy14.filter(_ % 2 == 0)\n        val\
    \ lst2Copy15 = lst2Copy14.filter(_ % 2 == 0)\n        val lst1Copy16 = lst1Copy15.filter(_\
    \ % 2 == 0)\n        val lst2Copy16 = lst2Copy15.filter(_ % 2 == 0)\n        val ",
  "        val even = lst1.filter(x => x % 2 == 0).length\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).length\n        if (even > odd) {\n            return \"NO\"\n\
    \        } else {\n            return \"YES\"\n        }", "        val even =\
    \ lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ % 2 != 0)\n       \
    \ val evenAndOdd = even.intersect(odd)\n        val evenAndEven = even.intersect(even)\n\
    \        val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n        val\
    \ evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n        val evenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n        val evenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n        val evenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n",
  "        val even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ % 2\
    \ == 1)\n        val exchanged = even.zip(odd).filter(_._1 == _._2)\n        if\
    \ (exchanged.isEmpty) \"NO\" else \"YES\"", "        val lst3 = lst1.toList\n\
    \        val lst4 = lst2.toList\n        val lst5 = lst3.filter(_ % 2 == 0)\n\
    \        val lst6 = lst4.filter(_ % 2 == 0)\n        val lst7 = lst5.zip(lst6).filter(_._1\
    \ == _._2)\n        val lst8 = lst7.map(x => x._1)\n        val lst9 = lst8.filter(_\
    \ % 2 == 0)\n        val lst10 = lst9.filter(_ % 2 == 0)\n        val lst11 =\
    \ lst10.map(x => x._1)\n        val lst12 = lst11.filter(_ % 2 == 0)\n       \
    \ val lst13 = lst12.filter(_ % 2 == 0)\n        val lst14 = lst13.map(x => x._1)\n\
    \        val lst15 = lst14.filter(_ % 2 == 0)\n        val lst16 = lst15.filter(_\
    \ % 2 == 0)\n        val lst17 = lst16.map(x => x._1)\n        val lst18 = lst17.filter(_\
    \ % 2 == 0)\n        val lst19 = lst18.filter(_ % 2 == 0)\n        val lst20 =\
    \ lst19.map(x => x._1)\n        val lst21 = lst20.filter(_ % 2 == 0)\n       \
    \ val lst22 = lst21.filter(_ % 2 == 0)\n        val lst23 = lst22.map(x => x._1)\n\
    \        val lst24 = lst23.filter(_ % 2 == 0)\n        val lst25 = lst24.filter(_\
    \ % 2 == 0)\n        val lst26 = lst25.map(x => x._1)\n        val lst27 = lst26.filter(_\
    \ % 2 == 0)\n        val lst28 = lst27.filter(_ % 2 == 0)\n        val lst29 =\
    \ lst28.map(x => x._1)\n        val lst30 = lst29.filter(_ % 2 == 0)\n       \
    \ val lst31 = lst30.filter(_ % 2 == 0)\n        val lst32 = lst31.map(x => x._1)\n\
    \        val lst33 = lst32.filter(_ % 2 == 0)\n        val lst34 = lst33.filter(_\
    \ % 2 == 0)\n        val lst35 = lst34.map(x => x._1)\n        val lst36 = lst35.filter(_\
    \ % 2 == 0)\n        val lst37 = lst36.filter(_ % 2 == 0)\n        val lst38 =\
    \ lst37.map(x => x._1)\n        val lst39 = lst38.filter(_ % 2 == 0)\n       \
    \ val lst40 = lst39.filter(_ % 2 == 0)\n        val lst41 = lst40.map(x => x._1)\n\
    \        ", '        // Your code here', '        // Your code here', "      \
    \  val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x =>\
    \ x % 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n        val evenAndOddAndEven\
    \ = evenAndOdd.intersect(even)\n        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndO", "        // Your code here\n\
    \        val even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ %\
    \ 2 == 1)\n        val evenodd = even.zip(odd)\n        val evenodd2 = evenodd.filter(_._1\
    \ == _._2)\n        val evenodd3 = evenodd2.filter(_._1 == _._2)\n        val\
    \ evenodd4 = evenodd3.filter(_._1 == _._2)\n        val evenodd5 = evenodd4.filter(_._1\
    \ == _._2)\n        val evenodd6 = evenodd5.filter(_._1 == _._2)\n        val\
    \ evenodd7 = evenodd6.filter(_._1 == _._2)\n        val evenodd8 = evenodd7.filter(_._1\
    \ == _._2)\n        val evenodd9 = evenodd8.filter(_._1 == _._2)\n        val\
    \ evenodd10 = evenodd9.filter(_._1 == _._2)\n        val evenodd11 = evenodd10.filter(_._1\
    \ == _._2)\n        val evenodd12 = evenodd11.filter(_._1 == _._2)\n        val\
    \ evenodd13 = evenodd12.filter(_._1 == _._2)\n        val evenodd14 = evenodd13.filter(_._1\
    \ == _._2)\n        val evenodd15 = evenodd14.filter(_._1 == _._2)\n        val\
    \ evenodd16 = evenodd15.filter(_._1 == _._2)\n        val evenodd17 = evenodd16.filter(_._1\
    \ == _._2)\n        val evenodd18 = evenodd17.filter(_._1 == _._2)\n        val\
    \ evenodd19 = evenodd18.filter(_._1 == _._2)\n        val evenodd20 = evenodd19.filter(_._1\
    \ == _._2)\n        val evenodd21 = evenodd20.filter(_._1 == _._2)\n        val\
    \ evenodd22 = evenodd21.filter(_._1 == _._2)\n        val evenodd23 = evenodd22.filter(_._1\
    \ == _._2)\n        val evenodd24 = evenodd23.filter(_._1 == _._2)\n        val\
    \ evenodd25 = evenodd24.filter(_._1 == _._2)\n        val evenodd26 = evenodd25.filter(_._1\
    \ == _._2)\n        val evenodd27 = evenodd26.filter(_._1 == _._2)\n        val\
    \ evenodd28 = evenodd27.filter(_._1 == _._2)\n        val evenodd29 = evenodd28.filter(_._1\
    \ == _._2)\n        val evenodd30 = even", "        val even = lst1.filter(x =>\
    \ x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 0)\n        val evenAndOdd\
    \ = even.intersect(odd)\n        val evenAndOddAndEven = evenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(odd)\n    \
    \    val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAnd", "        val even = lst1.filter(_\
    \ % 2 == 0)\n        val odd = lst2.filter(_ % 2 != 0)\n        if (even.size\
    \ == 0 && odd.size == 0) \"YES\" else \"NO\"", '        // Your code here', " \
    \       val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n        val evenAndOddAndEven\
    \ = evenAndOdd.intersect(even)\n        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAnd", " \
    \       val even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ %\
    \ 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n        val evenAndEven\
    \ = even.intersect(even)\n        val evenAndOddAndEven = evenAndOdd.intersect(evenAndEven)\n\
    \        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(odd)\n    \
    \    val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)",
  "        val even = lst1.filter(_ % 2 == 0).length\n        val odd = lst2.filter(_\
    \ % 2 == 1).length\n        if (even > odd) {\n            return \"NO\"\n   \
    \     } else {\n            return \"YES\"\n        }", "        // Your code\
    \ here\n        val lst3 = lst1.toSet\n        val lst4 = lst2.toSet\n       \
    \ val lst5 = lst3.intersect(lst4)\n        if(lst5.isEmpty){\n            return\
    \ \"NO\"\n        }\n        else{\n            return \"YES\"\n        }", '        //
    Your code here', "        // Your code here\n        val lst1Set = lst1.toSet\n\
    \        val lst2Set = lst2.toSet\n        val lst1Set2 = lst1Set.intersect(lst2Set)\n\
    \        val lst2Set2 = lst2Set.intersect(lst1Set)\n        if(lst1Set2.isEmpty){\n\
    \            return \"NO\"\n        }\n        if(lst2Set2.isEmpty){\n       \
    \     return \"NO\"\n        }\n        if(lst1Set2.size > lst2Set2.size){\n \
    \           return \"NO\"\n        }\n        if(lst1Set2.size == lst2Set2.size){\n\
    \            return \"YES\"\n        }\n        return \"NO\"", "        val even\
    \ = lst1.filter(_ % 2 == 0).length\n        val odd = lst2.filter(_ % 2 == 1).length\n\
    \        if (even > odd) {\n            return \"NO\"\n        } else {\n    \
    \        return \"YES\"\n        }", "        val even = lst1.filter(x => x %\
    \ 2 == 0).length\n        val odd = lst2.filter(x => x % 2 == 1).length\n    \
    \    if (even > odd) {\n            return \"NO\"\n        } else {\n        \
    \    return \"YES\"\n        }", "        val even = lst1.filter(x => x % 2 ==\
    \ 0).length\n        val odd = lst2.filter(x => x % 2 == 1).length\n        if\
    \ (even > odd) {\n            return \"NO\"\n        } else {\n            return\
    \ \"YES\"\n        }", '        // Your code here', "        // Your code here\n\
    \        val lst1Copy = lst1.toList\n        val lst2Copy = lst2.toList\n    \
    \    val even = lst1Copy.filter(_ % 2 == 0)\n        val odd = lst2Copy.filter(_\
    \ % 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n        val evenAndEven\
    \ = even.intersect(even)\n        val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n\
    \        val evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n        val\
    \ evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n  \
    \      val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAnd",
  "        val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n        val evenAndEven\
    \ = even.intersect(even)\n        val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n\
    \        val evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n        val\
    \ evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n  \
    \      val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAnd",
  '        // Your code here', "        val even = lst1.filter(_ % 2 == 0)\n     \
    \   val odd = lst2.filter(_ % 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n\
    \        val evenAndEven = even.intersect(even)\n        val evenAndOddAndEven\
    \ = evenAndEven.intersect(evenAndOdd)\n        val evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n\
    \        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        ", "        val even = lst1.filter(x => x % 2 == 0)\n        val odd\
    \ = lst2.filter(x => x % 2 == 1)\n        val evenOdd = even.zip(odd)\n      \
    \  val evenOddMap = evenOdd.map(x => (x._1, x._2)).toMap\n        val evenOddMapKeys\
    \ = evenOddMap.keys\n        val evenOddMapValues = evenOddMap.values\n      \
    \  val evenOddMapKeysSet = evenOddMapKeys.toSet\n        val evenOddMapValuesSet\
    \ = evenOddMapValues.toSet\n        val evenOddMapKeysSet = evenOddMapKeys.toSet\n\
    \        val evenOddMapValuesSet = evenOddMapValues.toSet\n        val evenOddMapKeysSet\
    \ = evenOddMapKeys.toSet\n        val evenOddMapValuesSet = evenOddMapValues.toSet\n\
    \        val evenOddMapKeysSet = evenOddMapKeys.toSet\n        val evenOddMapValuesSet\
    \ = evenOddMapValues.toSet\n        val evenOddMapKeysSet = evenOddMapKeys.toSet\n\
    \        val evenOddMapValuesSet = evenOddMapValues.toSet\n        val evenOddMapKeysSet\
    \ = evenOddMapKeys.toSet\n        val evenOddMapValuesSet = evenOddMapValues.toSet\n\
    \        val evenOddMapKeysSet = evenOddMapKeys.toSet\n        val evenOddMapValuesSet\
    \ = evenOddMapValues.toSet\n        val evenOddMapKeysSet = evenOddMapKeys.toSet\n\
    \        val evenOddMapValuesSet = evenOddMapValues.toSet\n        val evenOddMapKeysSet\
    \ = evenOddMapKeys.toSet\n        val evenOddMapValuesSet = evenOddMapValues.toSet\n\
    \        val evenOddMapKeysSet = evenOddMapKeys.toSet\n        val evenOddMapValuesSet\
    \ = evenOddMapValues.toSet\n        val evenOddMapKeysSet = evenOddMapKeys.toSet\n\
    \        val evenOddMapValuesSet = evenOddMapValues.toSet\n        val evenOddMapKeysSet\
    \ = evenOddMapKeys.toSet\n        val evenOddMapValuesSet", "        // Your code\
    \ goes here\n        val lst3 = lst1.filter(_ % 2 == 0)\n        val lst4 = lst2.filter(_\
    \ % 2 == 0)\n        if(lst3.size == lst4.size){\n            val lst5 = lst3.zip(lst4).filter(_._1\
    \ == _._2)\n            if(lst5.size == lst1.size){\n                val lst6\
    \ = lst5.map(x => x._1)\n                val lst7 = lst5.map(x => x._2)\n    \
    \            val lst8 = lst5.filter(_._1 == _._2)\n                if(lst6.size\
    \ == lst8.size){\n                    val lst9 = lst6.map(x => x._1)\n       \
    \             val lst10 = lst6.map(x => x._2)\n                    val lst11 =\
    \ lst6.filter(_._1 == _._2)\n                    if(lst9.size == lst10.size){\n\
    \                        val lst12 = lst9.map(x => x._1)\n                   \
    \     val lst13 = lst9.map(x => x._2)\n                        val lst14 = lst9.filter(_._1\
    \ == _._2)\n                        if(lst12.size == lst13.size){\n          \
    \                  val lst15 = lst12.map(x => x._1)\n                        \
    \    val lst16 = lst12.map(x => x._2)\n                            val lst17 =\
    \ lst12.filter(_._1 == _._2)\n                            if(lst15.size == lst16.size){\n\
    \                                val lst18 = lst15.map(x => x._1)\n          \
    \                      val lst19 = lst15.map(x => x._2)\n                    \
    \            val lst20 = lst15.filter(_._1 == _._2)\n                        \
    \        if(lst18.size == lst19.size){\n                                    val\
    \ lst21 = lst18.map(x => x._1)\n                                    val lst22\
    \ = lst18.map(x => x._2)\n                                    val lst23 = lst18.filter(_._1\
    \ == _._2)\n                                    if(lst21.size == lst22.size){\n\
    \                                        val lst24 = lst21.map(x => x._1)\n  \
    \                                      val lst25 = lst21.map(x => x._2)\n    \
    \                                    val lst26 = lst21.filter(_._1 == _._2)\n\
    \                                        if(lst24.size == lst25.size){\n     \
    \                                       val lst27 = lst24.map(x => x._1)\n   \
    \                                         val lst28 = lst24.map(x => x._2)\n \
    \                                           val lst29 = lst24.filter(_._1 == _._2)\n\
    \                                            if(lst27.size == lst28.size){\n \
    \                                               val lst30 = lst27.map(x => x._1)\n\
    \                                                val lst31 = lst27.map(x => x._2)\n\
    \                                                val ", "        val even = lst1.filter(x\
    \ => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n        val\
    \ evenAndOdd = even.intersect(odd)\n        val evenAndEven = even.intersect(even)\n\
    \        val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n        val\
    \ evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n        val evenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n        val evenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n        val evenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd",
  "        val even = lst1.filter(x => x % 2 == 0).length\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).length\n        if (even > odd) {\n            return \"NO\"\n\
    \        }\n        else {\n            val evenList = lst1.filter(x => x % 2\
    \ == 0)\n            val oddList = lst2.filter(x => x % 2 == 1)\n            val\
    \ exchangeList = evenList.zip(oddList).filter(_._1 == _._2)\n            if (exchangeList.length\
    \ == even) {\n                return \"YES\"\n            }\n            else\
    \ {\n                return \"NO\"\n            }\n        }", "        // Your\
    \ code here\n        val lst1Set = lst1.toSet\n        val lst2Set = lst2.toSet\n\
    \        if(lst1Set.size == lst2Set.size)\n        {\n            val lst1Set2\
    \ = lst1Set.diff(lst2Set)\n            val lst2Set2 = lst2Set.diff(lst1Set)\n\
    \            if(lst1Set2.size == lst2Set2.size)\n            {\n             \
    \   val lst1Set3 = lst1Set.diff(lst2Set2)\n                val lst2Set3 = lst2Set.diff(lst1Set2)\n\
    \                if(lst1Set3.size == lst2Set3.size)\n                {\n     \
    \               val lst1Set4 = lst1Set.diff(lst2Set3)\n                    val\
    \ lst2Set4 = lst2Set.diff(lst1Set3)\n                    if(lst1Set4.size == lst2Set4.size)\n\
    \                    {\n                        val lst1Set5 = lst1Set.diff(lst2Set4)\n\
    \                        val lst2Set5 = lst2Set.diff(lst1Set4)\n             \
    \           if(lst1Set5.size == lst2Set5.size)\n                        {\n  \
    \                          val lst1Set6 = lst1Set.diff(lst2Set5)\n           \
    \                 val lst2Set6 = lst2Set.diff(lst1Set5)\n                    \
    \        if(lst1Set6.size == lst2Set6.size)\n                            {\n \
    \                               val lst1Set7 = lst1Set.diff(lst2Set6)\n      \
    \                          val lst2Set7 = lst2Set.diff(lst1Set6)\n           \
    \                     if(lst1Set7.size == lst2Set7.size)\n                   \
    \             {\n                                    val lst1Set8 = lst1Set.diff(lst2Set7)\n\
    \                                    val lst2Set8 = lst2Set.diff(lst1Set7)\n \
    \                                   if(lst1Set8.size == lst2Set8.size)\n     \
    \                               {\n                                        val\
    \ lst1Set9 = lst1Set.diff(lst2Set8)\n                                        val\
    \ lst2Set9 = lst2Set.diff(lst1Set8)\n                                        if(lst1Set9.size\
    \ == lst2Set9.size)\n                                        {\n             \
    \                               val lst1Set10 = lst1Set.diff(lst2Set9)\n     \
    \                                       val lst2Set10 = lst2Set.diff(lst1Set9)\n\
    \                                            if(lst1Set10.size == lst2Set10.size)\n\
    \                                            {\n                             \
    \                   val lst1Set11 = lst1Set.diff(lst2Set10)\n                \
    \                                val lst2Set11 = lst2Set.diff(lst1Set10)\n   \
    \                                             if(lst1Set11.size == lst2Set11.size)\n\
    \                                                {\n                         \
    \                           val lst1Set12 = lst1Set.diff(lst2Set11)\n        \
    \                                            val lst", "        // Your code goes\
    \ here\n        val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n        if(evenAndOdd.isEmpty){\n\
    \            return \"NO\"\n        }\n        else{\n            return \"YES\"\
    \n        }", "        val even = lst1.filter(x => x % 2 == 0).length\n      \
    \  val odd = lst2.filter(x => x % 2 == 1).length\n        if (even > odd) {\n\
    \            return \"NO\"\n        }\n        val exchanged = lst1.zip(lst2).filter(_._1\
    \ % 2 == 0).map(_._2)\n        if (exchanged.length == lst1.length) {\n      \
    \      return \"YES\"\n        }\n        return \"NO\"", "        val even =\
    \ lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n\
    \        val evenOdd = even.zip(odd)\n        val evenOddMap = evenOdd.map(x =>\
    \ (x._1, x._2)).toMap\n        val evenOddMapKeys = evenOddMap.keys\n        val\
    \ evenOddMapValues = evenOddMap.values\n        val evenOddMapKeysSet = evenOddMapKeys.toSet\n\
    \        val evenOddMapValuesSet = evenOddMapValues.toSet\n        val evenOddMapKeysSetSize\
    \ = evenOddMapKeysSet.size\n        val evenOddMapValuesSetSize = evenOddMapValuesSet.size\n\
    \        val evenOddMapKeysSetIsEmpty = evenOddMapKeysSet.isEmpty\n        val\
    \ evenOddMapValuesSetIsEmpty = evenOddMapValuesSet.isEmpty\n        val evenOddMapKeysSetIsEven\
    \ = evenOddMapKeysSet.isEmpty || evenOddMapKeysSetSize == evenOddMapKeysSet.size\n\
    \        val evenOddMapValuesSetIsEven = evenOddMapValuesSet.isEmpty || evenOddMapValuesSetSize\
    \ == evenOddMapValuesSet.size\n        val evenOddMapKeysSetIsOdd = evenOddMapKeysSet.isEmpty\
    \ || evenOddMapKeysSetSize == evenOddMapKeysSet.size\n        val evenOddMapValuesSetIsOdd\
    \ = evenOddMapValuesSet.isEmpty || evenOddMapValuesSetSize == evenOddMapValuesSet.size\n\
    \        val evenOddMapKeysSetIsEvenOdd = evenOddMapKeysSet.isEmpty || evenOddMapKeysSetSize\
    \ == evenOddMapKeysSet.size\n        val evenOddMapValuesSetIsEvenOdd = evenOddMapValuesSet.isEmpty\
    \ || evenOddMapValuesSetSize == evenOddMapValuesSet.size\n        val evenOddMapKeysSetIsEvenOddMapKeysSetIsEvenOdd\
    \ = evenOddMapKeysSet.isEmpty || evenOddMapKeysSetSize == evenOddMapKeysSetSize\
    \ && evenOddMapKeysSetIsEven && evenOddMapKeysSetIsOdd\n        val even", " \
    \       val evens = lst1.filter(x => x % 2 == 0)\n        val odds = lst2.filter(x\
    \ => x % 2 == 0)\n        val evensOdds = evens.zip(odds)\n        val evensOddsSet\
    \ = evensOdds.toSet\n        val evensOddsSetSize = evensOddsSet.size\n      \
    \  val evensOddsSetIsAllEven = evensOddsSetSize == evensOddsSet.size\n       \
    \ val evensOddsSetIsAllOdd = evensOddsSetSize != evensOddsSet.size\n        if\
    \ (evensOddsSetIsAllEven && evensOddsSetIsAllOdd) {\n            return \"YES\"\
    \n        } else {\n            return \"NO\"\n        }", "        val even =\
    \ lst1.filter(x => x % 2 == 0).length\n        val odd = lst2.filter(x => x %\
    \ 2 == 1).length\n        if (even == odd) {\n            return \"YES\"\n   \
    \     }\n        else {\n            return \"NO\"\n        }", '        // Your
    code goes here', "        val lst1Set = lst1.toSet\n        val lst2Set = lst2.toSet\n\
    \        if(lst1Set.isEmpty || lst2Set.isEmpty) \"\"\n        else {\n       \
    \     val lst1Set2 = lst1Set.intersect(lst2Set)\n            if(lst1Set2.isEmpty)\
    \ \"\"\n            else {\n                val lst1Set3 = lst1Set.diff(lst1Set2)\n\
    \                val lst2Set3 = lst2Set.diff(lst2Set)\n                if(lst1Set3.isEmpty)\
    \ \"\"\n                else {\n                    val lst1Set4 = lst1Set.diff(lst1Set3)\n\
    \                    val lst2Set4 = lst2Set.diff(lst2Set3)\n                 \
    \   if(lst1Set4.isEmpty) \"\"\n                    else {\n                  \
    \      val lst1Set5 = lst1Set.diff(lst1Set4)\n                        val lst2Set5\
    \ = lst2Set.diff(lst2Set4)\n                        if(lst1Set5.isEmpty) \"\"\n\
    \                        else {\n                            val lst1Set6 = lst1Set.diff(lst1Set5)\n\
    \                            val lst2Set6 = lst2Set.diff(lst2Set5)\n         \
    \                   if(lst1Set6.isEmpty) \"\"\n                            else\
    \ {\n                                val lst1Set7 = lst1Set.diff(lst1Set6)\n \
    \                               val lst2Set7 = lst2Set.diff(lst2Set6)\n      \
    \                          if(lst1Set7.isEmpty) \"\"\n                       \
    \         else {\n                                    val lst1Set8 = lst1Set.diff(lst1Set7)\n\
    \                                    val lst2Set8 = lst2Set.diff(lst2Set7)\n \
    \                                   if(lst1Set8.isEmpty) \"\"\n              \
    \                      else {\n                                        val lst1Set9\
    \ = lst1Set.diff(lst1Set8)\n                                        val lst2Set9\
    \ = lst2Set.diff(lst2Set8)\n                                        if(lst1Set9.isEmpty)\
    \ \"\"\n                                        else {\n                     \
    \                       val lst1Set10 = lst1Set.diff(lst1Set9)\n             \
    \                               val lst2Set10 = lst2Set.diff(lst2Set9)\n     \
    \                                       if(lst1Set10.isEmpty) \"\"\n         \
    \                                   else {\n                                 \
    \               val lst1Set11 = lst1Set.diff(lst1Set10)\n                    \
    \                            val lst2Set11 = lst2Set.diff(lst2Set10)\n       \
    \                                         if(lst1Set11.isEmpty) \"\"\n       \
    \                                         else {\n                           \
    \                         val lst1Set12 = lst1Set.diff(lst1Set11)\n          \
    \                                          val lst2Set12 = lst2Set.diff(lst2Set11)\n\
    \                                                    if(lst1Set12.isEmpty) \"\"\
    \n                                                    else {\n               \
    \                                         val lst1Set13 = lst1Set.diff(lst", " \
    \       // Your code here\n        val even = lst1.filter(x => x % 2 == 0)\n \
    \       val odd = lst2.filter(x => x % 2 != 0)\n        val evenAndOdd = even.intersect(odd)\n\
    \        evenAndOdd.isEmpty() match {\n            case true => \"NO\"\n     \
    \       case false => \"YES\"\n        }", "        val even = lst1.filter(_ %\
    \ 2 == 0)\n        val odd = lst2.filter(_ % 2 == 0)\n        val evenAndOdd =\
    \ even.zip(odd)\n        val evenAndOdd2 = evenAndOdd.filter(_._1 == _._2)\n \
    \       val evenAndOdd3 = evenAndOdd2.filter(_._1 == _._2)\n        val evenAndOdd4\
    \ = evenAndOdd3.filter(_._1 == _._2)\n        val evenAndOdd5 = evenAndOdd4.filter(_._1\
    \ == _._2)\n        val evenAndOdd6 = evenAndOdd5.filter(_._1 == _._2)\n     \
    \   val evenAndOdd7 = evenAndOdd6.filter(_._1 == _._2)\n        val evenAndOdd8\
    \ = evenAndOdd7.filter(_._1 == _._2)\n        val evenAndOdd9 = evenAndOdd8.filter(_._1\
    \ == _._2)\n        val evenAndOdd10 = evenAndOdd9.filter(_._1 == _._2)\n    \
    \    val evenAndOdd11 = evenAndOdd10.filter(_._1 == _._2)\n        val evenAndOdd12\
    \ = evenAndOdd11.filter(_._1 == _._2)\n        val evenAndOdd13 = evenAndOdd12.filter(_._1\
    \ == _._2)\n        val evenAndOdd14 = evenAndOdd13.filter(_._1 == _._2)\n   \
    \     val evenAndOdd15 = evenAndOdd14.filter(_._1 == _._2)\n        val evenAndOdd16\
    \ = evenAndOdd15.filter(_._1 == _._2)\n        val evenAndOdd17 = evenAndOdd16.filter(_._1\
    \ == _._2)\n        val evenAndOdd18 = evenAndOdd17.filter(_._1 == _._2)\n   \
    \     val evenAndOdd19 = evenAndOdd18.filter(_._1 == _._2)\n        val evenAndOdd20\
    \ = evenAndOdd19.filter(_._1 == _._2)\n        val evenAndOdd21 = evenAndOdd20.filter(_._1\
    \ == _._2)\n        val evenAndOdd22 = evenAndOdd21.filter(_._1 == _._2)\n   \
    \     val evenAndOdd23 = evenAndOdd22.filter(_._1 == _._2)\n        val evenAndOdd24\
    \ = evenAndOdd23.filter(_._1 == _._2)\n        val even", "        // Your code\
    \ here\n        val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n        val evenAndOddAndEven\
    \ = evenAndOdd.intersect(even)\n        if (evenAndOddAndEven.isEmpty) \"YES\"\
    \ else \"NO\"", "        val lst1Len = lst1.size\n        val lst2Len = lst2.size\n\
    \        val evenList = lst1.filter(x => x % 2 == 0)\n        val oddList = lst1.filter(x\
    \ => x % 2 != 0)\n        val evenListLen = evenList.size\n        val oddListLen\
    \ = oddList.size\n        val exchanged = evenList.zip(oddList).filter(x => x._1\
    \ == x._2)\n        val exchangeLen = exchanged.size\n        val evenList2 =\
    \ evenList.filter(x => x % 2 == 0)\n        val oddList2 = oddList.filter(x =>\
    \ x % 2 != 0)\n        val evenListLen2 = evenList2.size\n        val oddListLen2\
    \ = oddList2.size\n        val exchanged2 = evenList2.zip(oddList2).filter(x =>\
    \ x._1 == x._2)\n        val exchangeLen2 = exchanged2.size\n        val evenList3\
    \ = evenList.filter(x => x % 2 == 0)\n        val oddList3 = oddList.filter(x\
    \ => x % 2 != 0)\n        val evenListLen3 = evenList3.size\n        val oddListLen3\
    \ = oddList3.size\n        val exchanged3 = evenList3.zip(oddList3).filter(x =>\
    \ x._1 == x._2)\n        val exchangeLen3 = exchanged3.size\n        val evenList4\
    \ = evenList.filter(x => x % 2 == 0)\n        val oddList4 = oddList.filter(x\
    \ => x % 2 != 0)\n        val evenListLen4 = evenList4.size\n        val oddListLen4\
    \ = oddList4.size\n        val exchanged4 = evenList4.zip(oddList4).filter(x =>\
    \ x._1 == x._2)\n        val exchangeLen4 = exchanged4.size\n        val evenList5\
    \ = evenList.filter(x => x % 2 == 0)\n        val oddList5 = oddList.filter(x\
    \ => x % 2 != 0)\n        val evenListLen5 = evenList5.size\n        val oddListLen5\
    \ = oddList5.size\n        val exchanged5 = evenList5.zip(oddList5).filter(x =>\
    \ x._1 == x._2)\n        val exchangeLen5 = exchanged5.size\n        val evenList6\
    \ = evenList.filter(x => x % 2 == 0)\n        val oddList6 = oddList.filter(x\
    \ => x % 2 != 0)\n        val evenListLen6 = evenList6.size\n        val oddListLen6\
    \ = oddList6.size\n        val exchanged6 = evenList6.zip(oddList6).filter(x =>\
    \ x._1 == x._", "        // Your code here\n        val evens = lst1.filter(x\
    \ => x % 2 == 0)\n        val odds = lst2.filter(x => x % 2 == 1)\n        if\
    \ (evens.size == 0 && odds.size == 0) \"NO\"\n        else if (evens.size == 0\
    \ && odds.size > 0) \"NO\"\n        else if (evens.size > 0 && odds.size == 0)\
    \ \"NO\"\n        else if (evens.size < odds.size) \"NO\"\n        else if (evens.size\
    \ == odds.size) \"YES\"\n        else exchange(evens, odds)", '        // Your
    code here', '        // Your code here', "        // Your code goes here\n   \
    \     val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 == 1)\n        val evenodd = even.zip(odd)\n        val evenodd2 =\
    \ evenodd.filter(x => x._1 == x._2)\n        val evenodd3 = evenodd2.filter(x\
    \ => x._1 == x._2)\n        val evenodd4 = evenodd3.filter(x => x._1 == x._2)\n\
    \        val evenodd5 = evenodd4.filter(x => x._1 == x._2)\n        val evenodd6\
    \ = evenodd5.filter(x => x._1 == x._2)\n        val evenodd7 = evenodd6.filter(x\
    \ => x._1 == x._2)\n        val evenodd8 = evenodd7.filter(x => x._1 == x._2)\n\
    \        val evenodd9 = evenodd8.filter(x => x._1 == x._2)\n        val evenodd10\
    \ = evenodd9.filter(x => x._1 == x._2)\n        val evenodd11 = evenodd10.filter(x\
    \ => x._1 == x._2)\n        val evenodd12 = evenodd11.filter(x => x._1 == x._2)\n\
    \        val evenodd13 = evenodd12.filter(x => x._1 == x._2)\n        val evenodd14\
    \ = evenodd13.filter(x => x._1 == x._2)\n        val evenodd15 = evenodd14.filter(x\
    \ => x._1 == x._2)\n        val evenodd16 = evenodd15.filter(x => x._1 == x._2)\n\
    \        val evenodd17 = evenodd16.filter(x => x._1 == x._2)\n        val evenodd18\
    \ = evenodd17.filter(x => x._1 == x._2)\n        val evenodd19 = evenodd18.filter(x\
    \ => x._1 == x._2)\n        val evenodd20 = evenodd19.filter(x => x._1 == x._2)\n\
    \        val evenodd21 = evenodd20.filter(x => x._1 == x._2)\n        val evenodd22\
    \ = evenodd21.filter(x => x._1 == x._2)\n        val evenodd23 = evenodd22.filter(x\
    \ => x._1 == x._2)\n        val evenodd24 = evenodd23.filter(x => x._1 == x._2)\n\
    \        val evenodd25 = evenodd24.filter(x => x._1 == x._2)\n        val evenodd26\
    \ = evenodd25.filter(x => x._1 == x._2)\n        val even", "        val lst3\
    \ = lst1.toList ++ lst2.toList\n        val lst4 = lst3.filter(x => x % 2 == 0)\n\
    \        if (lst4.size == lst3.size) {\n            return \"YES\"\n        }\
    \ else {\n            return \"NO\"\n        }", '        // Your code here',
  "        val even = lst1.filter(x => x % 2 == 0).size\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).size\n        if (even == odd) {\n            return \"YES\"\n\
    \        } else {\n            return \"NO\"\n        }", "        val evens =\
    \ lst1.filter(x => x % 2 == 0)\n        val odds = lst1.filter(x => x % 2 != 0)\n\
    \        val evens2 = lst2.filter(x => x % 2 == 0)\n        val odds2 = lst2.filter(x\
    \ => x % 2 != 0)\n        val evens3 = evens.intersect(evens2)\n        val odds3\
    \ = odds.intersect(odds2)\n        val evens4 = evens3.intersect(evens2)\n   \
    \     val odds4 = odds3.intersect(odds2)\n        val evens5 = evens4.intersect(evens2)\n\
    \        val odds5 = odds4.intersect(odds2)\n        val evens6 = evens5.intersect(evens2)\n\
    \        val odds6 = odds5.intersect(odds2)\n        val evens7 = evens6.intersect(evens2)\n\
    \        val odds7 = odds6.intersect(odds2)\n        val evens8 = evens7.intersect(evens2)\n\
    \        val odds8 = odds7.intersect(odds2)\n        val evens9 = evens8.intersect(evens2)\n\
    \        val odds9 = odds8.intersect(odds2)\n        val evens10 = evens9.intersect(evens2)\n\
    \        val odds10 = odds9.intersect(odds2)\n        val evens11 = evens10.intersect(evens2)\n\
    \        val odds11 = odds10.intersect(odds2)\n        val evens12 = evens11.intersect(evens2)\n\
    \        val odds12 = odds11.intersect(odds2)\n        val evens13 = evens12.intersect(evens2)\n\
    \        val odds13 = odds12.intersect(odds2)\n        val evens14 = evens13.intersect(evens2)\n\
    \        val odds14 = odds13.intersect(odds2)\n        val evens15 = evens14.intersect(evens2)\n\
    \        val odds15 = odds14.intersect(odds2)\n        val evens16 = evens15.intersect(evens2)\n\
    \        val odds16 = odds15.intersect(odds2)\n        val evens17 = evens16.intersect(evens2)\n\
    \        val odds17 = odds16.intersect(odds", "        val even = lst1.filter(x\
    \ => x % 2 == 0).length\n        val odd = lst2.filter(x => x % 2 == 1).length\n\
    \        if (even > odd) {\n            return \"NO\"\n        }\n        val\
    \ exchanged = lst1.zip(lst2).filter(_._1 % 2 == 0).map(_._2)\n        if (exchanged.length\
    \ == lst1.length) {\n            return \"YES\"\n        }\n        return \"\
    NO\"", "        val even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_\
    \ % 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n        if (evenAndOdd.isEmpty)\
    \ \"NO\" else \"YES\"", "        val even = lst1.filter(x => x % 2 == 0)\n   \
    \     val odd = lst2.filter(x => x % 2 == 0)\n        val evenAndOdd = even.intersect(odd)\n\
    \        if(evenAndOdd.isEmpty) \"\"\n        else evenAndOdd.size == even.size\
    \ ? \"YES\" : \"NO\"", "        val evens = lst1.filter(x => x % 2 == 0)\n   \
    \     val odds = lst2.filter(x => x % 2 == 1)\n        val evensOdds = evens.zip(odds)\n\
    \        val evensOddsSum = evensOdds.map(x => x._1 + x._2)\n        val evensOddsSumSum\
    \ = evensOddsSum.sum\n        val evensOddsSumSumOdd = evensOddsSumSum - evensOddsSum.sum\n\
    \        val evensOddsSumSumEven = evensOddsSumSumOdd + evensOddsSum.sum\n   \
    \     val evensOddsSumSumEvenOdd = evensOddsSumSumEven - evensOddsSum.sum\n  \
    \      val evensOddsSumSumEvenOddEven = evensOddsSumSumEvenOdd + evensOddsSum.sum\n\
    \        val evensOddsSumSumEvenOddEvenOdd = evensOddsSumSumEvenOddEven - evensOddsSum.sum\n\
    \        val evensOddsSumSumEvenOddEvenOddEven = evensOddsSumSumEvenOddEvenOdd\
    \ + evensOddsSum.sum\n        val evensOddsSumSumEvenOddEvenOddEvenOdd = evensOddsSumSumEvenOddEvenOddEven\
    \ - evensOddsSum.sum\n        val evensOddsSumSumEvenOddEvenOddEvenOddEven = evensOddsSumSumEvenOddEvenOddEvenOdd\
    \ + evensOddsSum.sum\n        val evensOddsSumSumEvenOddEvenOddEvenOddEvenOdd\
    \ = evensOddsSumSumEvenOddEvenOddEvenOddEven - evensOddsSum.sum\n        val evensOddsSumSumEvenOddEvenOddEvenOddEvenOddEven\
    \ = evensOddsSumSumEvenOddEvenOddEvenOddEvenOdd + evensOddsSum.sum\n        val\
    \ evensOddsSumSumEvenOddEvenOddEvenOddEvenOddEvenOdd = evensOddsSumSumEvenOddEvenO",
  "        val even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ % 2\
    \ == 1)\n        val evenAndOdd = even.intersect(odd)\n        val evenAndEven\
    \ = even.intersect(even)\n        val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n\
    \        val evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n        val\
    \ evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n  \
    \      val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        ", "        val even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_\
    \ % 2 == 1)\n        val exchanged = even.zip(odd).filter(_._1 == _._2)\n    \
    \    if(exchanged.isEmpty) \"\" else \"YES\"", '        // Your code here', " \
    \       // Your code here\n        val lst1Even = lst1.filter(_ % 2 == 0)\n  \
    \      val lst2Even = lst2.filter(_ % 2 == 0)\n        if(lst1Even.size == lst2Even.size){\n\
    \            val lst1EvenList = lst1Even.map(x => x * 2)\n            val lst2EvenList\
    \ = lst2Even.map(x => x * 2)\n            val lst1EvenSet = lst1EvenList.distinct\n\
    \            val lst2EvenSet = lst2EvenList.distinct\n            if(lst1EvenSet.size\
    \ == lst2EvenSet.size){\n                val lst1EvenSetList = lst1EvenSet.map(x\
    \ => x * 2)\n                val lst2EvenSetList = lst2EvenSet.map(x => x * 2)\n\
    \                val lst1EvenSetSet = lst1EvenSetList.distinct\n             \
    \   val lst2EvenSetSet = lst2EvenSetList.distinct\n                if(lst1EvenSetSet.size\
    \ == lst2EvenSetSet.size){\n                    val lst1EvenSetSetList = lst1EvenSetSet.map(x\
    \ => x * 2)\n                    val lst2EvenSetSetList = lst2EvenSetSet.map(x\
    \ => x * 2)\n                    val lst1EvenSetSetSetSet = lst1EvenSetSetList.distinct\n\
    \                    val lst2EvenSetSetSetSet = lst2EvenSetSetList.distinct\n\
    \                    if(lst1EvenSetSetSet.size == lst2EvenSetSetSet.size){\n \
    \                       val lst1EvenSetSetSetSetList = lst1EvenSetSetSet.map(x\
    \ => x * 2)\n                        val lst2EvenSetSetSetSetList = lst2EvenSetSetSet.map(x\
    \ => x * 2)\n                        val lst1EvenSetSetSetSetSetSet = lst1EvenSetSetSetSetList.distinct\n\
    \                        val lst2EvenSetSetSetSetSet = lst2EvenSetSetSetSetList.distinct\n\
    \                        if(lst1EvenSetSetSetSetSet.size == lst2EvenSetSetSetSetSet.size){\n\
    \                            val lst1EvenSetSetSetSetSetSetList = lst1EvenSetSetSetSetSet.map(x\
    \ => x * 2)\n                            val lst2EvenSetSetSetSetSetList = lst2EvenSetSetSetSet.map(x\
    \ => x * 2)\n                            val lst1EvenSetSetSetSetSetSet = lst1EvenSetSetSetSetSetList.distinct\n\
    \                            val lst2EvenSetSetSetSetSet = lst2EvenSetSetSetSetSetList.distinct\n\
    \                            if(lst1EvenSetSetSetSetSetSet.size == lst2EvenSetSetSetSetSetSet",
  "        val even = lst1.filter(x => x % 2 == 0).length\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).length\n        if (even == odd) {\n            return \"YES\"\
    \n        } else {\n            return \"NO\"\n        }", "        // Your code\
    \ goes here\n        val even = lst1.filter(x => x % 2 == 0)\n        val odd\
    \ = lst2.filter(x => x % 2 == 0)\n        val evenOdd = even.zip(odd)\n      \
    \  val evenOddSet = evenOdd.toSet\n        val result = evenOddSet.size == lst1.size\
    \ && evenOddSet.size == lst2.size\n        if(result){\n            return \"\
    YES\"\n        }\n        return \"NO\"", "        // Your code here\n       \
    \ val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x =>\
    \ x % 2 != 0)\n        if (even.size == odd.size) {\n            val evenList\
    \ = even.map(x => x + 1)\n            val oddList = odd.map(x => x - 1)\n    \
    \        val newList = evenList ++ oddList\n            if (newList.size == even.size\
    \ && newList.size == odd.size) {\n                return \"YES\"\n           \
    \ }\n        }\n        return \"NO\"", '        // Your code here', '        //
    Your code here', '        // Your code here', "        val even = lst1.filter(x\
    \ => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n        val\
    \ evenAndOdd = even.intersect(odd)\n        val evenAndEven = even.intersect(even)\n\
    \        val evenAndOddAndEven = evenAndOdd.intersect(evenAndEven)\n        val\
    \ evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(odd)\n        val evenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOdd.intersect(even)\n        val evenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEven.intersect(odd)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val even", '        // Your code here', '        // Your code goes here',
  '        // Your code goes here', '        // Your code here', "        // Your\
    \ code here\n        val even = lst1.filter(x => x % 2 == 0)\n        val odd\
    \ = lst2.filter(x => x % 2 == 1)\n        val evenOdd = even.zip(odd)\n      \
    \  val evenOddList = evenOdd.toList\n        val evenOddList2 = evenOddList.map(x\
    \ => x._2)\n        val evenOddList3 = evenOddList2.filter(x => x % 2 == 0)\n\
    \        val evenOddList4 = evenOddList3.map(x => x._1)\n        val evenOddList5\
    \ = evenOddList4.filter(x => x % 2 == 0)\n        val evenOddList6 = evenOddList5.map(x\
    \ => x._1)\n        val evenOddList7 = evenOddList6.filter(x => x % 2 == 0)\n\
    \        val evenOddList8 = evenOddList7.map(x => x._1)\n        val evenOddList9\
    \ = evenOddList8.filter(x => x % 2 == 0)\n        val evenOddList10 = evenOddList9.map(x\
    \ => x._1)\n        val evenOddList11 = evenOddList10.filter(x => x % 2 == 0)\n\
    \        val evenOddList12 = evenOddList11.map(x => x._1)\n        val evenOddList13\
    \ = evenOddList12.filter(x => x % 2 == 0)\n        val evenOddList14 = evenOddList13.map(x\
    \ => x._1)\n        val evenOddList15 = evenOddList14.filter(x => x % 2 == 0)\n\
    \        val evenOddList16 = evenOddList15.map(x => x._1)\n        val evenOddList17\
    \ = evenOddList16.filter(x => x % 2 == 0)\n        val evenOddList18 = evenOddList17.map(x\
    \ => x._1)\n        val evenOddList19 = evenOddList18.filter(x => x % 2 == 0)\n\
    \        val evenOddList20 = evenOddList19.map(x => x._1)\n        val evenOddList21\
    \ = evenOddList20.filter(x => x % 2 == 0)\n        val evenOddList22 = evenOddList21.map(x\
    \ => x._1)\n        val evenOddList23 = evenOddList22.filter(x => x % 2 == 0)\n\
    \        val evenOddList24 = evenOddList23.map(x ", "        // Your code here\n\
    \        val lst3 = lst1.filter(_%2==0).sortWith(_>_)\n        val lst4 = lst2.filter(_%2==0).sortWith(_>_)\n\
    \        if(lst3.isEmpty) \"\"\n        else if(lst4.isEmpty) \"\"\n        else\
    \ if(lst3.head < lst4.head) exchange(lst3, lst4)\n        else exchange(lst4,\
    \ lst3)", "        val even = lst1.filter(x => x % 2 == 0).length\n        val\
    \ odd = lst2.filter(x => x % 2 == 1).length\n        if (even > odd) {\n     \
    \       return \"NO\"\n        } else {\n            return \"YES\"\n        }",
  "        val lst1Set = lst1.toSet\n        val lst2Set = lst2.toSet\n        val\
    \ lst1Set2 = lst1Set.intersect(lst2Set)\n        if(lst1Set2.isEmpty){\n     \
    \       return \"NO\"\n        }\n        val lst1Set3 = lst1Set.diff(lst2Set)\n\
    \        if(lst1Set3.isEmpty){\n            return \"NO\"\n        }\n       \
    \ val lst1Set4 = lst1Set.diff(lst2Set)\n        if(lst1Set4.isEmpty){\n      \
    \      return \"NO\"\n        }\n        val lst1Set5 = lst1Set.diff(lst2Set)\n\
    \        if(lst1Set5.isEmpty){\n            return \"NO\"\n        }\n       \
    \ val lst1Set6 = lst1Set.diff(lst2Set)\n        if(lst1Set6.isEmpty){\n      \
    \      return \"NO\"\n        }\n        val lst1Set7 = lst1Set.diff(lst2Set)\n\
    \        if(lst1Set7.isEmpty){\n            return \"NO\"\n        }\n       \
    \ val lst1Set8 = lst1Set.diff(lst2Set)\n        if(lst1Set8.isEmpty){\n      \
    \      return \"NO\"\n        }\n        val lst1Set9 = lst1Set.diff(lst2Set)\n\
    \        if(lst1Set9.isEmpty){\n            return \"NO\"\n        }\n       \
    \ val lst1Set10 = lst1Set.diff(lst2Set)\n        if(lst1Set10.isEmpty){\n    \
    \        return \"NO\"\n        }\n        val lst1Set11 = lst1Set.diff(lst2Set)\n\
    \        if(lst1Set11.isEmpty){\n            return \"NO\"\n        }\n      \
    \  val lst1Set12 = lst1Set.diff(lst2Set)\n        if(lst1Set12.isEmpty){\n   \
    \         return \"NO\"\n        }\n        val lst1Set13 = lst1Set.diff(lst2Set)\n\
    \        if(lst1Set13.isEmpty){\n            return \"NO\"\n        }\n      \
    \  val lst1Set14 = lst1Set.diff(lst2Set)\n        if(lst1Set14.isEmpty){\n   \
    \         return \"NO\"\n        }\n        val lst1Set15 = lst1Set.diff(lst2Set)\n\
    \        if(lst1Set15.isEmpty){\n            return \"NO\"\n        }\n      \
    \  val lst1Set16 = lst1Set.diff(lst2Set)\n        if(lst1Set16.isEmpty){\n   \
    \         return \"NO\"\n        }\n        val lst1Set17 = lst1Set.diff(lst2Set)\n\
    \        if(lst1Set17.isEmpty){\n            return \"NO\"\n        }\n      \
    \  val lst1Set18 = ", "        // Your code here\n        val lst3 = lst1.toSet.intersect(lst2.toSet)\n\
    \        if(lst3.isEmpty) \"\" else \"NO\"", '        // Your code here', "  \
    \      val even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ % 2\
    \ == 1)\n        val evenAndOdd = even.intersect(odd)\n        if(evenAndOdd.isEmpty)\
    \ \"NO\" else \"YES\"", "        val lst3 = lst1.toList ++ lst2.toList\n     \
    \   val even = lst3.filter(x => x % 2 == 0)\n        val odd = lst3.filter(x =>\
    \ x % 2 != 0)\n        if (even.size == lst1.size && odd.size == lst2.size) {\n\
    \            val evenList = even.toList\n            val oddList = odd.toList\n\
    \            val evenIndex = evenList.indexWhere(x => x % 2 == 0)\n          \
    \  val oddIndex = oddList.indexWhere(x => x % 2 != 0)\n            val evenList\
    \ = evenList.take(evenIndex).reverse.mkString(\",\")\n            val oddList\
    \ = oddList.take(oddIndex).reverse.mkString(\",\")\n            val evenList =\
    \ evenList.mkString(\",\")\n            val oddList = oddList.mkString(\",\")\n\
    \            if (evenList == evenList) {\n                if (oddList == oddList)\
    \ {\n                    \"YES\"\n                } else {\n                 \
    \   \"NO\"\n                }\n            } else {\n                \"NO\"\n\
    \            }\n        } else {\n            \"NO\"\n        }", "        val\
    \ even = lst1.filter(_ % 2 == 0).size\n        val odd = lst2.filter(_ % 2 ==\
    \ 1).size\n        if (even == odd) {\n            val evenList = lst1.filter(_\
    \ % 2 == 0)\n            val oddList = lst2.filter(_ % 2 == 1)\n            val\
    \ exchanged = evenList.zip(oddList).filter(_._1 == _._2).size\n            if\
    \ (exchanged > 0) {\n                return \"YES\"\n            } else {\n  \
    \              return \"NO\"\n            }\n        } else {\n            return\
    \ \"NO\"\n        }", '        // Your code here', "        // Your code here\n\
    \        val even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ %\
    \ 2 != 0)\n        val evenAndOdd = even.intersect(odd)\n        if(evenAndOdd.isEmpty){\n\
    \            return \"NO\"\n        }\n        else{\n            return \"YES\"\
    \n        }", "        // Your code goes here\n        val lst3 = lst1.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n        val lst4 = lst2.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n        val lst5 = lst3.zip(lst4).filter(_._1 == _._2).map(_._1)\n   \
    \     val lst6 = lst5.filter(_ % 2 == 0).sortWith(_ < _)\n        if(lst6.size\
    \ == lst1.size && lst6.size == lst2.size) {\n            val lst7 = lst6.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n            if(lst7.size == lst1.size) {\n      \
    \          val lst8 = lst7.filter(_ % 2 == 0).sortWith(_ < _)\n              \
    \  if(lst8.size == lst2.size) {\n                    val lst9 = lst8.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n                    if(lst9.size == lst1.size) {\n\
    \                        val lst10 = lst9.filter(_ % 2 == 0).sortWith(_ < _)\n\
    \                        if(lst10.size == lst2.size) {\n                     \
    \       val lst11 = lst10.filter(_ % 2 == 0).sortWith(_ < _)\n               \
    \             if(lst11.size == lst1.size) {\n                                val\
    \ lst12 = lst11.filter(_ % 2 == 0).sortWith(_ < _)\n                         \
    \       if(lst12.size == lst2.size) {\n                                    val\
    \ lst13 = lst12.filter(_ % 2 == 0).sortWith(_ < _)\n                         \
    \           if(lst13.size == lst1.size) {\n                                  \
    \      val lst14 = lst13.filter(_ % 2 == 0).sortWith(_ < _)\n                \
    \                        if(lst14.size == lst2.size) {\n                     \
    \                       val lst15 = lst14.filter(_ % 2 == 0).sortWith(_ < _)\n\
    \                                            if(lst15.size == lst1.size) {\n \
    \                                               val lst16 = lst15.filter(_ % 2\
    \ == 0).sortWith(_ < _)\n                                                if(lst16.size\
    \ == lst2.size) {\n                                                    val lst17\
    \ = lst16.filter(_ % 2 == 0).sortWith(_ < _)\n                               \
    \                     if(lst17.size == lst1.size) {\n                        \
    \                                val lst18 = lst17.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n                                                        if(lst18.size\
    \ == lst2.size) {\n                                                          \
    \  val lst19 = lst18.filter(_ % 2 == 0).sortWith(_ < _)\n                    \
    \                                        if(lst19.size == lst1.size) {\n     \
    \                                                           val lst20 = lst19.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n                                                \
    \                if(lst20.size == lst2.size) {\n                             \
    \                                       val lst21 = lst20.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n                                                                    if(lst21.size\
    \ == lst1.size) {\n                                ", "        val even = lst1.filter(x\
    \ => x % 2 == 0).length\n        val odd = lst2.filter(x => x % 2 == 1).length\n\
    \        if (even > odd) {\n            return \"NO\"\n        }\n        else\
    \ {\n            val exchanged = lst1.zip(lst2).filter(x => x._1 % 2 == 0 && x._2\
    \ % 2 == 1).map(x => (x._1, x._2))\n            val even = exchanged.filter(x\
    \ => x._1 % 2 == 0).length\n            val odd = exchanged.filter(x => x._1 %\
    \ 2 == 1).length\n            if (even > odd) {\n                return \"NO\"\
    \n            }\n            else {\n                return \"YES\"\n        \
    \    }\n        }", "        val even = lst1.filter(_ % 2 == 0)\n        val odd\
    \ = lst2.filter(_ % 2 == 0)\n        val evenAndOdd = even.intersect(odd)\n  \
    \      val evenAndOddAndEven = evenAndOdd.intersect(even)\n        if (evenAndOddAndEven.isEmpty)\
    \ {\n            \"NO\"\n        } else {\n            \"YES\"\n        }", " \
    \       val even = lst1.filter(_ % 2 == 0).length\n        val odd = lst2.filter(_\
    \ % 2 == 1).length\n        if(even == odd) \"YES\" else \"NO\"", "        val\
    \ even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ % 2 == 1)\n\
    \        val evenAndOdd = even.intersect(odd)\n        val evenAndEven = even.intersect(even)\n\
    \        val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n        val\
    \ evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n        val evenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n        val evenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n        val evenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        ", "        val lst1Even = lst1.filter(x => x % 2 == 0)\n        val\
    \ lst2Even = lst2.filter(x => x % 2 == 0)\n        val lst1Odd = lst1.filter(x\
    \ => x % 2 != 0)\n        val lst2Odd = lst2.filter(x => x % 2 != 0)\n       \
    \ val lst1EvenAndOdd = lst1Even.intersect(lst1Odd)\n        val lst2EvenAndOdd\
    \ = lst2Even.intersect(lst2Odd)\n        val lst1EvenAndOddAndNotBothEvenAndOdd\
    \ = lst1EvenAndOdd.filter(x => !lst2EvenAndOdd.contains(x))\n        val lst2EvenAndOddAndNotBothEvenAndOdd\
    \ = lst2EvenAndOdd.filter(x => !lst1EvenAndOdd.contains(x))\n        val lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd\
    \ = lst1EvenAndOddAndNotBothEvenAndOdd.filter(x => !lst2EvenAndOddAndNotBothEvenAndOdd.contains(x))\n\
    \        val lst2EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd = lst2EvenAndOddAndNotBothEvenAndOdd.filter(x\
    \ => !lst1EvenAndOddAndNotBothEvenAndOdd.contains(x))\n        val lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd\
    \ = lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd.filter(x => !lst2EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd.contains(x))\n\
    \        val lst2EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd\
    \ = lst2EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd.filter(x => !lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd.contains(x))\n\
    \        val lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd\
    \ = lst1EvenAndOddAndNotBothEvenAndOddAndNot", "        val even = lst1.filter(x\
    \ => x % 2 == 0).length\n        val odd = lst2.filter(x => x % 2 == 1).length\n\
    \        if (even > odd) {\n            return \"NO\"\n        } else {\n    \
    \        return \"YES\"\n        }", '        // Your code here', '        //
    Your code here', "        val even = lst1.filter(x => x % 2 == 0).length\n   \
    \     val odd = lst2.filter(x => x % 2 == 1).length\n        if (even > odd) {\n\
    \            return \"NO\"\n        }\n        else {\n            val evenList\
    \ = lst1.filter(x => x % 2 == 0)\n            val oddList = lst2.filter(x => x\
    \ % 2 == 1)\n            val exchangeList = evenList.zip(oddList).filter(_._1\
    \ == _._2)\n            if (exchangeList.length == 0) {\n                return\
    \ \"NO\"\n            }\n            else {\n                return \"YES\"\n\
    \            }\n        }", "        val even = lst1.filter(x => x % 2 == 0)\n\
    \        val odd = lst2.filter(x => x % 2 == 0)\n        val evenAndOdd = even.intersect(odd)\n\
    \        if(evenAndOdd.isEmpty) \"NO\" else \"YES\"", '        // Your code here',
  "        val lst1Even = lst1.filter(_ % 2 == 0)\n        val lst2Even = lst2.filter(_\
    \ % 2 == 0)\n        val lst1Odd = lst1.filter(_ % 2 != 0)\n        val lst2Odd\
    \ = lst2.filter(_ % 2 != 0)\n        val lst1EvenAndOdd = lst1Even.intersect(lst1Odd)\n\
    \        val lst2EvenAndOdd = lst2Even.intersect(lst2Odd)\n        val lst1EvenAndOddAndNotBoth\
    \ = lst1EvenAndOdd.filter(_ != lst2EvenAndOdd)\n        val lst2EvenAndOddAndNotBoth\
    \ = lst2EvenAndOdd.filter(_ != lst1EvenAndOdd)\n        val lst1EvenAndOddAndNotBothAndNotBoth\
    \ = lst1EvenAndOddAndNotBoth.filter(_ != lst2EvenAndOddAndNotBoth)\n        val\
    \ lst2EvenAndOddAndNotBothAndNotBoth = lst2EvenAndOddAndNotBoth.filter(_ != lst1EvenAndOddAndNotBoth)\n\
    \        val lst1EvenAndOddAndNotBothAndNotBothAndNotBoth = lst1EvenAndOddAndNotBothAndNotBoth.filter(_\
    \ != lst2EvenAndOddAndNotBothAndNotBoth)\n        val lst2EvenAndOddAndNotBothAndNotBothAndNotBoth\
    \ = lst2EvenAndOddAndNotBothAndNotBoth.filter(_ != lst1EvenAndOddAndNotBothAndNotBoth)\n\
    \        val lst1EvenAndOddAndNotBothAndNotBothAndNotBothAndNotBoth = lst1EvenAndOddAndNotBothAndNotBothAndNotBoth.filter(_\
    \ != lst2EvenAndOddAndNotBothAndNotBothAndNotBoth)\n        val lst2EvenAndOddAndNotBothAndNotBothAndNotBothAndNotBoth\
    \ = lst2EvenAndOddAndNotBothAndNotBothAndNotBoth.filter(_ != lst1EvenAndOddAndNotBothAndNotBothAndNotBoth)\n\
    \        val lst1EvenAndOddAndNotBothAndNotBothAndNotBothAndNotBothAndNotBoth\
    \ = lst1EvenAndOddAndNotBothAndNotBothAndNotBothAndNotBoth.filter(_ != lst2EvenAndOddAndNotBothAndNotBothAndNot",
  "        val even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ % 2\
    \ != 0)\n        if (even.size == lst1.size && odd.size == lst2.size) {\n    \
    \        val exchanged = even.zip(odd).filter(_._1 == _._2).map(_._1)\n      \
    \      if (exchanged.size == even.size)\n                return \"YES\"\n    \
    \        else\n                return \"NO\"\n        }\n        else\n      \
    \      return \"NO\"", "        val even = lst1.filter(_ % 2 == 0)\n        val\
    \ odd = lst2.filter(_ % 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n\
    \        val evenAndOddIsEven = evenAndOdd.forall(x => x % 2 == 0)\n        if\
    \ (evenAndOddIsEven) {\n            \"YES\"\n        } else {\n            \"\
    NO\"\n        }", '        // Your code here', '        // Your code here', '        //
    Your code here', "        val evens = lst1.filter(_ % 2 == 0)\n        val odds\
    \ = lst2.filter(_ % 2 == 1)\n        val exchanged = evens.zip(odds).filter(_._1\
    \ == _._2)\n        if (exchanged.isEmpty) {\n            \"NO\"\n        } else\
    \ {\n            \"YES\"\n        }", "        val lst3 = lst1.toList\n      \
    \  val lst4 = lst2.toList\n        val lst5 = lst3.toList\n        val lst6 =\
    \ lst4.toList\n        val lst7 = lst5.toList\n        val lst8 = lst6.toList\n\
    \        val lst9 = lst7.toList\n        val lst10 = lst8.toList\n        val\
    \ lst11 = lst9.toList\n        val lst12 = lst10.toList\n        val lst13 = lst11.toList\n\
    \        val lst14 = lst12.toList\n        val lst15 = lst13.toList\n        val\
    \ lst16 = lst14.toList\n        val lst17 = lst15.toList\n        val lst18 =\
    \ lst16.toList\n        val lst19 = lst17.toList\n        val lst20 = lst18.toList\n\
    \        val lst21 = lst19.toList\n        val lst22 = lst20.toList\n        val\
    \ lst23 = lst21.toList\n        val lst24 = lst22.toList\n        val lst25 =\
    \ lst23.toList\n        val lst26 = lst24.toList\n        val lst27 = lst25.toList\n\
    \        val lst28 = lst26.toList\n        val lst29 = lst27.toList\n        val\
    \ lst30 = lst28.toList\n        val lst31 = lst29.toList\n        val lst32 =\
    \ lst30.toList\n        val lst33 = lst31.toList\n        val lst34 = lst32.toList\n\
    \        val lst35 = lst33.toList\n        val lst36 = lst34.toList\n        val\
    \ lst37 = lst35.toList\n        val lst38 = lst36.toList\n        val lst39 =\
    \ lst37.toList\n        val lst40 = lst38.toList\n        val lst41 = lst39.toList\n\
    \        val lst42 = lst40.toList\n        val lst43 = lst41.toList\n        val\
    \ lst44 = lst42.toList\n        val lst45 = lst43.toList\n        val lst46 =\
    \ lst44.toList\n        val lst47 = lst45.toList\n        val lst48 = lst46.toList\n\
    \        val lst49 = lst47.toList\n        val lst50 = lst48.toList\n        val\
    \ lst51 = lst49.toList\n        val lst52 = lst50.toList\n        val lst53 =\
    \ lst51.toList\n        val lst54 = lst5", "        val even = lst1.filter(x =>\
    \ x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 0)\n        val evenAndOdd\
    \ = even.intersect(odd)\n        val evenAndEven = even.intersect(even)\n    \
    \    val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n        val evenAndOddAndOdd\
    \ = evenAndOdd.intersect(evenAndOdd)\n        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAnd",
  "        // Your code goes here\n        val even = lst1.filter(x => x % 2 == 0)\n\
    \        val odd = lst2.filter(x => x % 2 == 1)\n        val evenOdd = even.zip(odd)\n\
    \        val evenOddMap = evenOdd.toMap\n        val evenOddMapKeys = evenOddMap.keys\n\
    \        val evenOddMapValues = evenOddMap.values.toList\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val evenOddMapValuesLength = evenOddMapValues.length\n\
    \        val evenOddMapValuesLength = evenOddMapValues.length\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val evenOddMapValuesLength = evenOddMapValues.length\n\
    \        val evenOddMapValuesLength = evenOddMapValues.length\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val evenOddMapValuesLength = evenOddMapValues.length\n\
    \        val evenOddMapValuesLength = evenOddMapValues.length\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val evenOddMapValuesLength = evenOddMapValues.length\n\
    \        val evenOddMapValuesLength = evenOddMapValues.length\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val evenOddMapValuesLength = evenOddMapValues.length\n\
    \        val evenOddMapValuesLength = evenOddMapValues.length\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val evenOddMapValuesLength = evenOddMapValues.length\n\
    \        val evenOddMapValuesLength = evenOddMapValues.length\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val evenOddMapValuesLength = evenOddMapValues.length\n\
    \        val evenOddMapValuesLength = evenOddMapValues.length\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val evenOddMapValuesLength = evenOddMapValues.length\n\
    \        val evenOddMapValuesLength = evenOddMapValues.length\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val evenOddMapValuesLength = evenOddMapValues.length\n\
    \        val evenOddMapValuesLength = evenOddMapValues.length\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val ", "        val even = lst1.filter(x\
    \ => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 0)\n        val\
    \ evenOdd = even.zip(odd)\n        val evenOddMap = evenOdd.map(x => (x._1, x._2)).toMap\n\
    \        val evenOddMap2 = evenOddMap.filter(_._1 == even._1).filter(_._2 == odd._1).map(_._2)\n\
    \        val evenOddMap3 = evenOddMap2.filter(_._1 == even._1).filter(_._2 ==\
    \ odd._2).map(_._2)\n        val evenOddMap4 = evenOddMap3.filter(_._1 == even._2).filter(_._2\
    \ == odd._1).map(_._2)\n        val evenOddMap5 = evenOddMap4.filter(_._1 == even._2).filter(_._2\
    \ == odd._2).map(_._2)\n        val evenOddMap6 = evenOddMap5.filter(_._1 == even._3).filter(_._2\
    \ == odd._1).map(_._2)\n        val evenOddMap7 = evenOddMap6.filter(_._1 == even._3).filter(_._2\
    \ == odd._2).map(_._2)\n        val evenOddMap8 = evenOddMap7.filter(_._1 == even._4).filter(_._2\
    \ == odd._1).map(_._2)\n        val evenOddMap9 = evenOddMap8.filter(_._1 == even._4).filter(_._2\
    \ == odd._2).map(_._2)\n        val evenOddMap10 = evenOddMap9.filter(_._1 ==\
    \ even._5).filter(_._2 == odd._1).map(_._2)\n        val evenOddMap11 = evenOddMap10.filter(_._1\
    \ == even._5).filter(_._2 == odd._2).map(_._2)\n        val evenOddMap12 = evenOddMap11.filter(_._1\
    \ == even._6).filter(_._2 == odd._1).map(_._2)\n        val evenOddMap13 = evenOddMap12.filter(_._1\
    \ == even._6).filter(_._2 == odd._2).map(_._2)\n        val evenOddMap14 = evenOddMap13.filter(_._1\
    \ == even._7).filter(_._2 == odd._1).map(_._2)\n        val evenOddMap15 = evenOddMap14.filter(_._1\
    \ == even._7).filter(_._2 == od", "        // Your code here\n        val lst3\
    \ = lst1.filter(_ % 2 == 0).zip(lst2.filter(_ % 2 == 0)).filter(_._1 == _._1).map(_._2).toList\n\
    \        if(lst3.isEmpty) \"\"\n        else lst3.head == lst3.last ? \"YES\"\
    \ : \"NO\"", "        val even = lst1.filter(x => x % 2 == 0)\n        val odd\
    \ = lst2.filter(x => x % 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n\
    \        val evenAndEven = even.intersect(even)\n        val evenAndOddAndEven\
    \ = evenAndEven.intersect(evenAndOdd)\n        val evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n\
    \        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAnd",
  "        val evens = lst1.filter(x => x % 2 == 0)\n        val odds = lst2.filter(x\
    \ => x % 2 == 1)\n        val evensAndOdds = evens ++ odds\n        val evensAndOddsSet\
    \ = evensAndOdds.toSet\n        if (evensAndOddsSet.size == lst1.size)\n     \
    \       \"YES\"\n        else\n            \"NO\"", "        val even = lst1.filter(x\
    \ => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n        val\
    \ evenAndOdd = even.intersect(odd)\n        val evenAndOddLength = evenAndOdd.length\n\
    \        if (evenAndOddLength == 0) {\n            return \"NO\"\n        }\n\
    \        val evenAndOddSet = evenAndOdd.toSet\n        if (evenAndOddLength ==\
    \ evenAndOddSet.size) {\n            return \"YES\"\n        }\n        val evenAndOddSetLength\
    \ = evenAndOddSet.size\n        if (evenAndOddLength > evenAndOddSetLength) {\n\
    \            return \"NO\"\n        }\n        val evenAndOddSetSet = evenAndOddSet.toSet\n\
    \        if (evenAndOddLength == evenAndOddSetSet.size) {\n            return\
    \ \"YES\"\n        }\n        val evenAndOddSetSetLength = evenAndOddSetSet.size\n\
    \        if (evenAndOddLength > evenAndOddSetSetLength) {\n            return\
    \ \"NO\"\n        }\n        val evenAndOddSetSetSet = evenAndOddSet.toSet\n \
    \       if (evenAndOddLength == evenAndOddSetSetSet.size) {\n            return\
    \ \"YES\"\n        }\n        val evenAndOddSetSetSetLength = evenAndOddSetSetSet.size\n\
    \        if (evenAndOddLength > evenAndOddSetSetSetLength) {\n            return\
    \ \"NO\"\n        }\n        val evenAndOddSetSetSetLength = evenAndOddSetSetSetLength.size\n\
    \        if (evenAndOddLength > evenAndOddSetSetSetLength) {\n            return\
    \ \"NO\"\n        }\n        val evenAndOddSetSetSetSetLength = evenAndOddSetSetSetLength.size\n\
    \        if (evenAndOddLength > evenAndOddSetSetSetSetLength) {\n            return\
    \ \"NO\"\n        }\n        val evenAndOddSetSetSetSetLength = evenAndOddSetSetSetSetLength.size\n\
    \        if (evenAndOddLength > evenAndOddSetSetSetSetLength) {\n            return\
    \ \"NO\"\n        }\n        val evenAndOddSetSetSetSetLength = evenAndOddSetSetSetSetLength.size\n\
    \        if (evenAndOddLength > evenAndOddSetSetSetSetSetLength) {\n         \
    \   return \"NO\"\n        }\n        val evenAndOddSetSetSetSetSetLength = evenAndOddSetSetSetSetSetLength.size\n\
    \        if (even", "        // Your code here\n        val lst1Set = lst1.toSet\n\
    \        val lst2Set = lst2.toSet\n        if(lst1Set.size == lst2Set.size)\n\
    \        {\n            val lst1Set2 = lst1Set.diff(lst2Set)\n            if(lst1Set2.isEmpty)\n\
    \            {\n                return \"YES\"\n            }\n            else\n\
    \            {\n                return \"NO\"\n            }\n        }\n    \
    \    else\n        {\n            return \"NO\"\n        }", "        val even\
    \ = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 ==\
    \ 1)\n        val evenAndOdd = even.intersect(odd)\n        val evenAndEven =\
    \ even.intersect(even)\n        val evenAndOddAndEven = evenAndOdd.intersect(evenAndEven)\n\
    \        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEven"]
stop_tokens:
- "\n    }\n"
