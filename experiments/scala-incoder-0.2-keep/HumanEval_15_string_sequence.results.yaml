language: scala
name: HumanEval_15_string_sequence
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = mutable.StringBuilder()\n        for (i <- 0 until n) s += i\n     \
    \   s.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr7s2spg1.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpr7s2spg1.scala:11:26 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) s += i\n\e[31m\e[31m\
    \   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m                  \
    \        Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        result.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4x7o7uhl.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        val nums = Range(0, n).map(i => i.toString)\n\
    \        val spaces = nums.map(i => \" \").mkString\n        val spacedNums =\
    \ nums.map(i => i + spaces)\n        spacedNums.foreach(i => result.append(i).append(\"\
    \ \"))\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx9xuojp9.scala:11:28\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnums\e\
    [0m = Range(\e[31m0\e[0m, n).map(\e[36mi\e[0m => i.toString)\n\e[31m\e[31m   |\e\
    [0m                            ^\e[0m\n\e[31m   |\e[0m                       \
    \     Found:    (n : Long)\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        result.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4x7o7uhl.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = mutable.StringBuilder()\n        for (i <- 0 until n) {\n          \
    \  s += i\n        }\n        s.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwwiy4he.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnwwiy4he.scala:11:26 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var result = \"\"\n        for (i <- 0 until n) {\n            result += i\n\
    \            result += \" \"\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnemq4knc.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var result = \"\"\n        for (i <- 0 until n) {\n            result += i\n\
    \            result += \" \"\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1skoffn2.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var result = \"\"\n        for (i <- 0 until n) {\n            result += i\n\
    \            result += \" \"\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnemq4knc.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        val digits = scala.collection.mutable.ArrayBuffer.fill(n\
    \ / 10)(0)\n        val remainder = n % 10\n        digits.reverse.foreach(x =>\
    \ result.append(x))\n        result.append(remainder)\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0e6s0okk.scala:11:63\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = scala.collection.mutable.ArrayBuffer.fill(n / \e[31m10\e[0m)(\e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \                 Found:    Long\n\e[31m   |\e[0m                            \
    \                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = mutable.StringBuilder()\n        for (i <- 0 until n) s += i\n     \
    \   s.toString()\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpua6mg_ke.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpua6mg_ke.scala:11:26 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) s += i\n\e[31m\e[31m\
    \   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m                  \
    \        Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm3lmn91a.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var result = \"\"\n        for (i <- 0 until n) {\n            result += i\n\
    \            result += \" \"\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1skoffn2.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for(i <- 0 until n) result.append(i).append(\"\
    \ \")\n        result.toString()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbytp2ft9.scala:11:25\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) result.append(i).append(\e[31m\" \"\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                     \
    \    Found:    (n : Long)\n\e[31m   |\e[0m                         Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = mutable.StringBuilder()\n        for (i <- 0 until n) {\n          \
    \  s += i\n        }\n        s.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwwiy4he.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnwwiy4he.scala:11:26 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var result = \"\"\n        for (i <- 0 until n) {\n            result += i\n\
    \            result += \" \"\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1skoffn2.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val strings = mutable.ListBuffer[String]()\n        var i = 0\n        while\
    \ (i < n) {\n            strings += i.toString\n            i += 1\n        }\n\
    \        strings.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxt9u6hvl.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mstrings\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        val nums = Range(0, n).toList\n    \
    \    nums.foreach(x => result.append(x))\n        result.toString()\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_j3twc54.scala:11:28\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnums\e\
    [0m = Range(\e[31m0\e[0m, n).toList\n\e[31m\e[31m   |\e[0m                   \
    \         ^\e[0m\n\e[31m   |\e[0m                            Found:    (n : Long)\n\
    \e[31m   |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm3lmn91a.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        val numbers = mutable.ArrayBuffer.fill(n\
    \ / 2)(scala.math.Random.nextInt(10) + 1)\n        numbers.foreach(x => result.append(x))\n\
    \        result.toString()\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppvnbdfqt.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnumbers\e[0m = mutable.ArrayBuffer.fill(n\
    \ / \e[31m2\e[0m)(scala.math.Random.nextInt(\e[31m10\e[0m) + \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmppvnbdfqt.scala:11:65 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mnumbers\e[0m = mutable.ArrayBuffer.fill(n / \e\
    [31m2\e[0m)(scala.math.Random.nextInt(\e[31m10\e[0m) + \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value Random is not a\
    \ member of math\n2 errors found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm3lmn91a.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzkjcjlre.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) result.append(i).append(\"\
    \ \")\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptd88jd6p.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) result.append(i).append(\e[31m\" \"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m                  \
    \        Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        val digits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        var i = 0\n        while (i < n) {\n            digits += i.toString.charAt(0)\n\
    \            i += 1\n        }\n        digits.reverse.foreach(result.append)\n\
    \        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1_5j5vpk.scala:21)\n\tat Problem.main(tmp1_5j5vpk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        return s\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxhrl_dr1.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        val digits = scala.util.Random.nextInt(n).toLong\n\
    \        while(digits > 0) {\n            result.append(digits)\n            digits\
    \ -= 1\n        }\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxara9qdd.scala:11:47\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = scala.util.Random.nextInt(n).toLong\n\e[31m\e[31m   |\e[0m             \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                            Found:    (n : Long)\n\e[31m   |\e[0m           \
    \                                    Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpxara9qdd.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            digits -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Long - did you mean digits.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = mutable.StringBuilder()\n        for (i <- 0 until n) {\n          \
    \  s += i\n        }\n        s.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwwiy4he.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnwwiy4he.scala:11:26 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val strings = mutable.ListBuffer[String]()\n        for(i <- 0 until n){\n \
    \           strings += i.toString\n        }\n        strings.mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk1gj8nyj.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mstrings\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpk1gj8nyj.scala:11:25 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for(i <- 0 until n) result.append(i).append(\"\
    \ \")\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ajscvrt.scala:11:25\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) result.append(i).append(\e[31m\" \"\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                     \
    \    Found:    (n : Long)\n\e[31m   |\e[0m                         Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjmp5nwy8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpjmp5nwy8.scala:12:14 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m            s += i\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of String - did you mean\
    \ s.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        result.toString()\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ysgsx2v.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        val nums = 0 until n\n        for(i\
    \ <- nums) {\n            result.append(i)\n            result.append(' ')\n \
    \       }\n        result.toString\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyd9ilb1u.scala:11:27\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnums\e\
    [0m = \e[31m0\e[0m until n\n\e[31m\e[31m   |\e[0m                           ^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (n : Long)\n\e[31m  \
    \ |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new mutable.StringBuilder\n        for (i <- 0 until n) {\n   \
    \         result.append(i).append(' ')\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpup1_81to.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpup1_81to.scala:11:26 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = mutable.StringBuilder()\n        for (i <- 0 until n) s += i\n     \
    \   s.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr7s2spg1.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpr7s2spg1.scala:11:26 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) s += i\n\e[31m\e[31m\
    \   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m                  \
    \        Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        return s\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxhrl_dr1.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(' ')\n        }\n        return result.toString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp11th3w99.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new mutable.StringBuilder\n        for (i <- 0 until n) {\n   \
    \         result.append(i).append(\" \")\n        }\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7qmk6h5q.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7qmk6h5q.scala:11:26 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        val arr = new Array[Int](n)\n      \
    \  for(i <- 0 until n) {\n            arr(i) = i.toString\n        }\n       \
    \ arr.toList.sorted.foreach(x => result.append(x))\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt74zux4p.scala:11:33\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36marr\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](n)\n\e[31m\e[31m   |\e[0m\
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \             Found:    (n : Long)\n\e[31m   |\e[0m                          \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt74zux4p.scala:12:25\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpt74zux4p.scala:13:21 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            arr(i) = i.toString\n\e[31m\e[31m   |\e[0m   \
    \                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Found:\
    \    String\n\e[31m   |\e[0m                     Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659793702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var result = \"\"\n        for (i <- 0 until n) {\n            result += i\n\
    \            result += \" \"\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnemq4knc.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzkjcjlre.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = mutable.StringBuilder()\n        for (i <- 0 until n) {\n          \
    \  s += i\n        }\n        s.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoqm7ytty.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoqm7ytty.scala:11:26 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i)\n            result.append(' ')\n        }\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmputng6kqd.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        val range = Range(0, n)\n        range.foreach(i\
    \ => result.append(i).append(\" \"))\n        result.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuvikdjwl.scala:11:29\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(\e[31m0\e[0m, n)\n\e[31m\e[31m   |\e[0m                          \
    \   ^\e[0m\n\e[31m   |\e[0m                             Found:    (n : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = scala.collection.mutable.StringBuilder()\n        for (i<- 0 until n)\
    \ {\n            s += i\n        }\n        s.toString()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp71hmh2vv.scala:11:25\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i<- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp71hmh2vv.scala:12:17 --------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m            s += i\n\e[31m\e[31m   |\e[0m                \
    \ ^\e[0m\n\e[31m   |\e[0m                 Found:    (i : Int)\n\e[31m   |\e[0m\
    \                 Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new mutable.StringBuilder\n        for (i <- 0 until n) {\n   \
    \         result.append(i).append(' ')\n        }\n        result.toString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1yzpvfn3.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1yzpvfn3.scala:11:26 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var result = \"\"\n        for (i <- 0 until n) {\n            result += i\n\
    \            result += \" \"\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnemq4knc.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzkjcjlre.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var result = \"\"\n        for (i <- 0 until n) {\n            result += i\n\
    \            result += \" \"\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1skoffn2.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(' ')\n        }\n        return result.toString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp11th3w99.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) result.append(i).append(\"\
    \ \")\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptd88jd6p.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) result.append(i).append(\e[31m\" \"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m                  \
    \        Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        val range = Range(0, n)\n        range.foreach(i\
    \ => result.append(i).append(\" \"))\n        result.toString()\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpddmq43_1.scala:11:29\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(\e[31m0\e[0m, n)\n\e[31m\e[31m   |\e[0m                          \
    \   ^\e[0m\n\e[31m   |\e[0m                             Found:    (n : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = scala.collection.mutable.StringBuilder()\n        for (i<-0 until n)\
    \ {\n            s += i\n        }\n        s.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeqkgonl3.scala:11:24\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i<-\e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (n : Long)\n\e[31m   |\e[0m   \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpeqkgonl3.scala:12:17 --------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m            s += i\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m\
    \   |\e[0m                 Found:    (i : Int)\n\e[31m   |\e[0m              \
    \   Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = mutable.StringBuilder.newBuilder\n        for (i <- 0 until n) {\n \
    \           s += i\n        }\n        s.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkzx_gj3p.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder.newBuilder\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpkzx_gj3p.scala:11:26 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for(i <- 0 until n){\n            result.append(i).append('\
    \ ')\n        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4lnt55oq.scala:11:25\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        val digits = scala.util.Random.nextInt(n).toString.toInt\n\
    \        var i = 0\n        while (i < digits) {\n            result.append(digits(i))\n\
    \            i += 1\n        }\n        return result.toString()\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3siq_hhp.scala:11:47\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = scala.util.Random.nextInt(n).toString.toInt\n\e[31m\e[31m   |\e[0m     \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                                    Found:    (n : Long)\n\e[31m   |\e[0m   \
    \                                            Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmp3siq_hhp.scala:14:26 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            result.append(digits(i))\n\e[31m\e[31m  \
    \ |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \           \e[33mvalue\e[0m \e[35mdigits\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        var i = 0\n        while (i < n) {\n\
    \            result.append(i).append(\" \")\n            i += 1\n        }\n \
    \       result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ljughji.scala:19)\n\tat Problem.main(tmp5ljughji.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = mutable.StringBuilder()\n        for (i <- 0 until n) {\n          \
    \  s += i\n        }\n        s.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoqm7ytty.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoqm7ytty.scala:11:26 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzkjcjlre.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        val start = 0\n        val end = n\n\
    \        while(start < end) {\n            result.append(start)\n            result.append(\"\
    \ \")\n            start += 1\n        }\n        result.toString\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprxh_ict1.scala:16:18 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            start += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean start.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = mutable.StringBuilder()\n        for (i <- 0 until n) {\n          \
    \  s += i\n        }\n        s.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwwiy4he.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnwwiy4he.scala:11:26 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        return s\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxhrl_dr1.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = mutable.StringBuilder()\n        for (i <- 0 until n) {\n          \
    \  s += i\n        }\n        s.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwwiy4he.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnwwiy4he.scala:11:26 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var result = \"\"\n        for (i <- 0 until n) {\n            result += i\n\
    \            result += \" \"\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1skoffn2.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        val digits = scala.util.Random.nextInt(n).toLong\n\
    \        val digitsInReverse = scala.util.Random.nextInt(n).toLong\n        val\
    \ digitsInReverse2 = scala.util.Random.nextInt(n).toLong\n        val digitsInReverse3\
    \ = scala.util.Random.nextInt(n).toLong\n        val digitsInReverse4 = scala.util.Random.nextInt(n).toLong\n\
    \        val digitsInReverse5 = scala.util.Random.nextInt(n).toLong\n        val\
    \ digitsInReverse6 = scala.util.Random.nextInt(n).toLong\n        val digitsInReverse7\
    \ = scala.util.Random.nextInt(n).toLong\n        val digitsInReverse8 = scala.util.Random.nextInt(n).toLong\n\
    \        val digitsInReverse9 = scala.util.Random.nextInt(n).toLong\n        val\
    \ digitsInReverse10 = scala.util.Random.nextInt(n).toLong\n        val digitsInReverse11\
    \ = scala.util.Random.nextInt(n).toLong\n        val digitsInReverse12 = scala.util.Random.nextInt(n).toLong\n\
    \        val digitsInReverse13 = scala.util.Random.nextInt(n).toLong\n       \
    \ val digitsInReverse14 = scala.util.Random.nextInt(n).toLong\n        val digitsInReverse15\
    \ = scala.util.Random.nextInt(n).toLong\n        val digitsInReverse16 = scala.util.Random.nextInt(n).toLong\n\
    \        val digitsInReverse17 = scala.util.Random.nextInt(n).toLong\n       \
    \ val digitsInReverse18 = scala.util.Random.nextInt(n).toLong\n        val digitsInReverse19\
    \ = scala.util.Random.nextInt(n).toLong\n        val digitsInReverse20 = scala.util.Random.nextInt(n).toLong\n\
    \        val digitsInReverse21 = scala.util.Random.nextInt(n).toLong\n       \
    \ val digitsInReverse22 = scala.util.Random.nextInt(n).toLong\n        val digitsInReverse23\
    \ = scala.util.Random.nextInt(n).toLong\n        val digitsInReverse24 = scala.util.Random.nextInt(n).toLong\n\
    \        val digitsInReverse25 = scala.util.Random.nextInt(n).toLong\n       \
    \ val digitsInReverse26 = scala.util.Random.nextInt(n).toLong\n        val digitsInReverse27\
    \ = scala.util.Random.nextInt(n).toLong\n        val digitsInReverse28 = scala.util.Random.nextInt(n).to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5nq41ya_.scala:11:47\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = scala.util.Random.nextInt(n).toLong\n\e[31m\e[31m   |\e[0m             \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                            Found:    (n : Long)\n\e[31m   |\e[0m           \
    \                                    Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5nq41ya_.scala:12:56 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigitsInReverse\e[0m = scala.util.Random.nextInt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                                                        ^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                             \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5nq41ya_.scala:13:57\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdigitsInReverse2\e\
    [0m = scala.util.Random.nextInt(n).toLong\n\e[31m\e[31m   |\e[0m             \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                           Found:    (n : Long)\n\e[31m   |\e\
    [0m                                                    Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5nq41ya_.scala:14:57 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigitsInReverse3\e[0m =\
    \ scala.util.Random.nextInt(n).toLong\n\e[31m\e[31m   |\e[0m                 \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                                       Found:    (n : Long)\n\e[31m   |\e[0m\
    \                                                    Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanati"
  stdout: ''
  timestamp: 1659793705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var result = \"\"\n        for (i <- 0 until n) {\n            result += i\n\
    \            result += \" \"\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1skoffn2.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        result.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4x7o7uhl.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) result.append(i).append(\"\
    \ \")\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptd88jd6p.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) result.append(i).append(\e[31m\" \"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m                  \
    \        Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = scala.collection.mutable.StringBuilder()\n        for (i <- 0 until\
    \ n) {\n            s.append(i).append(\" \")\n        }\n        s.append(\"\
    \ \")\n        s.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb3v6xqwr.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        return s\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxhrl_dr1.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for(i <- 0 until n){\n            result.append(i).append(\"\
    \ \")\n        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp36egued9.scala:11:25\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var result = \"\"\n        for (i <- 0 until n) {\n            result += i\n\
    \            result += \" \"\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1skoffn2.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var result = \"\"\n        var i = 0\n        while (i < n) {\n            result\
    \ += i\n            result += \" \"\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuwe5x_bv.scala:20)\n\tat Problem.main(tmpuwe5x_bv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        result.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4x7o7uhl.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = mutable.StringBuilder()\n        for(i <- 0 until n) s += i\n      \
    \  s.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplm4jfu47.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplm4jfu47.scala:11:25 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n) s += i\n\e[31m\e[31m\
    \   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                   \
    \      Found:    (n : Long)\n\e[31m   |\e[0m                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for(i <- 0 until n){\n            result.append(i).append(\"\
    \ \")\n        }\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplkdlyjjf.scala:11:25\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        return s\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxhrl_dr1.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        return s\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxhrl_dr1.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        val nums = 0 until n\n        for(i\
    \ <- nums) {\n            result.append(i)\n            result.append(\" \")\n\
    \        }\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7wmj_v2i.scala:11:27\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnums\e\
    [0m = \e[31m0\e[0m until n\n\e[31m\e[31m   |\e[0m                           ^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (n : Long)\n\e[31m  \
    \ |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        return s\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxhrl_dr1.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = mutable.StringBuilder.newBuilder\n        for(i <- 0 until n){\n   \
    \         s += i\n        }\n        s.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw5ua4_vo.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder.newBuilder\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpw5ua4_vo.scala:11:25 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (n : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + i\n      \
    \  }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4dnm_w68.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        val range = Range(0, n)\n        range.foreach(i\
    \ => result.append(i).append(\" \"))\n        result.toString()\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpddmq43_1.scala:11:29\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(\e[31m0\e[0m, n)\n\e[31m\e[31m   |\e[0m                          \
    \   ^\e[0m\n\e[31m   |\e[0m                             Found:    (n : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for(i <- 0 until n) result.append(i).append(\"\
    \ \")\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ajscvrt.scala:11:25\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) result.append(i).append(\e[31m\" \"\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                     \
    \    Found:    (n : Long)\n\e[31m   |\e[0m                         Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm3lmn91a.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var result = \"\"\n        for (i <- 0 until n) {\n            result += \"\
    \ \" + i\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzwpn0dws.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new mutable.StringBuilder\n        for(i <- 0 until n){\n     \
    \       result.append(i).append(\" \")\n        }\n        result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsd__fspx.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsd__fspx.scala:11:25 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzkjcjlre.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        val i = n\n        while (i > 0) {\n\
    \            result.append(i).append(\" \")\n            i -= 1\n        }\n \
    \       return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd7b6auf4.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793712
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        var i = 0\n        while (i < n) {\n            s += i\n\
    \            i += 1\n        }\n        s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1837mmba.scala:19)\n\tat Problem.main(tmp1837mmba.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        result.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4x7o7uhl.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjmp5nwy8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpjmp5nwy8.scala:12:14 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m            s += i\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of String - did you mean\
    \ s.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val list = ListBuffer[String]()\n        val start = n\n        val end = n\
    \ + 1\n        while (start < end) {\n            list += start.toString\n   \
    \         start += 1\n        }\n        list.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm31dp54.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            start += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Long - did you mean start.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i)\n            result.append(' ')\n        }\n        return\
    \ result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp31myboct.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = mutable.StringBuilder()\n        for (i <- 0 until n) {\n          \
    \  s += i\n        }\n        s.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwwiy4he.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnwwiy4he.scala:11:26 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var result = \"\"\n        for (i <- 0 until n) {\n            result += i\n\
    \            result += \" \"\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1skoffn2.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        result.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4x7o7uhl.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzkjcjlre.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val list = mutable.ListBuffer[String]()\n        var i = 0\n        while (i\
    \ < n) {\n            list += i.toString\n            i += 1\n        }\n    \
    \    list.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsozmgtkm.scala:10:19 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzkjcjlre.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var result = \"\"\n        var i = 0\n        while (i < n) {\n            result\
    \ += i\n            result += \" \"\n            i += 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdjdy8u0b.scala:20)\n\tat Problem.main(tmpdjdy8u0b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var result = \"\"\n        for (i <- 0 until n) {\n            result += i\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7vq_l9oo.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i)\n            result.append(\" \")\n        }\n        return\
    \ result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpik_8v56y.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793712
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var result = \"\"\n        var i = 0\n        while (i < n) {\n            result\
    \ += (i + 1) + \" \"\n            i += 1\n        }\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiwuf7pos.scala:19)\n\tat Problem.main(tmpiwuf7pos.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new mutable.StringBuilder\n        for(i <- 0 until n){\n     \
    \       result.append(i).append(\" \")\n        }\n        result.toString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbuowjye8.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbuowjye8.scala:11:25 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        result.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4x7o7uhl.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = mutable.StringBuilder()\n        for (i <- 0 until n) {\n          \
    \  s += i\n        }\n        s.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoqm7ytty.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoqm7ytty.scala:11:26 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        return s\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxhrl_dr1.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new mutable.StringBuilder\n        for (i <- 0 until n) {\n   \
    \         result.append(i).append(\" \")\n        }\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7qmk6h5q.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7qmk6h5q.scala:11:26 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        return s\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxhrl_dr1.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = scala.collection.mutable.StringBuilder()\n        for (i <- 0 until\
    \ n) {\n            s.append(i).append(\" \")\n        }\n        s.append(n)\n\
    \        s.toString()\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplsi9qrxi.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        var i = 0\n        while (i < n) {\n\
    \            result.append(i).append(\" \")\n            i += 1\n        }\n \
    \       return result.toString()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqira4chr.scala:19)\n\tat Problem.main(tmpqira4chr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new mutable.StringBuilder\n        for(i <- 0 until n) {\n    \
    \        result.append(i).append(' ')\n        }\n        result.toString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ol2zy47.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ol2zy47.scala:11:25 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(' ')\n        }\n        return result.toString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp11th3w99.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        result.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4x7o7uhl.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(' ')\n        }\n        return result.toString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp11th3w99.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val strings = mutable.ListBuffer[String]()\n        var i = 0\n        while\
    \ (i < n) {\n            strings += i.toString\n            i += 1\n        }\n\
    \        strings.toList.reverse.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxo2o2pz2.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mstrings\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzkjcjlre.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm3lmn91a.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var str = \"\"\n        for (i <- 0 until n) {\n            str += \" \" + i\n\
    \        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkvaeumdc.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm3lmn91a.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var result = \"\"\n        for (i <- 0 until n) {\n            result += i\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7vq_l9oo.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) result.append(i).append(\"\
    \ \")\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptd88jd6p.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) result.append(i).append(\e[31m\" \"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m                  \
    \        Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) result.append(i).append(\"\
    \ \")\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptd88jd6p.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) result.append(i).append(\e[31m\" \"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m                  \
    \        Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(' ')\n        }\n        return result.toString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp11th3w99.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzkjcjlre.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + i\n      \
    \  }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4dnm_w68.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var result = \"\"\n        for (i <- 0 until n) {\n            result += i\n\
    \            result += \" \"\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1skoffn2.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(' ')\n        }\n        return result.toString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp11th3w99.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new mutable.StringBuilder\n        for (i <- 0 until n) {\n   \
    \         result.append(i)\n            result.append(\" \")\n        }\n    \
    \    result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8z213scu.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8z213scu.scala:11:26 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        return s\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxhrl_dr1.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + i\n      \
    \  }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4dnm_w68.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = mutable.StringBuilder()\n        for (i <- 0 until n) s += i\n     \
    \   s.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr7s2spg1.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpr7s2spg1.scala:11:26 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) s += i\n\e[31m\e[31m\
    \   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m                  \
    \        Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for(i <- 0 until n) result.append(i).append(\"\
    \ \")\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ajscvrt.scala:11:25\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) result.append(i).append(\e[31m\" \"\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                     \
    \    Found:    (n : Long)\n\e[31m   |\e[0m                         Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        var i = 0\n        while (i < n) {\n\
    \            result.append(i).append(\" \")\n            i += 1\n        }\n \
    \       return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplml81lxa.scala:19)\n\tat Problem.main(tmplml81lxa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = mutable.StringBuilder()\n        for (i <- 0 until n) {\n          \
    \  s += i\n        }\n        s.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwwiy4he.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnwwiy4he.scala:11:26 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        result.toString()\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ysgsx2v.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) result.append(i).append(\"\
    \ \")\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptd88jd6p.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) result.append(i).append(\e[31m\" \"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m                  \
    \        Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbe5jqk4c.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val result = new StringBuilder\n        for (i <- 0 until n) {\n           \
    \ result.append(i).append(\" \")\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqwdjeeq8.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzkjcjlre.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \" + i\n\
    \        }\n        return s\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxhrl_dr1.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n\
    \    // '0 1 2 3 4 5'\n    def stringSequence(n : Long) : String = {\n       \
    \ val s = mutable.StringBuilder()\n        for (i <- 0 until n) {\n          \
    \  s += i\n        }\n        s.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoqm7ytty.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoqm7ytty.scala:11:26 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793701
