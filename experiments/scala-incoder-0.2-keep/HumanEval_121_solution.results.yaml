language: scala
name: HumanEval_121_solution
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0\n        var evenSum = 0\n        lst.foreach(x => {\n            if\
    \ (x % 2 == 0) {\n                evenSum += x\n            }\n            else\
    \ {\n                sum += x\n            }\n        })\n        evenSum\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv4mytlwi.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                evenSum += x\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpv4mytlwi.scala:17:20 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                sum += x\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                value += is not a member of Int - did you mean\
    \ Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        val evenSumOdd\
    \ = evenSum + oddSum\n        evenSumOdd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp__7x6fbp.scala:18)\n\tat Problem.main(tmp__7x6fbp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.foldLeft(0)(_ + _)\n        val oddSum = odd.foldLeft(0)(_\
    \ + _)\n        evenSum + oddSum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph4ndpza3.scala:12:39\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenSum\e\
    [0m = even.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m              \
    \                         ^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \               Found:    Long\n\e[31m   |\e[0m                              \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph4ndpza3.scala:13:37\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moddSum\e\
    [0m = odd.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m               \
    \                      ^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \          Found:    Long\n\e[31m   |\e[0m                                   \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        oddSum\
    \ - evenSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe38gdi3c.scala:17)\n\tat Problem.main(tmpe38gdi3c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val result = evenSum + oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrr61zzw.scala:18)\n\tat Problem.main(tmpvrr61zzw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val result = evenSum + oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrr61zzw.scala:18)\n\tat Problem.main(tmpvrr61zzw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum -\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2n_e0mb.scala:17)\n\tat Problem.main(tmpw2n_e0mb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuc6zlkv0.scala:18)\n\tat Problem.main(tmpuc6zlkv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum -\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2n_e0mb.scala:17)\n\tat Problem.main(tmpw2n_e0mb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum -\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2n_e0mb.scala:17)\n\tat Problem.main(tmpw2n_e0mb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum -\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2n_e0mb.scala:17)\n\tat Problem.main(tmpw2n_e0mb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn9shgfiu.scala:17)\n\tat Problem.main(tmpn9shgfiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum -\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2n_e0mb.scala:17)\n\tat Problem.main(tmpw2n_e0mb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0\n        var even = 0\n        var odd = 0\n        lst.foreach{\n \
    \           x =>\n            if (x % 2 == 0) {\n                even += x\n \
    \           } else {\n                odd += x\n            }\n        }\n   \
    \     sum = even + odd\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyyjx5g43.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                even += x\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyyjx5g43.scala:18:20\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                odd += x\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val result = even.foldLeft(0L)(_ + odd.sum)\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpmhf1vtgp.scala:12:39 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = even.foldLeft(\e\
    [31m0L\e[0m)(_ + odd.sum)\n\e[31m\e[31m   |\e[0m                             \
    \          ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Wrong\
    \ number of parameters, expected: 2\n1 error found\n"
  stdout: ''
  timestamp: 1659798220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum - oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_lh1vw9l.scala:18)\n\tat Problem.main(tmp_lh1vw9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum - oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_lh1vw9l.scala:18)\n\tat Problem.main(tmp_lh1vw9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0\n        var even = 0\n        var odd = 0\n        var evenSum = 0\n\
    \        var oddSum = 0\n        for(i <- 0 until lst.length){\n            if(i\
    \ % 2 == 0){\n                evenSum += lst(i)\n                even += 1 \n\
    \            }else{\n                oddSum += lst(i)\n                odd +=\
    \ 1 \n            }\n        }\n        sum = evenSum + oddSum\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_ao7rlrv.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                evenSum += lst(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is\
    \ not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp_ao7rlrv.scala:20:23 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                oddSum += lst(i)\n\e[31m\e[31m   |\e[0m              \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member of\
    \ Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn9shgfiu.scala:17)\n\tat Problem.main(tmpn9shgfiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val result = even.foldLeft(0L) { (sum, elem) => sum + elem }\n        odd.foldLeft(result)\
    \ { case (sum, elem) => sum + elem }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphxvysf4b.scala:16)\n\tat Problem.main(tmphxvysf4b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenSumOdds\
    \ = evenSum + oddSum\n        evenSumOdds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3ah995m5.scala:18)\n\tat Problem.main(tmp3ah995m5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn9shgfiu.scala:17)\n\tat Problem.main(tmpn9shgfiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn9shgfiu.scala:17)\n\tat Problem.main(tmpn9shgfiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        oddSum\
    \ - evenSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe38gdi3c.scala:17)\n\tat Problem.main(tmpe38gdi3c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuc6zlkv0.scala:18)\n\tat Problem.main(tmpuc6zlkv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenSumOdds\
    \ = evenSum + oddSum\n        val evenSumOddsOdds = evenSumOdds + oddSum\n   \
    \     val evenSumOddsOddsOdds = evenSumOddsOdds + oddSum\n        val evenSumOddsOddsOddsOdds\
    \ = evenSumOddsOddsOdds + oddSum\n        val evenSumOddsOddsOddsOddsOdds = evenSumOddsOddsOddsOdds\
    \ + oddSum\n        val evenSumOddsOddsOddsOddsOddsOdds = evenSumOddsOddsOddsOddsOdds\
    \ + oddSum\n        val evenSumOddsOddsOddsOddsOddsOddsOdds = evenSumOddsOddsOddsOddsOddsOdds\
    \ + oddSum\n        val evenSumOddsOddsOddsOddsOddsOddsOddsOdds = evenSumOddsOddsOddsOddsOddsOddsOdds\
    \ + oddSum\n        val evenSumOddsOddsOddsOddsOddsOddsOddsOddsOdds = evenSumOddsOddsOddsOddsOddsOddsOddsOdds\
    \ + oddSum\n        val evenSumOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds = evenSumOddsOddsOddsOddsOddsOddsOddsOddsOdds\
    \ + oddSum\n        val evenSumOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds =\
    \ evenSumOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds + oddSum\n        val evenSumOdd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6loerrer.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6loerrer.scala:26:5 ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ - oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzo1tsk51.scala:17)\n\tat Problem.main(tmpzo1tsk51.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum -\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2n_e0mb.scala:17)\n\tat Problem.main(tmpw2n_e0mb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2\
    \ != 0)\n        val result = even.foldLeft(0)((x, y) => x + y)\n        odd.foldLeft(result)((x,\
    \ y) => x + y)\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvdiigkt4.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = even.foldLeft(\e[31m0\e[0m)((\e[36mx\e[0m, \e[36my\e[0m) => x + y)\n\e[31m\e\
    [31m   |\e[0m                                                ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                Found:    Long\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvdiigkt4.scala:13:39 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        odd.foldLeft(result)((\e[36mx\e[0m, \e[36my\e\
    [0m) => x + y)\n\e[31m\e[31m   |\e[0m                                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    Long\n\e\
    [31m   |\e[0m                                       Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3ss9s9nh.scala:18)\n\tat Problem.main(tmp3ss9s9nh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0L\n        for(i <- 0 until lst.size) {\n            if(lst(i) %2 ==\
    \ 0) {\n                sum += lst(i)\n            }\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy3tu2t79.scala:19)\n\tat Problem.main(tmpy3tu2t79.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0\n        var evenIndex = 0\n        var oddIndex = 0\n        for(i\
    \ <- 0 until lst.length){\n            if(i % 2 == 0){\n                sum +=\
    \ lst(i)\n                evenIndex += 1\n            }else{\n               \
    \ sum += lst(oddIndex)\n                oddIndex += 1\n            }\n       \
    \ }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbcnbhliv.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpbcnbhliv.scala:18:20 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m                sum += lst(oddIndex)\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member of Int\
    \ - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        val evenSumOdd\
    \ = evenSum + oddSum\n        evenSumOdd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp__7x6fbp.scala:18)\n\tat Problem.main(tmp__7x6fbp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn9shgfiu.scala:17)\n\tat Problem.main(tmpn9shgfiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ - oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzo1tsk51.scala:17)\n\tat Problem.main(tmpzo1tsk51.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuc6zlkv0.scala:18)\n\tat Problem.main(tmpuc6zlkv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0\n        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 ==\
    \ 0) {\n                sum += lst(i)\n            }\n        }\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi3vdhfrm.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0\n        var evenSum = 0\n        var oddSum = 0\n        var evenIndex\
    \ = 0\n        var oddIndex = 0\n        for(i <- 0 until lst.length){\n     \
    \       if(i%2 == 0){\n                evenSum += lst(i)\n                evenIndex\
    \ += 1\n            }\n            else{\n                oddSum += lst(i)\n \
    \               oddIndex += 1\n            }\n        }\n        for(i <- 0 until\
    \ evenIndex){\n            sum += evenSum\n        }\n        for(i <- 0 until\
    \ oddIndex){\n            sum += oddSum\n        }\n        sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe16bxx1u.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                evenSum += lst(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is\
    \ not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpe16bxx1u.scala:21:23 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                oddSum += lst(i)\n\e[31m\e[31m   |\e[0m              \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member of\
    \ Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798241
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn9shgfiu.scala:17)\n\tat Problem.main(tmpn9shgfiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn9shgfiu.scala:17)\n\tat Problem.main(tmpn9shgfiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2\
    \ != 0)\n        val result = even.foldLeft(0)(_ + odd.last)\n        odd.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmphcqv764h.scala:12:38 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = even.foldLeft(\e\
    [31m0\e[0m)(_ + odd.last)\n\e[31m\e[31m   |\e[0m                             \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Wrong\
    \ number of parameters, expected: 2\n1 error found\n"
  stdout: ''
  timestamp: 1659798239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2\
    \ != 0)\n        val result = even.foldLeft(0) { case (acc, x) => acc + x }\n\
    \        odd.foldLeft(0) { case (acc, x) => acc + x }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0w2e7nct.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = even.foldLeft(\e[31m0\e[0m) { \e[33mcase\e[0m (acc, x) => acc + x }\n\e\
    [31m\e[31m   |\e[0m                                                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0w2e7nct.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        odd.foldLeft(\e[31m0\e\
    [0m) { \e[33mcase\e[0m (acc, x) => acc + x }\n\e[31m\e[31m   |\e[0m          \
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                             Found:    Long\n\e[31m   |\e[0m                \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0\n        val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_\
    \ % 2 != 0)\n        evens.foreach(x => sum += x)\n        odds.foreach(x => sum\
    \ += x)\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf1akgreb.scala:13:31 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        evens.foreach(\e[36mx\e[0m => sum += x)\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \         value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpf1akgreb.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        odds.foreach(\e[36mx\e[0m => sum += x)\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \        value += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuc6zlkv0.scala:18)\n\tat Problem.main(tmpuc6zlkv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum -\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2n_e0mb.scala:17)\n\tat Problem.main(tmpw2n_e0mb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuc6zlkv0.scala:18)\n\tat Problem.main(tmpuc6zlkv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val evenOddSum = evenSum + oddSum\n        evenOddSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpji_hp7jt.scala:18)\n\tat Problem.main(tmpji_hp7jt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0\n        var even = 0\n        var odd = 0\n        var evenIndex =\
    \ 0\n        var oddIndex = 0\n        for(i <- 0 until lst.length){\n       \
    \     if(i % 2 == 0){\n                even += lst(i)\n                evenIndex\
    \ += 1\n            }else{\n                odd += lst(i)\n                oddIndex\
    \ += 1\n            }\n        }\n        for(i <- 0 until evenIndex){\n     \
    \       sum += even\n        }\n        for(i <- 0 until oddIndex){\n        \
    \    sum += odd\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyn16frk9.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                even += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpyn16frk9.scala:20:20 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                odd += lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val evenSumOdds = evenSum + oddSum\n        val evenSumOddsOdds = evenSumOdds\
    \ + oddSum\n        val evenSumOddsOddsOdds = evenSumOddsOdds + oddSum\n     \
    \   val evenSumOddsOddsOddsOdds = evenSumOddsOddsOdds + oddSum\n        val evenSumOddsOddsOddsOddsOdds\
    \ = evenSumOddsOddsOddsOdds + oddSum\n        val evenSumOddsOddsOddsOddsOddsOdds\
    \ = evenSumOddsOddsOddsOddsOdds + oddSum\n        val evenSumOddsOddsOddsOddsOddsOddsOdds\
    \ = evenSumOddsOddsOddsOddsOddsOdds + oddSum\n        val evenSumOddsOddsOddsOddsOddsOddsOddsOdds\
    \ = evenSumOddsOddsOddsOddsOddsOddsOdds + oddSum\n        val evenSumOddsOddsOddsOddsOddsOddsOddsOddsOdds\
    \ = evenSumOddsOddsOddsOddsOddsOddsOddsOdds + oddSum\n        val evenSumOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds\
    \ = evenSumOddsOddsOddsOddsOddsOddsOddsOdds + oddSum\n        val evenSumOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds\
    \ = evenSumOddsOddsOddsOddsOddsOddsOddsOddsOdds + oddSum\n        val evenSumOddsO\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdtzai2tl.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpdtzai2tl.scala:26:5 ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0L\n        var even = 0\n        var odd = 0\n        for(i <- 0 until\
    \ lst.length){\n            if(i % 2 == 0){\n                even += lst(i)\n\
    \            }\n            else{\n                odd += lst(i)\n           \
    \ }\n        }\n        sum = even + odd\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp477_fxon.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                even += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp477_fxon.scala:18:20 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m                odd += lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.foldLeft(0L)(_ + _)\n        val oddSum = odd.foldLeft(0L)(_\
    \ + _)\n        evenSum + oddSum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy2az7lr2.scala:17)\n\tat Problem.main(tmpy2az7lr2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0L\n        var even = 0L\n        var odd = 0L\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 2 == 0) {\n                even += lst(i)\n\
    \            } else {\n                odd += lst(i)\n            }\n        }\n\
    \        sum = even + odd\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnzxc6qqw.scala:24)\n\tat Problem.main(tmpnzxc6qqw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0\n        var even = 0\n        var odd = 0\n        for(i <- 0 until\
    \ lst.length){\n            if(i % 2 == 0){\n                even += lst(i)\n\
    \            }\n            else{\n                odd += lst(i)\n           \
    \ }\n        }\n        sum = even + odd\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp90svcc5w.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                even += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp90svcc5w.scala:18:20 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m                odd += lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      evenSum + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ptb9_t7.scala:17)\n\tat Problem.main(tmp2ptb9_t7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuc6zlkv0.scala:18)\n\tat Problem.main(tmpuc6zlkv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenOddSum\
    \ = evenSum + oddSum\n        evenOddSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwop0ec44.scala:18)\n\tat Problem.main(tmpwop0ec44.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val result = evenSum + oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrr61zzw.scala:18)\n\tat Problem.main(tmpvrr61zzw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val result = evenSum + oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrr61zzw.scala:18)\n\tat Problem.main(tmpvrr61zzw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val evenOddSum = evenSum + oddSum\n        evenOddSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpji_hp7jt.scala:18)\n\tat Problem.main(tmpji_hp7jt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0\n        var even = 0\n        var odd = 0\n        var evenIndex =\
    \ 0\n        var oddIndex = 0\n        for(i <- 0 until lst.length){\n       \
    \     if(i % 2 == 0){\n                even += lst(i)\n                evenIndex\
    \ += 1\n            }else{\n                odd += lst(i)\n                oddIndex\
    \ += 1\n            }\n        }\n        for(i <- 0 until evenIndex){\n     \
    \       if(even % 2 == 0){\n                sum += even\n                even\
    \ = 0\n            }else{\n                sum += odd\n                odd = 0\n\
    \            }\n        }\n        for(i <- 0 until oddIndex){\n            if(odd\
    \ % 2 == 0){\n                sum += odd\n                odd = 0\n          \
    \  }else{\n                sum += even\n                even = 0\n           \
    \ }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong))) ==\
    \ (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprm_sp286.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                even += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmprm_sp286.scala:20:20 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                odd += lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn9shgfiu.scala:17)\n\tat Problem.main(tmpn9shgfiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ - oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzo1tsk51.scala:17)\n\tat Problem.main(tmpzo1tsk51.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum -\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2n_e0mb.scala:17)\n\tat Problem.main(tmpw2n_e0mb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn9shgfiu.scala:17)\n\tat Problem.main(tmpn9shgfiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenSumOdds\
    \ = evenSum + oddSum\n        evenSumOdds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3ah995m5.scala:18)\n\tat Problem.main(tmp3ah995m5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ - oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzo1tsk51.scala:17)\n\tat Problem.main(tmpzo1tsk51.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val result = evenSum + oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrr61zzw.scala:18)\n\tat Problem.main(tmpvrr61zzw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ - oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzo1tsk51.scala:17)\n\tat Problem.main(tmpzo1tsk51.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val result = evenSum + oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrr61zzw.scala:18)\n\tat Problem.main(tmpvrr61zzw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val evenSumOdds = evenSum + oddSum\n        evenSumOdds\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg47xvjyo.scala:18)\n\tat Problem.main(tmpg47xvjyo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val evenSumOdds = evenSum + oddSum\n        val evenSumOddsOdds = evenSumOdds\
    \ + evenSum\n        val evenSumOddsOddsOdds = evenSumOddsOdds + evenSumOdds\n\
    \        val evenSumOddsOddsOddsOdds = evenSumOddsOddsOdds + evenSumOddsOddsOdds\n\
    \        val evenSumOddsOddsOddsOddsOdds = evenSumOddsOddsOddsOdds + evenSumOddsOddsOddsOdds\n\
    \        val evenSumOddsOddsOddsOddsOddsOdds = evenSumOddsOddsOddsOddsOddsOdds\
    \ + evenSumOddsOddsOddsOddsOddsOdds\n        val evenSumOddsOddsOddsOddsOddsOddsOdds\
    \ = evenSumOddsOddsOddsOddsOddsOddsOdds + evenSumOddsOddsOddsOddsOddsOddsOdds\n\
    \        val evenSumOddsOddsOddsOddsOddsOddsOddsOdds = evenSumOddsOddsOddsOddsOddsOddsOddsOdds\
    \ + evenSumOddsOddsOddsOddsOddsOddsOddsOdds\n        val evenSumOddsOddsOddsOddsOddsOddsOddsOddsOdds\
    \ = evenSumOddsOddsOddsOddsOddsOddsOddsOddsOdds + evenSumOddsOddsOddsOddsOddsOddsOddsOddsOdds\n\
    \        val evenSumOddsOddsOddsO\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk2bkwcv6.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk2bkwcv6.scala:19:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenSumOddsOddsOddsOddsOddsOdds\e[0m = evenSumOddsOddsOddsOddsOddsOdds\
    \ + evenSumOddsOddsOddsOddsOddsOdds\n\e[31m\e[31m   |\e[0m                   \
    \                           ^\e[0m\n\e[31m   |\e[0m              Recursive \e\
    [33mvalue\e[0m \e[35mevenSumOddsOddsOddsOddsOddsOdds\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk2bkwcv6.scala:20:50 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mevenSumOddsOddsOddsOddsOddsOddsOdds\e\
    [0m = evenSumOddsOddsOddsOddsOddsOddsOdds + evenSumOddsOddsOddsOddsOddsOddsOdds\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0m          Recursive \e[33mvalue\e[0m \e[35mevenSumOddsOddsOddsOddsOddsOddsOdds\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk2bkwcv6.scala:21:54\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenSumOddsOddsOddsOddsOddsOddsOddsOdds\e[0m = evenSumOddsOddsOddsOddsOddsOddsOddsOdds\
    \ + evenSumOddsOddsOddsOddsOddsOddsOddsOdds\n\e[31m\e[31m   |\e[0m           \
    \                                           ^\e[0m\n\e[31m   |\e[0m      Recursive\
    \ \e[33mvalue\e[0m \e[35mevenSumOddsOddsOddsOddsOddsOddsOddsOdds\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk2bkwcv6.scala:22:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenSumOddsOddsOddsOddsOddsOddsOddsOddsOdds\e[0m = evenSumOddsOddsOddsOddsOddsOddsOddsOddsOdds\
    \ + evenSumOddsOddsOddsOddsOddsOddsOddsOddsOdds\n\e[31m\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1659798250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn9shgfiu.scala:17)\n\tat Problem.main(tmpn9shgfiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.foldLeft(0)(_ + _)\n        val oddSum = odd.foldLeft(0)(_\
    \ + _)\n        evenSum + oddSum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph4ndpza3.scala:12:39\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenSum\e\
    [0m = even.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m              \
    \                         ^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \               Found:    Long\n\e[31m   |\e[0m                              \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph4ndpza3.scala:13:37\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moddSum\e\
    [0m = odd.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m               \
    \                      ^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \          Found:    Long\n\e[31m   |\e[0m                                   \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenSumOdds\
    \ = evenSum + oddSum\n        val evenSumEvens = evenSum - evenSumOdds\n     \
    \   evenSumEvens\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb486fb6m.scala:19)\n\tat Problem.main(tmpb486fb6m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val result = evenSum + oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrr61zzw.scala:18)\n\tat Problem.main(tmpvrr61zzw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val evenSumOdds = evenSum + oddSum\n        evenSumOdds\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg47xvjyo.scala:18)\n\tat Problem.main(tmpg47xvjyo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum -\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2n_e0mb.scala:17)\n\tat Problem.main(tmpw2n_e0mb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val result = evens.sum + odds.sum\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1q_wqfu9.scala:16)\n\tat Problem.main(tmp1q_wqfu9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798252
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0\n        var evenIndex = 0\n        var oddIndex = 0\n        for(i\
    \ <- 0 until lst.length){\n            if(i % 2 == 0){\n                sum +=\
    \ lst(i)\n                evenIndex += 1\n            }else{\n               \
    \ sum += lst(oddIndex)\n                oddIndex += 1\n            }\n       \
    \ }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmloqsx29.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpmloqsx29.scala:18:20 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m                sum += lst(oddIndex)\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member of Int\
    \ - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        oddSum\
    \ - evenSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe38gdi3c.scala:17)\n\tat Problem.main(tmpe38gdi3c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val result = even.foldLeft(0L){ (sum, elem) => sum + elem }\n        odd.foldLeft(result){\
    \ (sum, elem) => sum + elem }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw8p6w185.scala:16)\n\tat Problem.main(tmpw8p6w185.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798252
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn9shgfiu.scala:17)\n\tat Problem.main(tmpn9shgfiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      evenSum - oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq_ujv9y1.scala:17)\n\tat Problem.main(tmpq_ujv9y1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798252
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2\
    \ != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n      \
    \  val result = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5z7avp3m.scala:18)\n\tat Problem.main(tmp5z7avp3m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798252
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenOddSum\
    \ = evenSum + oddSum\n        evenOddSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwop0ec44.scala:18)\n\tat Problem.main(tmpwop0ec44.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum -\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2n_e0mb.scala:17)\n\tat Problem.main(tmpw2n_e0mb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenOddSum\
    \ = evenSum + oddSum\n        evenOddSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwop0ec44.scala:18)\n\tat Problem.main(tmpwop0ec44.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ - oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzo1tsk51.scala:17)\n\tat Problem.main(tmpzo1tsk51.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn9shgfiu.scala:17)\n\tat Problem.main(tmpn9shgfiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenSumOdds\
    \ = evenSum + oddSum\n        val evenSumEvens = evenSum - evenSumOdds\n     \
    \   evenSumEvens\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb486fb6m.scala:19)\n\tat Problem.main(tmpb486fb6m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuc6zlkv0.scala:18)\n\tat Problem.main(tmpuc6zlkv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn9shgfiu.scala:17)\n\tat Problem.main(tmpn9shgfiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      evenSum + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ptb9_t7.scala:17)\n\tat Problem.main(tmp2ptb9_t7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuc6zlkv0.scala:18)\n\tat Problem.main(tmpuc6zlkv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val result = evenSum + oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrr61zzw.scala:18)\n\tat Problem.main(tmpvrr61zzw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val result = evenSum + oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrr61zzw.scala:18)\n\tat Problem.main(tmpvrr61zzw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2\
    \ != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n      \
    \  evenSum + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe7xwqr4p.scala:17)\n\tat Problem.main(tmpe7xwqr4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798252
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val result = evenSum - oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmp0dfkik.scala:18)\n\tat Problem.main(tmpmp0dfkik.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798257
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2\
    \ != 0)\n        val sum = even.foldLeft(0L)(_ + _)\n        odd.foldLeft(sum)(_\
    \ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnz7lyc56.scala:16)\n\tat Problem.main(tmpnz7lyc56.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798258
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2\
    \ != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n      \
    \  evenSum + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe7xwqr4p.scala:17)\n\tat Problem.main(tmpe7xwqr4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798252
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val result = evenSum - oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmp0dfkik.scala:18)\n\tat Problem.main(tmpmp0dfkik.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798257
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenOddSum\
    \ = evenSum + oddSum\n        evenOddSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwop0ec44.scala:18)\n\tat Problem.main(tmpwop0ec44.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuc6zlkv0.scala:18)\n\tat Problem.main(tmpuc6zlkv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2\
    \ != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n      \
    \  evenSum - oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0ipxrt8v.scala:17)\n\tat Problem.main(tmp0ipxrt8v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuc6zlkv0.scala:18)\n\tat Problem.main(tmpuc6zlkv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val result = evenSum + oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrr61zzw.scala:18)\n\tat Problem.main(tmpvrr61zzw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val result = evenSum + oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrr61zzw.scala:18)\n\tat Problem.main(tmpvrr61zzw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3ss9s9nh.scala:18)\n\tat Problem.main(tmp3ss9s9nh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0L\n        var even = 0L\n        var odd = 0L\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 2 == 0) {\n                even += lst(i)\n\
    \            } else {\n                odd += lst(i)\n            }\n        }\n\
    \        sum = even + odd\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnzxc6qqw.scala:24)\n\tat Problem.main(tmpnzxc6qqw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn9shgfiu.scala:17)\n\tat Problem.main(tmpn9shgfiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum -\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2n_e0mb.scala:17)\n\tat Problem.main(tmpw2n_e0mb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val evenSumOdds = evenSum + oddSum\n        evenSumOdds\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg47xvjyo.scala:18)\n\tat Problem.main(tmpg47xvjyo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val result = even.foldLeft(0L)(_ + odd.sum)\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpmhf1vtgp.scala:12:39 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = even.foldLeft(\e\
    [31m0L\e[0m)(_ + odd.sum)\n\e[31m\e[31m   |\e[0m                             \
    \          ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Wrong\
    \ number of parameters, expected: 2\n1 error found\n"
  stdout: ''
  timestamp: 1659798220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.foldLeft(0L)(_ + _)\n        val oddSum = odd.foldLeft(0L)(_\
    \ + _)\n        evenSum + oddSum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy2az7lr2.scala:17)\n\tat Problem.main(tmpy2az7lr2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.foldLeft(0L)(_ + _)\n        val oddSum = odd.foldLeft(0L)(_\
    \ + _)\n        evenSum + oddSum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy2az7lr2.scala:17)\n\tat Problem.main(tmpy2az7lr2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val result = evenSum + oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrr61zzw.scala:18)\n\tat Problem.main(tmpvrr61zzw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0\n        var even = 0\n        var odd = 0\n        for(i <- 0 until\
    \ lst.length){\n            if(i % 2 == 0){\n                even += lst(i)\n\
    \            }else{\n                odd += lst(i)\n            }\n        }\n\
    \        sum = even + odd\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxuiu2ar6.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                even += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpxuiu2ar6.scala:17:20 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                odd += lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuc6zlkv0.scala:18)\n\tat Problem.main(tmpuc6zlkv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val result = evenSum + oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrr61zzw.scala:18)\n\tat Problem.main(tmpvrr61zzw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0\n        var even = 0\n        var odd = 0\n        var evenSum = 0\n\
    \        var oddSum = 0\n        for (i <- 0 until lst.length) {\n           \
    \ if (i % 2 == 0) {\n                evenSum += lst(i)\n                even +=\
    \ lst(i)\n            } else {\n                oddSum += lst(i)\n           \
    \     odd += lst(i)\n            }\n        }\n        even = evenSum - even\n\
    \        odd = oddSum - odd\n        sum = even + odd\n        return sum\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph_z4gcbu.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                evenSum += lst(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is\
    \ not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmph_z4gcbu.scala:18:21 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m                even += lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph_z4gcbu.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                oddSum +=\
    \ lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value += is not a member of Int - did you mean Int.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmph_z4gcbu.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                odd += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659798260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ - oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzo1tsk51.scala:17)\n\tat Problem.main(tmpzo1tsk51.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val result = even.foldLeft(0L){ (sum, elem) => sum + odd.indexOf(elem)\
    \ }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy1cjpk6a.scala:16)\n\tat Problem.main(tmpy1cjpk6a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.foldLeft(0L)(_ + _)\n        val oddSum = odd.foldLeft(0L)(_\
    \ + _)\n        evenSum + oddSum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy2az7lr2.scala:17)\n\tat Problem.main(tmpy2az7lr2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum -\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2n_e0mb.scala:17)\n\tat Problem.main(tmpw2n_e0mb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2\
    \ != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n      \
    \  val result = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5z7avp3m.scala:18)\n\tat Problem.main(tmp5z7avp3m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0\n        var even = 0\n        var odd = 0\n        for(i <- 0 until\
    \ lst.length){\n            if(i % 2 == 0){\n                even += lst(i)\n\
    \            }\n            else{\n                odd += lst(i)\n           \
    \ }\n        }\n        sum = even + odd\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp90svcc5w.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                even += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp90svcc5w.scala:18:20 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m                odd += lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val result = even.foldLeft(0L){ (sum, elem) => sum + odd.indexOf(elem)\
    \ }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy1cjpk6a.scala:16)\n\tat Problem.main(tmpy1cjpk6a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2\
    \ != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n      \
    \  evenSum + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe7xwqr4p.scala:17)\n\tat Problem.main(tmpe7xwqr4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798252
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum - oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_lh1vw9l.scala:18)\n\tat Problem.main(tmp_lh1vw9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenOddSum\
    \ = evenSum + oddSum\n        evenOddSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwop0ec44.scala:18)\n\tat Problem.main(tmpwop0ec44.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenOddSum\
    \ = evenSum + oddSum\n        evenOddSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwop0ec44.scala:18)\n\tat Problem.main(tmpwop0ec44.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0L\n        var even = 0\n        var odd = 0\n        for(i <- 0 until\
    \ lst.length){\n            if(i % 2 == 0){\n                even += lst(i)\n\
    \            }else{\n                odd += lst(i)\n            }\n        }\n\
    \        sum = even + odd\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfjnjjt4_.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                even += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpfjnjjt4_.scala:17:20 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                odd += lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x %\
    \ 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n  \
    \      val result = evenSum + oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrr61zzw.scala:18)\n\tat Problem.main(tmpvrr61zzw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2\
    \ != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n      \
    \  evenSum + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe7xwqr4p.scala:17)\n\tat Problem.main(tmpe7xwqr4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798252
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        evenSum\
    \ + oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn9shgfiu.scala:17)\n\tat Problem.main(tmpn9shgfiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum - oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_lh1vw9l.scala:18)\n\tat Problem.main(tmp_lh1vw9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplys48jx1.scala:18)\n\tat Problem.main(tmplys48jx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2\
    \ != 0)\n        val result = even.foldLeft(0L) { (sum, elem) => sum + elem }\n\
    \        odd.foldLeft(result) { case (sum, elem) => sum + elem }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ws5hrpy.scala:16)\n\tat Problem.main(tmp5ws5hrpy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798261
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.foldLeft(0L)(_ + _)\n        odd.foldLeft(evenSum)(_\
    \ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmswar0zf.scala:16)\n\tat Problem.main(tmpmswar0zf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798261
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum +\
    \ oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvhhpwkb.scala:17)\n\tat Problem.main(tmpuvhhpwkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // solution([5, 8,\
    \ 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30,\
    \ 13, 24, 321]) ==>0\n    def solution(lst : List[Long]) : Long = {\n        var\
    \ sum = 0\n        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 ==\
    \ 0) {\n                sum += lst(i)\n            }\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgvc5tdtr.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798260
