language: scala
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val nums = x.map(_.toInt)\n        val evens = nums.filter(x => x % 2 ==\
    \ 0)\n        evens.toList.sortBy(x => x)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7rmfyga7.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        evens.toList.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m  \
    \      Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => {\n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            }\n        })\n        evenDigit.foreach(x\
    \ => {\n            if (result.contains(x)) {\n                return\n      \
    \      }\n            result.add(x)\n        })\n        result.sort\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq3mwart_.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq3mwart_.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => { \n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) result.+=(x)\
    \ \n        })\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeb51i9a3.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplj8sp64y.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            if (x(i) % 2 == 0) {\n                result.add(x(i))\n    \
    \        }\n        }\n        result.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdsecvhou.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size) {\n           \
    \ val digit = x(i).toString.toInt\n            if(digit % 2 == 0) {\n        \
    \        evenDigit += digit\n            } else {\n                result += x(i)\n\
    \            }\n        }\n        evenDigit.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuimerkhl.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuimerkhl.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val digits = mutable.HashSet[Long]()\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- x) {\n            digits += i\n        }\n        digits.toList.sortWith(_\
    \ < _).foreach { x =>\n            if (x % 2 == 0) {\n                result +=\
    \ x\n            }\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmperl3fovl.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmperl3fovl.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.LinkedList[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => {\n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            }\n        })\n        evenDigit.foreach(x\
    \ => {\n            if (result.contains(x)) {\n                return\n      \
    \      }\n            result.add(x)\n        })\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8x6nt6r5.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8x6nt6r5.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if(digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj9njkg9i.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val xs = x.toSet\n        val ys = xs.filter(_ % 2 == 0)\n        val zs\
    \ = xs.filter(_ % 2 != 0)\n        val zsSet = zs.toSet\n        zsSet.filter(_\
    \ < ys.size)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg9e2ws1h.scala:17:20\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        zsSet.filter(_ < ys.size)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    \e[1m\e[31mSet\e[0m[Long]\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach(x => result +=\
    \ x)\n        oddDigits.foreach(x => result += x)\n        result.sort\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcqd3o9ub.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val xs = x.toSet\n        val ys = xs.filter(_ % 2 == 0).sorted\n      \
    \  val zs = xs.filter(_ % 2 == 1).sorted\n        val zs2 = ys.filter(_ % 2 ==\
    \ 1).sorted\n        val zs3 = zs.filter(_ % 2 == 1).sorted\n        val zs4 =\
    \ zs2.filter(_ % 2 == 1).sorted\n        val zs5 = zs3.filter(_ % 2 == 1).sorted\n\
    \        val zs6 = zs4.filter(_ % 2 == 1).sorted\n        val zs7 = zs5.filter(_\
    \ % 2 == 1).sorted\n        val zs8 = zs6.filter(_ % 2 == 1).sorted\n        val\
    \ zs9 = zs7.filter(_ % 2 == 1).sorted\n        val zs10 = zs8.filter(_ % 2 ==\
    \ 1).sorted\n        val zs11 = zs9.filter(_ % 2 == 1).sorted\n        val zs12\
    \ = zs10.filter(_ % 2 == 1).sorted\n        val zs13 = zs11.filter(_ % 2 == 1).sorted\n\
    \        val zs14 = zs12.filter(_ % 2 == 1).sorted\n        val zs15 = zs13.filter(_\
    \ % 2 == 1).sorted\n        val zs16 = zs14.filter(_ % 2 == 1).sorted\n      \
    \  val zs17 = zs15.filter(_ % 2 == 1).sorted\n        val zs18 = zs16.filter(_\
    \ % 2 == 1).sorted\n        val zs19 = zs17.filter(_ % 2 == 1).sorted\n      \
    \  val zs20 = zs18.filter(_ % 2 == 1).sorted\n        val zs21 = zs19.filter(_\
    \ % 2 == 1).sorted\n        val zs22 = zs20.filter(_ % 2 == 1).sorted\n      \
    \  val zs23 = zs21.filter(_ % 2 == 1).sorted\n        val zs24 = zs22.filter(_\
    \ % 2 == 1).sorted\n        val zs25 = zs23.filter(_ % 2 == 1).sorted\n      \
    \  val zs26 = zs24.filter(_ % 2 == 1).sorted\n        val zs27 = zs25.filter(_\
    \ % 2 == 1).sorted\n        val zs28 = zs26.filter(_ % 2 == 1).sorted\n      \
    \  val zs29 = zs27.filter(_ % 2 == 1).sorted\n        val zs30 = zs28.filter(_\
    \ % 2 == 1).sorted\n        val zs31 = zs29.filter(_ % 2 == 1).sorted\n      \
    \  val zs32 = zs30.filter(_ % 2 == 1).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk_mtx5g5.scala:14:39 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mys\e[0m = xs.filter(_ %\
    \ \e[31m2\e[0m == \e[31m0\e[0m).sorted\n\e[31m\e[31m   |\e[0m                \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value sorted\
    \ is not a member of Set[Long]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk_mtx5g5.scala:15:39\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mzs\e[0m = xs.filter(_ % \e[31m2\e[0m == \e[31m1\e[0m).sorted\n\e[31m\e[31m\
    \   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 value sorted is not a member of Set[Long]\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpk_mtx5g5.scala:47:5 ---------------------\e[0m\e\
    [0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659793118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if (digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcyf_tool.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gjuzqa.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.ListBuffer[Long]()\n        val evenDigitCount = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            if (x % 2 == 0) {\n                evenDigit\
    \ += x\n                evenDigitCount += x\n            } else {\n          \
    \      result += x\n            }\n        })\n        evenDigitCount.foreach(x\
    \ => {\n            if (x % 2 == 0) {\n                result += x\n         \
    \   }\n        })\n        result.sortWith(_.compareTo(_) == 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph9robksm.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph9robksm.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmph9robksm.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenDigitCount\e[0m = \e\
    [33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val nums = x.toSet\n        val evens = nums.filter(_ % 2 == 0)\n      \
    \  evens.toList\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpipw9h24p.scala:18)\n\tat Problem.main(tmpipw9h24p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if (digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr2ym4ekc.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.distinct\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjhcx8t23.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evenDigitsSorted.distinct\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdoqgxn2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if(digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj9njkg9i.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result.add(x)\n            }\n        })\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7afqp3ox.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val xs = x.toSet\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until xs.size) {\n            val digit = xs(i)\n        \
    \    if(digit % 2 == 0) {\n                result.+=(xs(i))\n            }\n \
    \       }\n        result.sort\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpia37g69s.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpia37g69s.scala:17:21\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(digit\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue % is not a member of Boolean, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => { \n\
    \            if (x % 2 == 0) result.add(x)\n        })\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph6g3ank2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.ListBuffer[Long]()\n        x.foreach(x => {\n            val digit\
    \ = x.toString.toInt\n            if (digit % 2 == 0) {\n                evenDigit\
    \ += digit\n            } else {\n                result += x\n            }\n\
    \        })\n        evenDigit.foreach(x => result += x)\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt7stbl0i.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt7stbl0i.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdoqgxn2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach { x =>\n\
    \            val str = x.toString\n            val digits = str.split('')\n  \
    \          val evenDigits = digits.filter(x => x % 2 == 0)\n            if (evenDigits.isEmpty)\
    \ result += x\n        }\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpu7s6cn8b.scala:16:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mdigits\e[0m = str.split('')\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m\
    \                                   empty character literal\n\e[31m\e[31m-- [E018]\
    \ Syntax Error: /tmp/tmpu7s6cn8b.scala:17:27 ---------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mevenDigits\e[0m = digits.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                    ^\e[0m\n\e[31m   |\e[0m                           expression\
    \ expected but \e[31m=\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpu7s6cn8b.scala:13:25 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7s6cn8b.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mevenDigits\e[0m = digits.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \     ^^^\e[0m\n\e[31m   |\e[0m            Not found: 'val\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7s6cn8b.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (evenDigits.isEmpty) result\
    \ += x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Not found: evenDigits\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659793119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplj8sp64y.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val evenDigitsCount = x.count(x => x % 2 == 0)\n        val evenDigitsList\
    \ = x.filter(x => x % 2 == 0).sorted\n        val oddDigitsList = x.filter(x =>\
    \ x % 2 != 0).sorted\n        evenDigitsList.filter(x => x != evenDigitsList(0))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4dmhtzvy.scala:19)\n\tat Problem.main(tmp4dmhtzvy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => { \n\
    \            val str = x.toString\n            val digits = str.dropWhile(_ <\
    \ '0').dropWhile(_ > '9').toList\n            val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n            val isEven = evenDigits.isEmpty\n            if\
    \ (isEven) {\n                result += x\n            }\n        })\n       \
    \ result.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzqav52yq.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach { x =>\n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            }\n        }\n        evenDigit.foreach\
    \ { x =>\n            if (result.contains(x)) {\n                result.delete(x)\n\
    \            } else {\n                result += x\n            }\n        }\n\
    \        result.sort\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm3oumsh0.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm3oumsh0.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach(x => result +=\
    \ x)\n        oddDigits.foreach(x => result += x)\n        result.sort\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcqd3o9ub.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach { x => result +=\
    \ x }\n        oddDigits.foreach { x => result += x }\n        result.sort\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuzjtvtz6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if (digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr2ym4ekc.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.foreach { x => \n   \
    \         if (result.contains(x)) \n                result.updated(x, result.indexOf(x))\n\
    \            else \n                result += x\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwwlvv_ay.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val evenDigits = x.filter(x => x % 2 == 0)\n        val uniqueEvenDigits\
    \ = evenDigits.distinct\n        val uniqueEvenDigitsSorted = uniqueEvenDigits.sort\n\
    \        uniqueEvenDigitsSorted.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6n67hvtl.scala:15:54 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueEvenDigitsSorted\e\
    [0m = uniqueEvenDigits.sort\n\e[31m\e[31m   |\e[0m                           \
    \          ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sort is not a member\
    \ of List[Long] - did you mean uniqueEvenDigits.sortBy?\n1 error found\n"
  stdout: ''
  timestamp: 1659793120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if (digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr2ym4ekc.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach(x => result +=\
    \ x)\n        oddDigits.foreach(x => result += x)\n        result.sort\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcqd3o9ub.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val evenDigits = x.filter(x => x % 2 == 0).sorted\n        val oddDigits\
    \ = x.filter(x => x % 2 != 0).sorted\n        evenDigits ++ oddDigits\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwlfqw7_1.scala:18)\n\tat Problem.main(tmpwlfqw7_1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gjuzqa.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gjuzqa.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if(digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj9njkg9i.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val evenDigitsCount = x.count(x => x % 2 == 0)\n        val evenDigits =\
    \ x.filter(x => x % 2 == 0)\n        val oddDigits = x.filter(x => x % 2 != 0)\n\
    \        evenDigits.sortBy(x => x)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbnz8szzx.scala:19)\n\tat Problem.main(tmpbnz8szzx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            if (x(i) % 2 == 0) {\n                result.add(x(i))\n    \
    \        }\n        }\n        result.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdsecvhou.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result.add(x)\n            }\n        })\n        result.sortWith((x,\
    \ y) => x.toString.toInt < y.toString.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp91womzhw.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result.add(x) else ())\n        result.sort\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpajtsg829.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val nums = x.toSet\n        val evens = nums.filter(x => x % 2 == 0)\n \
    \       val odd = nums.filter(x => x % 2 != 0)\n        val evenAndOdd = evens.union(odd)\n\
    \        evenAndOdd.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg6ea9grc.scala:20)\n\tat Problem.main(tmpg6ea9grc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.ListBuffer[Long]()\n        x.foreach(x => {\n            val str =\
    \ x.toString\n            val digits = str.split(\"\").map(_.toInt)\n        \
    \    digits.foreach(x => {\n                if (x % 2 == 0) {\n              \
    \      evenDigit += x\n                }\n            })\n        })\n       \
    \ evenDigit.foreach(x => {\n            if (!result.contains(x)) {\n         \
    \       result += x\n            }\n        })\n        result.sort\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8tpoz_7n.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8tpoz_7n.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if (digit % 2 ==\
    \ 0) {\n                result += digit\n            }\n        }\n        result.sortWith((x,\
    \ y) => x < y)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfssyjq3s.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdoqgxn2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            if (x(i) % 2 == 0) {\n                result.add(x(i))\n    \
    \        }\n        }\n        result.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdsecvhou.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        val evenDigitsSortedList = evenDigitsSorted.toList\n\
    \        val evenDigitsSortedSet = evenDigitsSorted.toSet\n        val evenDigitsSortedSortedSet\
    \ = evenDigitsSortedSet.toSet\n        val evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n\
    \        val evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n   \
    \     val evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n   \
    \     val evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n      \
    \  val evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n      \
    \  val evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n        val\
    \ evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n        val\
    \ evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n        val evenDigitsSortedSortedList\
    \ = evenDigitsSortedSortedList.toList\n        val evenDigitsSortedSortedSet =\
    \ evenDigitsSortedSortedSet.toSet\n        val evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n\
    \        val evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n   \
    \     val evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n   \
    \     val evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n      \
    \  val evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n      \
    \  val evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n        val\
    \ evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n        val\
    \ evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n        val evenDigitsSortedSortedList\
    \ = evenDigitsSortedSortedList.toList\n        val evenDigitsSortedSortedSet =\
    \ evenDigitsSortedSortedSet.toSet\n        val evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n\
    \        val evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n   \
    \     val evenDigitsSortedSortedList = evenDigitsSortedSortedList.toList\n   \
    \     val evenDigitsSortedSortedSet = evenDigitsSortedSortedSet.toSet\n      \
    \  val evenDigitsSortedSortedList = evenDigitsSortedSorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnb68m9pi.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevenDigitsSortedSortedSet\e\
    [0m = evenDigitsSortedSortedSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenDigitsSortedSortedSet is already defined as \e[33mvalue\e\
    [0m \e[35mevenDigitsSortedSortedSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnb68m9pi.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mevenDigitsSortedSortedList\e\
    [0m = evenDigitsSortedSortedList.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenDigitsSortedSortedList is already defined as \e[33mvalue\e\
    [0m \e[35mevenDigitsSortedSortedList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnb68m9pi.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mevenDigitsSortedSortedSet\e\
    [0m = evenDigitsSortedSortedSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenDigitsSortedSortedSet is already defined as \e[33mvalue\e\
    [0m \e[35mevenDigitsSortedSortedSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnb68m9pi.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mevenDigitsSortedSortedList\e\
    [0m = evenDigitsSortedSortedList.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenDigitsSortedSortedList is already defined as \e[33mvalue\e\
    [0m \e[35mevenDigitsSortedSortedList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded me"
  stdout: ''
  timestamp: 1659793120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.LinkedList[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val uniqueEvenDigits\
    \ = evenDigits.distinct\n        uniqueEvenDigits.foreach(x => result.add(x))\n\
    \        result.sort\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4yqik9t8.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result.add(x) else ())\n        result.sort\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpajtsg829.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val temp = x(i)\n            for(j <- 0 until temp.toString.length)\
    \ {\n                if(temp.toString.charAt(j) match {\n                    case\
    \ '0' => \n                        if(result.contains(temp)) {\n             \
    \               result.clear()\n                        }\n                  \
    \      else {\n                            result += temp\n                  \
    \      }\n                    case '1' => \n                        if(result.contains(temp))\
    \ {\n                            result.clear()\n                        }\n \
    \                       else {\n                            result += temp\n \
    \                       }\n                    case '2' => \n                \
    \        if(result.contains(temp)) {\n                            result.clear()\n\
    \                        }\n                        else {\n                 \
    \           result += temp\n                        }\n                    case\
    \ '3' => \n                        if(result.contains(temp)) {\n             \
    \               result.clear()\n                        }\n                  \
    \      else {\n                            result += temp\n                  \
    \      }\n                    case '4' => \n                        if(result.contains(temp))\
    \ {\n                            result.clear()\n                        }\n \
    \                       else {\n                            result += temp\n \
    \                       }\n                    case '5' => \n                \
    \        if(result.contains(temp)) {\n                            result.clear()\n\
    \                        }\n                        else {\n                 \
    \           result += temp\n                        }\n                    case\
    \ '6' => \n                        if(result.contains(temp)) {\n             \
    \               result.clear()\n                        }\n                  \
    \      else {\n                            result += temp\n                  \
    \      }\n                    case '7' => \n                        if(result.contains(temp))\
    \ {\n                            result.clear()\n                        }\n \
    \                       else {\n                            result += temp\n \
    \                       }\n                    case '8' => \n                \
    \        if(result.contains(temp)) {\n                            result.clear()\n\
    \                        }\n                        else {\n                 \
    \           result += temp\n                        }\n                    case\
    \ '9' => \n                        if(result.contains(temp)) {\n             \
    \               result.clear()\n                        }\n                  \
    \      else {\n                            result += temp\n                  \
    \      }\n                    case 'a' => \n                        if(result.contains(temp))\
    \ {\n                            result.clear()\n                        }\n \
    \                       else {\n                            result += temp\n \
    \                       }\n                    case 'b' => \n                \
    \        if(result.contains(temp)) {\n                            result.clear()\n\
    \                        }\n                        else {\n                 \
    \           result += temp\n                        }\n                    case\
    \ 'c' => \n                        if(result.contains(temp)) {\n             \
    \               result.clear()\n                        }\n                  \
    \      else {\n                            result += temp\n                  \
    \      }\n                    case 'd' => \n                        if(result.contains(temp))\
    \ {\n                            result.clear()\n                        }\n \
    \                       else {\n                            result += temp\n \
    \                       }\n                    case 'e' => \n                \
    \        if(result.contains(temp)) {\n                            result.clear()\n\
    \                        }\n                        else {\n                 \
    \           result += temp\n                        }\n                    case\
    \ 'f' => \n                        if(result.contains(temp)) {\n             \
    \               result.clear()\n                        }\n                  \
    \      else {\n                            result += temp\n                  \
    \      }\n                    case 'A' => \n                        if(result.contains(temp))\
    \ {\n                            result.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl95kt_1q.scala:133:4 ---------------------------\e\
    [0m\e[0m\n\e[31m133 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpl95kt_1q.scala:142:0 ---------------------------\e[0m\e[0m\n\e[31m142\
    \ |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m')' expected, but eof\
    \ found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl95kt_1q.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl95kt_1q.scala:139:5\
    \ --------------------\e[0m\e[0m\n\e[31m139 |\e[0m    }\n\e[31m\e[31m    |\e[0m\
    \     ^\e[0m\n\e[31m    |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required:\
    \ Boolean\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpl95kt_1q.scala:134:4\
    \ ---------------------------------------\e[0m\e[0m\n\e[33m134 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m    |\e[0m    ^\e[0m\n\e[33m    |\e[0m    Line is indented too far\
    \ to the left, or a `}` is missing\n1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1659793120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if (digit % 2 ==\
    \ 0) {\n                result += x(i)\n            }\n        }\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp3re8mn7.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gjuzqa.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach { x =>\n\
    \            val str = x.toString\n            val digits = str.dropWhile(_ <\
    \ '0').dropWhile(_ > '9').toList\n            if (digits.isEmpty) result += x\n\
    \            else {\n                val evenDigits = digits.filter(x => x % 2\
    \ == 0)\n                if (evenDigits.isEmpty) result += x\n               \
    \ else {\n                    val evenDigit = evenDigits.head\n              \
    \      val otherDigits = evenDigits.tail\n                    result += (x % 10\
    \ * 10 + evenDigit).toLong :: otherDigits\n                }\n            }\n\
    \        }\n        result.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpon2jxb9r.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitList\
    \ = evenDigits.toList\n        evenDigitList.foreach(x => result.add(x))\n   \
    \     result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmgyhj2oe.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdoqgxn2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gjuzqa.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).asDigit\n            if(digit % 2 == 0) {\n\
    \                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpketcr2am.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpketcr2am.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mdigit\e[0m = x(i).asDigit\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value asDigit is\
    \ not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659793121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gjuzqa.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val uniqueEvenDigits = evenDigits.distinct\n       \
    \ val uniqueDigits = uniqueEvenDigits.filter(x => !digits.contains(x))\n     \
    \   uniqueDigits.toList\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyh7a5_a2.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        uniqueDigits.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e\
    [1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793121
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val xs = x.toSet\n        val ys = xs.filter(_ % 2 == 0)\n        ys.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbpc6tpqf.scala:18)\n\tat Problem.main(tmpbpc6tpqf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach { x =>\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) result\
    \ += x\n        }\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcpamvh4g.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach { x =>\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result.+=(x)\n            }\n        }\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_2i5ez92.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result.add(digit)\n            }\n        })\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzk5fu9n.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val xs = x.toSet\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until xs.size) {\n            val digit = xs(i).asDigit\n\
    \            if(digit % 2 == 0) {\n                result += digit\n         \
    \   }\n        }\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5qrq2_s1.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5qrq2_s1.scala:16:30\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m\
    \ \e[36mdigit\e[0m = xs(i).asDigit\n\e[31m\e[31m   |\e[0m                    \
    \    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value asDigit\
    \ is not a member of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1659793122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdoqgxn2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if (digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sortWith((x,\
    \ y) => x.toString.toInt - y.toString.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8l38e1rp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val nums = x.map(_.toInt)\n        val evens = nums.filter(x => x % 2 ==\
    \ 0)\n        val odds = nums.filter(x => x % 2 != 0)\n        evens.toList ++\
    \ odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpixdkop03.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.toList ++ odds.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdoqgxn2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        val evenDigitsSortedSet = evenDigitsSorted.toSet\n\
    \        val result = evenDigitsSortedSet.filterNot(x => evenDigitsSortedSet.contains(x))\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp62jq0lf0.scala:20)\n\tat Problem.main(tmp62jq0lf0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        val evenDigitCount = new mutable.HashMap[Long,\
    \ Int]()\n        for (i <- x) {\n            if (i % 2 == 0) {\n            \
    \    evenDigit.add(i)\n                evenDigitCount.get(i) += 1\n          \
    \  }\n        }\n        for (i <- evenDigit) {\n            if (evenDigitCount.get(i)\
    \ == 0) {\n                result.add(i)\n            }\n        }\n        result.sortWith(_.compareTo(_)\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuwge92un.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuwge92un.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpuwge92un.scala:15:33 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenDigitCount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.toList.sortBy(x => x).reverse\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjjufny83.scala:15:41\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        evenDigits.toList.sortBy(\e\
    [36mx\e[0m => x).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if(digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj9njkg9i.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitList\
    \ = evenDigits.toList\n        evenDigitList.foreach(x => result.add(x))\n   \
    \     result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmgyhj2oe.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val temp = x(i)\n            val digits = temp.toString.reverse.grouped(2).map(_\
    \ + \"\").mkString(\"\")\n            if(digits.isEmpty) result += temp\n    \
    \    }\n        result.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa3nmafd7.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach { x =>\n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            }\n        }\n        evenDigit.foreach\
    \ { x =>\n            if (result.contains(x)) {\n                return\n    \
    \        }\n            result.add(x)\n        }\n        result.sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp70w4nm2h.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp70w4nm2h.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitCount\
    \ = evenDigits.size\n        val oddDigitCount = digits.filter(x => x % 2 != 0).size\n\
    \        val evenDigitIndex = evenDigitCount - 1\n        val oddDigitIndex =\
    \ evenDigitIndex - 1\n        val evenDigit = evenDigits(evenDigitIndex)\n   \
    \     val oddDigit = oddDigits(oddDigitIndex)\n        val evenDigitCount = evenDigitCount\
    \ - 1\n        val oddDigitCount = oddDigitCount - 1\n        val evenDigitIndex\
    \ = evenDigitCount - 1\n        val oddDigitIndex = evenDigitIndex - 1\n     \
    \   val evenDigit = evenDigits(evenDigitIndex)\n        val oddDigit = oddDigits(oddDigitIndex)\n\
    \        val evenDigitCount = evenDigitCount - 1\n        val oddDigitCount =\
    \ oddDigitCount - 1\n        val evenDigitIndex = evenDigitCount - 1\n       \
    \ val oddDigitIndex = evenDigitIndex - 1\n        val evenDigit = evenDigits(evenDigitIndex)\n\
    \        val oddDigit = oddDigits(oddDigitIndex)\n        val evenDigitCount =\
    \ evenDigitCount - 1\n        val oddDigitCount = oddDigitCount - 1\n        val\
    \ evenDigitIndex = evenDigitCount - 1\n        val oddDigitIndex = evenDigitIndex\
    \ - 1\n        val evenDigit = evenDigits(evenDigitIndex)\n        val oddDigit\
    \ = oddDigits(oddDigitIndex)\n        val evenDigitCount = evenDigitCount - 1\n\
    \        val oddDigitCount = oddDigitCount - 1\n        val evenDigitIndex = evenDigitCount\
    \ - 1\n        val oddDigitIndex = evenDigitIndex - 1\n        val evenDigit =\
    \ evenDigits(evenDigitIndex)\n        val oddDigit = oddDigits(oddDigitIndex)\n\
    \        val evenDigitCount = evenDigitCount - 1\n        val oddDigitCount =\
    \ oddDigitCount - 1\n        val evenDigitIndex = evenDigitCount - 1\n       \
    \ val oddDigitIndex = evenDigitIndex - 1\n        val evenDigit = evenDigits(evenDigitIndex)\n\
    \        val oddDigit = oddDigits(oddDigitIndex)\n        val evenDigitCount =\
    \ evenDigitCount - 1\n        val oddDigitCount = oddDigitCount - 1\n        val\
    \ evenDigitIndex = evenDigitCount - 1\n        val oddDigitIndex = evenDigitIndex\
    \ - 1\n        val evenDigit = evenDigits(evenDigitIndex)\n        val oddDigit\
    \ = oddDigits(oddDigitIndex)\n        val evenDigitCount = evenDigitCount - 1\n\
    \        val oddDigitCount = oddDigitCount - 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_7x_lchq.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mevenDigitCount\e[0m = evenDigitCount\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenDigitCount is already defined as \e[33mvalue\e[0m \e[35mevenDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_7x_lchq.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36moddDigitCount\e[0m = oddDigitCount -\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddDigitCount is already defined as \e[33mvalue\e[0m \e[35moddDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_7x_lchq.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mevenDigitIndex\e[0m = evenDigitCount\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenDigitIndex is already defined as \e[33mvalue\e[0m \e[35mevenDigitIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_7x_lchq.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36moddDigitIndex\e[0m = evenDigitIndex\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddDigitIndex is already defined as \e[33mvalue\e[0m \e[35moddDigitIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_7x_lchq.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mevenDigit\e[0m = evenDigits(evenDigitIndex)\n\
    \e[31m\e[31m   |\e[0m   "
  stdout: ''
  timestamp: 1659793123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val nums = x.toSet\n        val evens = nums.filter(_ % 2 == 0)\n      \
    \  evens.toList.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmzqg5pya.scala:18)\n\tat Problem.main(tmpmzqg5pya.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val xs = x.toSet\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- xs.iterator) {\n            val digit = i % 10\n           \
    \ if(digit == 0) {\n                result.add(i)\n            }\n        }\n\
    \        result.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4557rdmw.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => { \n\
    \            val y = x.toString.toInt\n            val z = y % 10\n          \
    \  if (z == 0) result.+=(x)\n        })\n        result.sort\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6nav6sy.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            if (x(i) % 2 == 0) {\n                result.add(x(i))\n    \
    \        }\n        }\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjan4vb_t.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.ListBuffer[Long]()\n        val oddDigit = new mutable.ListBuffer[Long]()\n\
    \        for (i <- x) {\n            if (i % 2 == 0) {\n                evenDigit\
    \ += i\n            } else {\n                oddDigit += i\n            }\n \
    \       }\n        evenDigit.sortWith(_ < _)\n        oddDigit.sortWith(_ < _)\n\
    \        evenDigit.foreach { i =>\n            if (result.contains(i)) {\n   \
    \             result.clear()\n            }\n            result += i\n       \
    \ }\n        oddDigit.foreach { i =>\n            if (result.contains(i)) {\n\
    \                result.clear()\n            }\n            result += i\n    \
    \    }\n        result.sortWith(_ < _)\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0jipweye.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0jipweye.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0jipweye.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddDigit\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val xs = x.toSet\n        val result = new mutable.LinkedList[Long]\n  \
    \      for (i <- xs) {\n            if (i % 2 == 0) {\n                result.add(i)\n\
    \            }\n        }\n        result.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq7ber557.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m               \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gjuzqa.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gjuzqa.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val len = x.size\n\
    \        for(i <- 0 until len) {\n            val digit = x(i).asDigit\n     \
    \       if(digit % 2 == 0) {\n                result.add(x(i))\n            }\n\
    \        }\n        result.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpifm9d5zz.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpifm9d5zz.scala:16:29\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m\
    \ \e[36mdigit\e[0m = x(i).asDigit\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value asDigit is\
    \ not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659793123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach { x => \n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) result\
    \ += x\n        }\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp53ex93iy.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val str = x.toString\n            val digits = str.filter(x => x\
    \ != '0').map(x => x - '0').toList\n            val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n            if (evenDigits.isEmpty) {\n                result\
    \ += x\n            }\n        })\n        result.sortWith(_.compareTo(_) == 0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphf8j__fw.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(x\
    \ => x.toString.toInt)\n        val evenDigits = digits.filter(x => x % 2 == 0)\n\
    \        evenDigits.foreach(x => result += x)\n        result.sortWith(_ < _)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1dxg8ws5.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size) {\n           \
    \ val digit = x(i).toString.toInt\n            if(digit % 2 == 0) {\n        \
    \        evenDigit += digit\n            } else {\n                result += x(i)\n\
    \            }\n        }\n        evenDigit.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuimerkhl.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuimerkhl.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val str = x.toString\n            val digits = str.split(\"\").map(_.toInt)\n\
    \            val evenDigits = digits.filter(x => x % 2 == 0)\n            val\
    \ notEvenDigits = digits.filter(x => x % 2 != 0)\n            val notEvenDigitsSorted\
    \ = notEvenDigits.sorted\n            val notEvenDigitsSortedSortedInIncreasingOrder\
    \ = notEvenDigitsSorted.sorted\n            val notEvenDigitsSortedSortedInIncreasingOrderSet\
    \ = notEvenDigitsSortedSortedInIncreasingOrderSet.toSet\n            val notEvenDigitsSortedSortedInIncreasingOrderSetSize\
    \ = notEvenDigitsSortedSortedInIncreasingOrderSet.size\n            val notEvenDigitsSortedSortedInIncreasingOrderSetIterator\
    \ = notEvenDigitsSortedSortedInIncreasingOrderSet.iterator\n            val notEvenDigitsSortedSortedInIncreasingOrderSetIteratorSize\
    \ = notEvenDigitsSortedSortedInIncreasingOrderSetIterator.size\n            val\
    \ notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIterator = notEvenDigitsSortedSortedInIncreasingOrderSetIterator.iterator\n\
    \            val notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorSize\
    \ = notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIterator.size\n     \
    \       val notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorIterator\
    \ = notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIterator.iterator\n \
    \           val notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorSize\
    \ = notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIterator.size\n     \
    \       val notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorIterator\
    \ = notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIterator.iterator\n \
    \           val notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorIteratorSize\
    \ = notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorIterator.size\n\
    \            val notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorIteratorIterator\
    \ = notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorIterator.iterator\n\
    \            val notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorIteratorIteratorSize\
    \ = notEvenDigitsSortedSortedInIncreasingOrderSetIteratorIteratorIteratorIterator.size\n\
    \            val not\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp644d2sl4.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp644d2sl4.scala:35:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m35 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp644d2sl4.scala:43:0 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp644d2sl4.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val xs = x.toSet\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val xLen = x.size\n        for (i <- 0 until xLen) {\n            val\
    \ xDigit = xs(i)\n            if (xDigit % 2 == 0) {\n                result.add(xDigit)\n\
    \            }\n        }\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd2ldpva0.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd2ldpva0.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m\
    \ (xDigit % \e[31m2\e[0m == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m           \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of Boolean, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe\
    \ following import might make progress towards fixing the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m\
    \   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659793124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            val digit = x(i).asDigit\n            if (digit % 2 == 0) {\n\
    \                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppg8ufalg.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppg8ufalg.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mdigit\e[0m = x(i).asDigit\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value asDigit is\
    \ not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659793124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            if (x(i) % 2 == 0) {\n                result.add(x(i))\n    \
    \        }\n        }\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjan4vb_t.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.distinct\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjhcx8t23.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evenDigitsSorted.distinct\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => \n \
    \           if (x % 2 == 0) result.add(x) else result.addAll(uniqueDigits(x /\
    \ 2)))\n        result.sort\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3awqndgz.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val digits = x.map(x => x.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val uniqueEvenDigits = evenDigits.distinct\n       \
    \ uniqueEvenDigits.sort\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_r_88vym.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        uniqueEvenDigits.sort\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sort is not a member\
    \ of List[Int] - did you mean uniqueEvenDigits.sortBy?\n1 error found\n"
  stdout: ''
  timestamp: 1659793124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => { \n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            }\n        })\n        evenDigit.foreach(x\
    \ => { \n            if (result.contains(x)) {\n                return\n     \
    \       }\n            result.add(x)\n        })\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_misgqbu.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_misgqbu.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gjuzqa.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdoqgxn2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val evenDigits = x.filter(x => x % 2 == 0).sorted\n        val oddDigits\
    \ = x.filter(x => x % 2 != 0).sorted\n        evenDigits ++ oddDigits\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwlfqw7_1.scala:18)\n\tat Problem.main(tmpwlfqw7_1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.foreach { x => \n   \
    \         if (result.contains(x)) \n                result.updated(x, result.indexOf(x)\
    \ + 1)\n            else \n                result += x\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi_r28ytw.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val uniqueEvenDigits\
    \ = evenDigits.distinct\n        result.+=(uniqueEvenDigits)\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpztj99a2h.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gjuzqa.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val xs = x.toSet\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until xs.size) {\n            val y = xs.filter(_ % i == 0).size\n\
    \            if(y == 0) result.add(i)\n        }\n        result.sortWith((x,\
    \ y) => x < y)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6olsui71.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793124
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val nums = x.toSet\n        val evens = nums.filter(_ % 2 == 0)\n      \
    \  val odds = nums.filter(_ % 2 != 0)\n        evens.union(odds).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvz3hvzh0.scala:19)\n\tat Problem.main(tmpvz3hvzh0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val uniqueEvenDigits\
    \ = evenDigits.distinct\n        uniqueEvenDigits.foreach(x => result += x)\n\
    \        result.sort\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjx_u5owz.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val str = x.toString\n            val digits = str.map(x => x.toInt)\n\
    \            val evenDigits = digits.filter(x => x % 2 == 0)\n            val\
    \ uniqueEvenDigits = evenDigits.distinct\n            val uniqueEvenDigitsString\
    \ = uniqueEvenDigits.mkString(\",\")\n            if (uniqueEvenDigitsString.isEmpty)\
    \ {\n                result.add(x)\n            } else {\n                result.clear()\n\
    \            }\n        })\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgoxmu6n5.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if (digit % 2 ==\
    \ 0) {\n                result += digit\n            }\n        }\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7mwn_ou5.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793124
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val evens = x.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        evensSorted.filter(x => x.toString.length == 1).map(x => x.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgy4gemfr.scala:18)\n\tat Problem.main(tmpgy4gemfr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.ListBuffer[Long]()\n        val oddDigit = new mutable.ListBuffer[Long]()\n\
    \        x.foreach { x =>\n            if (x % 2 == 0) {\n                evenDigit\
    \ += x\n            } else {\n                oddDigit += x\n            }\n \
    \       }\n        evenDigit.foreach { x =>\n            if (!result.contains(x))\
    \ {\n                result += x\n            }\n        }\n        oddDigit.foreach\
    \ { x =>\n            if (!result.contains(x)) {\n                result += x\n\
    \            }\n        }\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaa_ogg_o.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaa_ogg_o.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpaa_ogg_o.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddDigit\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => {\n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            }\n        })\n        evenDigit.foreach(x\
    \ => {\n            if (result.contains(x)) {\n                return\n      \
    \      } else {\n                result += x\n            }\n        })\n    \
    \    result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe26z59yl.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe26z59yl.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => \n \
    \           if (x % 2 == 0) result.add(x)\n        )\n        result.sortWith(_\
    \ < _)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3aug0mcx.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if(digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sortWith((x,\
    \ y) => x < y)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjs10bwk6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793125
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val evenDigitsCount = x.count(x => x % 2 == 0)\n        val evenDigitsList\
    \ = x.filter(x => x % 2 == 0).sorted\n        val oddDigitsList = x.filter(x =>\
    \ x % 2 != 0).sorted\n        evenDigitsList.take(evenDigitsCount).union(oddDigitsList)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2r0ovc9.scala:19)\n\tat Problem.main(tmpw2r0ovc9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gjuzqa.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => {\n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            }\n        })\n        evenDigit.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpma6qquq3.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpma6qquq3.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val xs = x.toSet\n        val ys = xs.filter(_ % 2 == 0)\n        val zs\
    \ = xs.filter(_ % 2 != 0)\n        val ys_set = ys.toSet\n        val zs_set =\
    \ zs.toSet\n        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_set.size\n\
    \        val ys_set_size = ys_set.size\n        val zs_set_size = zs_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphxmsnm20.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mys_set_size\e[0m = ys_set.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mys_set_size is already defined as \e[33mvalue\e[0m \e[35mys_set_size\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphxmsnm20.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mzs_set_size\e[0m = zs_set.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mzs_set_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mzs_set_size\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphxmsnm20.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mys_set_size\e[0m = ys_set.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mys_set_size is already defined as \e[33mvalue\e[0m \e[35mys_set_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphxmsnm20.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mzs_set_size\e[0m = zs_set.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mzs_set_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mzs_set_size\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphxmsnm20.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mys_set_size\e[0m = ys_set.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mys_set_size is already defined as \e[33mvalue\e[0m \e[35mys_set_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1659793126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val nums = x.toSet\n        val evens = nums.filter(_ % 2 == 0)\n      \
    \  val odd = nums.filter(_ % 2 != 0)\n        evens.union(odd)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ufiju56.scala:16:19\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.union(odd)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    \e[1m\e[31mSet\e[0m[Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e\
    [0m[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gjuzqa.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.foreach(x => result +=\
    \ x)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphfjo7yjf.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach { x =>\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result += x\n            }\n        }\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdrhhm3qv.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val xs = x.toSet\n\
    \        val xs2 = xs.filter(_ % 2 == 0)\n        val x3 = xs.filter(_ % 3 ==\
    \ 0)\n        val x4 = xs.filter(_ % 4 == 0)\n        val x5 = xs.filter(_ % 5\
    \ == 0)\n        val x6 = xs.filter(_ % 6 == 0)\n        val x7 = xs.filter(_\
    \ % 7 == 0)\n        val x8 = xs.filter(_ % 8 == 0)\n        val x9 = xs.filter(_\
    \ % 9 == 0)\n        val x10 = xs.filter(_ % 10 == 0)\n        val x11 = xs.filter(_\
    \ % 11 == 0)\n        val x12 = xs.filter(_ % 12 == 0)\n        val x13 = xs.filter(_\
    \ % 13 == 0)\n        val x14 = xs.filter(_ % 14 == 0)\n        val x15 = xs.filter(_\
    \ % 15 == 0)\n        val x16 = xs.filter(_ % 16 == 0)\n        val x17 = xs.filter(_\
    \ % 17 == 0)\n        val x18 = xs.filter(_ % 18 == 0)\n        val x19 = xs.filter(_\
    \ % 19 == 0)\n        val x20 = xs.filter(_ % 20 == 0)\n        val x21 = xs.filter(_\
    \ % 21 == 0)\n        val x22 = xs.filter(_ % 22 == 0)\n        val x23 = xs.filter(_\
    \ % 23 == 0)\n        val x24 = xs.filter(_ % 24 == 0)\n        val x25 = xs.filter(_\
    \ % 25 == 0)\n        val x26 = xs.filter(_ % 26 == 0)\n        val x27 = xs.filter(_\
    \ % 27 == 0)\n        val x28 = xs.filter(_ % 28 == 0)\n        val x29 = xs.filter(_\
    \ % 29 == 0)\n        val x30 = xs.filter(_ % 30 == 0)\n        val x31 = xs.filter(_\
    \ % 31 == 0)\n        val x32 = xs.filter(_ % 32 == 0)\n        val x33 = xs.filter(_\
    \ % 33 == 0)\n        val x34 = xs.filter(_ % 34 == 0)\n        val x35 = xs.filter(_\
    \ % 35 == 0)\n        val x36 = xs.filter(_ % 36 == 0)\n        val x37 = xs.filter(_\
    \ % 37 == 0)\n        val x38 = xs.filter(_ % 38 == 0)\n        val x39 = xs.filter(_\
    \ % 39 == 0)\n\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5fo7jg21.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5fo7jg21.scala:54:5\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.LinkedList[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach(x => result +=\
    \ x)\n        oddDigits.foreach(x => result += x)\n        result.sort\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmploy33bs2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val evenDigits = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => {\n            if (x % 2 ==\
    \ 0) {\n                evenDigits.add(x)\n            }\n        })\n       \
    \ evenDigits.foreach(x => {\n            if (result.contains(x)) {\n         \
    \       return\n            }\n            result.add(x)\n        })\n       \
    \ result.sort\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk2l94eh0.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk2l94eh0.scala:14:29\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigits\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val xs = x.toSet\n        val ys = xs.filter(_ % 2 == 0)\n        val zs\
    \ = xs.filter(_ % 2 == 1)\n        val zsSorted = zs.sorted\n        val ys =\
    \ ys.filterNot(zs.contains)\n        val ys = ys.filterNot(zsSorted.contains)\n\
    \        val ys = ys.filterNot(xs.contains)\n        val ys = ys.filterNot(xs.toSet.contains)\n\
    \        val ys = ys.filterNot(xs.toSet.subsetOf(zs))\n        val ys = ys.filterNot(xs.toSet.subsetOf(zsSorted))\n\
    \        val ys = ys.filterNot(xs.toSet.subsetOf(xs))\n        val ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet))\n\
    \        val ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet))\n        val\
    \ ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet))\n        val ys =\
    \ ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet.toSet))\n        val ys\
    \ = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet.toSet.toSet))\n      \
    \  val ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet.toSet.toSet.toSet))\n\
    \        val ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet.toSet.toSet.toSet))\n\
    \        val ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet.toSet.toSet.toSet.toSet))\n\
    \        val ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet))\n\
    \        val ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet))\n\
    \        val ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet))\n\
    \        val ys = ys.filterNot(xs.toSet.subsetOf(xs.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo9ulknr6.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo9ulknr6.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mys\e[0m = ys.filterNot(zs.contains)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mys is already defined as \e[33mvalue\e[0m \e[35mys\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpo9ulknr6.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mys\e[0m = ys.filterNot(zsSorted.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mys is already defined as \e[33mvalue\e[0m \e[35mys\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpo9ulknr6.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mys\e[0m = ys.filterNot(xs.contains)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mys\
    \ is already defined as \e[33mvalue\e[0m \e[35mys\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo9ulknr6.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mys\e[0m = ys.filterNot(xs.toSet.contains)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mys is already\
    \ defined as \e[33mvalue\e[0m \e[35mys\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo9ulknr6.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mys\e[0m = ys"
  stdout: ''
  timestamp: 1659793128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdoqgxn2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        val notEvenDigits = digits.filter(x => x % 2 !=\
    \ 0)\n        val notEvenDigitsSet = notEvenDigits.toSet\n        notEvenDigitsSet.foreach(x\
    \ => result += x)\n        evenDigitsSet.foreach(x => result += x)\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7t9ezika.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gjuzqa.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => {\n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            }\n        })\n        evenDigit.foreach(x\
    \ => {\n            if (result.contains(x)) {\n                return\n      \
    \      }\n            result.add(x)\n        })\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_y8v57xq.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_y8v57xq.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val nums = x.toSet\n        val evenDigits = nums.filter(_ % 2 == 0)\n \
    \       val oddDigits = nums.filter(_ % 2 != 0)\n        evenDigits.union(oddDigits).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp06ox6_yr.scala:19)\n\tat Problem.main(tmp06ox6_yr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result.add(x)\n            }\n        })\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp_rz_60x.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x % 10\n            if (digit == 0) {\n             \
    \   result.add(x)\n            }\n        })\n        result.sortWith(_ < _)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ntofu_y.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793127
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val nums = x.toSet\n        val evens = nums.filter(_ % 2 == 0)\n      \
    \  evens.toList.sortBy(x => x)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvjuoznj4.scala:18)\n\tat Problem.main(tmpvjuoznj4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if(digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw3nsvzdc.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val xs = x.toSet\n        val result = new mutable.ListBuffer[Long]\n  \
    \      for (i <- xs.iterator) {\n            val digit = i % 10\n            if\
    \ (xs.contains(digit)) {\n                result.add(i)\n            }\n     \
    \   }\n        result.sortWith((a, b) => a.compareTo(b) == 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph7rfhdnj.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m               \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            if (x(i) % 2 == 0) {\n                result.add(x(i))\n    \
    \        }\n        }\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjan4vb_t.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdoqgxn2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result.add(x) else ())\n        result.sort\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpajtsg829.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsList =\
    \ evenDigits.toList\n        val evenDigitsSet = evenDigitsList.distinct\n   \
    \     val evenDigitsSortedList = evenDigitsSet.sort\n        evenDigitsSortedList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaajm7zub.scala:16:49 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevenDigitsSortedList\e[0m\
    \ = evenDigitsSet.sort\n\e[31m\e[31m   |\e[0m                                \
    \   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sort is not a member of List[Long]\
    \ - did you mean evenDigitsSet.sortBy?\n1 error found\n"
  stdout: ''
  timestamp: 1659793127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdoqgxn2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            if (x(i) % 2 == 0) {\n                result.add(x(i))\n    \
    \        }\n        }\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjan4vb_t.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result += x\n            }\n        })\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5qdi1kuk.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.foreach(x => if (result.contains(x))\
    \ return)\n        result ++= evenDigitsSorted\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp37y1fe6a.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp37y1fe6a.scala:17:62\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        evenDigitsSorted.foreach(\e\
    [36mx\e[0m => \e[33mif\e[0m (result.contains(x)) \e[33mreturn\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                              ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    Unit\n\e[31m   |\e[0m                                                   \
    \ Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result.add(x) else ())\n        result.sort\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpajtsg829.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdoqgxn2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.distinct\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjhcx8t23.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evenDigitsSorted.distinct\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsList =\
    \ evenDigits.toList\n        evenDigitsList.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp99mcjylr.scala:18)\n\tat Problem.main(tmp99mcjylr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            if (x(i) % 2 == 0) {\n                result.add(x(i))\n    \
    \        }\n        }\n        result.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdsecvhou.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if (digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcyf_tool.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdoqgxn2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result.add(x))\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprkj9r9_z.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gjuzqa.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result.add(x)\n            }\n        })\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp_rz_60x.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gjuzqa.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val xs = x.toSet\n\
    \        xs.foreach(x => {\n            val y = x % 10\n            if (y % 2\
    \ == 0) {\n                result.add(x)\n            }\n        })\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmple11j3ah.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        for(i <- x) {\n            if(i.toString.length\
    \ == 1) {\n                result.add(i)\n            } else {\n             \
    \   val digit = i.toString.charAt(0)\n                if(evenDigit.contains(digit))\
    \ {\n                    result.add(i)\n                } else {\n           \
    \         evenDigit.add(digit)\n                }\n            }\n        }\n\
    \        result.sortWith((x, y) => x.toString.compareTo(y.toString) < 0)\n   \
    \     result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt03y7_1f.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt03y7_1f.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdoqgxn2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val str = x.toString\n            val digits = str.dropWhile(_ <\
    \ '0').dropWhile(_ > '9').drop(1)\n            val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n            val isEven = evenDigits.isEmpty\n            if\
    \ (isEven) {\n                result += x\n            }\n        })\n       \
    \ result.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe97hatfp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val xs = x.toSet\n\
    \        xs.foreach { x =>\n            val digit = xs.filter(_ % x == 0).length\n\
    \            if (digit == 0) {\n                result.add(x)\n            }\n\
    \        }\n        result.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc7m4sckz.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc7m4sckz.scala:16:46\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m\
    \ \e[36mdigit\e[0m = xs.filter(_ % x == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        value length is not a member of Set[Long]\n2 errors found\n"
  stdout: ''
  timestamp: 1659793129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.LinkedList[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        for(i <- 0 until x.size) {\n            val\
    \ digit = x(i).toString.toInt\n            if(digit % 2 == 0) {\n            \
    \    evenDigit.add(digit)\n            }\n        }\n        for(i <- 0 until\
    \ x.size) {\n            val digit = x(i).toString.toInt\n            if(evenDigit.contains(digit))\
    \ {\n                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplnx3lbi6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplnx3lbi6.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val evenDigitsMap : mutable.Map[Long, Long] = mutable.HashMap.empty[Long,\
    \ Long]\n        val evenDigits : mutable.Set[Long] = mutable.Set.empty[Long]\n\
    \        x.foreach(x => {\n            val digit = x%10\n            val evenDigit\
    \ = digit%2 == 0\n            if (evenDigit) {\n                evenDigitsMap\
    \ += digit -> x\n                evenDigits += digit\n            }\n        })\n\
    \        evenDigitsMap.filter(_._2 != 0).map(_._1).sort\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxei5r_y_.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenDigitsMap\e[0m : mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m] = mutable.HashMap.empty[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxei5r_y_.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenDigitsMap\e[0m : mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m] = mutable.HashMap.empty[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                                                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                                           \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxei5r_y_.scala:14:25 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mevenDigits\e[0m : mutable.Set[\e[35mLong\e[0m]\
    \ = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxei5r_y_.scala:14:45\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigits\e[0m : mutable.Set[\e[35mLong\e[0m] = mutable.Set.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gjuzqa.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if (digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcyf_tool.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.distinct\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjhcx8t23.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evenDigitsSorted.distinct\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => { \n\
    \            if (x % 2 == 0) result.add(x)\n        })\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvvf9q2xh.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach { x => \n\
    \            val str = x.toString\n            val digits = str.dropWhile(_ <\
    \ '0').dropWhile(_ > '9').toList\n            val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n            val notEvenDigits = digits.filter(x => x % 2 !=\
    \ 0)\n            val notEvenDigitsSorted = notEvenDigits.sortWith(_ < _)\n  \
    \          val evenDigitsSorted = evenDigits.sortWith(_ < _)\n            val\
    \ notEvenDigitsSortedSorted: mutable.Buffer[Long] = notEvenDigitsSorted.toBuffer\n\
    \            val evenDigitsSortedSorted: mutable.Buffer[Long] = evenDigitsSorted.toBuffer\n\
    \            val notEvenDigitsSortedSortedSorted: mutable.Buffer[Long] = notEvenDigitsSortedSorted.toBuffer\n\
    \            val evenDigitsSortedSortedSorted: mutable.Buffer[Long] = evenDigitsSortedSorted.toBuffer\n\
    \            val notEvenDigitsSortedSortedSortedSorted: mutable.Buffer[Long] =\
    \ notEvenDigitsSortedSortedSorted.toBuffer\n            val evenDigitsSortedSortedSortedSorted:\
    \ mutable.Buffer[Long] = evenDigitsSortedSortedSorted.toBuffer\n            val\
    \ notEvenDigitsSortedSortedSortedSorted: mutable.Buffer[Long] = notEvenDigitsSortedSortedSorted.toBuffer\n\
    \            val evenDigitsSortedSortedSortedSorted: mutable.Buffer[Long] = evenDigitsSortedSortedSorted.toBuffer\n\
    \            val notEvenDigitsSortedSortedSortedSorted: mutable.Buffer[Long] =\
    \ notEvenDigitsSortedSortedSorted.toBuffer\n            val evenDigitsSortedSortedSortedSorted:\
    \ mutable.Buffer[Long] = evenDigitsSortedSortedSorted.toBuffer\n            val\
    \ notEvenDigitsSortedSortedSortedSorted: mutable.Buffer[Long] = notEvenDigitsSortedSortedSorted.toBuffer\n\
    \            val evenDigitsSortedSortedSortedSortedSorted: mutable.Buffer[Long]\
    \ = evenDigitsSortedSortedSorted.toBuffer\n            val notEvenDigitsSortedSortedSortedSortedSorted:\
    \ mutable.Buffer[Long] = notEvenDigitsSortedSortedSorted.toBuffer\n          \
    \  val evenDigitsSortedSortedSortedSortedSorted: mutable.Buffer[Long] = evenDigitsSortedSortedSorted.toBuffer\n\
    \            val notEvenDigitsSortedSortedSortedSortedSorted: mutable.Buffer[Long]\
    \ = notEvenDigitsSortedSortedSorted.toBuffer\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiv61varm.scala:45:0 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiv61varm.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpiv61varm.scala:27:16 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m            \e[33mval\e[0m \e[36mnotEvenDigitsSortedSortedSortedSorted\e\
    [0m: mutable.Buffer[\e[35mLong\e[0m] = notEvenDigitsSortedSortedSorted.toBuffer\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotEvenDigitsSortedSortedSortedSorted is already defined as\
    \ \e[33mvalue\e[0m \e[35mnotEvenDigitsSortedSortedSortedSorted\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiv61varm.scala:28:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e\
    [0m \e[36mevenDigitsSortedSortedSortedSorted\e[0m: mutable.Buffer[\e[35mLong\e\
    [0m] = evenDigitsSortedSortedSorted.toBuffer\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenDigitsSortedSortedSortedSorted is already defined as \e\
    [33mvalue\e[0m \e[35mevenDigitsSortedSortedSortedSorted\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiv61varm.scala:29:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e\
    [0m \e[36mnotEvenDigitsSortedSortedSortedSorted\e[0m:"
  stdout: ''
  timestamp: 1659793129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).asDigit\n            if(digit % 2 == 0) {\n\
    \                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpketcr2am.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpketcr2am.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mdigit\e[0m = x(i).asDigit\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value asDigit is\
    \ not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659793121
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        val uniqueEvenDigits = evenDigitsSorted.distinct\n\
    \        uniqueEvenDigits.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq90mmn8l.scala:19)\n\tat Problem.main(tmpq90mmn8l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if(digit % 2 ==\
    \ 0) {\n                result += digit\n            }\n        }\n        result\
    \ .toList\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptufkbpa3.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gjuzqa.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if(digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw3nsvzdc.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => { \n\
    \            val digit = x % 10\n            if (digit % 2 == 0) {\n         \
    \       result.add(x)\n            }\n        })\n        result.sortWith(_ <\
    \ _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxpuorcfm.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digits = x.toString.reverse.grouped(2).map(_.toInt)\n       \
    \     if (digits.length == 1) result += x\n        })\n        result sortBy {\
    \ x => x % 10 }\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6idz368p.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdoqgxn2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result.add(x)\n            }\n        })\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp_rz_60x.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplj8sp64y.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        val uniqueEvenDigits = evenDigits.filter(x => !evenDigitsSet.contains(x))\n\
    \        result.+=(uniqueEvenDigits.toList)\n        result.sort\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu0su5xid.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result.+=(x)\n            }\n        })\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpugt9vete.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val evenDigits = new\
    \ mutable.HashSet[Long]()\n        for(i <- 0 until x.size) {\n            val\
    \ digit = x(i).toString.toInt\n            if(digit % 2 == 0) {\n            \
    \    evenDigits.add(digit)\n            }\n        }\n        for(i <- 0 until\
    \ x.size) {\n            val digit = x(i).toString.toInt\n            if(evenDigits.contains(digit))\
    \ {\n                result.add(x(i))\n            }\n        }\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7uhqoj85.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7uhqoj85.scala:14:29\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigits\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsList =\
    \ evenDigits.toList\n        val evenDigitsSet = evenDigitsList.distinct\n   \
    \     val evenDigitsSetList = evenDigitsSet.toList\n        evenDigitsSetList.filter(x\
    \ => x.isEmpty).map(x => x.toLong)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfp4zdis0.scala:17:40 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        evenDigitsSetList.filter(\e[36mx\e[0m => x.isEmpty).map(\e\
    [36mx\e[0m => x.toLong)\n\e[31m\e[31m   |\e[0m                               \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   value\
    \ isEmpty is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659793130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdoqgxn2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val xs = x.toSet\n\
    \        val xs2 = xs.filter(_ % 2 == 0)\n        val x3 = xs.filter(_ % 3 ==\
    \ 0)\n        val x4 = xs.filter(_ % 4 == 0)\n        val x5 = xs.filter(_ % 5\
    \ == 0)\n        val x6 = xs.filter(_ % 6 == 0)\n        val x7 = xs.filter(_\
    \ % 7 == 0)\n        val x8 = xs.filter(_ % 8 == 0)\n        val x9 = xs.filter(_\
    \ % 9 == 0)\n        val x10 = xs.filter(_ % 10 == 0)\n        val x11 = xs.filter(_\
    \ % 11 == 0)\n        val x12 = xs.filter(_ % 12 == 0)\n        val x13 = xs.filter(_\
    \ % 13 == 0)\n        val x14 = xs.filter(_ % 14 == 0)\n        val x15 = xs.filter(_\
    \ % 15 == 0)\n        val x16 = xs.filter(_ % 16 == 0)\n        val x17 = xs.filter(_\
    \ % 17 == 0)\n        val x18 = xs.filter(_ % 18 == 0)\n        val x19 = xs.filter(_\
    \ % 19 == 0)\n        val x20 = xs.filter(_ % 20 == 0)\n        val x21 = xs.filter(_\
    \ % 21 == 0)\n        val x22 = xs.filter(_ % 22 == 0)\n        val x23 = xs.filter(_\
    \ % 23 == 0)\n        val x24 = xs.filter(_ % 24 == 0)\n        val x25 = xs.filter(_\
    \ % 25 == 0)\n        val x26 = xs.filter(_ % 26 == 0)\n        val x27 = xs.filter(_\
    \ % 27 == 0)\n        val x28 = xs.filter(_ % 28 == 0)\n        val x29 = xs.filter(_\
    \ % 29 == 0)\n        val x30 = xs.filter(_ % 30 == 0)\n        val x31 = xs.filter(_\
    \ % 31 == 0)\n        val x32 = xs.filter(_ % 32 == 0)\n        val x33 = xs.filter(_\
    \ % 33 == 0)\n        val x34 = xs.filter(_ % 34 == 0)\n        val x35 = xs.filter(_\
    \ % 35 == 0)\n        val x36 = xs.filter(_ % 36 == 0)\n        val x37 = xs.filter(_\
    \ % 37 == 0)\n        val x38 = xs.filter(_ % 38 == 0)\n        val x39 = xs.filter(_\
    \ % 39 == 0)\n\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5fo7jg21.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5fo7jg21.scala:54:5\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gjuzqa.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result.add(x) else ())\n        result.sort\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpajtsg829.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val str = x.toString\n            val digits = str.dropWhile(_ <\
    \ '0').dropWhile(_ > '9').toList\n            val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n            val hasEvenDigit = evenDigits.nonEmpty\n       \
    \     if (hasEvenDigit) {\n                result.add(x.toLong)\n            }\n\
    \        })\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnlbrn1gw.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val xs = x.toSet\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigits = xs.filter(_ % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmjf9fizr.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val xs = x.toSet\n\
    \        xs.foreach { x =>\n            val digit = x.toString.toInt\n       \
    \     if (digit % 2 == 0) {\n                result += x\n            }\n    \
    \    }\n        result.sort\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7re7pgzm.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val xs = x.toSet\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- xs) {\n            if (i % 2 == 0) {\n                result.add(i)\n\
    \            }\n        }\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86la13du.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val evenDigitsSet = mutable.Set[Long]()\n        val oddDigitsSet = mutable.Set[Long]()\n\
    \        x.foreach(x => {\n            val digit = x % 10\n            if (digit\
    \ % 2 == 0) {\n                evenDigitsSet += digit\n            } else {\n\
    \                oddDigitsSet += digit\n            }\n        })\n        oddDigitsSet.diff(evenDigitsSet)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp270wnthp.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenDigitsSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp270wnthp.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36moddDigitsSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val digits = mutable.Set[Long]()\n        x.foreach(x => digits += x)\n\
    \        digits.toList.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqdn61nlo.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        val notEvenDigits = digits.filter(x => !evenDigitsSet.contains(x))\n\
    \        notEvenDigits.foreach { x => result += x }\n        result.sort\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpikhkuvjb.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitList = evenDigits.toList\n        val uniqueEvenDigits\
    \ = evenDigitList.distinct\n        val uniqueEvenDigitList = uniqueEvenDigits.toList\n\
    \        uniqueEvenDigitList.sort\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgxbw6t8y.scala:18:28 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        uniqueEvenDigitList.sort\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sort is not a member\
    \ of List[Int] - did you mean uniqueEvenDigitList.sortBy?\n1 error found\n"
  stdout: ''
  timestamp: 1659793131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val evenDigits = x.filter(x => x % 2 == 0).sort\n        val oddDigits =\
    \ x.filter(x => x % 2 != 0).sort\n        val result = evenDigits.filter(x =>\
    \ oddDigits.contains(x)).sort\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkyzaiaoo.scala:13:51 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenDigits\e[0m = x.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sort\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ sort is not a member of List[Long] - did you mean List[Long].sortBy?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkyzaiaoo.scala:14:50 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36moddDigits\e[0m = x.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m != \e[31m0\e[0m).sort\n\e[31m\e[31m   |\e[0m  \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ sort is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659793131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val xs = x.toSet\n        val ys = xs.filter(_ % 2 == 0)\n        val zs\
    \ = xs.filter(_ % 2 != 0)\n        val zsSet = zs.toSet\n        zsSet.subsetOf(ys).toList\
    \ ++ ys.subsetOf(zsSet).toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpufrxnw78.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        zsSet.subsetOf(ys).toList ++ ys.subsetOf(zsSet).toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       value toList is not a member of Boolean\n1 error found\n"
  stdout: ''
  timestamp: 1659793131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if (digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcyf_tool.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
    \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422,\
    \ 10])\n    // []\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val str = x.toString\n            val digits = str.dropWhile(_ <\
    \ '0').dropWhile(_ > '9').toList\n            if (digits.isEmpty) result.add(x)\n\
    \            else {\n                val evenDigits = digits.filter(x => x % 2\
    \ == 0)\n                if (evenDigits.isEmpty) result.add(x)\n             \
    \   else {\n                    val evenDigit = evenDigits.head\n            \
    \        val oddDigits = digits.filter(_ != evenDigit)\n                    val\
    \ newEvenDigits = evenDigits.filter(_ != evenDigit)\n                    val newEvenDigit\
    \ = evenDigit + 2\n                    val newOddDigits = oddDigits.filter(_ !=\
    \ evenDigit)\n                    val newOddDigit = evenDigit + 2\n          \
    \          val newEvenDigits = evenDigits.filter(_ != evenDigit)\n           \
    \         val newOddDigits = oddDigits.filter(_ != evenDigit)\n              \
    \      val newEvenDigit = evenDigit + 2\n                    val newOddDigits\
    \ = oddDigits.filter(_ != evenDigit)\n                    val newEvenDigits =\
    \ evenDigits.filter(_ != evenDigit)\n                    val newOddDigits = oddDigits.filter(_\
    \ != evenDigit)\n                    val newEvenDigit = evenDigit + 2\n      \
    \              val newOddDigits = oddDigits.filter(_ != evenDigit)\n         \
    \           val newEvenDigits = evenDigits.filter(_ != evenDigit)\n          \
    \          val newOddDigits = oddDigits.filter(_ != evenDigit)\n             \
    \       val newEvenDigit = evenDigit + 2\n                    val newOddDigits\
    \ = oddDigits.filter(_ != evenDigit)\n                    val newEvenDigits =\
    \ evenDigits.filter(_ != evenDigit)\n                    val newOddDigits = oddDigits.filter(_\
    \ != evenDigit)\n                    val newEvenDigit = evenDigit + 2\n      \
    \              val newOddDigits = oddDigits.filter(_ != evenDigit)\n         \
    \           val newEvenDigits = evenDigits.filter(_ != evenDigit)\n          \
    \          val newOddDigits = oddDigits.filter(_ != evenDigit)\n             \
    \       val newEvenDigit = evenDigit + 2\n                    val newOddDigits\
    \ = oddDigits.filter(_ != evenDigit)\n                    val newEvenDigits =\
    \ evenDigits.filter(_ != evenDigit)\n                    val newOddDigits = oddDigits.filter(_\
    \ != evenDigit)\n                    val new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpoj6nsf0k.scala:50:24 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                    \e[33mval\e[0m \e[33mnew\e[0m\n\e\
    [31m\e[31m   |\e[0m                        ^^^\e[0m\n\e[31m   |\e[0m         \
    \               pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpoj6nsf0k.scala:60:0 ----------------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoj6nsf0k.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoj6nsf0k.scala:28:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                    \e\
    [33mval\e[0m \e[36mnewEvenDigits\e[0m = evenDigits.filter(_ != evenDigit)\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewEvenDigits is already defined as \e[33mvalue\e[0m \e[35mnewEvenDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoj6nsf0k.scala:29:24 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m                    \e[33mval\e[0m \e[36mnewOddDigits\e[0m = oddDigits.filter(_\
    \ != evenDigit)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewOddDigits is already defined as \e[33mvalue\e[0m \e[35mnewOddDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoj6nsf0k.scala:30:24 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m    "
  stdout: ''
  timestamp: 1659793130
