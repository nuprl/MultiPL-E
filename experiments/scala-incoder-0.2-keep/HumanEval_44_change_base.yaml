name: HumanEval_44_change_base
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Change numerical base of input number x to base.\n    // return string representation\
  \ after the conversion.\n    // base numbers are less than 10.\n    // >>> change_base(8,\
  \ 3)\n    // '22'\n    // >>> change_base(8, 2)\n    // '1000'\n    // >>> change_base(7,\
  \ 2)\n    // '111'\n    def changeBase(x : Long, base : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
  \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n\
  \    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
  \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
  )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
  \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
  \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
  \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
  \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
completions: ["        val digits = x.toString.reverse.grouped(base).toList\n    \
    \    val result = digits.reverse.foldLeft(\"\") { (acc, digit) => acc + digit\
    \ }\n        val baseString = if (base < 10) \"0\" + base.toString else \"\"\n\
    \        result + baseString", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits(0)\n        val remainder = digits.tail.foldLeft(0)((acc,\
    \ digit) => acc * base + digit)\n        val remainderString = remainder.toString.reverse\n\
    \        result + remainderString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (result\
    \ == \"0\") \"-\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = new StringBuilder\n        digits.foreach(x => result.append(x.reverse))\n\
    \        result.toString", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val digit = digits.last\n\
    \        val digits = digits.dropRight(1)\n        val digit = digits.last\n \
    \       val digits = digits.dropRight(1)\n        val digit = digits.last\n  \
    \      val digits = digits.dropRight(1)\n        val digit = digits.last\n   \
    \     val digits = digits.dropRight(1)\n        val digit = digits.last\n    \
    \    val digits = digits.dropRight(1)\n        val digit = digits.last\n     \
    \   val digits = digits.dropRight(1)\n        val digit = digits.last\n      \
    \  val digits = digits.dropRight(1)\n        val digit = digits.last\n       \
    \ val digits = digits.dropRight(1)\n        val digit = digits.last\n        val\
    \ digits = digits.dropRight(1)\n        val digit = digits.last\n        val digits\
    \ = digits.dropRight(1)\n        val digit = digits.last\n        val digits =\
    \ digits.dropRight(1)\n        val digit = digits.last\n        val digits = digits.dropRight(1)\n\
    \        val digit = digits.last\n        val digits = digits.dropRight(1)\n \
    \       val digit = digits.last\n        val digits = digits.dropRight(1)\n  \
    \      val digit = digits.last\n        val digits = digits.dropRight(1)\n   \
    \     val digit = digits.last\n        val digits = digits.dropRight(1)\n    \
    \    val digit = digits.last\n        val digits = digits.dropRight(1)\n     \
    \   val digit = digits.last\n        val digits = digits.dropRight(1)\n      \
    \  val digit = digits.last\n        val digits = digits.dropRight(1)\n       \
    \ val digit = digits.last\n        val digits = digits.dropRight(1)\n        val\
    \ digit = digits.last\n        val digits = digits.dropRight(1)\n        val digit\
    \ = digits.last\n        val digits = digits.dropRight(1)\n        val digit =\
    \ digits.last\n        val digits = digits.dropRight(1)\n        val digit = digits.last\n\
    \        val digits = digits.dropRight(1)\n        val digit = digits.last\n \
    \       val digits = digits.dropRight(1)\n        val digit = digits.last\n  \
    \      val digits = digits.dropRight(1)\n        val digit = digits.last\n   \
    \     val digits = digits.dropRight(1)\n        val digit = digits.last\n    \
    \    val digits = digits.dropRight(1)\n        val digit = digits.last\n     \
    \   val digits = digits.dropRight(1)\n        val digit = digits.last\n      \
    \  val digits = digits.dropRight(1)\n        val digit = digits.last", "     \
    \   val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n    \
    \    val result = digits.reverse.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else base.toChar)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val digit = digits.last\n\
    \        val remainder = digits.dropRight(1)\n        if (remainder.isEmpty) result\n\
    \        else if (remainder.last == 0) result + digit\n        else result + digit\
    \ + changeBase(remainder.last, base)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ < 10) \"0\" + base.toString else base.toString\n        val result = baseString\
    \ + result\n        result", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val baseString =\
    \ if (base < 10) \"0\" + base.toString else base.toString\n        result", " \
    \       var result = \"\"\n        var remainder = x % base\n        while(x >\
    \ 0) {\n            result += (remainder % base).toString\n            remainder\
    \ = (remainder / base).toLong\n        }\n        result", "        val digits\
    \ = x.toString.reverse.grouped(base).toList\n        val result = digits.reverse.foldLeft(\"\
    \") {\n            (acc, digit) => acc + digit.drop(base).reverse\n        }\n\
    \        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base) \"\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + if (digits.size\
    \ < base) \"\" else changeBase(digits.tail, base)", "        val bases = List(10,\
    \ 8, 7, 6)\n        val digits = x.toString.reverse.grouped(base).toList\n   \
    \     val result = digits(0) match {\n            case head :: tail => head *\
    \ bases(base) + changeBase(tail, base)\n            case _ => \"\"\n        }\n\
    \        result.reverse", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result == \"\
    0\") \"1\" else \"\")", "        var result = \"\"\n        var remainder = x\
    \ % base\n        var quotient = x / base\n        while (quotient > 0) {\n  \
    \          result += quotient.toString\n            quotient = quotient / base\n\
    \        }\n        result += remainder.toString\n        result", "        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n  \
    \      val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base) 0 else \"\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") { (acc, digit) => acc + digit\
    \ }\n        return result", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val baseString =\
    \ if (base < 10) \"0\" + base.toString\n        else base.toString\n        result",
  "        val digits = x.toString.reverse.grouped(base).toList\n        val result\
    \ = digits.reverse.mkString(\"\")\n        val digit = digits.head\n        val\
    \ rest = digits.tail\n        val restString = rest.mkString(\"\")\n        val\
    \ restDigit = rest.toString.reverse.grouped(base).reverse.head\n        val restString\
    \ = rest.toString.reverse.grouped(base).reverse.mkString(\"\")\n        val restDigits\
    \ = rest.toString.reverse.grouped(base).reverse.tail\n        val restString =\
    \ rest.toString.reverse.grouped(base).reverse.mkString(\"\")\n        val restDigit\
    \ = rest.toString.reverse.grouped(base).reverse.head\n        val restString =\
    \ rest.toString.reverse.grouped(base).reverse.mkString(\"\")\n        val restDigits\
    \ = rest.toString.reverse.grouped(base).reverse.tail\n        val restString =\
    \ rest.toString.reverse.grouped(base).reverse.mkString(\"\")\n        val restDigit\
    \ = rest.toString.reverse.grouped(base).reverse.head\n        val restString =\
    \ rest.toString.reverse.grouped(base).reverse.mkString(\"\")\n        val restDigits\
    \ = rest.toString.reverse.grouped(base).reverse.tail\n        val restString =\
    \ rest.toString.reverse.grouped(base).reverse.mkString(\"\")\n        val restDigit\
    \ = rest.toString.reverse.grouped(base).reverse.head\n        val restString =\
    \ rest.toString.reverse.grouped(base).reverse.mkString(\"\")\n        val restDigits\
    \ = rest.toString.reverse.grouped(base).reverse.tail\n        val restString =\
    \ rest.toString.reverse.grouped(base).reverse.mkString(\"\")\n        val restDigit\
    \ = rest.toString.reverse.grouped(base).reverse.head\n        val restString =\
    \ rest.toString.reverse.grouped(base).reverse.mkString(\"\")\n        val restDigits\
    \ = rest.toString.reverse.grouped(base).reverse.tail\n        val restString =\
    \ rest.toString.reverse.grouped(base).reverse.mkString(\"\")\n        val restDigit\
    \ = rest.toString.reverse.grouped(base).reverse.head\n        val restString =\
    \ rest.toString.reverse.grouped(base).reverse.mkString(\"\")\n        val restDigits\
    \ = rest.toString.reverse.grouped(base).reverse.tail\n        val restString =\
    \ rest.toString.reverse.grouped(base).reverse", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + digits.tail.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        digits.tail.foldLeft(result)\
    \ { case (acc, digit) => acc + digit }", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base) \"\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \"\" + base)", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = new StringBuilder\n        digits.reverse.foreach(x => result.append(x.toChar))\n\
    \        result.toString", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + (if\
    \ (digits.isEmpty) \"\" else base.toString.reverse)", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + digits.reverse.takeWhile(_\
    \ < base).reverse.mkString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else base.toString.charAt(base.toString.length - digits.length))", "  \
    \      val digits = x.toString.reverse.grouped(base).toList\n        val result\
    \ = digits.reverse.mkString(\"\")\n        val len = result.length\n        val\
    \ zeros = len % base\n        val zeroChar = if (zeros == 0) \"\" else new String(new\
    \ Array[Char](zeros))\n        val result = zeroChar + result\n        result",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) 0 else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = digits.reverse.mkString(\"\")\n        val len = result.length\n\
    \        val zeros = len - result.length\n        val zeroChar = if (zeros ==\
    \ 0) \"0\" else \"\"\n        val result = zeroChar + result\n        result",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" else \"\"\n        result + baseString", "        val digits =\
    \ x.toString.reverse.grouped(base).toList\n        val result = digits.reverse.foldLeft(\"\
    \") {\n            case (acc, digit) => acc + digit.drop(base).reverse\n     \
    \   }\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString\n        result + (if (digits.size == base)\
    \ \"\" else \"0\" * (base - digits.size))", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") {\n            case(acc, digit)\
    \ => acc + digit.drop(base).reverse\n        }\n        result + digits.reverse.takeWhile(_\
    \ != '0').mkString", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") { (result, digit) =>\n   \
    \         val digitString = digit.toString\n            val newDigitString = digitString.substring(0,\
    \ digitString.length - 1) + digitString.substring(digitString.length - 1)\n  \
    \          result += newDigitString\n        }\n        result", "        val\
    \ digits = x.toString.reverse.grouped(base).toList\n        val result = digits.reverse.foldLeft(\"\
    \")(_ + _)\n        result + digits.reverse.takeWhile(_ < base).reverse.mkString",
  "        val digits = x.toString.reverse.grouped(base).toList\n        val result\
    \ = digits(0)\n        val digit = digits(1)\n        val baseDigit = digits(2)\n\
    \        val newBase = digits(3).toString.reverse.grouped(base).toList\n     \
    \   val newDigit = newBase(0)\n        val newBaseDigit = newBase(1)\n       \
    \ val newDigitDigit = newBase(2)\n        val newBaseDigitDigit = newBase(3)\n\
    \        val newBaseDigitDigitDigit = newBase(4)\n        val newBaseDigitDigitDigitDigit\
    \ = newBase(5)\n        val newBaseDigitDigitDigitDigitDigit = newBase(6)\n  \
    \      val newBaseDigitDigitDigitDigitDigitDigit = newBase(7)\n        val newBaseDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(8)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigit =\
    \ newBase(9)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(10)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(11)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(12)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(13)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(14)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(15)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(16)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(17)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(18)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(19)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(20)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(21)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(22)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(23)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(24)\n        val newBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = newBase(25)\n        val newBaseDigitDigitDigitDigitDigit", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n        val result\
    \ = digits.reverse.mkString(\"\")\n        result + (if (result == \"0\") \"1\"\
    \ else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        digits.reverse.mkString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else s\"${digits.last}\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ < 10) \"0\" + base.toString else base.toString\n        result + baseString",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result == \"\
    0\") \"-\" else \"\")", "        val bases = List('0', '1', '2', '3', '4', '5',\
    \ '6', '7', '8', '9')\n        val digits = List('0', '1', '2', '3', '4', '5',\
    \ '6', '7', '8', '9')\n        val digits_base = digits.zip(bases)\n        val\
    \ digits_base_sorted = digits_base.sortBy(_._1).reverse\n        val digits_base_sorted_reverse\
    \ = digits_base_sorted.reverse\n        val digits_base_sorted_reverse2 = digits_base_sorted_reverse.tail\n\
    \        val digits_base_sorted_reverse3 = digits_base_sorted_reverse2.tail\n\
    \        val digits_base_sorted_reverse4 = digits_base_sorted_reverse3.tail\n\
    \        val digits_base_sorted_reverse5 = digits_base_sorted_reverse4.tail\n\
    \        val digits_base_sorted_reverse6 = digits_base_sorted_reverse5.tail\n\
    \        val digits_base_sorted_reverse7 = digits_base_sorted_reverse6.tail\n\
    \        val digits_base_sorted_reverse8 = digits_base_sorted_reverse7.tail\n\
    \        val digits_base_sorted_reverse9 = digits_base_sorted_reverse8.tail\n\
    \        val digits_base_sorted_reverse10 = digits_base_sorted_reverse9.tail\n\
    \        val digits_base_sorted_reverse11 = digits_base_sorted_reverse10.tail\n\
    \        val digits_base_sorted_reverse12 = digits_base_sorted_reverse11.tail\n\
    \        val digits_base_sorted_reverse13 = digits_base_sorted_reverse12.tail\n\
    \        val digits_base_sorted_reverse14 = digits_base_sorted_reverse13.tail\n\
    \        val digits_base_sorted_reverse15 = digits_base_sorted_reverse14.tail\n\
    \        val digits_base_sorted_reverse16 = digits_base_sorted_reverse15.tail\n\
    \        val digits_base_sorted_reverse17 = digits_base_sorted_reverse16.tail\n\
    \        val digits_base_sorted_reverse18 = digits_base_sorted_reverse17.tail\n\
    \        val digits_base_sorted_reverse19 = digits_base_sorted_reverse18.tail\n\
    \        val digits_base_sorted_reverse20 = digits_base_sorted_reverse19.tail\n\
    \        val digits_base_sorted_reverse21 = digits_base_sorted_reverse20.tail\n\
    \        val digits_base_sorted_reverse22 = digits_base_sorted_reverse21.tail\n\
    \        val digits_base_sorted_reverse23 = digits_base_sorted_reverse22.tail\n\
    \        val digits_base_sorted_reverse24 = digits_base_sorted_reverse23.tail\n\
    \        val digits_base_sorted_reverse25 = digits_base_sorted_reverse24.tail\n\
    \        val digits_base_sorted_reverse26 = digits_base_sorted_reverse25.tail\n\
    \        val digits_base_sorted_reverse27 = digits_base_sorted_reverse", "   \
    \     val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (x < base) \"\
    \" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result == \"\
    0\") \"1\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) 0 else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \"0\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits(0)\n        val remainder = digits(1)\n        val\
    \ digit = remainder.toString.reverse.grouped(base).toList\n        val remainderString\
    \ = digits(1)\n        val remainderDigit = remainderString.reverse.grouped(base).toList\n\
    \        val remainderDigitString = digits(1)\n        val remainderDigitString2\
    \ = remainderDigitString.reverse.grouped(base).toList\n        val remainderDigitString3\
    \ = remainderDigitString2.reverse.grouped(base).toList\n        val remainderDigitString4\
    \ = remainderDigitString3.reverse.grouped(base).toList\n        val remainderDigitString5\
    \ = remainderDigitString4.reverse.grouped(base).toList\n        val remainderDigitString6\
    \ = remainderDigitString5.reverse.grouped(base).toList\n        val remainderDigitString7\
    \ = remainderDigitString6.reverse.grouped(base).toList\n        val remainderDigitString8\
    \ = remainderDigitString7.reverse.grouped(base).toList\n        val remainderDigitString9\
    \ = remainderDigitString8.reverse.grouped(base).toList\n        val remainderDigitString10\
    \ = remainderDigitString9.reverse.grouped(base).toList\n        val remainderDigitString11\
    \ = remainderDigitString10.reverse.grouped(base).toList\n        val remainderDigitString12\
    \ = remainderDigitString11.reverse.grouped(base).toList\n        val remainderDigitString13\
    \ = remainderDigitString12.reverse.grouped(base).toList\n        val remainderDigitString14\
    \ = remainderDigitString13.reverse.grouped(base).toList\n        val remainderDigitString15\
    \ = remainderDigitString14.reverse.grouped(base).toList\n        val remainderDigitString16\
    \ = remainderDigitString15.reverse.grouped(base).toList\n        val remainderDigitString17\
    \ = remainderDigitString16.reverse.grouped(base).toList\n        val remainderDigitString18\
    \ = remainderDigitString17.reverse.grouped(base).toList\n        val remainderDigitString19\
    \ = remainderDigitString18.reverse.grouped(base).toList\n        val remainderDigitString20\
    \ = remainderDigitString19.reverse.grouped(base).toList\n        val remainderDigitString21\
    \ = remainderDigitString20.reverse.grouped(base).toList", "        val digits\
    \ = x.toString.reverse.grouped(base).toList\n        val result = digits.reverse.mkString(\"\
    \")\n        result + if (digits.size == 1) \"0\" else \"\"", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base) \"\
    \" else base.toChar)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (x < base) \"\
    \" else \"\" + base.toString.charAt(base.toString.length - 1))", "        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n        val\
    \ result = digits.reverse.mkString\n        result + (if (digits.isEmpty) \"\"\
    \ else base.toChar)", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val result = result.reverse\n\
    \        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        digits.tail.foldLeft(result)\
    \ { case (acc, digit) => acc + digit }", "        val bases = List('0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9')\n        val digits = List('0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9')\n        val digits_pow = digits.map(x =>\
    \ bases.indexOf(x) * base)\n        val digits_pow_sorted = digits_pow.sorted\n\
    \        val digits_pow_sorted_reversed = digits_pow_sorted.reverse\n        val\
    \ digits_pow_sorted_reversed_reversed = digits_pow_sorted_reversed.reverse\n \
    \       val digits_pow_sorted_reversed_reversed_reversed = digits_pow_sorted_reversed_reversed.reverse\n\
    \        val digits_pow_sorted_reversed_reversed_reversed_reversed = digits_pow_sorted_reversed_reversed_reversed.reverse\n\
    \        val digits_pow_sorted_reversed_reversed_reversed_reversed_reversed =\
    \ digits_pow_sorted_reversed_reversed_reversed_reversed.reverse\n        val digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_pow_sorted_reversed_reversed_reversed_reversed_reversed.reverse\n \
    \       val digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \        val digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \        val digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \        val digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \        val digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse\n\
    \        val digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = digits_pow_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse",
  "        val bases = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\")\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits match {\n            case Nil => \"\"\n         \
    \   case head :: tail => head + changeBase(tail, base)\n        }\n        bases(base).toString\
    \ + result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result == \"\
    0\") \"1\" else \"\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val len = result.length\n\
    \        val digit = result.charAt(len-1)\n        if(digit < '0' || digit > '9')\
    \ \"0\"\n        else result", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + digits.reverse.drop(base).mkString(\"\
    \")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" else \"\"\n        result + baseString", "        val digits =\
    \ x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString\n        val baseString = if (base == 10) \"0\" else\
    \ \"\"\n        result + baseString", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + (if\
    \ (digits.isEmpty) \"\" else base)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val result = result.substring(0,\
    \ result.length - base)\n        result", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val baseString =\
    \ if (base < 10) \"0\" + base.toString\n        else base.toString\n        result",
  "        val digits = x.toString.reverse.grouped(base).toList\n        val result\
    \ = new StringBuilder\n        for(i <- 0 until digits.size) {\n            val\
    \ digit = digits(i)\n            val digitString = digit.toString\n          \
    \  val digitBase = digitString.reverse.grouped(base).toList\n            val digitBaseString\
    \ = digitBase.reverse.mkString(\"\")\n            result.append(digitBaseString)\n\
    \        }\n        result.toString", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val baseString =\
    \ base.pow(digits.size)\n        val result = result * baseString\n        return\
    \ result", "        val digits = x.toString.reverse.grouped(base).toList\n   \
    \     val result = digits.reverse.mkString(\"\")\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digits = digits.tail\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val digit = digits.head\n\
    \        val digits = digits.tail\n        val digit = digits.head\n        val\
    \ digits = digits.tail\n        val digit = digits.head\n        val digits =\
    \ digits.tail\n        val digit = digits.head\n        val digits = digits.tail\n\
    \        val digit = digits.head\n        val digit", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ < 10) \"0\" + base.toString else base.toString\n        result", "        val\
    \ digits = x.toString.reverse.grouped(base).toList\n        val result = digits.reverse.foldLeft(\"\
    \")(_ + _)\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        digits.tail.foldLeft(result)((acc,\
    \ x) => acc + x)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) 0 else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) \"\" else \"\" + x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse.mkString(\"\
    \"))", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" else \"\"\n        result + baseString", "        val digits =\
    \ x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size < base) \"\
    \" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" else \"\"\n        result + baseString", "        val digits =\
    \ x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (x < base) \"\" else \"\
    \")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else base.toString.toInt)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ < base) \"\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val newBase = digits.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val newDigits = newBase.mkString(\"\")\n        val newResult = newDigits.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        result + newResult", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits(0)\n        val rest = digits(1).toString.reverse.grouped(base).toList\n\
    \        val restLength = rest.length\n        val restStrings = rest.map(_.reverse).reverse\n\
    \        val restStringsLength = restStrings.length\n        val restStringsStrings\
    \ = restStrings.map(_.reverse).reverse\n        val restStringsStringsLength =\
    \ restStringsStrings.length\n        val restStringsStringsStringsLength = restStringsStringsStrings.length\n\
    \        val restStringsStringsStringsStringsLength = restStringsStringsStringsStrings.length\n\
    \        val restStringsStringsStringsStringsStringsLength = restStringsStringsStringsStringsStringsLength\n\
    \        val restStringsStringsStringsStringsStringsStringsLength = restStringsStringsStringsStringsStringsStringsLength\n\
    \        val restStringsStringsStringsStringsStringsStringsStringsLength = restStringsStringsStringsStringsStringsStringsStringsLength\n\
    \        val restStringsStringsStringsStringsStringsStringsStringsStringsLength\
    \ = restStringsStringsStringsStringsStringsStringsStringsStringsLength\n     \
    \   val restStringsStringsStringsStringsStringsStringsStringsStringsStringsLength\
    \ = restStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsLength\n\
    \        val restStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsLength\
    \ = restStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsLength\n\
    \        val restStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsLength\
    \ = restStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsLength\n\
    \        val restStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsLength\
    \ = restStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsLength\n\
    \        val restStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsStringsString",
  "        val digits = x.toString.reverse.grouped(base).toList\n        val result\
    \ = digits.reverse.foldLeft(\"\") { (acc, digit) => acc + digit }\n        return\
    \ result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (result\
    \ == \"0\") \"1\" else \"\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        val result\
    \ = result.dropRight(base * digits.size).reverse\n        result + digits.reverse.take(digits.size).mkString(\"\
    \")", "        var result : String = \"\"\n        var remainder : Long = x /\
    \ base\n        var quotient : Long = x % base\n        while (remainder > 0)\
    \ {\n            result += quotient.toString\n            remainder = remainder\
    \ - base\n            quotient = quotient / base\n        }\n        result +=\
    \ quotient.toString\n        return result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" + base.toString\n        else base.toString\n        result", " \
    \       val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString\n        result + (if (result == \"0\")\
    \ \"\" else base)", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + (if\
    \ (digits.isEmpty) \"\" else digits(base))", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits(0)\n        digits.tail.foreach(x => result = result\
    \ + x.toString.reverse)\n        result", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") {\n            (acc, digit)\
    \ => acc + (digit.reverse.drop(base).reverse)\n        }\n        return result",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result == \"\
    0\") \"1\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString\n        result + (if (result ==\
    \ \"0\") \"-\" else \"\")", "        val bases = List(\"10\", \"11\", \"12\",\
    \ \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\"\
    , \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\")\n  \
    \      val digits = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\")\n        val digits2 = List(\"0\", \"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\
    )\n        val digits3  = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"\
    , \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\"\
    , \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n        val digits_4 = List(\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"\
    M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"\
    X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val digits_5 = List(\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"\
    M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"\
    X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"\
    P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) 0 else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" else \"\"\n        result + baseString", "        val digits =\
    \ x.toString.reverse.grouped(base).toList\n        val result = new StringBuilder\n\
    \        digits.reverse.foreach(x => result.append(x.reverse))\n        result.toString",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else digits(base))", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        val result\
    \ = result.dropRight(base).reverse\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ < 10) \"0\" + base.toString\n        else base.toString\n        result + baseString",
  "        val digits = x.toString.reverse.grouped(base).toList\n        val result\
    \ = digits.reverse.mkString(\"\")\n        val digit = digits.head\n        val\
    \ rest = digits.tail\n        val restString = rest.mkString(\"\")\n        val\
    \ restDigit = rest.toString.reverse.grouped(base).toList\n        val restResult\
    \ = restDigit.reverse.mkString(\"\")\n        val restResultString = restResult.mkString(\"\
    \")\n        val restResultDigit = restResult.toString.reverse.grouped(base).toList\n\
    \        val restResultDigitString = restResultDigit.mkString(\"\")\n        val\
    \ restResultDigitStringLength = restResultDigitString.length\n        val restResultDigitStringLength\
    \ = restResultDigitString.length\n        val restResultDigitStringLength = restResultDigitString.length\n\
    \        val restResultDigitStringLength = restResultDigitString.length\n    \
    \    val restResultDigitStringLength = restResultDigitString.length\n        val\
    \ restResultDigitStringLength = restResultDigitString.length\n        val restResultDigitStringLength\
    \ = restResultDigitString.length\n        val restResultDigitStringLength = restResultDigitString.length\n\
    \        val restResultDigitStringLength = restResultDigitString.length\n    \
    \    val restResultDigitStringLength = restResultDigitString.length\n        val\
    \ restResultDigitStringLength = restResultDigitString.length\n        val restResultDigitStringLength\
    \ = restResultDigitString.length\n        val restResultDigitStringLength = restResultDigitString.length\n\
    \        val restResultDigitStringLength = restResultDigitString.length\n    \
    \    val restResultDigitStringLength = restResultDigitString.length\n        val\
    \ restResultDigitStringLength = restResultDigitString.length\n        val restResultDigitStringLength\
    \ = restResultDigitString.length\n        val restResultDigitStringLength = restResultDigitString.length\n\
    \        val restResultDigitStringLength = restResultDigitString.length\n    \
    \    val restResultDigitStringLength = restResultDigitString.length\n        val\
    \ restResultDigitStringLength = restResultDigitString.length\n        val restResultDigitStringLength\
    \ = restResultDigitString.length\n        val restResultDigitStringLength = restResultDigitString.length\n\
    \        val restResultDigitStringLength = restResultDigitString.length\n    \
    \    val restResultDigitStringLength = restResultDigitString.length\n        val\
    \ restResultDigitStringLength = restResultDigitString.length\n        val restResultDigitStringLength\
    \ = restResultDigitString.length\n        val restResultDigitStringLength = restResultDigitString.length\n\
    \        val restResultDigitStringLength = restResultDigitString.length\n    \
    \    val restResultDigitStringLength = restResultDigitString.length", "      \
    \  val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result == \"\
    0\") \"1\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString\n        result + (if (digits.size == base)\
    \ \"\" else s\"$base\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val baseString =\
    \ if (base < 10) \"0\" + base.toString\n        else base.toString\n        result\
    \ + baseString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits == Nil) \"\" else digits.mkString(\"\")\n   \
    \     result", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") { (result, digit) => result\
    \ + digit.toString}\n        result + digits.reverse.takeWhile(_ != '0').mkString(\"\
    \")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        digits.reverse.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = new StringBuilder\n        digits.foreach(x => result.append(x.reverse))\n\
    \        result.toString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else base.toChar)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        digits.tail.foldLeft(result){\
    \ (acc, digit) => acc + digit }", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val result = result.substring(0,\
    \ result.length - base)\n        result", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") { (result, digit) =>\n   \
    \         val digitString = digit.toString\n            val newDigitString = digitString.substring(0,\
    \ digitString.length - 1)\n            result + newDigitString\n        }\n  \
    \      result", "        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = digits.foldLeft(\"\")(_ + _)\n        result + digits.last",
  "        val bases = List(\"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"30\", \"31\")\n        val digits = List(\"0\", \"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val digits_map\
    \ = Map(digits -> bases)\n        val digits_map_reverse = Map(bases -> digits)\n\
    \        val digits_map_reverse2 = Map(digits -> bases)\n        val digits_map_reverse3\
    \ = Map(bases -> digits)\n        val digits_map_reverse4 = Map(digits -> bases)\n\
    \        val digits_map_reverse5 = Map(digits -> bases)\n        val digits_map_reverse6\
    \ = Map(digits -> bases)\n        val digits_map_reverse7 = Map(digits -> bases)\n\
    \        val digits_map_reverse8 = Map(digits -> bases)\n        val digits_map_reverse9\
    \ = Map(digits -> bases)\n        val digits_map_reverse10 = Map(digits -> bases)\n\
    \        val digits_map_reverse11 = Map(digits -> bases)\n        val digits_map_reverse12\
    \ = Map(digits -> bases)\n        val digits_map_reverse13 = Map(digits -> bases)\n\
    \        val digits_map_reverse14 = Map(digits -> bases)\n        val digits_map_reverse15\
    \ = Map(digits -> bases)\n        val digits_map_reverse16 = Map(digits -> bases)\n\
    \        val digits_map_reverse17 = Map(digits -> bases)\n        val digits_map_reverse18\
    \ = Map(digits -> bases)\n        val digits_map_reverse19 = Map(digits -> bases)\n\
    \        val digits_map_reverse20 = Map(digits -> bases)\n        val digits_map_reverse21\
    \ = Map(digits -> bases)\n        val digits_map_reverse22 = Map(digits -> bases)\n\
    \        val digits_map_reverse23 = Map(digits -> bases)\n        val digits_map_reverse24\
    \ = Map(digits -> bases)\n        val digits_map_reverse25 = Map(digits -> bases)\n\
    \        val digits_map_reverse26 = Map(digits -> bases)\n        val digits_map_reverse27\
    \ = Map(digits -> bases)\n        val digits_map_reverse28 = Map(digits -> bases)\n\
    \        val digits_map_reverse29 = Map(digits -> bases)\n        val digits_map_reverse30\
    \ = Map(digits -> bases)\n        val digits_map_reverse31 = Map(digits -> bases)\n\
    \        val digit", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString\n        result + (if (digits.size == base)\
    \ \"\" else (base.toInt - digits.size)*base)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) {\n            \"0\"\n        } else {\n            \"\" + base\n   \
    \     }\n        result + baseString", "        var result = \"\"\n        var\
    \ remainder = x % base\n        var quotient = x / base\n        while (quotient\
    \ > 0) {\n            result += quotient.toString\n            quotient = quotient\
    \ / base\n        }\n        if (remainder > 0) {\n            result += remainder.toString\n\
    \        }\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ < 10) \"0\" + base.toString else base.toString\n        result + baseString",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + if (digits.size\
    \ < base) \"\" else changeBase(digits.tail, base)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) \"\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val digit = digits.last\n\
    \        val digits = digits.dropRight(1)\n        val digit = digits.last\n \
    \       val digits = digits.dropRight(1)\n        val digit = digits.last\n  \
    \      val digits = digits.dropRight(1)\n        val digit = digits.last\n   \
    \     val digits = digits.dropRight(1)\n        val digit = digits.last\n    \
    \    val digits = digits.dropRight(1)\n        val digit = digits.last\n     \
    \   val digits = digits.dropRight(1)\n        val digit = digits.last\n      \
    \  val digits = digits.dropRight(1)\n        val digit = digits.last\n       \
    \ val digits = digits.dropRight(1)\n        val digit = digits.last\n        val\
    \ digits = digits.dropRight(1)\n        val digit = digits.last\n        val digits\
    \ = digits.dropRight(1)\n        val digit = digits.last\n        val digits =\
    \ digits.dropRight(1)\n        val digit = digits.last\n        val digits = digits.dropRight(1)\n\
    \        val digit = digits.last\n        val digits = digits.dropRight(1)\n \
    \       val digit = digits.last\n        val digits = digits.dropRight(1)\n  \
    \      val digit = digits.last\n        val digits = digits.dropRight(1)\n   \
    \     val digit = digits.last\n        val digits = digits.dropRight(1)\n    \
    \    val digit = digits.last\n        val digits = digits.dropRight(1)\n     \
    \   val digit = digits.last\n        val digits = digits.dropRight(1)\n      \
    \  val digit = digits.last\n        val digits = digits.dropRight(1)\n       \
    \ val digit = digits.last\n        val digits = digits.dropRight(1)\n        val\
    \ digit = digits.last\n        val digits = digits.dropRight(1)\n        val digit\
    \ = digits.last\n        val digits = digits.dropRight(1)\n        val digit =\
    \ digits.last\n        val digits = digits.dropRight(1)\n        val digit = digits.last\n\
    \        val digits = digits.dropRight(1)\n        val digit = digits.last\n \
    \       val digits = digits.dropRight(1)\n        val digit = digits.last\n  \
    \      val digits = digits.dropRight(1)\n        val digit = digits.last\n   \
    \     val digits = digits.dropRight(1)\n        val digit = digits.last\n    \
    \    val digits = digits.dropRight(1)\n        val digit = digits.last\n     \
    \   val digits = digits.dropRight(1)\n        val digit = digits.last\n      \
    \  val digits = digits.dropRight(1)\n        ", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString\n        val length = result.length\n\
    \        val zeros = Array(0 until length).map(x => if (x == 0) \"0\" else \"\"\
    )\n        val result = zeros ++ result\n        result", "        val digits\
    \ = x.toString.reverse.grouped(base).toList\n        val result = digits.reverse.mkString(\"\
    \")\n        result + (if (result.length < base) \"\" else \"\")", "        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n  \
    \      val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) 0 else \"\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else base.toString.reverse.mkString(\"\"))", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (result.length\
    \ < base) \"\" else \"\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n        val result\
    \ = result.substring(0, result.length - base)\n        val result = result.substring(0,\
    \ result.length - base)\n        val result = result.substring(0, result.length\
    \ - base)\n        val result = result.substring(0, result.length - base)\n  \
    \      val result = result.substring(0, result.length - base)\n", "        val\
    \ digits = x.toString.reverse.grouped(base).toList\n        val result = digits.reverse.foldLeft(\"\
    \") {\n            case (acc, digit) => acc + (digit.reverse.foldLeft(\"\") {\n\
    \                case (acc, digit) => acc + (digit.toString)\n            })\n\
    \        }\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \"0\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val len = result.length\n\
    \        if (len > base) {\n            val tmp = result.substring(0, len - base)\n\
    \            val tmp2 = tmp.substring(tmp.length - (len - base))\n           \
    \ val tmp3 = tmp2.reverse.grouped(base.toInt).map(_.mkString).reverse\n      \
    \      val tmp4 = tmp3.mkString(\"\")\n            tmp4 + tmp\n        } else\
    \ {\n            result\n        }", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val digit = digits.last\n\
    \        val digits = digits.dropRight(1)\n        val digit = digits.last\n \
    \       val digits = digits.dropRight(1)\n        val digit = digits.last\n  \
    \      val digits = digits.dropRight(1)\n        val digit = digits.last\n   \
    \     val digits = digits.dropRight(1)\n        val digit = digits.last\n    \
    \    val digits = digits.dropRight(1)\n        val digit = digits.last\n     \
    \   val digits = digits.dropRight(1)\n        val digit = digits.last\n      \
    \  val digits = digits.dropRight(1)\n        val digit = digits.last\n       \
    \ val digits = digits.dropRight(1)\n        val digit = digits.last\n        val\
    \ digits = digits.dropRight(1)\n        val digit = digits.last\n        val digits\
    \ = digits.dropRight(1)\n        val digit = digits.last\n        val digits =\
    \ digits.dropRight(1)\n        val digit = digits.last\n        val digits = digits.dropRight(1)\n\
    \        val digit = digits.last\n        val digits = digits.dropRight(1)\n \
    \       val digit = digits.last\n        val digits = digits.dropRight(1)\n  \
    \      val digit = digits.last\n        val digits = digits.dropRight(1)\n   \
    \     val digit = digits.last\n        val digits = digits.dropRight(1)\n    \
    \    val digit = digits.last\n        val digits = digits.dropRight(1)\n     \
    \   val digit = digits.last\n        val digits = digits.dropRight(1)\n      \
    \  val digit = digits.last\n        val digits = digits.dropRight(1)\n       \
    \ val digit = digits.last\n        val digits = digits.dropRight(1)\n        val\
    \ digit = digits.last\n        val digits = digits.dropRight(1)\n        val digit\
    \ = digits.last\n        val digits = digits.dropRight(1)\n        val digit =\
    \ digits.last\n        val digits = digits.dropRight(1)\n        val digit = digits.last\n\
    \        val digits = digits.dropRight(1)\n        val digit = digits.last\n \
    \       val digits = digits.dropRight(1)\n        val digit = digits.last\n  \
    \      val digits = digits.dropRight(1)\n        val digit = digits.last\n   \
    \     val digits = digits.dropRight(1)\n        val digit = digits.last\n    \
    \    val digits = digits.dropRight(1)\n        val digit = digits.last\n     \
    \   val digits = digits.dropRight(1)\n        val digit = digits.last\n      \
    \  val digits = digits.dropRight(1)\n        ", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else digits(base))", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + digits.reverse.takeWhile(_\
    \ < base).reverse.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (x < base) \"\
    \" else \"\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits(0)\n        val remainder = digits(1)\n        val\
    \ remainderDigits = remainder.toString.reverse.grouped(base).toList\n        val\
    \ remainderResult = remainderDigits(0)\n        val remainderRemainder = remainderDigits(1)\n\
    \        val remainderRemainderDigits = remainderRemainder.toString.reverse.grouped(base).toList\n\
    \        val remainderRemainderResult = remainderRemainderDigits(0)\n        val\
    \ remainderRemainderRemainder = remainderRemainderDigits(1)\n        val remainderRemainderRemainderDigits\
    \ = remainderRemainderRemainder.toString.reverse.grouped(base).toList\n      \
    \  val remainderRemainderRemainderResult = remainderRemainderRemainderDigits(0)\n\
    \        val remainderRemainderRemainderRemainder = remainderRemainderRemainderDigits(1)\n\
    \        val remainderRemainderRemainderRemainderDigits = remainderRemainderRemainderRemainder.toString.reverse.grouped(base).toList\n\
    \        val remainderRemainderRemainderRemainderResult = remainderRemainderRemainderRemainderDigits(0)\n\
    \        val remainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainderDigits(1)\n\
    \        val remainderRemainderRemainderRemainderRemainderDigits = remainderRemainderRemainderRemainderRemainder.toString.reverse.grouped(base).toList\n\
    \        val remainderRemainderRemainderRemainderRemainderResult = remainderRemainderRemainderRemainderRemainderDigits(0)\n\
    \        val remainderRemainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainderRemainderDigits(1)\n\
    \        val remainderRemainderRemainderRemainderRemainderRemainderDigits = remainderRemainderRemainderRemainderRemainderRemainderRemainder.toString.reverse.grouped(base).toList\n\
    \        val remainderRemainderRemainderRemainderRemainderResult = remainderRemainderRemainderRemainderRemainderRemainderDigits(0)\n\
    \        val remainderRemainderRemainderRemainderRemainderRemainder = remainderRemainderRemainderRemainderRemainderRemainderDigits(1)\n\
    \        val remainderRemainderRemainderRemainderRemainderRemainderDigits = remainderRemainderRemainderRemainderRemainderRemainderRemainder.toString.reverse.grouped(base).toList\n\
    \        val remainder", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else base.toString.charAt(digits.length - 1))", "        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = digits.map(_.mkString).reverse.mkString\n        result\
    \ + if (x < base) \"\" else changeBase(x - base.toInt, base)", "        val bases\
    \ = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    )\n        val digits = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\",\
    \ \"7\", \"8\", \"9\")\n        val digits2 = List(\"0\", \"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\")\n        val digits3  = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val digits_4\
    \ = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    , \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"\
    , \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\"\
    , \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n        val digits_5\
    \ = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    , \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"\
    , \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\"\
    , \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"\
    , \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\"\
    , \"V\", \"W\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\
    , \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\"\
    , \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n        val\
    \ digit", "        val digits = x.toString.reverse.grouped(base).toList\n    \
    \    val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + digits.reverse.takeWhile(_\
    \ < base).reverse.mkString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val length = result.length\n\
    \        val zeros = length - (result.length / base)\n        val zeroChar = if\
    \ (zeros > 0) \"0\"\n        else \"\"\n        val result = zeroChar + result\n\
    \        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (result.length\
    \ < base) 0 else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else base.toString.charAt(base.toString.length - digits.size))",
  "        val digits = x.toString.reverse.grouped(base).toList\n        val result\
    \ = digits.reverse.mkString(\"\")\n        val digit = digits.head\n        val\
    \ remainder = digits.tail.foldLeft(0)((acc, digit) => acc * base + digit)\n  \
    \      val remainderString = remainder.toString.reverse.grouped(base).toList.reverse.mkString(\"\
    \")\n        val remainderString = remainderString.reverse.mkString(\"\")\n  \
    \      val resultString = result + remainderString\n        resultString", " \
    \       val digits = x.toString.reverse.grouped(base.toInt)\n        val result\
    \ = new StringBuilder\n        digits.foreach(x => result.append(x.reverse))\n\
    \        result.toString", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") { (acc, digit) =>\n      \
    \      acc + (digit.reverse.drop(base).reverse)\n        }\n        result", " \
    \       val digits = x.toString.reverse.grouped(base).toList\n        val result\
    \ = digits.reverse.foldLeft(\"\") {\n            (acc, digit) => acc + (digit.drop(base).reverse)\n\
    \        }\n        return result.reverse", "        var res = \"\"\n        var\
    \ i = 0\n        while (i < x.length) {\n            var digit = x(i) - 48\n \
    \           if (digit < base) {\n                digit += base\n            }\n\
    \            res += digit.toString\n            i += 1\n        }\n        return\
    \ res", "        val digits = x.toString.reverse.grouped(base).toList\n      \
    \  val result = digits.reverse.foldLeft(\"\")(_ + _)\n        return result",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" else \"\"\n        result + baseString", "        val digits =\
    \ x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = if (digits == Nil) \"\" else digits.head\n        result + (if (digits.tail.isEmpty)\
    \ \"\" else digits.tail.mkString(\"\"))", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result == \"\
    0\") \"1\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        val baseString =\
    \ if (base == 10) \"0\" else \"\" + base\n        result + baseString", "    \
    \    val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else (base.toString.reverse.grouped(base.toInt).map(_.mkString).reverse.mkString(\"\
    \")))", "        val digits = x.toString.reverse.grouped(base).toList\n      \
    \  val result = digits.reverse.mkString(\"\")\n        val digit = digits.last\n\
    \        val remainder = digits.dropRight(1)\n        val remainderString = remainder.mkString(\"\
    \")\n        val remainderString = remainderString.reverse.mkString(\"\")\n  \
    \      val remainderString = remainderString.reverse.mkString(\"\")\n        val\
    \ remainderString = remainderString.reverse.mkString(\"\")\n        val remainderString\
    \ = remainderString.reverse.mkString(\"\")\n        val remainderString = remainderString.reverse.mkString(\"\
    \")\n        val remainderString = remainderString.reverse.mkString(\"\")\n  \
    \      val remainderString = remainderString.reverse.mkString(\"\")\n        val\
    \ remainderString = remainderString.reverse.mkString(\"\")\n        val remainderString\
    \ = remainderString.reverse.mkString(\"\")\n        val remainderString = remainderString.reverse.mkString(\"\
    \")\n        val remainderString = remainderString.reverse.mkString(\"\")\n  \
    \      val remainderString = remainderString.reverse.mkString(\"\")\n        val\
    \ remainderString = remainderString.reverse.mkString(\"\")\n        val remainderString\
    \ = remainderString.reverse.mkString(\"\")\n        val remainderString = remainderString.reverse.mkString(\"\
    \")\n        val remainderString = remainderString.reverse.mkString(\"\")\n  \
    \      val remainderString = remainderString.reverse.mkString(\"\")\n        val\
    \ remainderString = remainderString.reverse.mkString(\"\")\n        val remainderString\
    \ = remainderString.reverse.mkString(\"\")\n        val remainderString = remainderString.reverse.mkString(\"\
    \")\n        val remainderString = remainderString.reverse.mkString(\"\")\n  \
    \      val remainderString = remainderString.reverse.mkString(\"\")\n        val\
    \ remainderString = remainderString.reverse.mkString(\"\")\n        val remainderString\
    \ = remainderString.reverse.mkString(\"\")\n        val remainderString = remainderString.reverse.mkString(\"\
    \")\n        val remainderString = remainderString.reverse.mkString(\"\")\n  \
    \      val remainderString = remainderString.reverse.mkString(\"\")\n        val\
    \ remainderString = remainderString.reverse.mkString(\"\")\n        val remainderString\
    \ = remainderString.reverse.mkString(\"\")\n        val remainderString = remainderString.reverse.mkString(\"\
    \")\n        val remainderString = remainderString.reverse.mkString(\"\")\n  \
    \      val remainderString = remainderString.reverse.mkString(\"\")\n        val\
    \ remainderString = remainderString.reverse.mk", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") {\n            case (acc,\
    \ digit) => acc + (digit.drop(base).reverse)\n        }\n        result", "  \
    \      val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" else \"\"\n        result + baseString", "        var result :\
    \ String = \"\"\n        var remainder : Long = 0\n        var quotient : Long\
    \ = 0\n        var remainder2 : Long = 0\n        var quotient2 : Long = 0\n \
    \       var remainder3 : Long = 0\n        var quotient3 : Long = 0\n        var\
    \ remainder4 : Long = 0\n        var quotient4 : Long = 0\n        var remainder5\
    \ : Long = 0\n        var quotient5 : Long = 0\n        var remainder6 : Long\
    \ = 0\n        var quotient6 : Long = 0\n        var remainder7 : Long = 0\n \
    \       var quotient7 : Long = 0\n        var remainder8 : Long = 0\n        var\
    \ quotient8 : Long = 0\n        var remainder9 : Long = 0\n        var quotient9\
    \ : Long = 0\n        var remainder10 : Long = 0\n        var quotient10 : Long\
    \ = 0\n        var remainder11 : Long = 0\n        var quotient11 : Long = 0\n\
    \        var remainder12 : Long = 0\n        var quotient12 : Long = 0\n     \
    \   var remainder13 : Long = 0\n        var quotient13 : Long = 0\n        var\
    \ remainder14 : Long = 0\n        var quotient14 : Long = 0\n        var remainder15\
    \ : Long = 0\n        var quotient15 : Long = 0\n        var remainder16 : Long\
    \ = 0\n        var quotient16 : Long = 0\n        var remainder17 : Long = 0\n\
    \        var quotient17 : Long = 0\n        var remainder18 : Long = 0\n     \
    \   var quotient18 : Long = 0\n        var remainder19 : Long = 0\n        var\
    \ quotient19 : Long = 0\n        var remainder20 : Long = 0\n        var quotient20\
    \ : Long = 0\n        var remainder21 : Long = 0\n        var quotient21 : Long\
    \ = 0\n        var remainder22 : Long = 0\n        var quotient22 : Long = 0\n\
    \        var remainder23 : Long = 0\n        var quotient23 : Long = 0\n     \
    \   var remainder24 : Long = 0\n        var quotient24 : Long = 0\n        var\
    \ remainder25 : Long = 0\n        var quotient25 : Long = 0\n        var remainder26\
    \ : Long = 0\n        var quotient26 : Long = 0\n        var remainder27 : Long\
    \ = 0\n        var quotient27 : Long = 0\n        var remainder28 : Long = 0\n\
    \        var quotient28 : Long = 0\n        var remainder29 : Long = 0\n     \
    \   var quotient29 : Long = 0\n        var remainder30 : Long = 0\n        var\
    \ quotient30 : Long = 0\n        var remainder31 : Long = 0\n        var quotient31\
    \ : Long = 0\n        var remainder32 : Long = 0\n        var quotient32 : Long\
    \ = 0\n        var ", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result", " \
    \       val digits = x.toString.reverse.grouped(base).toList\n        val result\
    \ = digits(0)\n        val rest = digits(1)\n        val digit = rest match {\n\
    \            case Nil => \"\"\n            case x => x.toString\n        }\n \
    \       val newBase = digits.length - base\n        val newDigit = digit.substring(0,\
    \ newBase)\n        val newRest = digit.substring(newBase)\n        result + newDigit\
    \ + newRest", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val length = result.length\n\
    \        val zeros = length - (result.length - base)\n        val zeroChar = if\
    \ (zeros > 0) \"0\" else \"\"\n        val result = result + zeroChar\n      \
    \  result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) \"\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else base.toChar)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        val len = result.length\n\
    \        val zeros = len % base\n        val zero = if (zeros == 0) \"\" else\
    \ new StringBuilder(zeros).reverse.insert(len - zeros, \"0\").toString\n     \
    \   result + zero", "        val bases = List(10, 8, 7, 6)\n        val digits\
    \ = x.toString.reverse.grouped(base).toList\n        val result = bases.map(x\
    \ => digits.map(y => y * x).sum).sum\n        val str = result.toString\n    \
    \    val len = str.length\n        val zeros = len - base\n        val zero =\
    \ if (zeros > 0) zeros else \"0\"\n        val result = if (base == 10) str else\
    \ str + zero\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val len = result.length\n\
    \        val zeros = len % base\n        val result = if (zeros > 0) result.substring(0,\
    \ zeros) else result\n        result + digits", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" else \"\"\n        result + baseString", "        val digits =\
    \ x.toString.reverse.grouped(base).toList\n        val result = digits.reverse.foldLeft(\"\
    \") {\n            (x, y) => x + y.reverse.mkString(\"\")\n        }\n       \
    \ result", "        val digits = x.toString.reverse.grouped(base).toList\n   \
    \     val result = digits(0) match {\n            case x if x == 0 => \"\"\n \
    \           case x => digits(0).toString.reverse.grouped(base).toList\n      \
    \  }\n        val digits2 = digits(1) match {\n            case x if x == 0 =>\
    \ \"\"\n            case x => digits(1).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit3 = digits(2) match {\n            case x if x ==\
    \ 0 => \"\"\n            case x => digits(2).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit4 = digits(3) match {\n            case x if x ==\
    \ 0 => \"\"\n            case x => digits(3).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit5 = digits(4) match {\n            case x if x ==\
    \ 0 => \"\"\n            case x => digits(4).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit6 = digits(5) match {\n            case x if x ==\
    \ 0 => \"\"\n            case x => digits(5).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit7 = digits(6) match {\n            case x if x ==\
    \ 0 => \"\"\n            case x => digits(6).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit8 = digits(7) match {\n            case x if x ==\
    \ 0 => \"\"\n            case x => digits(7).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit9 = digits(8) match {\n            case x if x ==\
    \ 0 => \"\"\n            case x => digits(8).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit10 = digits(9) match {\n            case x if x ==\
    \ 0 => \"\"\n            case x => digits(9).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit11 = digits(10) match {\n            case x if x\
    \ == 0 => \"\"\n            case x => digits(10).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit12 = digits(11) match {\n            case x if x\
    \ == 0 => \"\"\n            case x => digits(11).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit13 = digits(12) match {\n            case x if x\
    \ == 0 => \"\"\n            case x => digits(12).toString.reverse.grouped(base).toList\n\
    \        }\n        val digit14 = digits(13) match {\n", "        val digits =\
    \ x.toString.reverse.grouped(base).toList\n        val result = digits.reverse.foldLeft(\"\
    \") {\n            (x, y) => x + y.reverse\n        }\n        result", "    \
    \    val digits = x.toString.reverse.grouped(base).toList\n        val result\
    \ = digits.reverse.foldLeft(\"\") {\n            (x, y) => x + y.reverse\n   \
    \     }\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else base)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val result = result.substring(0,\
    \ result.length - base)\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString\n        result + (if (result.length\
    \ < base) \"\" else \"\" + base)", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val baseString =\
    \ if (base < 10) \"0\" + base.toString\n        else base.toString\n        val\
    \ result = baseString + result\n        result", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") { (acc, digit) =>\n      \
    \      val digitString = digit.toString\n            val digitBase = digitString.length\n\
    \            val digitValue = digitString.toLong\n            val digitBaseString\
    \ = digitBase.toString\n            val digitBaseValue = digitBaseString.toLong\n\
    \            val digitBaseBase = digitBaseValue.toLong\n            val digitBaseBaseString\
    \ = digitBaseBase.toString\n            val digitBaseBaseValue = digitBaseBaseString.toLong\n\
    \            val digitBaseBaseBase = digitBaseBaseValue.toLong\n            val\
    \ digitBaseBaseBaseString = digitBaseBaseBase.toString\n            val digitBaseBaseBaseValue\
    \ = digitBaseBaseBaseString.toLong\n            val digitBaseBaseBaseBase = digitBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseString = digitBaseBaseBaseBase.toString\n\
    \            val digitBaseBaseBaseBaseValue = digitBaseBaseBaseBaseString.toLong\n\
    \            val digitBaseBaseBaseBaseBase = digitBaseBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseBaseString = digitBaseBaseBaseBaseBase.toString\n\
    \            val digitBaseBaseBaseBaseValue = digitBaseBaseBaseBaseBaseString.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseBaseString = digitBaseBaseBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseBaseValue = digitBaseBaseBaseBaseBaseBaseString.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBaseString = digitBaseBaseBaseBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBaseValue = digitBaseBaseBaseBaseBaseBaseString.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBaseString = digitBaseBaseBaseBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBaseValue = digitBaseBaseBaseBaseBaseBaseBaseString.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBaseBaseString = digitBaseBaseBaseBaseBaseBaseBaseValue.toLong\n\
    \            val digitBaseBaseBaseBaseBaseBaseValue = digitBaseBaseBaseBaseBaseBaseBaseString.toLong\n\
    \            ", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (result\
    \ == \"0\") \"1\" else \"\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val newBase = digits.reverse.take(base).reverse.mkString(\"\
    \")\n        val newDigits = digits.reverse.drop(base).reverse.mkString(\"\")\n\
    \        val newX = x.toString.reverse.grouped(newBase).toList\n        val newResult\
    \ = newX.mkString(\"\")\n        val newDigit = newDigits.reverse.mkString(\"\"\
    )\n        val newBaseNew = newBase.reverse.mkString(\"\")\n        val newDigitNew\
    \ = newDigits.reverse.mkString(\"\")\n        val newXNew = newX.reverse.grouped(newBaseNew).toList\n\
    \        val newResultNew = newXNew.mkString(\"\")\n        val newDigitNewNew\
    \ = newDigitNew.reverse.mkString(\"\")\n        val newBaseNewNew = newBaseNew.reverse.mkString(\"\
    \")\n        val newDigitNewNew = newDigitNew.reverse.mkString(\"\")\n       \
    \ val newXNewNew = newXNew.reverse.grouped(newBaseNewNew).toList\n        val\
    \ newResultNewNew = newXNewNew.mkString(\"\")\n        val newDigitNewNewNew =\
    \ newDigitNewNew.reverse.mkString(\"\")\n        val newBaseNewNewNew = newBaseNewNew.reverse.mkString(\"\
    \")\n        val newDigitNewNewNew = newDigitNewNew.reverse.mkString(\"\")\n \
    \       val newXNewNewNew = newXNewNew.reverse.grouped(newBaseNewNewNew).toList\n\
    \        val newResultNewNewNew = newXNewNewNew.mkString(\"\")\n        val newDigitNewNewNewNew\
    \ = newDigitNewNewNew.reverse.mkString(\"\")\n        val newBaseNewNewNewNew\
    \ = newBaseNewNewNew.reverse.mkString(\"\")\n        val newDigitNewNewNewNew\
    \ = newDigitNewNewNew.reverse.mkString(\"\")\n        val newXNewNewNewNew = newXNewNewNew.reverse.grouped(newBaseNewNewNewNew).toList\n\
    \        val newResultNewNewNewNew = newXNewNewNewNew.mkString(\"\")\n       \
    \ val newDigitNewNewNewNewNew = newDigitNewNewNewNew.reverse.mkString(\"\")\n\
    \        val newBaseNewNewNewNewNew = newBaseNewNewNewNew.reverse.mkString(\"\"\
    )\n        val newDigitNewNewNewNewNew = newDigitNewNewNewNew.reverse.mkString(",
  "        val digits = x.toString.reverse.grouped(base).toList\n        val result\
    \ = digits.reverse.foldLeft(\"\") {\n            case (acc, digit) => acc + digit.toString\n\
    \        }\n        result", "        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = new mutable.StringBuilder\n        digits.foreach(x => result.append(x.reverse))\n\
    \        result.toString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else base.toString.charAt(base.toString.length - digits.size))",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else base.toString.charAt(base.toString.length - digits.size))",
  "        val digits = x.toString.reverse.grouped(base.toInt)\n        val result\
    \ = digits.map(_.mkString(\"\")).reverse.mkString(\"\")\n        result + if (result\
    \ == \"0\") \"1\" else \"\"", "        var result = \"\"\n        var remainder\
    \ = x % base\n        var quotient = x / base\n        while (quotient > 0) {\n\
    \            result += quotient.toString\n            quotient = quotient / base\n\
    \        }\n        if (remainder > 0) {\n            result += remainder.toString\n\
    \        }\n        return result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        digits.tail.foldLeft(result){\n\
    \            (a,b) => a + b\n        }", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + digits.reverse.takeWhile(_\
    \ < base).reverse.mkString", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") {\n            (acc, digit)\
    \ => acc + (digit.drop(base).reverse)\n        }\n        result", "        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n  \
    \      val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) 0 else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        val digit = digits.last\n\
    \        val digits = digits.dropRight(1)\n        val digit = digits.last\n \
    \       val digits = digits.dropRight(1)\n        val digit = digits.last\n  \
    \      val digits = digits.dropRight(1)\n        val digit = digits.last\n   \
    \     val digits = digits.dropRight(1)\n        val digit = digits.last\n    \
    \    val digits = digits.dropRight(1)\n        val digit = digits.last\n     \
    \   val digits = digits.dropRight(1)\n        val digit = digits.last\n      \
    \  val digits = digits.dropRight(1)\n        val digit = digits.last\n       \
    \ val digits = digits.dropRight(1)\n        val digit = digits.last\n        val\
    \ digits = digits.dropRight(1)\n        val digit = digits.last\n        val digits\
    \ = digits.dropRight(1)\n        val digit = digits.last\n        val digits =\
    \ digits.dropRight(1)\n        val digit = digits.last\n        val digits = digits.dropRight(1)\n\
    \        val digit = digits.last\n        val digits = digits.dropRight(1)\n \
    \       val digit = digits.last\n        val digits = digits.dropRight(1)\n  \
    \      val digit = digits.last\n        val digits = digits.dropRight(1)\n   \
    \     val digit = digits.last\n        val digits = digits.dropRight(1)\n    \
    \    val digit = digits.last\n        val digits = digits.dropRight(1)\n     \
    \   val digit = digits.last\n        val digits = digits.dropRight(1)\n      \
    \  val digit = digits.last\n        val digits = digits.dropRight(1)\n       \
    \ val digit = digits.last\n        val digits = digits.dropRight(1)\n        val\
    \ digit = digits.last\n        val digits = digits.dropRight(1)\n        val digit\
    \ = digits.last\n        val digits = digits.dropRight(1)\n        val digit =\
    \ digits.last\n        val digits = digits.dropRight(1)\n        val digit = digits.last\n\
    \        val digits = digits.dropRight(1)\n        val digit = digits.last\n \
    \       val digits = digits.dropRight(1)\n        val digit = digits.last\n  \
    \      val digits = digits.dropRight(1)\n        val digit = digits.last\n   \
    \     val digits = digits.dropRight(1)\n        val digit = digits.last\n    \
    \    val digits = digits.dropRight(1)\n        val digit = digits.last\n     \
    \   val digits = digits.dropRight(1)\n        val digit = digits.last\n      \
    \  val digits = digits.dropRight(1)\n        ", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (x < base) \"\
    \" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString", "        var result = \"\"\n        var remainder =\
    \ x % base\n        while(x > 0) {\n            result += Integer.toString((x\
    \ % base))\n            x /= base\n        }\n        if(remainder != 0) {\n \
    \           result += Integer.toString(remainder)\n        }\n        return result",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (x < base) \"\
    \" else \"\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        return result"]
stop_tokens:
- "\n    }\n"
