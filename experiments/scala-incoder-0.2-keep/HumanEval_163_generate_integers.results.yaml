language: scala
name: HumanEval_163_generate_integers
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = new mutable.ListBuffer[Long]()\n        val remainder = a\
    \ % b\n        val remainder2 = remainder / b\n        val remainder3 = remainder2\
    \ / b\n        val remainder4 = remainder3 / b\n        val remainder5 = remainder4\
    \ / b\n        val remainder6 = remainder5 / b\n        val remainder7 = remainder6\
    \ / b\n        val remainder8 = remainder7 / b\n        val remainder9 = remainder8\
    \ / b\n        val remainder10 = remainder9 / b\n        val remainder11 = remainder10\
    \ / b\n        val remainder12 = remainder11 / b\n        val remainder13 = remainder12\
    \ / b\n        val remainder14 = remainder13 / b\n        val remainder15 = remainder14\
    \ / b\n        val remainder16 = remainder15 / b\n        val remainder17 = remainder16\
    \ / b\n        val remainder18 = remainder17 / b\n        val remainder19 = remainder18\
    \ / b\n        val remainder20 = remainder19 / b\n        val remainder21 = remainder20\
    \ / b\n        val remainder22 = remainder21 / b\n        val remainder23 = remainder22\
    \ / b\n        val remainder24 = remainder23 / b\n        val remainder25 = remainder24\
    \ / b\n        val remainder26 = remainder25 / b\n        val remainder27 = remainder26\
    \ / b\n        val remainder28 = remainder27 / b\n        val remainder29 = remainder28\
    \ / b\n        val remainder30 = remainder29 / b\n        val remainder31 = remainder30\
    \ / b\n        val remainder32 = remainder31 / b\n        val remainder33 = remainder32\
    \ / b\n        val remainder34 = remainder33 / b\n        val remainder35 = remainder34\
    \ / b\n        val remainder36 = remainder35 / b\n        val remainder37 = remainder36\
    \ / b\n        val remainder38 = remainder37 / b\n        val remainder39 = remainder38\
    \ / b\n        val remainder40 = remainder39 / b\n        val remainder41 = remainder40\
    \ / b\n        val remainder42 = remainder41 / b\n        val remainder43 = remainder42\
    \ / b\n\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3kirm9z0.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3kirm9z0.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        val start = (a to b).iterator\n\
    \        val end = (a to b).reverse.iterator\n        while(start.hasNext && end.hasNext)\
    \ {\n            val x = start.next\n            val y = end.next\n          \
    \  val z = (x to y).filter(_ % 2 == 0).reverse\n            list ++= z\n     \
    \   }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1aizh1go.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val even = a / 2\n        val odd = b / 2\n        val evens = a until\
    \ even\n        val odds = odd until b\n        evens ++= odds\n        evens\
    \ ++= evens\n        evens.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzu078k46.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = a until even\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevens\
    \ is already defined as \e[33mvalue\e[0m \e[35mevens\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzu078k46.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36modds\e[0m = odd until b\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modds is already defined as \e[33mvalue\e[0m \e[35modds\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzu078k46.scala:11:20 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpzu078k46.scala:12:19 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_a = mutable.ListBuffer[Long]()\n\
    \        val odd_b = mutable.ListBuffer[Long]()\n        val even_b = mutable.ListBuffer[Long]()\n\
    \        val evens_a = mutable.ListBuffer[Long]()\n        val evens_b = mutable.ListBuffer[Long]()\n\
    \        val odd_a_a = mutable.ListBuffer[Long]()\n        val odd_a_b = mutable.ListBuffer[Long]()\n\
    \        val odd_b_a = mutable.ListBuffer[Long]()\n        val odd_b_b = mutable.ListBuffer[Long]()\n\
    \        val even_a_a = mutable.ListBuffer[Long]()\n        val even_a_b = mutable.ListBuffer[Long]()\n\
    \        val even_b_a = mutable.ListBuffer[Long]()\n        val even_b_b = mutable.ListBuffer[Long]()\n\
    \        val even_a_a_a = mutable.ListBuffer[Long]()\n        val even_a_a_b =\
    \ mutable.ListBuffer[Long]()\n        val even_a_b_a = mutable.ListBuffer[Long]()\n\
    \        val even_a_b_b = mutable.ListBuffer[Long]()\n        val odd_a_a_a =\
    \ mutable.ListBuffer[Long]()\n        val odd_a_a_b = mutable.ListBuffer[Long]()\n\
    \        val odd_a_a_a_a = mutable.ListBuffer[Long]()\n        val odd_a_a_a_b\
    \ = mutable.ListBuffer[Long]()\n        val odd_a_a_b_a = mutable.ListBuffer[Long]()\n\
    \        val odd_a_a_b_b = mutable.ListBuffer[Long]()\n        val odd_a_a_a_a_a\
    \ = mutable.ListBuffer[Long]()\n        val odd_a_a_a_a_b = mutable.ListBuffer[Long]()\n\
    \        val odd_a_a_a_b_a = mutable.ListBuffer[Long]()\n        val odd_a_a_a_b_b\
    \ = mutable.ListBuffer[Long]()\n        val odd_a_a_a_a_a_a = mutable.ListBuffer[Long]()\n\
    \        val odd_a_a_a_a_a_b = mutable.ListBuffer\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7r8ovjs5.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7r8ovjs5.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7r8ovjs5.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7r8ovjs5.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_a\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7r8ovjs5.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modd_b\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7r8ovjs5.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36meven_b\e[0m = mutable.ListBuffer[\e\
    [35mLo"
  stdout: ''
  timestamp: 1659797678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = new mutable.ListBuffer[Long]()\n        val remainder = a\
    \ % b\n        val quotient = a / b\n        val remainders = generate_integers(quotient,\
    \ b)\n        val quotients = generate_integers(remainder, b)\n        val quotientsAndRemainders\
    \ = quotients ++ remainders\n        quotientsAndRemainders.foreach { x =>\n \
    \           if (x % 2 == 0) {\n                result.+=(x)\n            }\n \
    \       }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbm_a6l31.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbm_a6l31.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mremainders\e[0m = generate_integers(quotient, b)\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \           Not found: generate_integers\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpbm_a6l31.scala:15:24 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mquotients\e[0m = generate_integers(remainder,\
    \ b)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: generate_integers\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659797674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).iterator\n        while(range.hasNext) {\n  \
    \          val current = range.next\n            val remainder = current % 10\n\
    \            if(remainder == 0) {\n                evens += current\n        \
    \    } else {\n                odds += current\n            }\n        }\n   \
    \     evens.toList ++ odds.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7f2ccih6.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7f2ccih6.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7f2ccih6.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).iterator\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7f2ccih6.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b).iterator\n\e[31m\e[31m   |\e[0m                            \
    \ ^\e[0m\n\e[31m   |\e[0m                             Found:    (b : Long)\n\e\
    [31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        var i = a\n        var\
    \ j = b\n        while (i <= j) {\n            list += i\n            i += 1\n\
    \        }\n        list.sortWith(_ < _)\n        list.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps_a31bb_.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = a / 2\n        val odd = b / 2\n        while (even < odd)\
    \ {\n            evens += even\n            odd += 2\n        }\n        while\
    \ (even > odd) {\n            odds += odd\n            even -= 2\n        }\n\
    \        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_q9cmen.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpn_q9cmen.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpn_q9cmen.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            odd += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Long - did you mean odd.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn_q9cmen.scala:21:17\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            even -= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value -= is not a member of Long - did you mean even.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659797678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val evens_count\
    \ = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val odd_product =\
    \ mutable.ListBuffer[Long]()\n        val even_product = mutable.ListBuffer[Long]()\n\
    \        val evens_product = mutable.ListBuffer[Long]()\n        val odd_product2\
    \ = mutable.ListBuffer[Long]()\n        val even_product2 = mutable.ListBuffer[Long]()\n\
    \        val evens_product2 = mutable.ListBuffer[Long]()\n        val odd_product3\
    \ = mutable.ListBuffer[Long]()\n        val even_product3 = mutable.ListBuffer[Long]()\n\
    \        val evens_product3 = mutable.ListBuffer[Long]()\n        val odd_product4\
    \ = mutable.ListBuffer[Long]()\n        val even_product4 = mutable.ListBuffer[Long]()\n\
    \        val evens_product4 = mutable.ListBuffer[Long]()\n        val odd_product5\
    \ = mutable.ListBuffer[Long]()\n        val even_product5 = mutable.ListBuffer[Long]()\n\
    \        val evens_product5 = mutable.ListBuffer[Long]()\n        val odd_product6\
    \ = mutable.ListBuffer[Long]()\n        val even_product6 = mutable.ListBuffer[Long]()\n\
    \        val evens_product6 = mutable.ListBuffer[Long]()\n        val odd_product7\
    \ = mutable.ListBuffer[Long]()\n        val even_product7 = mutable.ListBuffer[Long]()\n\
    \        val evens_product7 = mutable.ListBuffer[Long]()\n        val odd_product8\
    \ = mutable.ListBuffer[Long]()\n        val even_product8 = mutable.ListBuffer[Long]()\n\
    \        val evens_product8 = mutable.ListBuffer[Long]()\n        val odd_product9\
    \ = mutable.ListBuffer[Long]()\n        val even_product9 = mutable.ListBuffer[Long]()\n\
    \        val evens_product9 = mutable.ListBuffer[Long]\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx76uztq1.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpx76uztq1.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpx76uztq1.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpx76uztq1.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpx76uztq1.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven_count\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpx76uztq1.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevens_count\e"
  stdout: ''
  timestamp: 1659797678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while(range.hasNext) {\n     \
    \       val current = range.next\n            val remainder = current % 10\n \
    \           if(remainder == 0) {\n                evens += current\n         \
    \   } else {\n                odds += current\n            }\n        }\n    \
    \    evens.toList ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjvq0xm98.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjvq0xm98.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val remainder = mutable.ListBuffer[Long]()\n        val remainders =\
    \ mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val remainder = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val remainder = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val remainder = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val remainder = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val remainder = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val remainder = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val remainder = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val remainder = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val remainder = mutable.ListBuffer[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp06kbjvh1.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp06kbjvh1.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd is already defined as \e[33mvalue\e[0m \e[35modd\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp06kbjvh1.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainder is already defined as \e[33mvalue\e[0m \e[35mremainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp06kbjvh1.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mremainders\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainders is already defined as \e[33mvalue\e[0m \e[35mremainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp06kbjvh1.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0meven is already defined as \e[33mvalue\e[0m \e[35meven\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp06kbj"
  stdout: ''
  timestamp: 1659797678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val evens_count\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_max = mutable.ListBuffer[Long]()\n\
    \        val even_count_max = mutable.ListBuffer[Long]()\n        val evens_count_max\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_min = mutable.ListBuffer[Long]()\n\
    \        val even_count_min = mutable.ListBuffer[Long]()\n        val evens_count_min\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_max = mutable.ListBuffer[Long]()\n\
    \        val even_count_max = mutable.ListBuffer[Long]()\n        val evens_count_max\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_min = mutable.ListBuffer[Long]()\n\
    \        val even_count_min = mutable.ListBuffer[Long]()\n        val evens_count_min\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_max = mutable.ListBuffer[Long]()\n\
    \        val even_count_max = mutable.ListBuffer[Long]()\n        val evens_count_max\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_min = mutable.ListBuffer[Long]()\n\
    \        val even_count_min = mutable.ListBuffer[Long]()\n        val evens_count_min\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_max = mutable.ListBuffer[Long]()\n\
    \        val even_count_max = mutable.ListBuffer[Long]()\n        val evens_count_max\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_min = mutable.ListBuffer[Long]()\n\
    \        val even_count_min = mutable.ListBuffer[Long]()\n        val evens_count_min\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_max = mutable.ListBuffer[Long]()\n\
    \        val even_count_max = mutable.ListBuffer[Long]()\n        val evens_count_max\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_min = mutable.ListBuffer[Long]()\n\
    \        val even_count_min = mutable.ListBuffer[\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2876wkbt.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2876wkbt.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36modd_count_max\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_count_max is already defined as \e[33mvalue\e[0m \e[35modd_count_max\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2876wkbt.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36meven_count_max\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_count_max is already defined as \e[33mvalue\e[0m \e[35meven_count_max\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2876wkbt.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mevens_count_max\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevens_count_max is already defined as \e[33mvalue\e[0m \e\
    [35mevens_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2876wkbt.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36modd_count_min\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_count_min is already defined as \e[33mvalue\e[0m \e[35modd_count_min\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded m"
  stdout: ''
  timestamp: 1659797678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpot0cy25s.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpot0cy25s.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36modd_sum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0modd_sum\
    \ is already defined as \e[33mvalue\e[0m \e[35modd_sum\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpot0cy25s.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36meven_sum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0meven_sum\
    \ is already defined as \e[33mvalue\e[0m \e[35meven_sum\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpot0cy25s.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36modd_count\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0modd_count is already defined as \e[33mvalue\e[0m \e[35modd_count\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpot0cy25s.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_count\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_count is already defined as \e[33mvalue\e[0m \e[35meven_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659797678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            if\
    \ (i % 2 == 0) {\n                evens += i\n            } else {\n         \
    \       odds += i\n            }\n            i += 1\n            j += 1\n   \
    \     }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppd3atpah.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppd3atpah.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).filter(_ % 2 == 0)\n        range.foreach(x =>\
    \ if (x % 2 == 0) evens += x else odds += x)\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_a79gngl.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_a79gngl.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_a79gngl.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \     ^\e[0m\n\e[31m   |\e[0m                          Found:    (a : Long)\n\e\
    [31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp_a79gngl.scala:13:29 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \        ^\e[0m\n\e[31m   |\e[0m                             Found:    (b : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        for(i <- a to b by 2){\n            if(i%2 == 0){\n                evens\
    \ += i\n            }else{\n                odds += i\n            }\n       \
    \ }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsoyl0uoo.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsoyl0uoo.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val current = range.next\n            if (current % 2 == 0) {\n     \
    \           evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpon5xapso.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpon5xapso.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = a / 2\n        val odd = b / 2\n        while(even < odd)\
    \ {\n            evens += even\n            odd += 2\n        }\n        while(even\
    \ > odd) {\n            odds += odd\n            even -= 2\n        }\n      \
    \  evens.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo7mlk2ou.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpo7mlk2ou.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpo7mlk2ou.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            odd += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Long - did you mean odd.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo7mlk2ou.scala:21:17\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            even -= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value -= is not a member of Long - did you mean even.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659797678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val even = a / 2\n   \
    \     val odd = a % 2\n        val evens = generateIntegers(even, b)\n       \
    \ val evens += even\n        val evens += odd\n        evens\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0nzmynpi.scala:16:0 ----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m evens += odd\n\e[31m\e[31m   |\e\
    [0m^^^\e[0m\n\e[31m   |\e[0m'=' expected, but 'end of statement' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmp0nzmynpi.scala:17:0 ----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        evens\n\e[31m\e[31m   |\e[0m^^^^^\e[0m\n\e[31m\
    \   |\e[0m'=' expected, but 'end of statement' found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0nzmynpi.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = generateIntegers(even,\
    \ b)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mevens is already defined as \e[33mvalue\e[0m \e[35mevens\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0nzmynpi.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m evens += even\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^\e[0m\n\e[31m   |\e[0mevens is already defined as \e[33mvalue\e[0m \e\
    [35mevens\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmp0nzmynpi.scala:15:21 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m evens += even\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^\e[0m\n\e[31m   |\e[0meven is already defined as \e\
    [33mvalue\e[0m \e[35meven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0nzmynpi.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m evens += odd\n\e[31m\e[31m   |\e\
    [0m            ^^^^^\e[0m\n\e[31m   |\e[0mevens is already defined as \e[33mvalue\e\
    [0m \e[35mevens\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp0n"
  stdout: ''
  timestamp: 1659797674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd_a = a / 2\n\
    \        val odd_b = b / 2\n        val odd_a_evens = odd_a / 2\n        val odd_b_evens\
    \ = odd_b / 2\n        val odd_a_evens_odd_b = odd_a_evens + odd_b\n        val\
    \ odd_b_evens_odd_a = odd_b_evens + odd_a\n        val odd_a_evens_odd_b_evens_odd_a\
    \ = odd_a_evens_odd_b + odd_b_evens_odd_a\n        val odd_b_evens_odd_a_evens_odd_b_evens_odd_a\
    \ = odd_b_evens_odd_a + odd_a_evens_odd_b_evens_odd_a\n        val odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_evens_odd_b_evens_odd_a_even\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4xw2h9p0.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4xw2h9p0.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4xw2h9p0.scala:12:18\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4xw2h9p0.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4xw2h9p0.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659797678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = new mutable.ListBuffer[Long]()\n        val range = (a to\
    \ b).toList\n        val even = range.filter(x => x % 2 == 0)\n        val odd\
    \ = range.filter(x => x % 2 != 0)\n        val evenInRange = even.filter(x =>\
    \ x >= a && x <= b)\n        val oddInRange = odd.filter(x => x >= a && x <= b)\n\
    \        val evenInRangeSorted = evenInRange.sortWith(_ < _)\n        val oddInRangeSorted\
    \ = oddInRange.sortWith(_ < _)\n        evenInRangeSorted.foreach(x => result.append(x))\n\
    \        oddInRangeSorted.foreach(x => result.append(x))\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvd01tf07.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val current = range.next\n            if (current % 2 == 0) {\n     \
    \           evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpon5xapso.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpon5xapso.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = (a to b).iterator\n        while(range.hasNext) {\n     \
    \       val current = range.next\n            if(current % 2 == 0) {\n       \
    \         evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsxflx7qs.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsxflx7qs.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val evens_count\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_sum = mutable.ListBuffer[Long]()\n\
    \        val even_count_sum = mutable.ListBuffer[Long]()\n        val evens_count_sum\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_min = mutable.ListBuffer[Long]()\n\
    \        val even_count_min = mutable.ListBuffer[Long]()\n        val evens_count_min\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_max = mutable.ListBuffer[Long]()\n\
    \        val even_count_max = mutable.ListBuffer[Long]()\n        val evens_count_max\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_avg = mutable.ListBuffer[Long]()\n\
    \        val even_count_avg = mutable.ListBuffer[Long]()\n        val evens_count_avg\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_min = mutable.ListBuffer[Long]()\n\
    \        val even_count_min = mutable.ListBuffer[Long]()\n        val evens_count_min\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_max = mutable.ListBuffer[Long]()\n\
    \        val even_count_max = mutable.ListBuffer[Long]()\n        val evens_count_max\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_min = mutable.ListBuffer[Long]()\n\
    \        val even_count_min = mutable.ListBuffer[Long]()\n        val evens_count_min\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_max = mutable.ListBuffer[Long]()\n\
    \        val even_count_max = mutable.ListBuffer[Long]()\n        val evens_count_max\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_min = mutable.ListBuffer[Long]()\n\
    \        val even_count_min = mutable.ListBuffer[Long]()\n        val evens_count_min\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_max = mutable.ListBuffer[Long]()\n\
    \        val even_count_max = mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn4i5l3tt.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpn4i5l3tt.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36modd_count_min\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_count_min is already defined as \e[33mvalue\e[0m \e[35modd_count_min\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn4i5l3tt.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36meven_count_min\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_count_min is already defined as \e[33mvalue\e[0m \e[35meven_count_min\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn4i5l3tt.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mevens_count_min\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevens_count_min is already defined as \e[33mvalue\e[0m \e\
    [35mevens_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn4i5l3tt.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36modd_count_max\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_count_max is already defined as \e[33mvalue\e[0m \e[35modd_count_max\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded m"
  stdout: ''
  timestamp: 1659797677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        var i = a\n        var\
    \ j = b\n        while(i <= j) {\n            val remainder = i % 10\n       \
    \     evens.append(remainder)\n            i = i / 10\n        }\n        evens.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiqgexzhq.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).iterator\n        while (range.hasNext) {\n \
    \           val current = range.next\n            if (current % 2 == 0) {\n  \
    \              evens += current\n            } else {\n                odds +=\
    \ current\n            }\n        }\n        evens.toList ++ odds.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprawa_n2y.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprawa_n2y.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprawa_n2y.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).iterator\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprawa_n2y.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b).iterator\n\e[31m\e[31m   |\e[0m                            \
    \ ^\e[0m\n\e[31m   |\e[0m                             Found:    (b : Long)\n\e\
    [31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val n = range.next\n            if (n % 2 == 0) {\n                evens\
    \ += n\n            } else {\n                odds += n\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq1tus517.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpq1tus517.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val low = math.min(a,\
    \ b)\n        val high = math.max(a, b)\n        val range = high - low\n    \
    \    val digits = math.pow(10, math.ceil(math.log(range, 10)))\n        val digit\
    \ = math.pow(10, math.ceil(math.log(range, 10)))\n        val range = math.pow(10,\
    \ math.ceil(math.log(range, 10)))\n        val digits = math.pow(10, math.ceil(math.log(range,\
    \ 10)))\n        val digit = math.pow(10, math.ceil(math.log(range, 10)))\n  \
    \      val range = math.pow(10, math.ceil(math.log(range, 10)))\n        val digits\
    \ = math.pow(10, math.ceil(math.log(range, 10)))\n        val digit = math.pow(10,\
    \ math.ceil(math.log(range, 10)))\n        val range = math.pow(10, math.ceil(math.log(range,\
    \ 10)))\n        val digits = math.pow(10, math.ceil(math.log(range, 10)))\n \
    \       val digit = math.pow(10, math.ceil(math.log(range, 10)))\n        val\
    \ range = math.pow(10, math.ceil(math.log(range, 10)))\n        val digits = math.pow(10,\
    \ math.ceil(math.log(range, 10)))\n        val digit = math.pow(10, math.ceil(math.log(range,\
    \ 10)))\n        val range = math.pow(10, math.ceil(math.log(range, 10)))\n  \
    \      val digits = math.pow(10, math.ceil(math.log(range, 10)))\n        val\
    \ digit = math.pow(10, math.ceil(math.log(range, 10)))\n        val range = math.pow(10,\
    \ math.ceil(math.log(range, 10)))\n        val digits = math.pow(10, math.ceil(math.log(range,\
    \ 10)))\n        val digit = math.pow(10, math.ceil(math.log(range, 10)))\n  \
    \      val range = math.pow(10, math.ceil(math.log(range, 10)))\n        val digits\
    \ = math.pow(10, math.ceil(math.log(range, 10)))\n        val digit = math.pow(10,\
    \ math.ceil(math.log(range, 10)))\n        val range = math.pow(10, math.ceil(math.log(range,\
    \ 10)))\n        val digits = math.pow(10, math.ceil(math.log(range, 10)))\n \
    \       val digit = math.pow(10, math.ceil(math.log(range, 10)))\n        val\
    \ range = math.pow(10, math.ceil(math.log(range, 10)))\n        val digits = math.pow(10,\
    \ math.ceil(math.log(range, 10)))\n        val digit = math.pow(10, math.ceil(math.log(range,\
    \ 10)))\n        val range = math.pow(10, math.ceil(math.log(range, 10)))\n  \
    \      val digits = math.pow(10, math.ceil(math.log(range, 10)))\n        val\
    \ digit = math.pow(10, math.ceil(math.log(range, 10)))\n        val range = math.pow(10,\
    \ math.ceil(math.log(range, 10)))\n        val digits = math.pow(10, math.ceil(math.log(range,\
    \ 10)))\n        val digit = math.pow(10, math.ceil(math.log(range, \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsqmb963l.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsqmb963l.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mrange\e[0m = math.pow(\e[31m10\e[0m, math.ceil(math.log(range, \e[31m10\e\
    [0m)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrange is already defined as \e[33mvalue\e[0m \e[35mrange\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsqmb963l.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = math.pow(\e[31m10\e[0m,\
    \ math.ceil(math.log(range, \e[31m10\e[0m)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsqmb963l.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mdigit\e[0m = math.pow(\e[31m10\e[0m,\
    \ math.ceil(math.log(range, \e[31m10\e[0m)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigit is already defined as \e[33mvalue\e[0m \e[35mdigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsqmb963l.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = math.pow(\e[31m10\e[0m,\
    \ math.ceil(math.log(range, \e[31m10\e[0m)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrange is already defined as \e[33mvalue\e[0m \e[35mrange\e\
    [0m\n\e[31m   |\e[0m\n\e"
  stdout: ''
  timestamp: 1659797687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = a / 2\n        val odd = b / 2\n        val a = a % 2\n  \
    \      val b = b % 2\n        val c = a / b\n        val d = b / c\n        val\
    \ e = a / d\n        val f = b / e\n        val g = c / f\n        val h = d /\
    \ g\n        val i = e / h\n        val j = f / i\n        val k = g / j\n   \
    \     val l = h / k\n        val m = i / l\n        val n = j / m\n        val\
    \ o = k / n\n        val p = l / o\n        val q = m / p\n        val r = n /\
    \ q\n        val s = o / r\n        val t = p / s\n        val u = q / t\n   \
    \     val v = r / u\n        val w = s / v\n        val x = t / w\n        val\
    \ y = u / x\n        val z = v / y\n        val a = x / z\n        val b = y /\
    \ a\n        val c = z / a\n        val d = a / c\n        val e = c / d\n   \
    \     val f = d / e\n        val g = e / f\n        val h = f / g\n        val\
    \ i = g / h\n        val j = h / i\n        val k = i / j\n        val l = j /\
    \ k\n        val m = k / l\n        val n = l / m\n        val o = m / n\n   \
    \     val p = n / o\n        val q = o / p\n        val r = p / q\n        val\
    \ s = q / r\n        val t = r / s\n        val u = s / t\n        val v = t /\
    \ u\n        val w = u / v\n        val x = v / w\n        val y = w / x\n   \
    \     val z = x / y\n        val a = y / z\n        val b = z / a\n        val\
    \ c = a / b\n        val d = b / c\n        val e = c / d\n        val f = d /\
    \ e\n        val g = e / f\n        val h = f / g\n        val i = g / h\n   \
    \     val j = h / i\n        val k = i / j\n        val l = j / k\n        val\
    \ m = k / l\n        val n = l / m\n        val o = m / n\n        val p = n /\
    \ o\n\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt9zkfigv.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = x / z\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ma is already defined as\
    \ \e[33mvalue\e[0m \e[35ma\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpt9zkfigv.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = y / a\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mb is already defined as\
    \ \e[33mvalue\e[0m \e[35mb\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpt9zkfigv.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = z / a\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mc is already defined as\
    \ \e[33mvalue\e[0m \e[35mc\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpt9zkfigv.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = a / c\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0md is already defined as\
    \ \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpt9zkfigv.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36me\e[0m = c / d\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0me is already defined as\
    \ \e[33mvalue\e[0m \e[35me\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpt9zkfigv.scala:46:12 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mf\e[0m = d / e\n\e[31m\e\
    [31m "
  stdout: ''
  timestamp: 1659797685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).filter(x => x % 2 == 0)\n        range.foreach(x\
    \ => if (x % 2 == 0) evens += x)\n        range.foreach(x => if (x % 2 != 0) odd\
    \ += x)\n        evens.sortBy(x => x)\n        odd.sortBy(x => x)\n        evens.toList\
    \ ++ odd.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprh0yxngi.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprh0yxngi.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprh0yxngi.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                   ^\e[0m\n\e[31m   |\e[0m                          Found:  \
    \  (a : Long)\n\e[31m   |\e[0m                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprh0yxngi.scala:13:29 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                      ^\e[0m\n\e[31m   |\e[0m                             Found:\
    \    (b : Long)\n\e[31m   |\e[0m                             Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = a to b\n        range.foreach{ x =>\n            if (x %\
    \ 2 == 0) {\n                evens += x\n            } else {\n              \
    \  odds += x\n            }\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvgl7fzhr.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpvgl7fzhr.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val numsEven = mutable.ListBuffer[Long]()\n\
    \        val numsOdd = mutable.ListBuffer[Long]()\n        val numsEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEven = mutable.ListBuffer[Long]()\n        val numsEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n        val\
    \ numsEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n     \
    \   val numsEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n      \
    \  val numsEvenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n   \
    \     val numsEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n \
    \       val numsEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEven\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph7iui4uk.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph7iui4uk.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph7iui4uk.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph7iui4uk.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mnums\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph7iui4uk.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsEven\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph7iui4uk.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsOdd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available"
  stdout: ''
  timestamp: 1659797686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        val n = math.abs(a-b)\n\
    \        val m = math.max(a,b)\n        val d = math.floor(m/2)\n        val r\
    \ = math.floor(a/d)\n        val c = math.floor(b/d)\n        val m = math.min(m,d)\n\
    \        val r = math.min(r,d)\n        val c = math.min(c,d)\n        val m =\
    \ math.max(m,d)\n        val r = math.max(r,d)\n        val c = math.max(c,d)\n\
    \        val m = math.min(m,d)\n        val r = math.min(r,d)\n        val c =\
    \ math.min(c,d)\n        val m = math.max(m,d)\n        val r = math.max(r,d)\n\
    \        val c = math.max(c,d)\n        val m = math.min(m,d)\n        val r =\
    \ math.min(r,d)\n        val c = math.min(c,d)\n        val m = math.max(m,d)\n\
    \        val r = math.max(r,d)\n        val c = math.max(c,d)\n        val m =\
    \ math.min(m,d)\n        val r = math.min(r,d)\n        val c = math.min(c,d)\n\
    \        val m = math.max(m,d)\n        val r = math.max(r,d)\n        val c =\
    \ math.max(c,d)\n        val m = math.min(m,d)\n        val r = math.min(r,d)\n\
    \        val c = math.min(c,d)\n        val m = math.max(m,d)\n        val r =\
    \ math.max(r,d)\n        val c = math.max(c,d)\n        val m = math.min(m,d)\n\
    \        val r = math.min(r,d)\n        val c = math.min(c,d)\n        val m =\
    \ math.max(m,d)\n        val r = math.max(r,d)\n        val c = math.max(c,d)\n\
    \        val m = math.min(m,d)\n        val r = math.min(r,d)\n        val c =\
    \ math.min(c,d)\n        val m = math.max(m,d)\n        val r = math.max(r,d)\n\
    \        val c = math.max(c,d)\n        val m = math.min(m,d)\n        val r =\
    \ math.min(r,d)\n        val c = math.min(c,d)\n        val m = math.max(m,d)\n\
    \        val r = math.max(r,d)\n        val c = math.max(c,d)\n        val m =\
    \ math.min(m,d)\n        val r = math.min(r,d)\n        val c = math.min(c,d)\n\
    \        val m = math.max(m,d)\n        val r = math.max(r,d)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzdxyuy34.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.min(m,d)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already\
    \ defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzdxyuy34.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = math.min(r,d)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already\
    \ defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzdxyuy34.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.min(c,d)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mc is already\
    \ defined as \e[33mvalue\e[0m \e[35mc\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzdxyuy34.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.max(m,d)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already\
    \ defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzdxyuy34.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = math.max(r,d)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already\
    \ defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzdxyuy34.scala:22:12 --------------------"
  stdout: ''
  timestamp: 1659797686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        for(i <- range) {\n            if(i%2\
    \ == 0) {\n                evens += i\n            } else {\n                odds\
    \ += i\n            }\n        }\n        evens.toList ++ odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7j6crxr_.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7j6crxr_.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val even = a / b\n   \
    \     val remainder = a % b\n        val remainders = mutable.ListBuffer[Long]()\n\
    \        val remainders = remainders ++ remainder\n        val remainders = remainders\
    \ ++ remainder\n        val remainders = remainders ++ remainder\n        val\
    \ remainders = remainders ++ remainder\n        val remainders = remainders ++\
    \ remainder\n        val remainders = remainders ++ remainder\n        val remainders\
    \ = remainders ++ remainder\n        val remainders = remainders ++ remainder\n\
    \        val remainders = remainders ++ remainder\n        val remainders = remainders\
    \ ++ remainder\n        val remainders = remainders ++ remainder\n        val\
    \ remainders = remainders ++ remainder\n        val remainders = remainders ++\
    \ remainder\n        val remainders = remainders ++ remainder\n        val remainders\
    \ = remainders ++ remainder\n        val remainders = remainders ++ remainder\n\
    \        val remainders = remainders ++ remainder\n        val remainders = remainders\
    \ ++ remainder\n        val remainders = remainders ++ remainder\n        val\
    \ remainders = remainders ++ remainder\n        val remainders = remainders ++\
    \ remainder\n        val remainders = remainders ++ remainder\n        val remainders\
    \ = remainders ++ remainder\n        val remainders = remainders ++ remainder\n\
    \        val remainders = remainders ++ remainder\n        val remainders = remainders\
    \ ++ remainder\n        val remainders = remainders ++ remainder\n        val\
    \ remainders = remainders ++ remainder\n        val remainders = remainders ++\
    \ remainder\n        val remainders = remainders ++ remainder\n        val remainders\
    \ = remainders ++ remainder\n        val remainders = remainders ++ remainder\n\
    \        val remainders = remainders ++ remainder\n        val remainders = remainders\
    \ ++ remainder\n        val remainders = remainders ++ remainder\n        val\
    \ remainders = remainders ++ remainder\n        val remainders = remainders ++\
    \ remainder\n        val remainders = remainders ++ remainder\n        val remainders\
    \ = remainders ++ remainder\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp10ewzs2j.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mremainders\e[0m = remainders\
    \ ++ remainder\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainders is already defined as \e[33mvalue\e[0m \e[35mremainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp10ewzs2j.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mremainders\e[0m = remainders ++ remainder\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mremainders is already defined as \e[33mvalue\e[0m \e[35mremainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp10ewzs2j.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mremainders\e[0m = remainders ++ remainder\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mremainders is already defined as \e[33mvalue\e[0m \e[35mremainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp10ewzs2j.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mremainders\e[0m = remainders ++ remainder\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mremainders is already defined as \e[33mvalue\e[0m \e[35mremainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp10ewzs2j.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mremainders\e[0m = remainders ++ remainder\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    ["
  stdout: ''
  timestamp: 1659797686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        var i = a\n        var\
    \ j = b\n        while (i <= j) {\n            if (i % 2 == 0) {\n           \
    \     evens += i\n            }\n            i += 1\n        }\n        evens.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzv9h_ybx.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val low = a\n        val\
    \ high = b\n        while(low < high) {\n            val mid = (low + high) /\
    \ 2\n            val digit = math.floor(math.pow(10, mid))\n            val evenDigit\
    \ = digit % 2\n            if(evenDigit == 0) {\n                evens += mid\n\
    \            }\n            else if(evenDigit == 1) {\n                low +=\
    \ mid\n            }\n            else {\n                high -= mid\n      \
    \      }\n        }\n        evens.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd3ini2_d.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpd3ini2_d.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                low += mid\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Long - did you mean low.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd3ini2_d.scala:25:21\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                high -= mid\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     value -= is not a member of Long - did you mean high.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659797688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_count_copy\
    \ = mutable.ListBuffer[Long]()\n        val even_count_copy = mutable.ListBuffer[Long]()\n\
    \        val odd_count_copy2 = mutable.ListBuffer[Long]()\n        val even_count_copy2\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_copy3 = mutable.ListBuffer[Long]()\n\
    \        val even_count_copy3 = mutable.ListBuffer[Long]()\n        val odd_count_copy4\
    \ = mutable.ListBuffer[Long]()\n        val even_count_copy4 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_copy5 = mutable.ListBuffer[Long]()\n        val even_count_copy5\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_copy6 = mutable.ListBuffer[Long]()\n\
    \        val even_count_copy6 = mutable.ListBuffer[Long]()\n        val odd_count_copy7\
    \ = mutable.ListBuffer[Long]()\n        val even_count_copy7 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_copy8 = mutable.ListBuffer[Long]()\n        val even_count_copy8\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_copy9 = mutable.ListBuffer[Long]()\n\
    \        val even_count_copy9 = mutable.ListBuffer[Long]()\n        val odd_count_copy10\
    \ = mutable.ListBuffer[Long]()\n        val even_count_copy10 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_copy11 = mutable.ListBuffer[Long]()\n        val even_count_copy11\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_copy12 = mutable.ListBuffer[Long]()\n\
    \        val even_count_copy12 = mutable.ListBuffer[Long]()\n        val odd_count_copy13\
    \ = mutable.ListBuffer[Long]()\n        val even_count_copy13 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_copy14 = mutable.ListBuffer[Long]()\n        val even_count_copy14\
    \ = mutable.ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0swh4so_.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0swh4so_.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0swh4so_.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0swh4so_.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp0swh4so_.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven_count\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0swh4so_.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36modd_count_co"
  stdout: ''
  timestamp: 1659797688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        var i = a\n        var\
    \ j = b\n        while (i <= j) {\n            list += i\n            i += 1\n\
    \        }\n        list.sortWith(_ < _)\n        list.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps_a31bb_.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val even = a / 2\n   \
    \     val odd = a % 2\n        val evens = a until b\n        evens += even\n\
    \        evens += odd\n        evens.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx_wkn120.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = a until b\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevens\
    \ is already defined as \e[33mvalue\e[0m \e[35mevens\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx_wkn120.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        val range = (a to b).toList\n\
    \        for(i <- range) {\n            val remainder = i % 10\n            if(remainder\
    \ == 0) {\n                list += i\n            }\n        }\n        list.sortWith((x,\
    \ y) => x < y)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_gig8v5f.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = Range(a, b).map(_.toLong)\n        for (i <- range) {\n \
    \           if (i % 2 == 0) {\n                evens += i\n            } else\
    \ {\n                odds += i\n            }\n        }\n        evens.toList\
    \ ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp460e3v4y.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp460e3v4y.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp460e3v4y.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp460e3v4y.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b).map(_.toLong)\n\e[31m\e[31m   |\e[0m                       \
    \      ^\e[0m\n\e[31m   |\e[0m                             Found:    (b : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).span(_ % 2 == 0)\n        range.foreach { x =>\n\
    \            val y = x % 10\n            if (y % 2 == 0) {\n                evens\
    \ += y\n            } else {\n                odds += y\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb62ltlmq.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpb62ltlmq.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb62ltlmq.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).span(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \     ^\e[0m\n\e[31m   |\e[0m                          Found:    (a : Long)\n\e\
    [31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb62ltlmq.scala:13:29 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).span(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \        ^\e[0m\n\e[31m   |\e[0m                             Found:    (b : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpb62ltlmq.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        range.foreach { \e[36mx\e[0m =>\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value foreach is\
    \ not a member of (Range, Range)\n5 errors found\n"
  stdout: ''
  timestamp: 1659797690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val evensSet = mutable.Set[Long]()\n\
    \        val evensArray = mutable.Array[Long]()\n        val evensArraySet = mutable.Set[Long]()\n\
    \        val evensArrayArray = mutable.Array[Long]()\n        val evensArrayArraySet\
    \ = mutable.Set[Long]()\n        val evensArrayArrayArray = mutable.Array[Long]()\n\
    \        val evensArrayArrayArraySet = mutable.Set[Long]()\n        val evensArrayArrayArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val evensArrayArrayArrayArrayArray = mutable.Array[Long]()\n        val\
    \ evensArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n        val evensArrayArrayArrayArrayArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArrayArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqqz1no5h.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqqz1no5h.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensArrayArrayArrayArrayArrayArrayArrayArraySet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensArrayArrayArrayArrayArrayArrayArrayArraySet is already\
    \ defined as \e[33mvalue\e[0m \e[35mevensArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqqz1no5h.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mevensArrayArrayArrayArrayArrayArrayArrayArrayArray\e\
    [0m = mutable.Array[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensArrayArrayArrayArrayArrayArrayArrayArrayArray is already\
    \ defined as \e[33mvalue\e[0m \e[35mevensArrayArrayArrayArrayArrayArrayArrayArrayArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqqz1no5h.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mevensArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ is already defined as \e[33mvalue\e[0m \e[35mevensArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions"
  stdout: ''
  timestamp: 1659797689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd_index = mutable.ListBuffer.empty[Long]\n\
    \        val even_index = mutable.ListBuffer.empty[Long]\n        val odd_index_set\
    \ = mutable.Set[Long]()\n        val even_index_set = mutable.Set[Long]()\n  \
    \      val odd_index_set = mutable.Set[Long]()\n        val even_index_set = mutable.Set[Long]()\n\
    \        val odd_index_set = mutable.Set[Long]()\n        val even_index_set =\
    \ mutable.Set[Long]()\n        val odd_index_set = mutable.Set[Long]()\n     \
    \   val even_index_set = mutable.Set[Long]()\n        val odd_index_set = mutable.Set[Long]()\n\
    \        val even_index_set = mutable.Set[Long]()\n        val odd_index_set =\
    \ mutable.Set[Long]()\n        val even_index_set = mutable.Set[Long]()\n    \
    \    val odd_index_set = mutable.Set[Long]()\n        val even_index_set = mutable.Set[Long]()\n\
    \        val odd_index_set = mutable.Set[Long]()\n        val even_index_set =\
    \ mutable.Set[Long]()\n        val odd_index_set = mutable.Set[Long]()\n     \
    \   val even_index_set = mutable.Set[Long]()\n        val odd_index_set = mutable.Set[Long]()\n\
    \        val even_index_set = mutable.Set[Long]()\n        val odd_index_set =\
    \ mutable.Set[Long]()\n        val even_index_set = mutable.Set[Long]()\n    \
    \    val odd_index_set = mutable.Set[Long]()\n        val even_index_set = mutable.Set[Long]()\n\
    \        val odd_index_set = mutable.Set[Long]()\n        val even_index_set =\
    \ mutable.Set[Long]()\n        val odd_index_set = mutable.Set[Long]()\n     \
    \   val even_index_set = mutable.Set[Long]()\n        val odd_index_set = mutable.Set[Long]()\n\
    \        val even_index_set = mutable.Set[Long]()\n        val odd_index_set =\
    \ mutable.Set[Long]()\n        val even_index_set = mutable.Set[Long]()\n    \
    \    val odd_index_set = mutable.Set[Long]()\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq45jxt5q.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36modd_index_set\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_index_set is already defined as \e[33mvalue\e[0m \e[35modd_index_set\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq45jxt5q.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36meven_index_set\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_index_set is already defined as \e[33mvalue\e[0m \e[35meven_index_set\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq45jxt5q.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36modd_index_set\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_index_set is already defined as \e[33mvalue\e[0m \e[35modd_index_set\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq45jxt5q.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36meven_index_set\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_index_set is already defined as \e[33mvalue\e[0m \e[35meven_index_set\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq45jxt5q.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36modd_index_set\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m"
  stdout: ''
  timestamp: 1659797688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val current = range.next\n            if (current % 2 == 0) {\n     \
    \           evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpon5xapso.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpon5xapso.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b)\n        range.foreach { x =>\n            if\
    \ (x % 2 == 0) {\n                evens += x\n            } else {\n         \
    \       odds += x\n            }\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn8p7cntb.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpn8p7cntb.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpn8p7cntb.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn8p7cntb.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (b : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).span(_ % 2 == 0)\n        for (i <- range) {\n\
    \            if (i % 2 == 0) {\n                evens += i\n            } else\
    \ {\n                odds += i\n            }\n        }\n        evens.toList\
    \ ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbr170wo.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdbr170wo.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdbr170wo.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).span(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \     ^\e[0m\n\e[31m   |\e[0m                          Found:    (a : Long)\n\e\
    [31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpdbr170wo.scala:13:29 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).span(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \        ^\e[0m\n\e[31m   |\e[0m                             Found:    (b : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpdbr170wo.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- range) {\n\e[31m\e[31m \
    \  |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ foreach is not a member of (Range, Range)\n5 errors found\n"
  stdout: ''
  timestamp: 1659797690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        val start = a\n       \
    \ val end = b\n        while(start < end) {\n            val mid = start + (end\
    \ - start) / 2\n            val digit = math.pow(10, math.ceil(math.log(mid) /\
    \ math.log(10)))\n            list += mid\n            start = mid + 1\n     \
    \   }\n        list.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoxemzoly.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpoxemzoly.scala:18:18 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            start = mid + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val start\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = (a to b).iterator\n        for (i <- range) {\n         \
    \   if (i % 2 == 0) {\n                evens += i\n            } else {\n    \
    \            odds += i\n            }\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpda5i_8rf.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpda5i_8rf.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = (a to b).iterator\n        while(range.hasNext) {\n     \
    \       val current = range.next\n            val remainder = current % 10\n \
    \           if(remainder == 0) {\n                evens += current\n         \
    \   } else {\n                odds += current\n            }\n        }\n    \
    \    evens.toList ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr_xvxjll.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpr_xvxjll.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val evensCount = mutable.ListBuffer[Long]()\n\
    \        val evensCount2 = mutable.ListBuffer[Long]()\n        val evensCount3\
    \ = mutable.ListBuffer[Long]()\n        val evensCount4 = mutable.ListBuffer[Long]()\n\
    \        val evensCount5 = mutable.ListBuffer[Long]()\n        val evensCount6\
    \ = mutable.ListBuffer[Long]()\n        val evensCount7 = mutable.ListBuffer[Long]()\n\
    \        val evensCount8 = mutable.ListBuffer[Long]()\n        val evensCount9\
    \ = mutable.ListBuffer[Long]()\n        val evensCount10 = mutable.ListBuffer[Long]()\n\
    \        val evensCount11 = mutable.ListBuffer[Long]()\n        val evensCount12\
    \ = mutable.ListBuffer[Long]()\n        val evensCount13 = mutable.ListBuffer[Long]()\n\
    \        val evensCount14 = mutable.ListBuffer[Long]()\n        val evensCount15\
    \ = mutable.ListBuffer[Long]()\n        val evensCount16 = mutable.ListBuffer[Long]()\n\
    \        val evensCount17 = mutable.ListBuffer[Long]()\n        val evensCount18\
    \ = mutable.ListBuffer[Long]()\n        val evensCount19 = mutable.ListBuffer[Long]()\n\
    \        val evensCount20 = mutable.ListBuffer[Long]()\n        val evensCount21\
    \ = mutable.ListBuffer[Long]()\n        val evensCount22 = mutable.ListBuffer[Long]()\n\
    \        val evensCount23 = mutable.ListBuffer[Long]()\n        val evensCount24\
    \ = mutable.ListBuffer[Long]()\n        val evensCount25 = mutable.ListBuffer[Long]()\n\
    \        val evensCount26 = mutable.ListBuffer[Long]()\n        val evensCount27\
    \ = mutable.ListBuffer[Long]()\n        val evensCount28 = mutable.ListBuffer[Long]()\n\
    \        val evensCount29 = mutable.ListBuffer[Long]()\n        val evensCount30\
    \ = mutable.ListBuffer[Long]()\n        val evensCount31 = mutable.ListBuffer[Long]()\n\
    \        val evensCount32 = mutable.ListBuffer[Long]()\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5ewigh7.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpl5ewigh7.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevensCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5ewigh7.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevensCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5ewigh7.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevensCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5ewigh7.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevensCount4\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5ewigh7.scala:16:26 ------------------------\e\
    [0m\e[0m\n"
  stdout: ''
  timestamp: 1659797693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = new mutable.ListBuffer[Long]()\n        val start = (a to\
    \ b).iterator\n        val end = (a to b).reverse.iterator\n        while(start.hasNext\
    \ && end.hasNext) {\n            val mid = (start.next + end.next) / 2\n     \
    \       val even = mid.filter(_ % 2 == 0)\n            val odd = mid.filter(_\
    \ % 2 != 0)\n            if(even.size < odd.size) {\n                result +=\
    \ even\n                start.next\n            } else {\n                result\
    \ += odd\n                end.next\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3qmxe4vy.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3qmxe4vy.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m\
    \ \e[36meven\e[0m = mid.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           value filter is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp3qmxe4vy.scala:17:26 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = mid.filter(_ % \e[31m2\e[0m\
    \ != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      value filter is not a member of Long\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = new mutable.ListBuffer[Long]()\n        val lower = math.min(a,\
    \ b)\n        val upper = math.max(a, b)\n        var i = lower\n        while\
    \ (i <= upper) {\n            result += i\n            i += 2\n        }\n   \
    \     result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw0tat_po.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n\
    \        val end = (b / a).toInt\n        val mid = a / 2\n        val mid2 =\
    \ (b / 2).toInt\n        val mid3 = (a / 2).toInt\n        val mid4 = (b / 2).toInt\n\
    \        val mid5 = (a / 2).toInt\n        val mid6 = (b / 2).toInt\n        val\
    \ mid7 = (a / 2).toInt\n        val mid8 = (b / 2).toInt\n        val mid9 = (a\
    \ / 2).toInt\n        val mid10 = (b / 2).toInt\n        val mid11 = (a / 2).toInt\n\
    \        val mid12 = (b / 2).toInt\n        val mid13 = (a / 2).toInt\n      \
    \  val mid14 = (b / 2).toInt\n        val mid15 = (a / 2).toInt\n        val mid16\
    \ = (b / 2).toInt\n        val mid17 = (a / 2).toInt\n        val mid18 = (b /\
    \ 2).toInt\n        val mid19 = (a / 2).toInt\n        val mid20 = (b / 2).toInt\n\
    \        val mid21 = (a / 2).toInt\n        val mid22 = (b / 2).toInt\n      \
    \  val mid23 = (a / 2).toInt\n        val mid24 = (b / 2).toInt\n        val mid25\
    \ = (a / 2).toInt\n        val mid26 = (b / 2).toInt\n        val mid27 = (a /\
    \ 2).toInt\n        val mid28 = (b / 2).toInt\n        val mid29 = (a / 2).toInt\n\
    \        val mid30 = (b / 2).toInt\n        val mid31 = (a / 2).toInt\n      \
    \  val mid32 = (b / 2).toInt\n        val mid33 = (a / 2).toInt\n        val mid34\
    \ = (b / 2).toInt\n        val mid35 = (a / 2).toInt\n        val mid36 = (b /\
    \ 2).toInt\n        val mid37 = (a / 2).toInt\n        val mid38 = (b / 2).toInt\n\
    \        val mid39 = (a / 2).toInt\n        val mid40 = (b / 2).toInt\n      \
    \  val mid41 = (a / 2).toInt\n        val mid42 = (b / 2).toInt\n        val mid43\
    \ = (a / 2).toInt\n        val mid44 = (b / 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxkkiwufk.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxkkiwufk.scala:11:21\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxkkiwufk.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        val evenRange = range.filter(x =>\
    \ x % 2 == 0)\n        val oddRange = range.filter(x => x % 2 != 0)\n        evenRange.foreach(x\
    \ => evens += x)\n        oddRange.foreach(x => odds += x)\n        evens.toList.sortBy(x\
    \ => x)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr85kdjed.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpr85kdjed.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        val start = a\n       \
    \ val end = b\n        val step = end - start\n        val mid = start + (step\
    \ / 2)\n        while(start < end) {\n            list += mid\n            start\
    \ += step\n            mid = start + (step / 2)\n        }\n        list.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4jmmzk40.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp4jmmzk40.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            start += step\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean start.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp4jmmzk40.scala:19:16\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            mid = start\
    \ + (step / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val mid\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        var i = a\n        var\
    \ j = b\n        while(i <= j) {\n            list+=i\n            i+=2\n    \
    \    }\n        list.sortWith(_ < _)\n        list.filter(_ % 2 == 0)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb42o2nwm.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = new mutable.ListBuffer[Long]()\n        val range = (a to\
    \ b).toList\n        for(i <- range) {\n            val remainder = i % 10\n \
    \           val newDigit = if (remainder == 0) i else 10 + remainder\n       \
    \     result += newDigit\n        }\n        return result.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy5x0ag3v.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val even = a / 2\n   \
    \     val odd = a % 2\n        val evens = a until b\n        evens foreach {\
    \ x =>\n            if (x % 2 == 0) {\n                evens += x\n          \
    \  }\n        }\n        evens.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpinysk6h7.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = a until b\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevens\
    \ is already defined as \e[33mvalue\e[0m \e[35mevens\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpinysk6h7.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = (a to b).iterator\n        for (i <- range) {\n         \
    \   if (i % 2 == 0) {\n                evens += i\n            } else {\n    \
    \            odds += i\n            }\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpda5i_8rf.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpda5i_8rf.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = (a to b).toList\n        range.foreach { x =>\n         \
    \   if (x % 2 == 0) {\n                evens += x\n            } else {\n    \
    \            odds += x\n            }\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0u58sfc2.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0u58sfc2.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = new mutable.ListBuffer[Long]()\n        val range = (a to\
    \ b).toList\n        range.foreach { x =>\n            val digit = x % 10\n  \
    \          if (digit % 2 == 0) {\n                result.+=(x)\n            }\n\
    \        }\n        result.sortWith(_ < _)\n        return result.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_s4yo0kn.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val evensCount = mutable.ListBuffer[Long]()\n\
    \        val evensCount2 = mutable.ListBuffer[Long]()\n        val evensCount3\
    \ = mutable.ListBuffer[Long]()\n        val evensCount4 = mutable.ListBuffer[Long]()\n\
    \        val evensCount5 = mutable.ListBuffer[Long]()\n        val evensCount6\
    \ = mutable.ListBuffer[Long]()\n        val evensCount7 = mutable.ListBuffer[Long]()\n\
    \        val evensCount8 = mutable.ListBuffer[Long]()\n        val evensCount9\
    \ = mutable.ListBuffer[Long]()\n        val evensCount10 = mutable.ListBuffer[Long]()\n\
    \        val evensCount11 = mutable.ListBuffer[Long]()\n        val evensCount12\
    \ = mutable.ListBuffer[Long]()\n        val evensCount13 = mutable.ListBuffer[Long]()\n\
    \        val evensCount14 = mutable.ListBuffer[Long]()\n        val evensCount15\
    \ = mutable.ListBuffer[Long]()\n        val evensCount16 = mutable.ListBuffer[Long]()\n\
    \        val evensCount17 = mutable.ListBuffer[Long]()\n        val evensCount18\
    \ = mutable.ListBuffer[Long]()\n        val evensCount19 = mutable.ListBuffer[Long]()\n\
    \        val evensCount20 = mutable.ListBuffer[Long]()\n        val evensCount21\
    \ = mutable.ListBuffer[Long]()\n        val evensCount22 = mutable.ListBuffer[Long]()\n\
    \        val evensCount23 = mutable.ListBuffer[Long]()\n        val evensCount24\
    \ = mutable.ListBuffer[Long]()\n        val evensCount25 = mutable.ListBuffer[Long]()\n\
    \        val evensCount26 = mutable.ListBuffer[Long]()\n        val evensCount27\
    \ = mutable.ListBuffer[Long]()\n        val evensCount28 = mutable.ListBuffer[Long]()\n\
    \        val evensCount29 = mutable.ListBuffer[Long]()\n        val evensCount30\
    \ = mutable.ListBuffer[Long]()\n        val evensCount31 = mutable.ListBuffer[Long]()\n\
    \        val evensCount32 = mutable.ListBuffer[Long]()\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5ewigh7.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpl5ewigh7.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevensCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5ewigh7.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevensCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5ewigh7.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevensCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5ewigh7.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevensCount4\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5ewigh7.scala:16:26 ------------------------\e\
    [0m\e[0m\n"
  stdout: ''
  timestamp: 1659797693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = (a to b).iterator\n        while(range.hasNext) {\n     \
    \       val x = range.next\n            if((x % 2) == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq9dfz9lt.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpq9dfz9lt.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while(range.hasNext) {\n     \
    \       val current = range.next\n            if (current % 2 == 0) {\n      \
    \          evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf836xxgz.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf836xxgz.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        val remainder = a % b\n\
    \        var i = a\n        while (i <= b) {\n            list += i\n        \
    \    i += remainder\n        }\n        list.sortWith(_ < _)\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp09gbz08n.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val low = a\n        val\
    \ high = b\n        while(low < high) {\n            val mid = (low + high) /\
    \ 2\n            val digit = math.floor(mid)\n            if(digit % 2 == 0) {\n\
    \                evens += digit\n            }\n            else if(digit < a)\
    \ {\n                low = mid + 1\n            }\n            else {\n      \
    \          high = mid - 1\n            }\n        }\n        evens.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4tmjl5zs.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp4tmjl5zs.scala:21:20 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                low = mid + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val low\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp4tmjl5zs.scala:24:21\
    \ -----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                high\
    \ = mid - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val high\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659797696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpot0cy25s.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpot0cy25s.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36modd_sum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0modd_sum\
    \ is already defined as \e[33mvalue\e[0m \e[35modd_sum\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpot0cy25s.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36meven_sum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0meven_sum\
    \ is already defined as \e[33mvalue\e[0m \e[35meven_sum\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpot0cy25s.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36modd_count\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0modd_count is already defined as \e[33mvalue\e[0m \e[35modd_count\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpot0cy25s.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_count\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_count is already defined as \e[33mvalue\e[0m \e[35meven_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659797678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val even_count =\
    \ mutable.ListBuffer[Long]()\n        val evens_count = mutable.ListBuffer[Long]()\n\
    \        val odd_count_count = mutable.ListBuffer[Long]()\n        val even_count_count\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_count = mutable.ListBuffer[Long]()\n\
    \        val odd_count_count_count = mutable.ListBuffer[Long]()\n        val even_count_count_count\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_count_count = mutable.ListBuffer[Long]()\n\
    \        val odd_count_count_count_count = mutable.ListBuffer[Long]()\n      \
    \  val even_count_count_count_count = mutable.ListBuffer[Long]()\n        val\
    \ evens_count_count_count_count = mutable.ListBuffer[Long]()\n        val odd_count_count_count_count_count\
    \ = mutable.ListBuffer[Long]()\n        val even_count_count_count_count_count\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_count_count_count_count\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_count_count_count_count_count\
    \ = mutable.ListBuffer[Long]()\n        val even_count_count_count_count_count_count\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_count_count_count_count_count\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_count_count_count_count_count_count\
    \ = mutable.ListBuffer[Long]()\n        val even_count_count_count_count_count_count_count\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_count_count_count_count_count_count_count\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_count_count_count_count_count_count_count\
    \ = mutable.ListBuffer[Long]()\n        val even_count_count_count_count_count_count_count_count\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_count_count_count_count_count_count_count\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_count_count_count_count_count_count_count_count\
    \ = mutable.ListBuffer[Long]()\n        val even_count_count_count_count_count_count_count_count_count\
    \ = mutable.List\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf5rbos5l.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36meven_count\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_count is already defined as \e[33mvalue\e[0m \e[35meven_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf5rbos5l.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mevens_count_count_count_count_count_count_count_count\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevens_count_count_count_count_count_count_count_count is already\
    \ defined as \e[33mvalue\e[0m \e[35mevens_count_count_count_count_count_count_count_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpf5rbos5l.scala:11:20 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf5rbos5l.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf5rbos5l.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659797698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n\
    \        val end = (a / b).toInt\n        val mid = (a + b) / 2\n        val mid2\
    \ = mid / 2\n        val mid3 = mid / 3\n        val mid4 = mid / 4\n        val\
    \ mid5 = mid / 5\n        val mid6 = mid / 6\n        val mid7 = mid / 7\n   \
    \     val mid8 = mid / 8\n        val mid9 = mid / 9\n        val mid10 = mid\
    \ / 10\n        val mid11 = mid / 11\n        val mid12 = mid / 12\n        val\
    \ mid13 = mid / 13\n        val mid14 = mid / 14\n        val mid15 = mid / 15\n\
    \        val mid16 = mid / 16\n        val mid17 = mid / 17\n        val mid18\
    \ = mid / 18\n        val mid19 = mid / 19\n        val mid20 = mid / 20\n   \
    \     val mid21 = mid / 21\n        val mid22 = mid / 22\n        val mid23 =\
    \ mid / 23\n        val mid24 = mid / 24\n        val mid25 = mid / 25\n     \
    \   val mid26 = mid / 26\n        val mid27 = mid / 27\n        val mid28 = mid\
    \ / 28\n        val mid29 = mid / 29\n        val mid30 = mid / 30\n        val\
    \ mid31 = mid / 31\n        val mid32 = mid / 32\n        val mid33 = mid / 33\n\
    \        val mid34 = mid / 34\n        val mid35 = mid / 35\n        val mid36\
    \ = mid / 36\n        val mid37 = mid / 37\n        val mid38 = mid / 38\n   \
    \     val mid39 = mid / 39\n        val mid40 = mid / 40\n        val mid41 =\
    \ mid / 41\n        val mid42 = mid / 42\n        val mid43 = mid / 43\n     \
    \   val mid44 = mid / 44\n        val mid45 = mid / 45\n        val mid46 = mid\
    \ / 46\n        val mid47 = mid / 47\n        val mid48 = mid / 48\n        val\
    \ mid49 = mid / 49\n        val mid50 = mid / 50\n        val mid51 = mid / 51\n\
    \        val mid52 = mid / 52\n        val mid53 = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpc74h6s9_.scala:66:19 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \e[36mmid53\e[0m = \n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpc74h6s9_.scala:11:19 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpc74h6s9_.scala:67:5 ---------------------\e[0m\e[0m\n\e[31m67\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = a / 2\n        val odd = b / 2\n        val i = a\n      \
    \  val j = b\n        while (i <= j) {\n            if (i % 2 == 0) {\n      \
    \          evens += i\n            } else {\n                odds += i\n     \
    \       }\n            i += 1\n            j += 1\n        }\n        evens.toList\
    \ ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdqyoo7m.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsdqyoo7m.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpsdqyoo7m.scala:23:14 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsdqyoo7m.scala:24:14\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            j += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean j.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659797700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_count_copy\
    \ = mutable.ListBuffer[Long]()\n        val even_count_copy = mutable.ListBuffer[Long]()\n\
    \        val odd_count_copy_2 = mutable.ListBuffer[Long]()\n        val even_count_copy_2\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_copy_3 = mutable.ListBuffer[Long]()\n\
    \        val even_count_copy_3 = mutable.ListBuffer[Long]()\n        val odd_count_copy_4\
    \ = mutable.ListBuffer[Long]()\n        val even_count_copy_4 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_copy_5 = mutable.ListBuffer[Long]()\n        val even_count_copy_5\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_copy_6 = mutable.ListBuffer[Long]()\n\
    \        val even_count_copy_6 = mutable.ListBuffer[Long]()\n        val odd_count_copy_7\
    \ = mutable.ListBuffer[Long]()\n        val even_count_copy_7 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_copy_8 = mutable.ListBuffer[Long]()\n        val even_count_copy_8\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_copy_9 = mutable.ListBuffer[Long]()\n\
    \        val even_count_copy_9 = mutable.ListBuffer[Long]()\n        val odd_count_copy_10\
    \ = mutable.ListBuffer[Long]()\n        val even_count_copy_10 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_copy_11 = mutable.ListBuffer[Long]()\n        val even_count_copy_11\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_copy_12 = mutable.ListBuffer[Long]()\n\
    \        val even_count_copy_12 = mutable.ListBuffer[Long]()\n        val odd_count_copy_13\
    \ = mutable.ListBuffer[Long]()\n        val even_count_copy_13 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_copy_14 = mutable.ListBuffer[Long]()\n        val even_count_copy_14\
    \ = mutable.ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgminb0bk.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgminb0bk.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgminb0bk.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgminb0bk.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgminb0bk.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven_count\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpgminb0bk.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36modd_count_co"
  stdout: ''
  timestamp: 1659797700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_even = mutable.ListBuffer[Long]()\n\
    \        val odd_odd = mutable.ListBuffer[Long]()\n        val evens_odd = mutable.ListBuffer[Long]()\n\
    \        val evens_even = mutable.ListBuffer[Long]()\n        val odd_evens_odd\
    \ = mutable.ListBuffer[Long]()\n        val odd_evens_even = mutable.ListBuffer[Long]()\n\
    \        val evens_odd_odd = mutable.ListBuffer[Long]()\n        val evens_evens_odd\
    \ = mutable.ListBuffer[Long]()\n        val odd_evens_evens_odd = mutable.ListBuffer[Long]()\n\
    \        val odd_evens_evens_even = mutable.ListBuffer[Long]()\n        val evens_odd_odd_odd\
    \ = mutable.ListBuffer[Long]()\n        val evens_evens_odd_odd = mutable.ListBuffer[Long]()\n\
    \        val evens_evens_evens_odd = mutable.ListBuffer[Long]()\n        val odd_evens_evens_evens_odd\
    \ = mutable.ListBuffer[Long]()\n        val odd_evens_evens_evens_even = mutable.ListBuffer[Long]()\n\
    \        val evens_odd_odd_odd_odd = mutable.ListBuffer[Long]()\n        val evens_evens_odd_odd_odd\
    \ = mutable.ListBuffer[Long]()\n        val evens_evens_evens_odd_odd = mutable.ListBuffer[Long]()\n\
    \        val odd_evens_evens_evens_evens_odd = mutable.ListBuffer[Long]()\n  \
    \      val odd_evens_evens_evens_evens_even = mutable.ListBuffer[Long]()\n   \
    \     val evens_odd_odd_odd_odd_odd = mutable.ListBuffer[Long]()\n        val\
    \ evens_evens_odd_odd_odd_odd = mutable.ListBuffer[Long]()\n        val evens_evens_evens_odd_odd_odd\
    \ = mutable.ListBuffer[Long]()\n        val odd_evens_evens_evens_evens_evens_odd\
    \ = mutable.ListBuffer[Long]()\n        val odd_even\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjf9qpm_p.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjf9qpm_p.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjf9qpm_p.scala:12:18\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjf9qpm_p.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjf9qpm_p.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modd_even\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjf9qpm_p.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36modd_odd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ wh"
  stdout: ''
  timestamp: 1659797700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            if\
    \ (i % 2 == 0) {\n                evens += i\n            } else {\n         \
    \       odds += i\n            }\n            i += 1\n            j += 1\n   \
    \     }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppd3atpah.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppd3atpah.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n\
    \        val end = (a / b).toInt + 1\n        val range = end - start\n      \
    \  val remainder = a % b\n        val remainderRange = range - remainder\n   \
    \     val remainderRangeInt = remainderRange.toInt\n        val remainderRangeIntInt\
    \ = remainderRangeInt.toInt\n        val remainderRangeIntInt = remainderRangeIntInt.toInt\n\
    \        val remainderRangeIntInt = remainderRangeIntInt.toInt\n        val remainderRangeIntInt\
    \ = remainderRangeIntInt.toInt\n        val remainderRangeIntInt = remainderRangeIntInt.toInt\n\
    \        val remainderRangeIntInt = remainderRangeIntInt.toInt\n        val remainderRangeIntInt\
    \ = remainderRangeIntInt.toInt\n        val remainderRangeIntInt = remainderRangeIntInt.toInt\n\
    \        val remainderRangeIntInt = remainderRangeIntInt.toInt\n        val remainderRangeIntInt\
    \ = remainderRangeIntInt.toInt\n        val remainderRangeIntInt = remainderRangeIntInt.toInt\n\
    \        val remainderRangeIntInt = remainderRangeIntInt.toInt\n        val remainderRangeIntInt\
    \ = remainderRangeIntInt.toInt\n        val remainderRangeIntInt = remainderRangeIntInt.toInt\n\
    \        val remainderRangeIntInt = remainderRangeIntInt.toInt\n        val remainderRangeIntInt\
    \ = remainderRangeIntInt.toInt\n        val remainderRangeIntInt = remainderRangeIntInt.toInt\n\
    \        val remainderRangeIntInt = remainderRangeIntInt.toInt\n        val remainderRangeIntInt\
    \ = remainderRangeIntInt.toInt\n        val remainderRangeIntInt = remainderRangeIntInt.toInt\n\
    \        val remainderRangeIntInt = remainderRangeIntInt.toInt\n        val remainderRangeIntInt\
    \ = remainderRangeIntInt.toInt\n        val remainderRangeIntInt = remainderRangeIntInt.toInt\n\
    \        val remainderRangeIntInt = remainderRangeIntInt.toInt\n        val remainderRangeIntInt\
    \ = remainderRangeIntInt.toInt\n        val remainderRangeIntInt = remainderRangeIntInt.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk_iga47w.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mremainderRangeIntInt\e[0m\
    \ = remainderRangeIntInt.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderRangeIntInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mremainderRangeIntInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpk_iga47w.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mremainderRangeIntInt\e[0m\
    \ = remainderRangeIntInt.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderRangeIntInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mremainderRangeIntInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpk_iga47w.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mremainderRangeIntInt\e[0m\
    \ = remainderRangeIntInt.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderRangeIntInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mremainderRangeIntInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpk_iga47w.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mremainderRangeIntInt\e[0m\
    \ = remainderRangeIntInt.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderRangeIntInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mremainderRangeIntInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpk_iga47w.scala:23:12 -----"
  stdout: ''
  timestamp: 1659797701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        range.foreach { x =>\n         \
    \   if (x % 2 == 0) {\n                evens += x\n            } else {\n    \
    \            odds += x\n            }\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptcmt1mxo.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptcmt1mxo.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = mutable.ArrayBuffer.empty[Long]\n        val lower = math.min(a,\
    \ b)\n        val upper = math.max(a, b)\n        val range = upper - lower\n\
    \        val digits = math.pow(10, math.ceil(math.log(range, 10)))\n        val\
    \ range = math.pow(10, math.ceil(math.log(range, 10)))\n        for (i <- 0 until\
    \ digits) {\n            val digit = math.floor(i / range)\n            if (digit\
    \ % 2 == 0) {\n                result += digit\n            }\n        }\n   \
    \     result.sort\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8bcumz5b.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = math.pow(\e\
    [31m10\e[0m, math.ceil(math.log(range, \e[31m10\e[0m)))\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mrange is already defined as \e[33mvalue\e[0m \e[35mrange\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8bcumz5b.scala:11:21 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp8bcumz5b.scala:15:53 --------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = math.pow(\e[31m10\e\
    [0m, math.ceil(math.log(range, \e[31m10\e[0m)))\n\e[31m\e[31m   |\e[0m       \
    \                                              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                   Found:    (Long, Int)\n\e\
    [31m   |\e[0m                                                   Required: Double\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8bcumz5b.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until digits) {\n\e[31m\e[31m   |\e[0m                        \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    (digits : Double)\n\
    \e[31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        range.foreach { x =>\n         \
    \   if (x % 2 == 0) {\n                evens += x\n            } else {\n    \
    \            odds += x\n            }\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptcmt1mxo.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptcmt1mxo.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        var i = a\n        var\
    \ j = b\n        while (i <= j) {\n            evens += i\n            i += 2\n\
    \        }\n        evens.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd_uv14av.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val odd_product =\
    \ mutable.ListBuffer[Long]()\n        val even_product = mutable.ListBuffer[Long]()\n\
    \        val odd_quotient = mutable.ListBuffer[Long]()\n        val even_quotient\
    \ = mutable.ListBuffer[Long]()\n        val odd_remainder = mutable.ListBuffer[Long]()\n\
    \        val even_remainder = mutable.ListBuffer[Long]()\n        val odd_remainder_count\
    \ = mutable.ListBuffer[Long]()\n        val even_remainder_count = mutable.ListBuffer[Long]()\n\
    \        val odd_remainder_sum = mutable.ListBuffer[Long]()\n        val even_remainder_sum\
    \ = mutable.ListBuffer[Long]()\n        val odd_remainder_product = mutable.ListBuffer[Long]()\n\
    \        val even_remainder_product = mutable.ListBuffer[Long]()\n        val\
    \ odd_remainder_quotient = mutable.ListBuffer[Long]()\n        val even_remainder_quotient\
    \ = mutable.ListBuffer[Long]()\n        val odd_remainder_remainder = mutable.ListBuffer[Long]()\n\
    \        val even_remainder_remainder = mutable.ListBuffer[Long]()\n        val\
    \ odd_remainder_remainder_count = mutable.ListBuffer[Long]()\n        val even_remainder_remainder_count\
    \ = mutable.ListBuffer[Long]()\n        val odd_remainder_remainder_sum = mutable.ListBuffer[Long]()\n\
    \        val even_remainder_remainder_sum = mutable.ListBuffer[Long]()\n     \
    \   val odd_remainder_remainder_product = mutable.ListBuffer[Long]()\n       \
    \ val even_remainder_remainder_product = mutable.ListBuffer[Long]()\n        val\
    \ odd_remainder_remainder_quotient = mutable.ListBuffer[Long]()\n        val even_remainder_remainder_quotient\
    \ = mutable.ListBuffer[Long]()\n        val odd_remainder_remain\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpntqnbzdx.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpntqnbzdx.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpntqnbzdx.scala:12:18\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpntqnbzdx.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpntqnbzdx.scala:14:24\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modd_count\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpntqnbzdx.scala:15:25\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36meven_count\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation "
  stdout: ''
  timestamp: 1659797704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val numsEven = mutable.ListBuffer[Long]()\n\
    \        val numsOdd = mutable.ListBuffer[Long]()\n        val numsEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEven = mutable.ListBuffer[Long]()\n        val numsEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n        val\
    \ numsEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n     \
    \   val numsEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n      \
    \  val numsEvenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n   \
    \     val numsEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n \
    \       val numsEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val numsEvenOddEvenOddEvenOddEvenOddEven\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph7iui4uk.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph7iui4uk.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph7iui4uk.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph7iui4uk.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mnums\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph7iui4uk.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsEven\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph7iui4uk.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsOdd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available"
  stdout: ''
  timestamp: 1659797686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val evens_count\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_sum = mutable.ListBuffer[Long]()\n\
    \        val even_count_sum = mutable.ListBuffer[Long]()\n        val evens_count_sum\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sum2 = mutable.ListBuffer[Long]()\n\
    \        val evens_count_sum3 = mutable.ListBuffer[Long]()\n        val evens_count_sum4\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sum5 = mutable.ListBuffer[Long]()\n\
    \        val evens_count_sum6 = mutable.ListBuffer[Long]()\n        val evens_count_sum7\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sum8 = mutable.ListBuffer[Long]()\n\
    \        val evens_count_sum9 = mutable.ListBuffer[Long]()\n        val evens_count_sum10\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sum11 = mutable.ListBuffer[Long]()\n\
    \        val evens_count_sum12 = mutable.ListBuffer[Long]()\n        val evens_count_sum13\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sum14 = mutable.ListBuffer[Long]()\n\
    \        val evens_count_sum15 = mutable.ListBuffer[Long]()\n        val evens_count_sum16\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sum17 = mutable.ListBuffer[Long]()\n\
    \        val evens_count_sum18 = mutable.ListBuffer[Long]()\n        val evens_count_sum19\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sum20 = mutable.ListBuffer[Long]()\n\
    \        val evens_count_sum21 = mutable.ListBuffer[Long]()\n        val evens_count_sum22\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sum23 = mutable.ListBuffer[Long]()\n\
    \        val evens_count_sum24 = mutable.ListBuffer[Long]()\n        val evens_count_sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp84iu79ww.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp84iu79ww.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp84iu79ww.scala:12:18\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp84iu79ww.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp84iu79ww.scala:14:24\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modd_count\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp84iu79ww.scala:15:25\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36meven_count\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation "
  stdout: ''
  timestamp: 1659797704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensCount = mutable.ListBuffer[Long]()\n        val oddsCount =\
    \ mutable.ListBuffer[Long]()\n        val range = (a to b).iterator\n        while(range.hasNext)\
    \ {\n            val current = range.next\n            if(current % 2 == 0) {\n\
    \                evens += current\n                evensCount += current\n   \
    \         } else {\n                odds += current\n                oddsCount\
    \ += current\n            }\n        }\n        evens.toList.sortWith(_ < _)\n\
    \        evensCount.toList.sortWith(_ < _)\n        odds.toList.sortWith(_ < _)\n\
    \        oddsCount.toList.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj93rnq_y.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpj93rnq_y.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpj93rnq_y.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevensCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpj93rnq_y.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36moddsCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val even = a / 2\n   \
    \     val odd = a % 2\n        val evens = a until b\n        evens foreach {\
    \ x => if (x % 2 == 0) evens += x }\n        evens.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnh1rbzjm.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = a until b\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevens\
    \ is already defined as \e[33mvalue\e[0m \e[35mevens\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnh1rbzjm.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).filter(x => x % 2 == 0)\n        range.foreach(x\
    \ => x % 2 == 0 match {\n            case true => evens += x\n            case\
    \ false => odd += x\n        })\n        evens ++ odd.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwdp4xqaa.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwdp4xqaa.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwdp4xqaa.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                   ^\e[0m\n\e[31m   |\e[0m                          Found:  \
    \  (a : Long)\n\e[31m   |\e[0m                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwdp4xqaa.scala:13:29 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                      ^\e[0m\n\e[31m   |\e[0m                             Found:\
    \    (b : Long)\n\e[31m   |\e[0m                             Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val even = a / b\n   \
    \     val remainder = a % b\n        val evens = generateIntegers(even, remainder)\n\
    \        evens += even\n        evens\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphpv79vij.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = generateIntegers(even,\
    \ remainder)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevens is already defined as \e[33mvalue\e[0m \e[35mevens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmphpv79vij.scala:11:20 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val evens_count\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_sorted = mutable.ListBuffer[Long]()\n\
    \        val even_count_sorted = mutable.ListBuffer[Long]()\n        val evens_count_sorted\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_sorted_reverse = mutable.ListBuffer[Long]()\n\
    \        val even_count_sorted_reverse = mutable.ListBuffer[Long]()\n        val\
    \ evens_count_sorted_reverse = mutable.ListBuffer[Long]()\n        val odd_count_sorted_reverse_sorted\
    \ = mutable.ListBuffer[Long]()\n        val even_count_sorted_reverse_sorted =\
    \ mutable.ListBuffer[Long]()\n        val evens_count_sorted_reverse_sorted =\
    \ mutable.ListBuffer[Long]()\n        val odd_count_sorted_reverse_sorted_reverse\
    \ = mutable.ListBuffer[Long]()\n        val even_count_sorted_reverse_sorted_reverse\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sorted_reverse_sorted_reverse\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.ListBuffer[Long]()\n        val even_count_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.ListBuffer[Long]()\n        val even_count_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.ListBuffer[Long]()\n        val even_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.ListBuffer[Long]()\n        val even_count_sorted_reverse_sorted_reverse_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8ej5ivj3.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ej5ivj3.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ej5ivj3.scala:12:18\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ej5ivj3.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ej5ivj3.scala:14:24\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modd_count\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ej5ivj3.scala:15:25\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36meven_count\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation "
  stdout: ''
  timestamp: 1659797706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val evensCount = mutable.ListBuffer[Long]()\n\
    \        val evensCount2 = mutable.ListBuffer[Long]()\n        val evensCount3\
    \ = mutable.ListBuffer[Long]()\n        val evensCount4 = mutable.ListBuffer[Long]()\n\
    \        val evensCount5 = mutable.ListBuffer[Long]()\n        val evensCount6\
    \ = mutable.ListBuffer[Long]()\n        val evensCount7 = mutable.ListBuffer[Long]()\n\
    \        val evensCount8 = mutable.ListBuffer[Long]()\n        val evensCount9\
    \ = mutable.ListBuffer[Long]()\n        val evensCount10 = mutable.ListBuffer[Long]()\n\
    \        val evensCount11 = mutable.ListBuffer[Long]()\n        val evensCount12\
    \ = mutable.ListBuffer[Long]()\n        val evensCount13 = mutable.ListBuffer[Long]()\n\
    \        val evensCount14 = mutable.ListBuffer[Long]()\n        val evensCount15\
    \ = mutable.ListBuffer[Long]()\n        val evensCount16 = mutable.ListBuffer[Long]()\n\
    \        val evensCount17 = mutable.ListBuffer[Long]()\n        val evensCount18\
    \ = mutable.ListBuffer[Long]()\n        val evensCount19 = mutable.ListBuffer[Long]()\n\
    \        val evensCount20 = mutable.ListBuffer[Long]()\n        val evensCount21\
    \ = mutable.ListBuffer[Long]()\n        val evensCount22 = mutable.ListBuffer[Long]()\n\
    \        val evensCount23 = mutable.ListBuffer[Long]()\n        val evensCount24\
    \ = mutable.ListBuffer[Long]()\n        val evensCount25 = mutable.ListBuffer[Long]()\n\
    \        val evensCount26 = mutable.ListBuffer[Long]()\n        val evensCount27\
    \ = mutable.ListBuffer[Long]()\n        val evensCount28 = mutable.ListBuffer[Long]()\n\
    \        val evensCount29 = mutable.ListBuffer[Long]()\n        val evensCount30\
    \ = mutable.ListBuffer[Long]()\n        val evensCount31 = mutable.ListBuffer[Long]()\n\
    \        val evensCount32 = mutable.ListBuffer[Long]()\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5ewigh7.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpl5ewigh7.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevensCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5ewigh7.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevensCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5ewigh7.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevensCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5ewigh7.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevensCount4\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5ewigh7.scala:16:26 ------------------------\e\
    [0m\e[0m\n"
  stdout: ''
  timestamp: 1659797693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).span(_ % 2 == 0)\n        for (i <- range) {\n\
    \            if (i % 2 == 0) {\n                evens += i\n            } else\
    \ {\n                odds += i\n            }\n        }\n        evens.toList\
    \ ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbr170wo.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdbr170wo.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdbr170wo.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).span(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \     ^\e[0m\n\e[31m   |\e[0m                          Found:    (a : Long)\n\e\
    [31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpdbr170wo.scala:13:29 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).span(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \        ^\e[0m\n\e[31m   |\e[0m                             Found:    (b : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpdbr170wo.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- range) {\n\e[31m\e[31m \
    \  |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ foreach is not a member of (Range, Range)\n5 errors found\n"
  stdout: ''
  timestamp: 1659797690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while(range.hasNext) {\n     \
    \       val x = range.next\n            if((x % 2) == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf4zgck5w.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf4zgck5w.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).map(_.toLong)\n        range.foreach { x =>\n\
    \            if (x % 2 == 0) {\n                evens += x\n            } else\
    \ {\n                odds += x\n            }\n        }\n        evens.toList\
    \ ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv9iarj8g.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpv9iarj8g.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpv9iarj8g.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv9iarj8g.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b).map(_.toLong)\n\e[31m\e[31m   |\e[0m                       \
    \      ^\e[0m\n\e[31m   |\e[0m                             Found:    (b : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val current = range.next\n            if (current % 2 == 0) {\n     \
    \           evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpon5xapso.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpon5xapso.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b)\n        range.foreach(x => {\n            if\
    \ (x % 2 == 0) {\n                evens += x\n            } else {\n         \
    \       odds += x\n            }\n        })\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpet7shrz9.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpet7shrz9.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpet7shrz9.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpet7shrz9.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (b : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = mutable.ListBuffer[Long]()\n        val remainder = a % b\n\
    \        val remainder2 = remainder / b\n        val remainder3 = remainder2 /\
    \ b\n        val remainder4 = remainder3 / b\n        val remainder5 = remainder4\
    \ / b\n        val remainder6 = remainder5 / b\n        val remainder7 = remainder6\
    \ / b\n        val remainder8 = remainder7 / b\n        val remainder9 = remainder8\
    \ / b\n        val remainder10 = remainder9 / b\n        val remainder11 = remainder10\
    \ / b\n        val remainder12 = remainder11 / b\n        val remainder13 = remainder12\
    \ / b\n        val remainder14 = remainder13 / b\n        val remainder15 = remainder14\
    \ / b\n        val remainder16 = remainder15 / b\n        val remainder17 = remainder16\
    \ / b\n        val remainder18 = remainder17 / b\n        val remainder19 = remainder18\
    \ / b\n        val remainder20 = remainder19 / b\n        val remainder21 = remainder20\
    \ / b\n        val remainder22 = remainder21 / b\n        val remainder23 = remainder22\
    \ / b\n        val remainder24 = remainder23 / b\n        val remainder25 = remainder24\
    \ / b\n        val remainder26 = remainder25 / b\n        val remainder27 = remainder26\
    \ / b\n        val remainder28 = remainder27 / b\n        val remainder29 = remainder28\
    \ / b\n        val remainder30 = remainder29 / b\n        val remainder31 = remainder30\
    \ / b\n        val remainder32 = remainder31 / b\n        val remainder33 = remainder32\
    \ / b\n        val remainder34 = remainder33 / b\n        val remainder35 = remainder34\
    \ / b\n        val remainder36 = remainder35 / b\n        val remainder37 = remainder36\
    \ / b\n        val remainder38 = remainder37 / b\n        val remainder39 = remainder38\
    \ / b\n        val remainder40 = remainder39 / b\n        val remainder41 = remainder40\
    \ / b\n        val remainder42 = remainder41 / b\n        val remainder43 = remainder42\
    \ / b\n        \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplot86h1a.scala:11:21 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplot86h1a.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val current = range.next\n            if (current % 2 == 0) {\n     \
    \           evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6fllvbuz.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6fllvbuz.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        var i = a\n        while\
    \ (i <= b) {\n            val remainder = i % 10\n            if (remainder ==\
    \ 0) {\n                evens.append(i)\n            }\n            i += 10\n\
    \        }\n        evens.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsg73bxml.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = (a to b).iterator\n        while(range.hasNext) {\n     \
    \       val current = range.next\n            if(current % 2 == 0) {\n       \
    \         evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsxflx7qs.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsxflx7qs.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_a = mutable.ListBuffer[Long]()\n\
    \        val even_a = mutable.ListBuffer[Long]()\n        val odd_b = mutable.ListBuffer[Long]()\n\
    \        val even_b = mutable.ListBuffer[Long]()\n        val odd_a_a = mutable.ListBuffer[Long]()\n\
    \        val even_a_a = mutable.ListBuffer[Long]()\n        val odd_a_b = mutable.ListBuffer[Long]()\n\
    \        val even_a_b = mutable.ListBuffer[Long]()\n        val odd_b_a = mutable.ListBuffer[Long]()\n\
    \        val even_a_a = mutable.ListBuffer[Long]()\n        val odd_b_a = mutable.ListBuffer[Long]()\n\
    \        val even_a_b = mutable.ListBuffer[Long]()\n        val odd_a_b = mutable.ListBuffer[Long]()\n\
    \        val even_a_b = mutable.ListBuffer[Long]()\n        val odd_b_a = mutable.ListBuffer[Long]()\n\
    \        val even_a_b = mutable.ListBuffer[Long]()\n        val odd_a_b = mutable.ListBuffer[Long]()\n\
    \        val even_a_b = mutable.ListBuffer[Long]()\n        val odd_b_a = mutable.ListBuffer[Long]()\n\
    \        val even_a_b = mutable.ListBuffer[Long]()\n        val odd_a_b = mutable.ListBuffer[Long]()\n\
    \        val even_a_b = mutable.ListBuffer[Long]()\n        val odd_b_a = mutable.ListBuffer[Long]()\n\
    \        val even_a_b = mutable.ListBuffer[Long]()\n        val odd_a_b = mutable.ListBuffer[Long]()\n\
    \        val even_a_b = mutable.ListBuffer[Long]()\n        val odd_b_a = mutable.ListBuffer[Long]()\n\
    \        val even_a_b = mutable.ListBuffer[Long]()\n        val odd_a_b = mutable.ListBuffer[Long]()\n\
    \        val even_a_b = mutable.ListBuffer[Long]()\n        val odd_b_a = mutable.ListBuffer\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1fk2a358.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36meven_a_a\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_a_a is already defined as \e[33mvalue\e[0m \e[35meven_a_a\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1fk2a358.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36modd_b_a\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_b_a is already defined as \e[33mvalue\e[0m \e[35modd_b_a\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1fk2a358.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36meven_a_b\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_a_b is already defined as \e[33mvalue\e[0m \e[35meven_a_b\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1fk2a358.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36modd_a_b\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_a_b is already defined as \e[33mvalue\e[0m \e[35modd_a_b\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1fk2a358.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36meven_a_b\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).filter(x => x % 2 == 0)\n        range.foreach(x\
    \ => x match {\n            case i if i % 2 == 0 => evens += i\n            case\
    \ i if i % 2 == 1 => odds += i\n        })\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4pyghd18.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4pyghd18.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4pyghd18.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                   ^\e[0m\n\e[31m   |\e[0m                          Found:  \
    \  (a : Long)\n\e[31m   |\e[0m                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4pyghd18.scala:13:29 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                      ^\e[0m\n\e[31m   |\e[0m                             Found:\
    \    (b : Long)\n\e[31m   |\e[0m                             Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val evens_count\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_sum = mutable.ListBuffer[Long]()\n\
    \        val even_count_sum = mutable.ListBuffer[Long]()\n        val evens_count_sum\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sum2 = mutable.ListBuffer[Long]()\n\
    \        val evens_count_sum3 = mutable.ListBuffer[Long]()\n        val evens_count_sum4\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sum5 = mutable.ListBuffer[Long]()\n\
    \        val evens_count_sum6 = mutable.ListBuffer[Long]()\n        val evens_count_sum7\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sum8 = mutable.ListBuffer[Long]()\n\
    \        val evens_count_sum9 = mutable.ListBuffer[Long]()\n        val evens_count_sum10\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sum11 = mutable.ListBuffer[Long]()\n\
    \        val evens_count_sum12 = mutable.ListBuffer[Long]()\n        val evens_count_sum13\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sum14 = mutable.ListBuffer[Long]()\n\
    \        val evens_count_sum15 = mutable.ListBuffer[Long]()\n        val evens_count_sum16\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sum17 = mutable.ListBuffer[Long]()\n\
    \        val evens_count_sum18 = mutable.ListBuffer[Long]()\n        val evens_count_sum19\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sum20 = mutable.ListBuffer[Long]()\n\
    \        val evens_count_sum21 = mutable.ListBuffer[Long]()\n        val evens_count_sum22\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_sum23 = mutable.ListBuffer[Long]()\n\
    \        val evens_count_sum24 = mutable.ListBuffer[Long]()\n        val evens_count_sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp84iu79ww.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp84iu79ww.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp84iu79ww.scala:12:18\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp84iu79ww.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp84iu79ww.scala:14:24\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modd_count\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp84iu79ww.scala:15:25\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36meven_count\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation "
  stdout: ''
  timestamp: 1659797704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val evensSet = mutable.Set[Long]()\n\
    \        val evensSet2 = mutable.Set[Long]()\n        val evensSet3 = mutable.Set[Long]()\n\
    \        val evensSet4 = mutable.Set[Long]()\n        val evensSet5 = mutable.Set[Long]()\n\
    \        val evensSet6 = mutable.Set[Long]()\n        val evensSet7 = mutable.Set[Long]()\n\
    \        val evensSet8 = mutable.Set[Long]()\n        val evensSet9 = mutable.Set[Long]()\n\
    \        val evensSet10 = mutable.Set[Long]()\n        val evensSet11 = mutable.Set[Long]()\n\
    \        val evensSet12 = mutable.Set[Long]()\n        val evensSet13 = mutable.Set[Long]()\n\
    \        val evensSet14 = mutable.Set[Long]()\n        val evensSet15 = mutable.Set[Long]()\n\
    \        val evensSet16 = mutable.Set[Long]()\n        val evensSet17 = mutable.Set[Long]()\n\
    \        val evensSet18 = mutable.Set[Long]()\n        val evensSet19 = mutable.Set[Long]()\n\
    \        val evensSet20 = mutable.Set[Long]()\n        val evensSet21 = mutable.Set[Long]()\n\
    \        val evensSet22 = mutable.Set[Long]()\n        val evensSet23 = mutable.Set[Long]()\n\
    \        val evensSet24 = mutable.Set[Long]()\n        val evensSet25 = mutable.Set[Long]()\n\
    \        val evensSet26 = mutable.Set[Long]()\n        val evensSet27 = mutable.Set[Long]()\n\
    \        val evensSet28 = mutable.Set[Long]()\n        val evensSet29 = mutable.Set[Long]()\n\
    \        val evensSet30 = mutable.Set[Long]()\n        val evensSet31 = mutable.Set[Long]()\n\
    \        val evensSet32 = mutable.Set[Long]()\n        val evensSet33 = mutable.Set[Long]()\n\
    \        val evensSet34 = mutable.Set[Long]()\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5bdson_h.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5bdson_h.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevensSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5bdson_h.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevensSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5bdson_h.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevensSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5bdson_h.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevensSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5bdson_h.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevensSet5\e[0m"
  stdout: ''
  timestamp: 1659797711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val evens_sum = mutable.ListBuffer[Long]()\n\
    \        val odd_count = mutable.ListBuffer[Long]()\n        val even_count =\
    \ mutable.ListBuffer[Long]()\n        val evens_count = mutable.ListBuffer[Long]()\n\
    \        val odd_sum = mutable.ListBuffer[Long]()\n        val even_sum = mutable.ListBuffer[Long]()\n\
    \        val evens_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val evens_count\
    \ = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val evens_sum = mutable.ListBuffer[Long]()\n\
    \        val odd_count = mutable.ListBuffer[Long]()\n        val even_count =\
    \ mutable.ListBuffer[Long]()\n        val evens_count = mutable.ListBuffer[Long]()\n\
    \        val odd_sum = mutable.ListBuffer[Long]()\n        val even_sum = mutable.ListBuffer[Long]()\n\
    \        val evens_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val evens_count\
    \ = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val evens_sum = mutable.ListBuffer[Long]()\n\
    \        val odd_count = mutable.ListBuffer[Long]()\n        val even_count =\
    \ mutable.ListBuffer[Long]()\n        val evens_count = mutable.ListBuffer[Long]()\n\
    \        val odd_sum = mutable.ListBuffer[Long]()\n        val even_sum = mutable.ListBuffer[Long]()\n\
    \        val evens_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcnsry7cz.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcnsry7cz.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36modd_sum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0modd_sum\
    \ is already defined as \e[33mvalue\e[0m \e[35modd_sum\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcnsry7cz.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36meven_sum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0meven_sum\
    \ is already defined as \e[33mvalue\e[0m \e[35meven_sum\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcnsry7cz.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevens_sum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mevens_sum is already defined as \e[33mvalue\e[0m \e[35mevens_sum\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcnsry7cz.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_count is already defined as \e[33mvalue\e[0m \e[35modd_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Er"
  stdout: ''
  timestamp: 1659797710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        range.foreach { x =>\n         \
    \   if (x % 2 == 0) {\n                evens += x\n            } else {\n    \
    \            odds += x\n            }\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptcmt1mxo.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptcmt1mxo.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = mutable.ArrayBuffer.empty[Long]\n        val start = (a /\
    \ b).toInt\n        val end = (b / a).toInt\n        val range = end - start\n\
    \        val remainder = a % b\n        val remainderRange = range - remainder\n\
    \        val remainderStart = remainder * start\n        val remainderEnd = remainder\
    \ * end\n        val remainderRangeStart = remainderEnd - remainderRange\n   \
    \     val remainderRangeEnd = remainderEnd - remainderRange\n        val remainderRangeStartInt\
    \ = remainderRangeStart / b\n        val remainderRangeEndInt = remainderRangeEnd\
    \ / b\n        val remainderRangeStartInt = remainderRangeStart % b\n        val\
    \ remainderRangeEndInt = remainderRangeEnd % b\n        val remainderRangeStartInt\
    \ = remainderRangeStart / b\n        val remainderRangeEndInt = remainderRangeEnd\
    \ / b\n        val remainderRangeStartInt = remainderRangeStart % b\n        val\
    \ remainderRangeEndInt = remainderRangeEnd % b\n        val remainderRangeStartInt\
    \ = remainderRangeStart / b\n        val remainderRangeEndInt = remainderRangeEnd\
    \ / b\n        val remainderRangeStartInt = remainderRangeStart % b\n        val\
    \ remainderRangeEndInt = remainderRangeEnd % b\n        val remainderRangeStartInt\
    \ = remainderRangeStart / b\n        val remainderRangeEndInt = remainderRangeEnd\
    \ / b\n        val remainderRangeStartInt = remainderRangeStart % b\n        val\
    \ remainderRangeEndInt = remainderRangeEnd % b\n        val remainderRangeStartInt\
    \ = remainderRangeStart / b\n        val remainderRangeEndInt = remainderRangeEnd\
    \ / b\n        val remainderRangeStartInt = remainderRangeStart % b\n        val\
    \ remainderRangeEndInt = remainderRangeEnd % b\n        val remainderRangeStartInt\
    \ = remainderRangeStart / b\n        val remainderRangeEndInt = remainderRangeEnd\
    \ / b\n        val remainderRangeStartInt = remainderRangeStart % b\n        val\
    \ remainderRangeEndInt = remainderRangeEnd % b\n        val remainderRangeStartInt\
    \ = remainderRangeStart / b\n        val remainderRangeEndInt = remainderRangeEnd\
    \ / b\n        val remainderRangeStartInt = remainderRangeStart % b\n        val\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp2c3hr49j.scala:48:11 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp2c3hr49j.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mremainderRangeStartInt\e\
    [0m = remainderRangeStart % b\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderRangeStartInt is already defined as \e[33mvalue\e\
    [0m \e[35mremainderRangeStartInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2c3hr49j.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mremainderRangeEndInt\e[0m\
    \ = remainderRangeEnd % b\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderRangeEndInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mremainderRangeEndInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2c3hr49j.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mremainderRangeStartInt\e\
    [0m = remainderRangeStart / b\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainderRangeStartInt is already defined as \e[33mvalue\e\
    [0m \e[35mremainderRangeStartInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2c3hr49j.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mremainderRangeEndInt\e[0m\
    \ = remainderRangeEnd / b\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m"
  stdout: ''
  timestamp: 1659797712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd_count = mutable.ListBuffer.empty[Long]\n\
    \        val even_count = mutable.ListBuffer.empty[Long]\n        val odd_sum\
    \ = mutable.ListBuffer.empty[Long]\n        val even_sum = mutable.ListBuffer.empty[Long]\n\
    \        val odd_min = mutable.ListBuffer.empty[Long]\n        val even_min =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_max = mutable.ListBuffer.empty[Long]\n\
    \        val even_max = mutable.ListBuffer.empty[Long]\n        val odd_sum =\
    \ mutable.ListBuffer.empty[Long]\n        val even_sum = mutable.ListBuffer.empty[Long]\n\
    \        val odd_min = mutable.ListBuffer.empty[Long]\n        val even_min =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_max = mutable.ListBuffer.empty[Long]\n\
    \        val even_max = mutable.ListBuffer.empty[Long]\n        val odd_sum =\
    \ mutable.ListBuffer.empty[Long]\n        val even_sum = mutable.ListBuffer.empty[Long]\n\
    \        val odd_min = mutable.ListBuffer.empty[Long]\n        val even_min =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_max = mutable.ListBuffer.empty[Long]\n\
    \        val even_max = mutable.ListBuffer.empty[Long]\n        val odd_sum =\
    \ mutable.ListBuffer.empty[Long]\n        val even_sum = mutable.ListBuffer.empty[Long]\n\
    \        val odd_min = mutable.ListBuffer.empty[Long]\n        val even_min =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_max = mutable.ListBuffer.empty[Long]\n\
    \        val even_max = mutable.ListBuffer.empty[Long]\n        val odd_sum =\
    \ mutable.ListBuffer.empty[Long]\n        val even_sum = mutable.ListBuffer.empty[Long]\n\
    \        val odd_min = mutable.ListBuffer.empty[Long]\n        val even_min =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_max = mutable.ListBuffer.empty[Long]\n\
    \        val even_max = mutable.ListBuffer.empty[Long]\n        val odd_sum =\
    \ mutable.ListBuffer.empty[Long]\n        val even_sum = mutable.ListBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj_u6ow4q.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj_u6ow4q.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36modd_sum\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_sum is already defined as \e[33mvalue\e[0m \e[35modd_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpj_u6ow4q.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36meven_sum\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_sum is already defined as \e[33mvalue\e[0m \e[35meven_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpj_u6ow4q.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36modd_min\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_min is already defined as \e[33mvalue\e[0m \e[35modd_min\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpj_u6ow4q.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36meven_min\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_min is already defined as \e[33mvalue\e[0m \e[35meven_min\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions"
  stdout: ''
  timestamp: 1659797711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            if\
    \ (i % 2 == 0) {\n                evens += i\n            } else {\n         \
    \       odds += i\n            }\n            i += 1\n            j += 1\n   \
    \     }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppd3atpah.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppd3atpah.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        val n = math.min(a, b)\n\
    \        val d = math.max(a, b)\n        for(i <- 0 until n){\n            val\
    \ x = math.floor(i * d / n)\n            list += x\n        }\n        list.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2a38fja9.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2a38fja9.scala:14:25 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while(range.hasNext) {\n     \
    \       val current = range.next\n            val remainder = current % 10\n \
    \           if(remainder == 0) {\n                evens += current\n         \
    \   } else {\n                odds += current\n            }\n        }\n    \
    \    evens.toList ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjvq0xm98.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjvq0xm98.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val even = a / 2\n        val odd = b / 2\n        val a = a % 2\n  \
    \      val b = b % 2\n        val c = a / b\n        val d = b / c\n        val\
    \ e = c / d\n        val f = d / e\n        val g = e / f\n        val h = f /\
    \ g\n        val i = g / h\n        val j = h / i\n        val k = i / j\n   \
    \     val l = j / k\n        val m = k / l\n        val n = l / m\n        val\
    \ o = m / n\n        val p = n / o\n        val q = o / p\n        val r = p /\
    \ q\n        val s = q / r\n        val t = r / s\n        val u = s / t\n   \
    \     val v = t / u\n        val w = u / v\n        val x = v / w\n        val\
    \ y = w / x\n        val z = x / y\n        val a = y / z\n        val b = z /\
    \ a\n        val c = a / b\n        val d = b / c\n        val e = c / d\n   \
    \     val f = d / e\n        val g = e / f\n        val h = f / g\n        val\
    \ i = g / h\n        val j = h / i\n        val k = i / j\n        val l = j /\
    \ k\n        val m = k / l\n        val n = l / m\n        val o = m / n\n   \
    \     val p = n / o\n        val q = o / p\n        val r = p / q\n        val\
    \ s = q / r\n        val t = r / s\n        val u = s / t\n        val v = t /\
    \ u\n        val w = u / v\n        val x = v / w\n        val y = w / x\n   \
    \     val z = x / y\n        val a = y / z\n        val b = z / a\n        val\
    \ c = a / b\n        val d = b / c\n        val e = c / d\n        val f = d /\
    \ e\n        val g = e / f\n        val h = f / g\n        val i = g / h\n   \
    \     val j = h / i\n        val k = i / j\n        val l = j / k\n        val\
    \ m = k / l\n        val n = l / m\n        val o = m / n\n        val p = n /\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8wzuqyhz.scala:82:19 ---------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m        \e[33mval\e[0m \e[36mp\e[0m = n / \n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8wzuqyhz.scala:41:12 ---------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = y / z\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ma is already defined as \e[33mvalue\e\
    [0m \e[35ma\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp8wzuqyhz.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = z / a\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mb is already defined as\
    \ \e[33mvalue\e[0m \e[35mb\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8wzuqyhz.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = a / b\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mc is already defined as\
    \ \e[33mvalue\e[0m \e[35mc\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8wzuqyhz.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = b / c\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0md is already defined as\
    \ \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8wzuqyhz.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36me\e[0m = c / d\n\e[31m\e\
    [31m   |\e[0m        ^^^^^"
  stdout: ''
  timestamp: 1659797712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        range.foreach { x =>\n         \
    \   if (x % 2 == 0) {\n                evens += x\n            } else {\n    \
    \            odds += x\n            }\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptcmt1mxo.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptcmt1mxo.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        for (i <- range) {\n         \
    \   if (i % 2 == 0) {\n                evens += i\n            } else {\n    \
    \            odds += i\n            }\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl3mlixm6.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpl3mlixm6.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = new mutable.ListBuffer[Long]()\n        val low = a\n   \
    \     val high = b\n        while(low <= high) {\n            val mid = low +\
    \ (high - low) / 2\n            val digit = math.floor(mid)\n            if(digit\
    \ % 2 == 0) {\n                result.+=((mid - digit).toLong)\n            }\n\
    \            else if(digit < a) {\n                low = mid + 1\n           \
    \ }\n            else {\n                high = mid - 1\n            }\n     \
    \   }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq1mosd8j.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpq1mosd8j.scala:21:20\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                low\
    \ = mid + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Reassignment to val low\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpq1mosd8j.scala:24:21 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                high = mid - \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Reassignment to val high\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = a / 2\n        val odd = b / 2\n        val remainder = a\
    \ % 2\n        val remainderOdd = b % 2\n        val evenDigit = if (remainder\
    \ == 0) even else even\n        val oddDigit = if (remainderOdd == 0) odd else\
    \ odd\n        val evenDigitOdd = if (remainder == 0 && remainderOdd == 0) even\
    \ else odd\n        val evenDigitOddDigit = if (remainder == 0 && remainderOdd\
    \ == 1) even else odd\n        val evenDigitOddDigitOdd = if (remainder == 1 &&\
    \ remainderOdd == 0) even else odd\n        val evenDigitOddDigitOddDigit = if\
    \ (remainder == 1 && remainderOdd == 1) even else odd\n        val evenDigitOddDigitOddDigitOdd\
    \ = if (remainder == 1 && remainderOdd == 2) even else odd\n        val evenDigitOddDigitOddDigitOddDigit\
    \ = if (remainder == 1 && remainderOdd == 3) even else odd\n        val evenDigitOddDigitOddDigitOddDigitOdd\
    \ = if (remainder == 1 && remainderOdd == 4) even else odd\n        val evenDigitOddDigitOddDigitOddDigitOdd\
    \ = if (remainder == 1 && remainderOdd == 5) even else odd\n        val evenDigitOddDigitOddDigitOddDigitOdd\
    \ = if (remainder == 1 && remainderOdd == 6) even else odd\n        val evenDigitOddDigitOddDigitOddDigitOdd\
    \ = if (remainder == 1 && remainderOdd == 7) even else odd\n        val evenDigitOddDigitOddDigitOddDigitOdd\
    \ = if (remainder == 1 && remainderOdd == 8) even else odd\n        val evenDigitOddDigitOddDigitOddDigitOdd\
    \ = if (remainder == 1 && remainderOdd == 9) even else odd\n        val evenDigitOddDigitOddDigitOddDigitOdd\
    \ = if (remainder == 1 && remainderOdd == 10) even else odd\n        val evenDigitOddDigitOddDigitOddDigitOddDigit\
    \ = if (remainder == 1 && remainderOdd == 11) even else odd\n        val evenDigitOddDigitOddDigitOddDigitOddDigit\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9p61pw_9.scala:33:55 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mevenDigitOddDigitOddDigitOddDigitOddDigit\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \       ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9p61pw_9.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mevenDigitOddDigitOddDigitOddDigitOdd\e[0m\
    \ = \e[33mif\e[0m (remainder == \e[31m1\e[0m && remainderOdd == \e[31m5\e[0m)\
    \ even \e[33melse\e[0m odd\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenDigitOddDigitOddDigitOddDigitOdd is already defined as\
    \ \e[33mvalue\e[0m \e[35mevenDigitOddDigitOddDigitOddDigitOdd\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9p61pw_9.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenDigitOddDigitOddDigitOddDigitOdd\e[0m = \e[33mif\e[0m (remainder ==\
    \ \e[31m1\e[0m && remainderOdd == \e[31m6\e[0m) even \e[33melse\e[0m odd\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenDigitOddDigitOddDigitOddDigitOdd is already defined as\
    \ \e[33mvalue\e[0m \e[35mevenDigitOddDigitOddDigitOddDigitOdd\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9p61pw_9.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenDigitOddDigitOddDigitOddDigitOdd\e[0m = \e[33mif\e[0m (remainder ==\
    \ \e[31m1\e[0m && remainderOdd == \e[31m7\e[0m) even \e[33melse\e[0m odd\n\e[31m\e\
    [31m   |\e[0m       "
  stdout: ''
  timestamp: 1659797714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val x = range.next\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoas3jn_f.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpoas3jn_f.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = a / 2\n        val odd = b / 2\n        val a = a % 2\n  \
    \      val b = b % 2\n        val c = a / 2\n        val d = b / 2\n        val\
    \ e = c / 2\n        val f = d / 2\n        val g = e / 2\n        val h = f /\
    \ 2\n        val i = g / 2\n        val j = h / 2\n        val k = i / 2\n   \
    \     val l = j / 2\n        val m = k / 2\n        val n = l / 2\n        val\
    \ o = m / 2\n        val p = n / 2\n        val q = o / 2\n        val r = p /\
    \ 2\n        val s = q / 2\n        val t = s / 2\n        val u = t / 2\n   \
    \     val v = u / 2\n        val w = v / 2\n        val x = w / 2\n        val\
    \ y = x / 2\n        val z = y / 2\n        val a = z / 2\n        val b = a /\
    \ 2\n        val c = b / 2\n        val d = c / 2\n        val e = d / 2\n   \
    \     val f = e / 2\n        val g = f / 2\n        val h = g / 2\n        val\
    \ i = h / 2\n        val j = i / 2\n        val k = j / 2\n        val l = k /\
    \ 2\n        val m = l / 2\n        val n = m / 2\n        val o = n / 2\n   \
    \     val p = o / 2\n        val q = p / 2\n        val r = q / 2\n        val\
    \ s = r / 2\n        val t = s / 2\n        val u = t / 2\n        val v = u /\
    \ 2\n        val w = v / 2\n        val x = w / 2\n        val y = x / 2\n   \
    \     val z = y / 2\n        val a = z / 2\n        val b = a / 2\n        val\
    \ c = b / 2\n        val d = c / 2\n        val e = d / 2\n        val f = e /\
    \ 2\n        val g = f / 2\n        val h = g / 2\n        val i = h / 2\n   \
    \     val j = i / 2\n        val k = j / 2\n        val l = k / 2\n        val\
    \ m = l / 2\n        val n = m / 2\n        val o = n / 2\n        val p = o /\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpk12jcw0i.scala:82:19 ---------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m        \e[33mval\e[0m \e[36mp\e[0m = o / \n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpk12jcw0i.scala:41:12 ---------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = z / \e[31m2\e[0m\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ma is already defined as \e\
    [33mvalue\e[0m \e[35ma\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpk12jcw0i.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = a / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mb is already defined\
    \ as \e[33mvalue\e[0m \e[35mb\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk12jcw0i.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = b / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mc is already defined\
    \ as \e[33mvalue\e[0m \e[35mc\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk12jcw0i.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = c / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0md is already defined\
    \ as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk12jcw0i.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36me\e[0m = d"
  stdout: ''
  timestamp: 1659797714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd_count = mutable.ListBuffer.empty[Long]\n\
    \        val even_count = mutable.ListBuffer.empty[Long]\n        val odd_count_sum\
    \ = mutable.ListBuffer.empty[Long]\n        val even_count_sum = mutable.ListBuffer.empty[Long]\n\
    \        val odd_count_min = mutable.ListBuffer.empty[Long]\n        val even_count_min\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_count_max = mutable.ListBuffer.empty[Long]\n\
    \        val even_count_max = mutable.ListBuffer.empty[Long]\n        val odd_count_sum\
    \ = mutable.ListBuffer.empty[Long]\n        val even_count_sum = mutable.ListBuffer.empty[Long]\n\
    \        val odd_count_min = mutable.ListBuffer.empty[Long]\n        val even_count_min\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_count_max = mutable.ListBuffer.empty[Long]\n\
    \        val even_count_max = mutable.ListBuffer.empty[Long]\n        val odd_count_sum\
    \ = mutable.ListBuffer.empty[Long]\n        val even_count_sum = mutable.ListBuffer.empty[Long]\n\
    \        val odd_count_min = mutable.ListBuffer.empty[Long]\n        val even_count_min\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_count_max = mutable.ListBuffer.empty[Long]\n\
    \        val even_count_max = mutable.ListBuffer.empty[Long]\n        val odd_count_sum\
    \ = mutable.ListBuffer.empty[Long]\n        val even_count_sum = mutable.ListBuffer.empty[Long]\n\
    \        val odd_count_min = mutable.ListBuffer.empty[Long]\n        val even_count_min\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_count_max = mutable.ListBuffer.empty[Long]\n\
    \        val even_count_max = mutable.ListBuffer.empty[Long]\n        val odd_count_sum\
    \ = mutable.ListBuffer.empty[Long]\n        val even_count_sum = mutable.ListBuffer.empty[Long]\n\
    \        val odd_count_min = mutable.ListBuffer.empty[Long]\n        val even_count_min\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_count_max = mutable.ListBuffer.empty[Long]\n\
    \        val even_count_max = mutable.ListBuffer.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptnvgc4bk.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptnvgc4bk.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36modd_count_sum\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_count_sum is already defined as \e[33mvalue\e[0m \e[35modd_count_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnvgc4bk.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36meven_count_sum\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_count_sum is already defined as \e[33mvalue\e[0m \e[35meven_count_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnvgc4bk.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36modd_count_min\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_count_min is already defined as \e[33mvalue\e[0m \e[35modd_count_min\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnvgc4bk.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36meven_count_min\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_count_min is already defined as \e[33mvalue\e[0m \e[35meven_count_min\e\
    [0m\n\e[31m   |\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1659797715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val even = a / 2\n   \
    \     val odd = a % 2\n        val evens = generateIntegers(even, b)\n       \
    \ evens += even\n        evens += odd\n        evens\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6vuvqau3.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = generateIntegers(even,\
    \ b)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mevens is already defined as \e[33mvalue\e[0m \e[35mevens\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6vuvqau3.scala:11:20 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        var i = a\n        while\
    \ (i <= b) {\n            if (i % 2 == 0) {\n                evens += i\n    \
    \        }\n            i += 1\n        }\n        evens.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1xv520_c.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        range.foreach { x =>\n         \
    \   if (x % 2 == 0) {\n                evens += x\n            } else {\n    \
    \            odds += x\n            }\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptcmt1mxo.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptcmt1mxo.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = new mutable.ListBuffer[Long]()\n        val range = Range(a,\
    \ b).iterator\n        while(range.hasNext) {\n            val current = range.next\n\
    \            val digits = current % 10\n            if(digits == 0) {\n      \
    \          result.add(current)\n            }\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp637k0nm.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp637k0nm.scala:12:26\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b).iterator\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (a : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpp637k0nm.scala:12:29 --------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).iterator\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         Found:    (b : Long)\n\e[31m   |\e[0m              \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        for(i <- 0 until a by 2){\n            evens += i\n        }\n      \
    \  for(i <- 0 until b by 2){\n            odds += i\n        }\n        evens.sortWith(_\
    \ < _)\n        odds.sortWith(_ < _)\n        evens.toList ++ odds.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9j83x8nw.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9j83x8nw.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9j83x8nw.scala:13:25 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until a by \e\
    [31m2\e[0m){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Found:    (a : Long)\n\e[31m   |\e[0m            \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9j83x8nw.scala:16:25 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until b by \e[31m2\e[0m){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (b : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_a = mutable.ListBuffer[Long]()\n\
    \        val odd_b = mutable.ListBuffer[Long]()\n        val even_b = mutable.ListBuffer[Long]()\n\
    \        val even_b_a = mutable.ListBuffer[Long]()\n        val even_b_b = mutable.ListBuffer[Long]()\n\
    \        val even_b_c = mutable.ListBuffer[Long]()\n        val odd_a_a = mutable.ListBuffer[Long]()\n\
    \        val odd_a_b = mutable.ListBuffer[Long]()\n        val odd_a_b_a = mutable.ListBuffer[Long]()\n\
    \        val odd_a_b_b = mutable.ListBuffer[Long]()\n        val odd_a_b_c = mutable.ListBuffer[Long]()\n\
    \        val odd_b_a = mutable.ListBuffer[Long]()\n        val odd_b_b = mutable.ListBuffer[Long]()\n\
    \        val odd_b_b_a = mutable.ListBuffer[Long]()\n        val odd_b_b_b = mutable.ListBuffer[Long]()\n\
    \        val odd_b_b_c = mutable.ListBuffer[Long]()\n        val odd_b_c_a = mutable.ListBuffer[Long]()\n\
    \        val odd_b_c_b = mutable.ListBuffer[Long]()\n        val odd_b_c_c = mutable.ListBuffer[Long]()\n\
    \        val evens_a = mutable.ListBuffer[Long]()\n        val evens_b = mutable.ListBuffer[Long]()\n\
    \        val evens_c = mutable.ListBuffer[Long]()\n        val odd_a_a_a = mutable.ListBuffer[Long]()\n\
    \        val odd_a_a_b = mutable.ListBuffer[Long]()\n        val odd_a_a_b_a =\
    \ mutable.ListBuffer[Long]()\n        val odd_a_a_b_b = mutable.ListBuffer[Long]()\n\
    \        val odd_a_a_b_c = mutable.ListBuffer[Long]()\n        val odd_a_a_c_a\
    \ = mutable.ListBuffer[Long]()\n        val odd_a_a_c_b = mutable.ListBuffer[Long]()\n\
    \        val odd_a_a_c_c = mutable.List\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp46mzj0hh.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp46mzj0hh.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp46mzj0hh.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp46mzj0hh.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_a\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp46mzj0hh.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modd_b\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp46mzj0hh.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36meven_b\e[0m = mutable.ListBuffer[\e\
    [35mLo"
  stdout: ''
  timestamp: 1659797718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val even = a / 2\n   \
    \     val odd = a % 2\n        val evens = a until b foreach { x => evens += x\
    \ }\n        evens ++ even\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo7nexwqa.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = a until b foreach\
    \ { \e[36mx\e[0m => evens += x }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevens is already defined as \e[33mvalue\e[0m \e[35mevens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpo7nexwqa.scala:11:20 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = (a to b).iterator\n        while(range.hasNext) {\n     \
    \       val current = range.next\n            if(current % 2 == 0) {\n       \
    \         evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsxflx7qs.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsxflx7qs.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_count_list\
    \ = mutable.ListBuffer[Long]()\n        val even_count_list = mutable.ListBuffer[Long]()\n\
    \        val odd_count_list_2 = mutable.ListBuffer[Long]()\n        val even_count_list_2\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_list_3 = mutable.ListBuffer[Long]()\n\
    \        val even_count_list_3 = mutable.ListBuffer[Long]()\n        val odd_count_list_4\
    \ = mutable.ListBuffer[Long]()\n        val even_count_list_4 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_list_5 = mutable.ListBuffer[Long]()\n        val even_count_list_5\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_list_6 = mutable.ListBuffer[Long]()\n\
    \        val even_count_list_6 = mutable.ListBuffer[Long]()\n        val odd_count_list_7\
    \ = mutable.ListBuffer[Long]()\n        val even_count_list_7 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_list_8 = mutable.ListBuffer[Long]()\n        val even_count_list_8\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_list_9 = mutable.ListBuffer[Long]()\n\
    \        val even_count_list_9 = mutable.ListBuffer[Long]()\n        val odd_count_list_10\
    \ = mutable.ListBuffer[Long]()\n        val even_count_list_10 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_list_11 = mutable.ListBuffer[Long]()\n        val even_count_list_11\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_list_12 = mutable.ListBuffer[Long]()\n\
    \        val even_count_list_12 = mutable.ListBuffer[Long]()\n        val odd_count_list_13\
    \ = mutable.ListBuffer[Long]()\n        val even_count_list_13 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_list_14 = mutable.ListBuffer[Long]()\n        val even_count_list_14\
    \ = mutable.ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoghu3bkr.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpoghu3bkr.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpoghu3bkr.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpoghu3bkr.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpoghu3bkr.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven_count\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpoghu3bkr.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36modd_count_li"
  stdout: ''
  timestamp: 1659797717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while(range.hasNext) {\n     \
    \       val current = range.next\n            if(current % 2 == 0) {\n       \
    \         evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp21x44339.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp21x44339.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).iterator\n        while(range.hasNext) {\n  \
    \          val current = range.next\n            if(current % 2 == 0) {\n    \
    \            evens += current\n            } else {\n                odd += current\n\
    \            }\n        }\n        evens.toList ++ odd.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsuw68132.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsuw68132.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpsuw68132.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).iterator\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsuw68132.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b).iterator\n\e[31m\e[31m   |\e[0m                            \
    \ ^\e[0m\n\e[31m   |\e[0m                             Found:    (b : Long)\n\e\
    [31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val evensSet = mutable.Set[Long]()\n\
    \        val evensArray = mutable.Array[Long]()\n        val evensArraySet = mutable.Set[Long]()\n\
    \        val evensArrayArray = mutable.Array[Long]()\n        val evensArrayArraySet\
    \ = mutable.Set[Long]()\n        val evensArrayArrayArray = mutable.Array[Long]()\n\
    \        val evensArrayArrayArraySet = mutable.Set[Long]()\n        val evensArrayArrayArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArrayArrayArraySet = mutable.Set[Long]()\n\
    \        val evensArrayArrayArrayArrayArray = mutable.Array[Long]()\n        val\
    \ evensArrayArrayArrayArrayArraySet = mutable.Set[Long]()\n        val evensArrayArrayArrayArrayArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\
    \ = mutable.Array[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ = mutable.Set[Long]()\n        val evensArrayArrayArrayArrayArrayArrayArrayArrayArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqqz1no5h.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqqz1no5h.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensArrayArrayArrayArrayArrayArrayArrayArraySet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensArrayArrayArrayArrayArrayArrayArrayArraySet is already\
    \ defined as \e[33mvalue\e[0m \e[35mevensArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqqz1no5h.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mevensArrayArrayArrayArrayArrayArrayArrayArrayArray\e\
    [0m = mutable.Array[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensArrayArrayArrayArrayArrayArrayArrayArrayArray is already\
    \ defined as \e[33mvalue\e[0m \e[35mevensArrayArrayArrayArrayArrayArrayArrayArrayArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqqz1no5h.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mevensArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ is already defined as \e[33mvalue\e[0m \e[35mevensArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions"
  stdout: ''
  timestamp: 1659797689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        for (i <- range) {\n         \
    \   if (i % 2 == 0) {\n                evens += i\n            } else {\n    \
    \            odds += i\n            }\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl3mlixm6.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpl3mlixm6.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1wl8g3p.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpr1wl8g3p.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpr1wl8g3p.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr1wl8g3p.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (b : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        val evens = a / 2\n   \
    \     val odds = a % 2\n        val evensRemainder = a % evens\n        val oddsRemainder\
    \ = a % odds\n        val evensRemainderRemainder = evensRemainder % 2\n     \
    \   val oddsRemainderRemainder = oddsRemainder % 2\n        val evensRemainderRemainderRemainder\
    \ = evensRemainderRemainder % 2\n        val oddsRemainderRemainderRemainder =\
    \ oddsRemainderRemainder % 2\n        val evensRemainderRemainderRemainderRemainder\
    \ = evensRemainderRemainderRemainder % 2\n        val oddsRemainderRemainderRemainderRemainder\
    \ = oddsRemainderRemainderRemainder % 2\n        val evensRemainderRemainderRemainderRemainderRemainder\
    \ = evensRemainderRemainderRemainderRemainder % 2\n        val oddsRemainderRemainderRemainderRemainderRemainder\
    \ = oddsRemainderRemainderRemainderRemainder % 2\n        val evensRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = evensRemainderRemainderRemainderRemainderRemainder % 2\n        val oddsRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = oddsRemainderRemainderRemainderRemainderRemainder % 2\n        val evensRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = evensRemainderRemainderRemainderRemainderRemainderRemainder % 2\n        val\
    \ oddsRemainderRemainderRemainderRemainderRemainderRemainderRemainder = oddsRemainderRemainderRemainderRemainderRemainderRemainder\
    \ % 2\n        val evensRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = evensRemainderRemainderRemainderRemainderRemainderRemainderRemainder % 2\n\
    \        val oddsRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = oddsRemainderRemainderRemainderRemainderRemainderRemainderRemainder % 2\n\
    \        val evensRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = evensRemainderRemainderRemainderRemainderRemainderRemainderRemainder % 2\n\
    \        val oddsRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = oddsRemainderRemainderRemainderRemainderRemainderRemainderRemainder % 2\n\
    \        val evensRemainder\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8b75i9bg.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8b75i9bg.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\e\
    [0m = evensRemainderRemainderRemainderRemainderRemainderRemainderRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  evensRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp8b75i9bg.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36moddsRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\e\
    [0m = oddsRemainderRemainderRemainderRemainderRemainderRemainderRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  oddsRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8b75i9bg.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutabl"
  stdout: ''
  timestamp: 1659797720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).filter(x => x % 2 == 0)\n        range.foreach(x\
    \ => if (x % 2 == 0) evens += x)\n        range.foreach(x => if (x % 2 == 1) odds\
    \ += x)\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxv2b_9ve.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxv2b_9ve.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxv2b_9ve.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                   ^\e[0m\n\e[31m   |\e[0m                          Found:  \
    \  (a : Long)\n\e[31m   |\e[0m                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxv2b_9ve.scala:13:29 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                      ^\e[0m\n\e[31m   |\e[0m                             Found:\
    \    (b : Long)\n\e[31m   |\e[0m                             Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        val range = (a to b).toList\n\
    \        range.foreach(x => if (x % 2 == 0) list += x)\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98rnj2hu.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val even = a / 2\n   \
    \     val odd = a % 2\n        val evens = a until b\n        evens foreach {\
    \ x =>\n            if (x % 2 == 0) {\n                evens += x\n          \
    \  }\n        }\n        evens.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpinysk6h7.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = a until b\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevens\
    \ is already defined as \e[33mvalue\e[0m \e[35mevens\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpinysk6h7.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).span(_ % 2 == 0)\n        for (i <- range) {\n\
    \            if (i % 2 == 0) {\n                evens += i\n            } else\
    \ {\n                odds += i\n            }\n        }\n        evens.toList\
    \ ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbr170wo.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdbr170wo.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdbr170wo.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).span(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \     ^\e[0m\n\e[31m   |\e[0m                          Found:    (a : Long)\n\e\
    [31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpdbr170wo.scala:13:29 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).span(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \        ^\e[0m\n\e[31m   |\e[0m                             Found:    (b : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpdbr170wo.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- range) {\n\e[31m\e[31m \
    \  |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ foreach is not a member of (Range, Range)\n5 errors found\n"
  stdout: ''
  timestamp: 1659797690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val evens_sum = mutable.ListBuffer[Long]()\n\
    \        val odd_count = mutable.ListBuffer[Long]()\n        val even_count =\
    \ mutable.ListBuffer[Long]()\n        val evens_count = mutable.ListBuffer[Long]()\n\
    \        val odd_sum = mutable.ListBuffer[Long]()\n        val even_sum = mutable.ListBuffer[Long]()\n\
    \        val evens_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val evens_count\
    \ = mutable.ListBuffer[Long]()\n        val evens_sum = mutable.ListBuffer[Long]()\n\
    \        val odd_sum = mutable.ListBuffer[Long]()\n        val even_sum = mutable.ListBuffer[Long]()\n\
    \        val evens_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val evens_count\
    \ = mutable.ListBuffer[Long]()\n        val evens_sum = mutable.ListBuffer[Long]()\n\
    \        val odd_sum = mutable.ListBuffer[Long]()\n        val even_sum = mutable.ListBuffer[Long]()\n\
    \        val evens_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val evens_count\
    \ = mutable.ListBuffer[Long]()\n        val evens_sum = mutable.ListBuffer[Long]()\n\
    \        val odd_sum = mutable.ListBuffer[Long]()\n        val even_sum = mutable.ListBuffer[Long]()\n\
    \        val evens_sum = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val evens_count\
    \ = mutable.ListBuffer[Long]()\n        val evens_sum = mutable.ListBuffer[Long\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpywxk24a3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpywxk24a3.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36modd_sum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0modd_sum\
    \ is already defined as \e[33mvalue\e[0m \e[35modd_sum\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpywxk24a3.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36meven_sum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0meven_sum\
    \ is already defined as \e[33mvalue\e[0m \e[35meven_sum\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpywxk24a3.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevens_sum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mevens_sum is already defined as \e[33mvalue\e[0m \e[35mevens_sum\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpywxk24a3.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_count is already defined as \e[33mvalue\e[0m \e[35modd_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Er"
  stdout: ''
  timestamp: 1659797723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        range.foreach(x => {\n         \
    \   if (x % 2 == 0) {\n                evens += x\n            } else {\n    \
    \            odds += x\n            }\n        })\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk6mj9t9z.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpk6mj9t9z.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val low = math.min(a,\
    \ b)\n        val high = math.max(a, b)\n        val range = high - low\n    \
    \    val digits = math.pow(10, math.ceil(math.log(range, 10)))\n        val digit\
    \ = math.pow(10, math.ceil(math.log(range, 10)))\n        val digits = math.pow(10,\
    \ math.ceil(math.log(range, 10)))\n        val digit = math.pow(10, math.ceil(math.log(range,\
    \ 10)))\n        val digits = math.pow(10, math.ceil(math.log(range, 10)))\n \
    \       val digit = math.pow(10, math.ceil(math.log(range, 10)))\n        val\
    \ digits = math.pow(10, math.ceil(math.log(range, 10)))\n        val digit = math.pow(10,\
    \ math.ceil(math.log(range, 10)))\n        val digits = math.pow(10, math.ceil(math.log(range,\
    \ 10)))\n        val digit = math.pow(10, math.ceil(math.log(range, 10)))\n  \
    \      val digits = math.pow(10, math.ceil(math.log(range, 10)))\n        val\
    \ digit = math.pow(10, math.ceil(math.log(range, 10)))\n        val digits = math.pow(10,\
    \ math.ceil(math.log(range, 10)))\n        val digit = math.pow(10, math.ceil(math.log(range,\
    \ 10)))\n        val digits = math.pow(10, math.ceil(math.log(range, 10)))\n \
    \       val digit = math.pow(10, math.ceil(math.log(range, 10)))\n        val\
    \ digits = math.pow(10, math.ceil(math.log(range, 10)))\n        val digit = math.pow(10,\
    \ math.ceil(math.log(range, 10)))\n        val digits = math.pow(10, math.ceil(math.log(range,\
    \ 10)))\n        val digit = math.pow(10, math.ceil(math.log(range, 10)))\n  \
    \      val digits = math.pow(10, math.ceil(math.log(range, 10)))\n        val\
    \ digit = math.pow(10, math.ceil(math.log(range, 10)))\n        val digits = math.pow(10,\
    \ math.ceil(math.log(range, 10)))\n        val digit = math.pow(10, math.ceil(math.log(range,\
    \ 10)))\n        val digits = math.pow(10, math.ceil(math.log(range, 10)))\n \
    \       val digit = math.pow(10, math.ceil(math.log(range, 10)))\n        val\
    \ digits = math.pow(10, math.ceil(math.log(range, 10)))\n        val digit = math.pow(10,\
    \ math.ceil(math.log(range, 10)))\n        val digits = math.pow(10, math.ceil(math.log(range,\
    \ 10)))\n        val digit = math.pow(10, math.ceil(math.log(range, 10)))\n  \
    \      val digits = math.pow(10, math.ceil(math.log(range, 10)))\n        val\
    \ digit = math.pow(10, math.ceil(math.log(range, 10)))\n        val digits = math.pow(10,\
    \ math.ceil(math.log(range, 10)))\n        val digit = math.pow(10, math.ceil(math.log(range,\
    \ 10)))\n\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcskbm28r.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = math.pow(\e\
    [31m10\e[0m, math.ceil(math.log(range, \e[31m10\e[0m)))\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcskbm28r.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mdigit\e[0m = math.pow(\e[31m10\e[0m, math.ceil(math.log(range,\
    \ \e[31m10\e[0m)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigit is already defined as \e[33mvalue\e[0m \e[35mdigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcskbm28r.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = math.pow(\e[31m10\e[0m,\
    \ math.ceil(math.log(range, \e[31m10\e[0m)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcskbm28r.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mdigit\e[0m = math.pow(\e[31m10\e[0m,\
    \ math.ceil(math.log(range, \e[31m10\e[0m)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigit is already defined as \e[33mvalue\e[0m \e[35mdigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcskbm28r.scala:21:12 ---------------------"
  stdout: ''
  timestamp: 1659797724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = (a to b).iterator\n        for (i <- range) {\n         \
    \   if (i % 2 == 0) {\n                evens += i\n            } else {\n    \
    \            odds += i\n            }\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpda5i_8rf.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpda5i_8rf.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n\
    \        val end = (a / b).toInt + 1\n        for (i = start; i < end; i++) {\n\
    \            val temp = i * b\n            if (temp % 2 == 0) {\n            \
    \    list += temp\n            }\n        }\n        list.sortWith(_ < _)\n  \
    \      list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_4n73wlg.scala:14:15 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i = start; i < end; i++) {\n\e\
    [31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               ')' expected,\
    \ but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_4n73wlg.scala:14:31\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m\
    \ (i = start; i < end; i++) {\n\e[31m\e[31m   |\e[0m                         \
    \      ^\e[0m\n\e[31m   |\e[0m                               '<-' expected, but\
    \ ';' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp_4n73wlg.scala:14:36\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m\
    \ (i = start; i < end; i++) {\n\e[31m\e[31m   |\e[0m                         \
    \           ^\e[0m\n\e[31m   |\e[0m                                    pattern\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_4n73wlg.scala:11:19\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_4n73wlg.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i\
    \ = start; i < end; i++) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\
    \e[31m   |\e[0mvalue foreach is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.Im"
  stdout: ''
  timestamp: 1659797724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val evens_sum = mutable.ListBuffer[Long]()\n\
    \        val odd_count = mutable.ListBuffer[Long]()\n        val even_count =\
    \ mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val evens_sum = mutable.ListBuffer[Long]()\n\
    \        val odd_count = mutable.ListBuffer[Long]()\n        val even_count =\
    \ mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val evens_sum = mutable.ListBuffer[Long]()\n\
    \        val odd_count = mutable.ListBuffer[Long]()\n        val even_count =\
    \ mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val evens_sum = mutable.ListBuffer[Long]()\n\
    \        val odd_count = mutable.ListBuffer[Long]()\n        val even_count =\
    \ mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val evens_sum = mutable.ListBuffer[Long]()\n\
    \        val odd_count = mutable.ListBuffer[Long]()\n        val even_count =\
    \ mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val evens_sum = mutable.ListBuffer[Long]()\n\
    \        val odd_count = mutable.ListBuffer[Long]()\n        val even_count =\
    \ mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val evens_sum = mutable.ListBuffer[Long]()\n\
    \        val odd_count = mutable.ListBuffer[Long\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvacpqy5a.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvacpqy5a.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36modd_sum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0modd_sum\
    \ is already defined as \e[33mvalue\e[0m \e[35modd_sum\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvacpqy5a.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36meven_sum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0meven_sum\
    \ is already defined as \e[33mvalue\e[0m \e[35meven_sum\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvacpqy5a.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevens_sum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mevens_sum is already defined as \e[33mvalue\e[0m \e[35mevens_sum\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvacpqy5a.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_count is already defined as \e[33mvalue\e[0m \e[35modd_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Er"
  stdout: ''
  timestamp: 1659797723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd_count = mutable.ListBuffer.empty[Long]\n\
    \        val even_count = mutable.ListBuffer.empty[Long]\n        val even_odd_count\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_even_count = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_count = mutable.ListBuffer.empty[Long]\n        val odd_even_odd_count\
    \ = mutable.ListBuffer.empty[Long]\n        val even_odd_even_count = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_even_count = mutable.ListBuffer.empty[Long]\n        val\
    \ odd_even_odd_count = mutable.ListBuffer.empty[Long]\n        val even_odd_odd_count\
    \ = mutable.ListBuffer.empty[Long]\n        val even_odd_even_count = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_count = mutable.ListBuffer.empty[Long]\n        val odd_odd_even_count\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_even_odd_count = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even_odd_count = mutable.ListBuffer.empty[Long]\n        val\
    \ even_odd_even_count = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_count\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_odd_even_count = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even_odd_count = mutable.ListBuffer.empty[Long]\n        val\
    \ even_odd_even_count = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_count\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_odd_even_count = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even_odd_count = mutable.ListBuffer.empty[Long]\n        val\
    \ even_odd_even_count = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_count\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_odd_even_count = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even_odd_count = mutable.ListBuffer.empty[Long]\n        \n \
    \   }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjnkv3lix.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36modd_even_odd_count\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_even_odd_count is already defined as \e[33mvalue\e[0m\
    \ \e[35modd_even_odd_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjnkv3lix.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36meven_odd_even_count\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_odd_even_count is already defined as \e[33mvalue\e[0m\
    \ \e[35meven_odd_even_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjnkv3lix.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36modd_odd_even_count\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_odd_even_count is already defined as \e[33mvalue\e[0m\
    \ \e[35modd_odd_even_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjnkv3lix.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36modd_even_odd_count\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_even_odd_count is already defined as \e[33mvalue\e[0m\
    \ \e[35modd_even_odd_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming E"
  stdout: ''
  timestamp: 1659797724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = new mutable.ListBuffer[Long]()\n        val low = a\n   \
    \     val high = b\n        while(low < high) {\n            val mid = low + (high\
    \ - low) / 2\n            val digit = math.floor(mid)\n            if(digit %\
    \ 2 == 0) {\n                result.+=((mid - digit).toLong)\n            }\n\
    \            else if(digit < a) {\n                low = mid + 1\n           \
    \ }\n            else {\n                high = mid - 1\n            }\n     \
    \   }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu24h095n.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpu24h095n.scala:21:20\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                low\
    \ = mid + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Reassignment to val low\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpu24h095n.scala:24:21 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                high = mid - \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Reassignment to val high\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = new mutable.ListBuffer[Long]()\n        val remainder = a\
    \ % b\n        val remainder2 = remainder / 2\n        val remainder3 = remainder2\
    \ / 2\n        val remainder4 = remainder3 / 2\n        val remainder5 = remainder4\
    \ / 2\n        val remainder6 = remainder5 / 2\n        val remainder7 = remainder6\
    \ / 2\n        val remainder8 = remainder7 / 2\n        val remainder9 = remainder8\
    \ / 2\n        val remainder10 = remainder9 / 2\n        val remainder11 = remainder10\
    \ / 2\n        val remainder12 = remainder11 / 2\n        val remainder13 = remainder12\
    \ / 2\n        val remainder14 = remainder13 / 2\n        val remainder15 = remainder14\
    \ / 2\n        val remainder16 = remainder15 / 2\n        val remainder17 = remainder16\
    \ / 2\n        val remainder18 = remainder17 / 2\n        val remainder19 = remainder18\
    \ / 2\n        val remainder20 = remainder19 / 2\n        val remainder21 = remainder20\
    \ / 2\n        val remainder22 = remainder21 / 2\n        val remainder23 = remainder22\
    \ / 2\n        val remainder24 = remainder23 / 2\n        val remainder25 = remainder24\
    \ / 2\n        val remainder26 = remainder25 / 2\n        val remainder27 = remainder26\
    \ / 2\n        val remainder28 = remainder27 / 2\n        val remainder29 = remainder28\
    \ / 2\n        val remainder30 = remainder29 / 2\n        val remainder31 = remainder30\
    \ / 2\n        val remainder32 = remainder31 / 2\n        val remainder33 = remainder32\
    \ / 2\n        val remainder34 = remainder33 / 2\n        val remainder35 = remainder34\
    \ / 2\n        val remainder36 = remainder35 / 2\n        val remainder37 = remainder36\
    \ / 2\n        val remainder38 = remainder37 / 2\n        val remainder39 = remainder38\
    \ / 2\n        val remainder40 = remainder39 / 2\n        val remainder41 = remainder40\
    \ / 2\n        val remainder42 = remainder41 / 2\n        val remainder43 = remainder42\
    \ / 2\n\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzlzc365b.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzlzc365b.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_a = a / 2\n  \
    \      val odd_b = b / 2\n        val evens_a = a / 2\n        val evens_b = b\
    \ / 2\n        val odd_a_to_b = odd_a - odd_b\n        val evens_a_to_b = evens_a\
    \ - evens_b\n        val evens_a_to_b_to_even = evens_a_to_b / 2\n        val\
    \ evens_a_to_b_to_odd = evens_a_to_b / 2\n        val evens_a_to_b_to_even_to_odd\
    \ = evens_a_to_b_to_even / 2\n        val evens_a_to_b_to_even_to_odd_to_even\
    \ = evens_a_to_b_to_even_to_odd / 2\n        val evens_a_to_b_to_even_to_odd_to_even_to_odd\
    \ = evens_a_to_b_to_even_to_odd_to_even / 2\n        val evens_a_to_b_to_even_to_odd_to_even_to_odd_to_even\
    \ = evens_a_to_b_to_even_to_odd_to_even_to_odd / 2\n        val evens_a_to_b_to_even_to_odd_to_even_to_odd_to_even_to_odd\
    \ = evens_a_to_b_to_even_to_odd_to_even_to_odd_to_even / 2\n        val evens_a_to_b_to_even_to_odd_to_even_to_odd_to_even_to_odd_to_even\
    \ = evens_a_to_b_to_even_to_odd_to_even_to_odd_to_even_to_odd / 2\n        val\
    \ evens_a_to_b_to_even_to_odd_to_even_to_odd_to_even_to_odd_to_even_to_odd = evens_a_to_b_to_even_to_odd_to_even_to_odd_to_even_to_odd_to_even_to_even\
    \ / 2\n        val evens_a_to_b_to_even_to_odd_to_even_to_odd_to_even_to_odd_to_even_to_odd_to_even\
    \ = evens_a_to_b_to_even_to_odd_to_even_to_odd_to_even_to_odd_to_even_to_odd_to_even_to_odd\
    \ / 2\n        val evens_a_to_b_to_even_to_odd_to_even_to_odd_to_even_to_odd_to_even_to_odd_to_even_to_odd_to_even\
    \ = evens_a_to_b_to_even_to_odd_to_even_to_odd_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcswokms6.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpcswokms6.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpcswokms6.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpcswokms6.scala:28:87 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mevens_a_to_b_to_even_to_odd_to_even_to_odd_to_even_to_odd_to_even_to_odd\e\
    [0m = evens_a_to_b_to_even_to_odd_to_even_to_odd_to_even_to_odd_to_even_to_even\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: evens_a_to_b_to_even_to_odd_to_even_to_odd_to_even_to_odd_to_even_to_even\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcswokms6.scala:29:95\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mevens_a_to_b_to_even_to_odd_to_even_to_odd_to_even_to_odd_to_even_to_odd_to_even\e\
    [0m = evens_a_to_b_to_even_to_odd_to_"
  stdout: ''
  timestamp: 1659797724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val even = a / 2\n        val odd = b / 2\n        val evens = a / 2\
    \ until a / 2 + b / 2\n        val odds = a / 2 + b / 2 until b\n        evens\
    \ foreach { x => evens += x }\n        odds foreach { x => odds += x }\n     \
    \   evens.toList ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6682_b37.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = a / \e[31m2\e\
    [0m until a / \e[31m2\e[0m + b / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevens is already defined as \e[33mvalue\e[0m \e[35mevens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6682_b37.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = a / \e[31m2\e[0m + b / \e\
    [31m2\e[0m until b\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modds is already defined as \e[33mvalue\e[0m \e[35modds\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6682_b37.scala:11:20 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6682_b37.scala:12:19 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        val i = a\n        val\
    \ j = b\n        while (i <= j) {\n            list += i\n            i += 1\n\
    \        }\n        list.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8p_imhox.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp8p_imhox.scala:16:14 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659797726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while(range.hasNext) {\n     \
    \       val x = range.next\n            if((x % 2) == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf4zgck5w.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf4zgck5w.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        val evenRange = (a to b).toList.filter(_\
    \ % 2 == 0)\n        val oddRange = (a to b).toList.filter(_ % 2 == 1)\n     \
    \   val evenRangeIterator = evenRange.iterator\n        val oddRangeIterator =\
    \ oddRange.iterator\n        while(evenRangeIterator.hasNext && oddRangeIterator.hasNext)\
    \ {\n            val even = evenRangeIterator.next()\n            val odd = oddRangeIterator.next()\n\
    \            evens += even\n            odds += odd\n        }\n        evens.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1pfod86a.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1pfod86a.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = new mutable.ListBuffer[Long]()\n        val remainder = a\
    \ % b\n        val remainder2 = remainder / b\n        val remainder3 = remainder2\
    \ / b\n        val remainder4 = remainder3 / b\n        val remainder5 = remainder4\
    \ / b\n        val remainder6 = remainder5 / b\n        val remainder7 = remainder6\
    \ / b\n        val remainder8 = remainder7 / b\n        val remainder9 = remainder8\
    \ / b\n        val remainder10 = remainder9 / b\n        val remainder11 = remainder10\
    \ / b\n        val remainder12 = remainder11 / b\n        val remainder13 = remainder12\
    \ / b\n        val remainder14 = remainder13 / b\n        val remainder15 = remainder14\
    \ / b\n        val remainder16 = remainder15 / b\n        val remainder17 = remainder16\
    \ / b\n        val remainder18 = remainder17 / b\n        val remainder19 = remainder18\
    \ / b\n        val remainder20 = remainder19 / b\n        val remainder21 = remainder20\
    \ / b\n        val remainder22 = remainder21 / b\n        val remainder23 = remainder22\
    \ / b\n        val remainder24 = remainder23 / b\n        val remainder25 = remainder24\
    \ / b\n        val remainder26 = remainder25 / b\n        val remainder27 = remainder26\
    \ / b\n        val remainder28 = remainder27 / b\n        val remainder29 = remainder28\
    \ / b\n        val remainder30 = remainder29 / b\n        val remainder31 = remainder30\
    \ / b\n        val remainder32 = remainder31 / b\n        val remainder33 = remainder32\
    \ / b\n        val remainder34 = remainder33 / b\n        val remainder35 = remainder34\
    \ / b\n        val remainder36 = remainder35 / b\n        val remainder37 = remainder36\
    \ / b\n        val remainder38 = remainder37 / b\n        val remainder39 = remainder38\
    \ / b\n        val remainder40 = remainder39 / b\n        val remainder41 = remainder40\
    \ / b\n        val remainder42 = remainder41 / b\n        val remainder43 = remainder42\
    \ / b\n\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3kirm9z0.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3kirm9z0.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val evens_count\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_copy = mutable.ListBuffer[Long]()\n\
    \        val even_count_copy = mutable.ListBuffer[Long]()\n        val evens_count_copy\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_copy = mutable.ListBuffer[Long]()\n\
    \        val evens_count_copy = mutable.ListBuffer[Long]()\n        val evens_count_copy\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_copy = mutable.ListBuffer[Long]()\n\
    \        val evens_count_copy = mutable.ListBuffer[Long]()\n        val evens_count_copy\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_copy = mutable.ListBuffer[Long]()\n\
    \        val evens_count_copy = mutable.ListBuffer[Long]()\n        val evens_count_copy\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_copy = mutable.ListBuffer[Long]()\n\
    \        val evens_count_copy = mutable.ListBuffer[Long]()\n        val evens_count_copy\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_copy = mutable.ListBuffer[Long]()\n\
    \        val evens_count_copy = mutable.ListBuffer[Long]()\n        val evens_count_copy\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_copy = mutable.ListBuffer[Long]()\n\
    \        val evens_count_copy = mutable.ListBuffer[Long]()\n        val evens_count_copy\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_copy = mutable.ListBuffer[Long]()\n\
    \        val evens_count_copy = mutable.ListBuffer[Long]()\n        val evens_count_copy\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_copy = mutable.ListBuffer[Long]()\n\
    \        val evens_count_copy = mutable.ListBuffer[Long]()\n        val evens_count_copy\
    \ = mutable.ListBuffer[Long]()\n        val evens_count_copy = mutable.ListBuffer[Long]()\n\
    \        val evens_count_copy = mutable.ListBuffer[\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplzb_2pyc.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmplzb_2pyc.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mevens_count_copy\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevens_count_copy is already defined as \e[33mvalue\e[0m \e\
    [35mevens_count_copy\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplzb_2pyc.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mevens_count_copy\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevens_count_copy is already defined as \e[33mvalue\e[0m \e\
    [35mevens_count_copy\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplzb_2pyc.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mevens_count_copy\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevens_count_copy is already defined as \e[33mvalue\e[0m \e\
    [35mevens_count_copy\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplzb_2pyc.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mevens_count_copy\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevens_count_copy is already defined as \e[33mvalue\e[0m \e\
    [35mevens_count_copy\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659797726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val current = range.next\n            if (current % 2 == 0) {\n     \
    \           evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpon5xapso.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpon5xapso.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).span(_ % 2 == 0)\n        range.foreach { x =>\
    \ if (x % 2 == 0) evens += x else odds += x }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbqj6cldj.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbqj6cldj.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbqj6cldj.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).span(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \     ^\e[0m\n\e[31m   |\e[0m                          Found:    (a : Long)\n\e\
    [31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpbqj6cldj.scala:13:29 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).span(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \        ^\e[0m\n\e[31m   |\e[0m                             Found:    (b : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpbqj6cldj.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        range.foreach { \e[36mx\e[0m => \e[33mif\e[0m\
    \ (x % \e[31m2\e[0m == \e[31m0\e[0m) evens += x \e[33melse\e[0m odds += x }\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value foreach\
    \ is not a member of (Range, Range)\n5 errors found\n"
  stdout: ''
  timestamp: 1659797727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = mutable.ArrayBuffer.empty[Long]\n        val low = a\n  \
    \      val high = b\n        while(low < high) {\n            val mid = low +\
    \ (high - low) / 2\n            if(mid % 2 == 0) {\n                result.+=mid\n\
    \                low = mid + 1\n            } else {\n                high = mid\n\
    \            }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz2dkna9x.scala:18:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                low = mid + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    end of\
    \ statement expected but '=' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz2dkna9x.scala:11:21\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpz2dkna9x.scala:20:21\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                high\
    \ = mid\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val high\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val even = a / 2\n   \
    \     val odd = a % 2\n        val evens = a until b\n        evens.foreach {\
    \ x => if (x % 2 == 0) evens += x }\n        evens.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_x_pma2x.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = a until b\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevens\
    \ is already defined as \e[33mvalue\e[0m \e[35mevens\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_x_pma2x.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd_count = mutable.ListBuffer.empty[Long]\n\
    \        val even_count = mutable.ListBuffer.empty[Long]\n        val odd_count_max\
    \ = mutable.ListBuffer.empty[Long]\n        val even_count_max = mutable.ListBuffer.empty[Long]\n\
    \        val odd_count_min = mutable.ListBuffer.empty[Long]\n        val even_count_min\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_count_min = mutable.ListBuffer.empty[Long]\n\
    \        val even_count_min = mutable.ListBuffer.empty[Long]\n        val odd_count_max\
    \ = mutable.ListBuffer.empty[Long]\n        val even_count_max = mutable.ListBuffer.empty[Long]\n\
    \        val odd_count_min = mutable.ListBuffer.empty[Long]\n        val even_count_min\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_count_min = mutable.ListBuffer.empty[Long]\n\
    \        val even_count_min = mutable.ListBuffer.empty[Long]\n        val odd_count_max\
    \ = mutable.ListBuffer.empty[Long]\n        val even_count_max = mutable.ListBuffer.empty[Long]\n\
    \        val odd_count_min = mutable.ListBuffer.empty[Long]\n        val even_count_min\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_count_min = mutable.ListBuffer.empty[Long]\n\
    \        val even_count_min = mutable.ListBuffer.empty[Long]\n        val odd_count_min\
    \ = mutable.ListBuffer.empty[Long]\n        val even_count_min = mutable.ListBuffer.empty[Long]\n\
    \        val odd_count_max = mutable.ListBuffer.empty[Long]\n        val even_count_max\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_count_min = mutable.ListBuffer.empty[Long]\n\
    \        val even_count_min = mutable.ListBuffer.empty[Long]\n        val odd_count_min\
    \ = mutable.ListBuffer.empty[Long]\n        val even_count_min = mutable.ListBuffer.empty[Long]\n\
    \        val odd_count_max = mutable.ListBuffer.empty[Long]\n        val even_count_max\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_count_min = mutable.ListBuffer.empty[Long]\n\
    \        val even_count_min = mutable.ListBuffer.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp86cwlu8d.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp86cwlu8d.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36modd_count_min\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_count_min is already defined as \e[33mvalue\e[0m \e[35modd_count_min\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp86cwlu8d.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36meven_count_min\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_count_min is already defined as \e[33mvalue\e[0m \e[35meven_count_min\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp86cwlu8d.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36modd_count_max\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_count_max is already defined as \e[33mvalue\e[0m \e[35modd_count_max\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp86cwlu8d.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36meven_count_max\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_count_max is already defined as \e[33mvalue\e[0m \e[35meven_count_max\e\
    [0m\n\e[31m   |\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1659797729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        val range = (a to b).iterator\n\
    \        while(range.hasNext) {\n            val current = range.next\n      \
    \      val remainder = current % 10\n            if(remainder == 0) {\n      \
    \          list += current\n            }\n        }\n        list.sort\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu149_uyx.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n\
    \        val end = (b / a).toInt\n        val mid = a / 2\n        val mid2 =\
    \ (b / 2).toInt\n        val mid3 = ((b / 2).toInt) + 1\n        val mid4 = ((b\
    \ / 2).toInt) + 2\n        val mid5 = ((b / 2).toInt) + 3\n        val mid6 =\
    \ ((b / 2).toInt) + 4\n        val mid7 = ((b / 2).toInt) + 5\n        val mid8\
    \ = ((b / 2).toInt) + 6\n        val mid9 = ((b / 2).toInt) + 7\n        val mid10\
    \ = ((b / 2).toInt) + 8\n        val mid11 = ((b / 2).toInt) + 9\n        val\
    \ mid12 = ((b / 2).toInt) + 10\n        val mid13 = ((b / 2).toInt) + 11\n   \
    \     val mid14 = ((b / 2).toInt) + 12\n        val mid15 = ((b / 2).toInt) +\
    \ 13\n        val mid16 = ((b / 2).toInt) + 14\n        val mid17 = ((b / 2).toInt)\
    \ + 15\n        val mid18 = ((b / 2).toInt) + 16\n        val mid19 = ((b / 2).toInt)\
    \ + 17\n        val mid20 = ((b / 2).toInt) + 18\n        val mid21 = ((b / 2).toInt)\
    \ + 19\n        val mid22 = ((b / 2).toInt) + 20\n        val mid23 = ((b / 2).toInt)\
    \ + 21\n        val mid24 = ((b / 2).toInt) + 22\n        val mid25 = ((b / 2).toInt)\
    \ + 23\n        val mid26 = ((b / 2).toInt) + 24\n        val mid27 = ((b / 2).toInt)\
    \ + 25\n        val mid28 = ((b / 2).toInt) + 26\n        val mid29 = ((b / 2).toInt)\
    \ + 27\n        val mid30 = ((b / 2).toInt) + 28\n        val mid31 = ((b / 2).toInt)\
    \ + 29\n        val mid32 = ((b / 2).toInt) + 30\n        val mid33 = ((b / 2).toInt)\
    \ + 31\n        val mid34 = ((b / 2).toInt) + 32\n        val mid35 = ((b / 2).toInt)\
    \ + 33\n        val mid36 = ((b / 2).toInt) + 34\n        val mid37 = ((b / 2).toInt)\
    \ + 35\n        val mid38 = ((b\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1w6ez5jn.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1w6ez5jn.scala:11:19\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1w6ez5jn.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        var i = a\n        var\
    \ j = b\n        while(i <= j) {\n            list += i\n            i += 1\n\
    \        }\n        list.sortWith(_ < _)\n        list.takeWhile(_ < b)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoeanry84.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val even = a / 2\n   \
    \     val odd = a % 2\n        val evens = a until b\n        evens += even\n\
    \        evens += odd\n        evens.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx_wkn120.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = a until b\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevens\
    \ is already defined as \e[33mvalue\e[0m \e[35mevens\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx_wkn120.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = a / 2\n        val odd = b / 2\n        val remainder = a\
    \ % 2\n        val remainderOdd = b % 2\n        val evenDigit = if (remainder\
    \ == 0) even else even\n        val oddDigit = if (remainderOdd == 0) odd else\
    \ odd\n        val evenDigitOdd = if (remainder == 0 && remainderOdd == 0) even\
    \ else odd\n        val evenDigitOddDigit = if (remainder == 0 && remainderOdd\
    \ == 1) even else odd\n        val evenDigitOddDigitOdd = if (remainder == 1 &&\
    \ remainderOdd == 0) even else odd\n        val evenDigitOddDigitOddDigit = if\
    \ (remainder == 1 && remainderOdd == 1) even else odd\n        val evenDigitOddDigitOddDigitOdd\
    \ = if (remainder == 1 && remainderOdd == 2) even else odd\n        val evenDigitOddDigitOddDigitOddDigit\
    \ = if (remainder == 1 && remainderOdd == 3) even else odd\n        val evenDigitOddDigitOddDigitOddDigitOdd\
    \ = if (remainder == 1 && remainderOdd == 4) even else odd\n        val evenDigitOddDigitOddDigitOddDigitOdd\
    \ = if (remainder == 1 && remainderOdd == 5) even else odd\n        val evenDigitOddDigitOddDigitOddDigitOddDigit\
    \ = if (remainder == 1 && remainderOdd == 6) even else odd\n        val evenDigitOddDigitOddDigitOddDigitOddDigit\
    \ = if (remainder == 1 && remainderOdd == 7) even else odd\n        val evenDigitOddDigitOddDigitOddDigitOddDigit\
    \ = if (remainder == 1 && remainderOdd == 8) even else odd\n        val evenDigitOddDigitOddDigitOddDigitOddDigit\
    \ = if (remainder == 1 && remainderOdd == 9) even else odd\n        val evenDigitOddDigitOddDigitOddDigitOddDigitOdd\
    \ = if (remainder == 1 && remainderOdd == 10) even else odd\n        val evenDigitOddDigitOddDigitOddDigitOddDigitOdd\
    \ = if (remainder == 1 && remainderOdd == 11) even else odd\n        val evenDigitOddDigitO\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpypxc73__.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpypxc73__.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenDigitOddDigitOddDigitOddDigitOdd\e[0m = \e[33mif\e[0m (remainder ==\
    \ \e[31m1\e[0m && remainderOdd == \e[31m5\e[0m) even \e[33melse\e[0m odd\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenDigitOddDigitOddDigitOddDigitOdd is already defined as\
    \ \e[33mvalue\e[0m \e[35mevenDigitOddDigitOddDigitOddDigitOdd\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpypxc73__.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenDigitOddDigitOddDigitOddDigitOddDigit\e[0m = \e[33mif\e[0m (remainder\
    \ == \e[31m1\e[0m && remainderOdd == \e[31m7\e[0m) even \e[33melse\e[0m odd\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenDigitOddDigitOddDigitOddDigitOddDigit is already defined\
    \ as \e[33mvalue\e[0m \e[35mevenDigitOddDigitOddDigitOddDigitOddDigit\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpypxc73__.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mevenDigitOddDigitOddDigitOddDigitOddDigit\e\
    [0m = \e[33mif\e[0m (remainder == \e[31m1\e[0m && remainderOdd == \e[31m8\e[0m)\
    \ even \e[33melse\e[0m odd\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenDigitOddDigitOddDigitOddDigitOddDigit is already defined\
    \ as \e[33mvalue\e[0m \e[35mevenDigitOddDigitOddDigitOdd"
  stdout: ''
  timestamp: 1659797731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        var i = a\n        while(i\
    \ <= b) {\n            val remainder = i % 10\n            evens += remainder\n\
    \            i = i / 10\n        }\n        evens.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw14cr4m5.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).filter(_ % 2 == 0)\n        range.foreach(x =>\
    \ if (x % 2 == 0) evens += x else odds += x)\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_a79gngl.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_a79gngl.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_a79gngl.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \     ^\e[0m\n\e[31m   |\e[0m                          Found:    (a : Long)\n\e\
    [31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp_a79gngl.scala:13:29 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \        ^\e[0m\n\e[31m   |\e[0m                             Found:    (b : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val odd_count_copy\
    \ = mutable.ListBuffer[Long]()\n        val even_count_copy = mutable.ListBuffer[Long]()\n\
    \        val odd_count_copy2 = mutable.ListBuffer[Long]()\n        val even_count_copy2\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_copy3 = mutable.ListBuffer[Long]()\n\
    \        val even_count_copy3 = mutable.ListBuffer[Long]()\n        val odd_count_copy4\
    \ = mutable.ListBuffer[Long]()\n        val even_count_copy4 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_copy5 = mutable.ListBuffer[Long]()\n        val even_count_copy5\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_copy6 = mutable.ListBuffer[Long]()\n\
    \        val even_count_copy6 = mutable.ListBuffer[Long]()\n        val odd_count_copy7\
    \ = mutable.ListBuffer[Long]()\n        val even_count_copy7 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_copy8 = mutable.ListBuffer[Long]()\n        val even_count_copy8\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_copy9 = mutable.ListBuffer[Long]()\n\
    \        val even_count_copy9 = mutable.ListBuffer[Long]()\n        val odd_count_copy10\
    \ = mutable.ListBuffer[Long]()\n        val even_count_copy10 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_copy11 = mutable.ListBuffer[Long]()\n        val even_count_copy11\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_copy12 = mutable.ListBuffer[Long]()\n\
    \        val even_count_copy12 = mutable.ListBuffer[Long]()\n        val odd_count_copy13\
    \ = mutable.ListBuffer[Long]()\n        val even_count_copy13 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_copy14 = mutable.ListBuffer[Long]()\n        val even_count_copy14\
    \ = mutable.ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0swh4so_.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0swh4so_.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0swh4so_.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0swh4so_.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp0swh4so_.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven_count\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0swh4so_.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36modd_count_co"
  stdout: ''
  timestamp: 1659797688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val even_count =\
    \ mutable.ListBuffer[Long]()\n        val odd_count_temp = mutable.ListBuffer[Long]()\n\
    \        val even_count_temp = mutable.ListBuffer[Long]()\n        val odd_count_temp_2\
    \ = mutable.ListBuffer[Long]()\n        val even_count_temp_2 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_temp_3 = mutable.ListBuffer[Long]()\n        val even_count_temp_3\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_temp_4 = mutable.ListBuffer[Long]()\n\
    \        val even_count_temp_4 = mutable.ListBuffer[Long]()\n        val odd_count_temp_5\
    \ = mutable.ListBuffer[Long]()\n        val even_count_temp_5 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_temp_6 = mutable.ListBuffer[Long]()\n        val even_count_temp_6\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_temp_7 = mutable.ListBuffer[Long]()\n\
    \        val even_count_temp_7 = mutable.ListBuffer[Long]()\n        val odd_count_temp_8\
    \ = mutable.ListBuffer[Long]()\n        val even_count_temp_8 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_temp_9 = mutable.ListBuffer[Long]()\n        val even_count_temp_9\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_temp_10 = mutable.ListBuffer[Long]()\n\
    \        val even_count_temp_10 = mutable.ListBuffer[Long]()\n        val odd_count_temp_11\
    \ = mutable.ListBuffer[Long]()\n        val even_count_temp_11 = mutable.ListBuffer[Long]()\n\
    \        val odd_count_temp_12 = mutable.ListBuffer[Long]()\n        val even_count_temp_12\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_temp_13 = mutable.ListBuffer[Long]()\n\
    \        val even_count_temp_13 = mutable.ListBuffer[Long]()\n        val odd_count_temp_14\
    \ = mutable.ListBuffer[Long]\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjrvjxh43.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36meven_count\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_count is already defined as \e[33mvalue\e[0m \e[35meven_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpjrvjxh43.scala:11:20 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjrvjxh43.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjrvjxh43.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjrvjxh43.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpjrvjxh43.scala:15:25 -----------"
  stdout: ''
  timestamp: 1659797731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val x = range.next\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpac57cpi_.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpac57cpi_.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        val evenRange = range.filter(_ %\
    \ 2 == 0)\n        val oddRange = range.filter(_ % 2 != 0)\n        evenRange\
    \ foreach { x => evens += x }\n        oddRange foreach { x => odds += x }\n \
    \       evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpodix_9d5.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpodix_9d5.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val even_count =\
    \ mutable.ListBuffer[Long]()\n        val odd_count_list = mutable.ListBuffer[Long]()\n\
    \        val even_count_list = mutable.ListBuffer[Long]()\n        val even_list:\
    \ List[Long] = List(a,b)\n        even_list.foreach(x => {\n            if (x\
    \ % 2 == 0) {\n                evens += x\n                even_count += x\n \
    \               even_count_list += x\n            } else {\n                odd\
    \ += x\n                odd_count += x\n                odd_count_list += x\n\
    \            }\n        })\n        evens.toList.sortWith(_ < _)\n        odd.toList.sortWith(_\
    \ < _)\n        even.toList.sortWith(_ < _)\n        odd_count.toList.sortWith(_\
    \ < _)\n        even_count.toList.sortWith(_ < _)\n        odd_count_list.toList.sortWith(_\
    \ < _)\n        even_count_list.toList.sortWith(_ < _)\n        even_list.toList.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpshtzrl2m.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36meven_count\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_count is already defined as \e[33mvalue\e[0m \e[35meven_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpshtzrl2m.scala:11:20 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpshtzrl2m.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpshtzrl2m.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpshtzrl2m.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpshtzrl2m.scala:15:25 -----------"
  stdout: ''
  timestamp: 1659797730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = Range(a, b).iterator\n        while(range.hasNext) {\n  \
    \          val current = range.next\n            if(current % 2 == 0) {\n    \
    \            evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2n9550_v.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2n9550_v.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2n9550_v.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).iterator\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2n9550_v.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b).iterator\n\e[31m\e[31m   |\e[0m                            \
    \ ^\e[0m\n\e[31m   |\e[0m                             Found:    (b : Long)\n\e\
    [31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val evens_count\
    \ = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val evens_sum = mutable.ListBuffer[Long]()\n\
    \        val odd_product = mutable.ListBuffer[Long]()\n        val even_product\
    \ = mutable.ListBuffer[Long]()\n        val evens_product = mutable.ListBuffer[Long]()\n\
    \        val odd_product2 = mutable.ListBuffer[Long]()\n        val even_product2\
    \ = mutable.ListBuffer[Long]()\n        val evens_product2 = mutable.ListBuffer[Long]()\n\
    \        val odd_product3 = mutable.ListBuffer[Long]()\n        val even_product3\
    \ = mutable.ListBuffer[Long]()\n        val evens_product3 = mutable.ListBuffer[Long]()\n\
    \        val odd_product4 = mutable.ListBuffer[Long]()\n        val even_product4\
    \ = mutable.ListBuffer[Long]()\n        val evens_product4 = mutable.ListBuffer[Long]()\n\
    \        val odd_product5 = mutable.ListBuffer[Long]()\n        val even_product5\
    \ = mutable.ListBuffer[Long]()\n        val evens_product5 = mutable.ListBuffer[Long]()\n\
    \        val odd_product6 = mutable.ListBuffer[Long]()\n        val even_product6\
    \ = mutable.ListBuffer[Long]()\n        val evens_product6 = mutable.ListBuffer[Long]()\n\
    \        val odd_product7 = mutable.ListBuffer[Long]()\n        val even_product7\
    \ = mutable.ListBuffer[Long]()\n        val evens_product7 = mutable.ListBuffer[Long]()\n\
    \        val odd_product8 = mutable.ListBuffer[Long]()\n        val even_product8\
    \ = mutable.ListBuffer[Long]()\n        val evens_product8 = mutable.ListBuffer[Long]()\n\
    \        val odd_product9 = mutable.ListBuffer[Long]()\n        val even_product9\
    \ = mutable.ListBuffer[Long]()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpca_b3c_1.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpca_b3c_1.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpca_b3c_1.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpca_b3c_1.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpca_b3c_1.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven_count\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpca_b3c_1.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevens_count\e"
  stdout: ''
  timestamp: 1659797734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val evensSet = mutable.Set[Long]()\n\
    \        val evensSet2 = mutable.Set[Long]()\n        val evensSet3 = mutable.Set[Long]()\n\
    \        val evensSet4 = mutable.Set[Long]()\n        val evensSet5 = mutable.Set[Long]()\n\
    \        val evensSet6 = mutable.Set[Long]()\n        val evensSet7 = mutable.Set[Long]()\n\
    \        val evensSet8 = mutable.Set[Long]()\n        val evensSet9 = mutable.Set[Long]()\n\
    \        val evensSet10 = mutable.Set[Long]()\n        val evensSet11 = mutable.Set[Long]()\n\
    \        val evensSet12 = mutable.Set[Long]()\n        val evensSet13 = mutable.Set[Long]()\n\
    \        val evensSet14 = mutable.Set[Long]()\n        val evensSet15 = mutable.Set[Long]()\n\
    \        val evensSet16 = mutable.Set[Long]()\n        val evensSet17 = mutable.Set[Long]()\n\
    \        val evensSet18 = mutable.Set[Long]()\n        val evensSet19 = mutable.Set[Long]()\n\
    \        val evensSet20 = mutable.Set[Long]()\n        val evensSet21 = mutable.Set[Long]()\n\
    \        val evensSet22 = mutable.Set[Long]()\n        val evensSet23 = mutable.Set[Long]()\n\
    \        val evensSet24 = mutable.Set[Long]()\n        val evensSet25 = mutable.Set[Long]()\n\
    \        val evensSet26 = mutable.Set[Long]()\n        val evensSet27 = mutable.Set[Long]()\n\
    \        val evensSet28 = mutable.Set[Long]()\n        val evensSet29 = mutable.Set[Long]()\n\
    \        val evensSet30 = mutable.Set[Long]()\n        val evensSet31 = mutable.Set[Long]()\n\
    \        val evensSet32 = mutable.Set[Long]()\n        val evensSet33 = mutable.Set[Long]()\n\
    \        val evensSet34 = mutable.Set[Long]()\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5bdson_h.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5bdson_h.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevensSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5bdson_h.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevensSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5bdson_h.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevensSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5bdson_h.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevensSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5bdson_h.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevensSet5\e[0m"
  stdout: ''
  timestamp: 1659797711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val evensSet = mutable.Set[Long]()\n\
    \        val evensSet2 = mutable.Set[Long]()\n        val evensSet3 = mutable.Set[Long]()\n\
    \        val evensSet4 = mutable.Set[Long]()\n        val evensSet5 = mutable.Set[Long]()\n\
    \        val evensSet6 = mutable.Set[Long]()\n        val evensSet7 = mutable.Set[Long]()\n\
    \        val evensSet8 = mutable.Set[Long]()\n        val evensSet9 = mutable.Set[Long]()\n\
    \        val evensSet10 = mutable.Set[Long]()\n        val evensSet11 = mutable.Set[Long]()\n\
    \        val evensSet12 = mutable.Set[Long]()\n        val evensSet13 = mutable.Set[Long]()\n\
    \        val evensSet14 = mutable.Set[Long]()\n        val evensSet15 = mutable.Set[Long]()\n\
    \        val evensSet16 = mutable.Set[Long]()\n        val evensSet17 = mutable.Set[Long]()\n\
    \        val evensSet18 = mutable.Set[Long]()\n        val evensSet19 = mutable.Set[Long]()\n\
    \        val evensSet20 = mutable.Set[Long]()\n        val evensSet21 = mutable.Set[Long]()\n\
    \        val evensSet22 = mutable.Set[Long]()\n        val evensSet23 = mutable.Set[Long]()\n\
    \        val evensSet24 = mutable.Set[Long]()\n        val evensSet25 = mutable.Set[Long]()\n\
    \        val evensSet26 = mutable.Set[Long]()\n        val evensSet27 = mutable.Set[Long]()\n\
    \        val evensSet28 = mutable.Set[Long]()\n        val evensSet29 = mutable.Set[Long]()\n\
    \        val evensSet30 = mutable.Set[Long]()\n        val evensSet31 = mutable.Set[Long]()\n\
    \        val evensSet32 = mutable.Set[Long]()\n        val evensSet33 = mutable.Set[Long]()\n\
    \        val evensSet34 = mutable.Set[Long]()\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5bdson_h.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5bdson_h.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevensSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5bdson_h.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevensSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5bdson_h.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevensSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5bdson_h.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevensSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5bdson_h.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevensSet5\e[0m"
  stdout: ''
  timestamp: 1659797711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b)\n        range.foreach(x => {\n            if\
    \ (x % 2 == 0) {\n                evens += x\n            } else {\n         \
    \       odds += x\n            }\n        })\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpet7shrz9.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpet7shrz9.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpet7shrz9.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpet7shrz9.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (b : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        var i = a\n        var\
    \ j = b\n        while (i <= j) {\n            if (i % 2 == 0) {\n           \
    \     evens += i\n            }\n            i += 1\n        }\n        evens.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzv9h_ybx.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        range.foreach(x => {\n         \
    \   if (x % 2 == 0) {\n                evens += x\n            } else {\n    \
    \            odds += x\n            }\n        })\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk6mj9t9z.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpk6mj9t9z.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n\
    \        val end = (a / b).toInt + 1\n        for (i <- start until end) {\n \
    \           val temp = (a / b).toInt\n            if (temp % 2 == 0) {\n     \
    \           list += temp\n            }\n        }\n        list.sort\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplc46x_ye.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val current = range.next\n            if (current % 2 == 0) {\n     \
    \           evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpon5xapso.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpon5xapso.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val low = math.min(a,\
    \ b)\n        val high = math.max(a, b)\n        while(low < high) {\n       \
    \     val mid = (low + high) / 2\n            if(mid % 2 == 0) {\n           \
    \     evens += mid\n                low = mid + 1\n            } else {\n    \
    \            high = mid - 1\n            }\n        }\n        evens.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr6oxp5fz.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpr6oxp5fz.scala:18:20 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                low = mid + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val low\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpr6oxp5fz.scala:20:21\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                high\
    \ = mid - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val high\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659797730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val evens_count\
    \ = mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val evens_sum = mutable.ListBuffer[Long]()\n\
    \        val odd_product = mutable.ListBuffer[Long]()\n        val even_product\
    \ = mutable.ListBuffer[Long]()\n        val evens_product = mutable.ListBuffer[Long]()\n\
    \        val odd_min = mutable.ListBuffer[Long]()\n        val even_min = mutable.ListBuffer[Long]()\n\
    \        val evens_min = mutable.ListBuffer[Long]()\n        val odd_max = mutable.ListBuffer[Long]()\n\
    \        val even_max = mutable.ListBuffer[Long]()\n        val evens_max = mutable.ListBuffer[Long]()\n\
    \        val odd_sum = mutable.ListBuffer[Long]()\n        val even_sum = mutable.ListBuffer[Long]()\n\
    \        val evens_sum = mutable.ListBuffer[Long]()\n        val odd_product =\
    \ mutable.ListBuffer[Long]()\n        val even_product = mutable.ListBuffer[Long]()\n\
    \        val evens_product = mutable.ListBuffer[Long]()\n        val odd_min =\
    \ mutable.ListBuffer[Long]()\n        val even_min = mutable.ListBuffer[Long]()\n\
    \        val evens_min = mutable.ListBuffer[Long]()\n        val odd_max = mutable.ListBuffer[Long]()\n\
    \        val even_max = mutable.ListBuffer[Long]()\n        val evens_max = mutable.ListBuffer[Long]()\n\
    \        val odd_sum = mutable.ListBuffer[Long]()\n        val even_sum = mutable.ListBuffer[Long]()\n\
    \        val evens_sum = mutable.ListBuffer[Long]()\n        val odd_product =\
    \ mutable.ListBuffer[Long]()\n        val even_product = mutable.ListBuffer[Long]()\n\
    \        val evens_product = mutable.ListBuffer[Long]()\n        val \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp63prtxdk.scala:47:11 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp63prtxdk.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36modd_sum\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_sum is already defined as \e[33mvalue\e[0m \e[35modd_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp63prtxdk.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36meven_sum\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_sum is already defined as \e[33mvalue\e[0m \e[35meven_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp63prtxdk.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mevens_sum\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevens_sum is already defined as \e[33mvalue\e[0m \e[35mevens_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp63prtxdk.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36modd_product\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_product is already defined as \e[33mvalue\e[0m \e[35modd_product\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote "
  stdout: ''
  timestamp: 1659797734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val even = a / 2\n        val odd = a % 2\n        val evens = a until\
    \ b\n        val odds = b until a\n        evens foreach { x => if (x % 2 == 0)\
    \ evens += x }\n        odds foreach { x => if (x % 2 == 1) odds += x }\n    \
    \    evens.toList ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaimnnd3o.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = a until b\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevens\
    \ is already defined as \e[33mvalue\e[0m \e[35mevens\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaimnnd3o.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36modds\e[0m = b until a\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modds is already defined as \e[33mvalue\e[0m \e[35modds\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpaimnnd3o.scala:11:20 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpaimnnd3o.scala:12:19 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val list = mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n\
    \        val end = (a / b).toInt + 1\n        for (i = start; i < end; i++) {\n\
    \            val x = i * b\n            val y = x % b\n            if (y == 0)\
    \ {\n                list += x\n            }\n        }\n        list.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphljyqdv6.scala:14:15 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i = start; i < end; i++) {\n\e\
    [31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               ')' expected,\
    \ but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphljyqdv6.scala:14:31\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m\
    \ (i = start; i < end; i++) {\n\e[31m\e[31m   |\e[0m                         \
    \      ^\e[0m\n\e[31m   |\e[0m                               '<-' expected, but\
    \ ';' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmphljyqdv6.scala:14:36\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m\
    \ (i = start; i < end; i++) {\n\e[31m\e[31m   |\e[0m                         \
    \           ^\e[0m\n\e[31m   |\e[0m                                    pattern\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphljyqdv6.scala:11:19\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphljyqdv6.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i\
    \ = start; i < end; i++) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\
    \e[31m   |\e[0mvalue foreach is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.Im"
  stdout: ''
  timestamp: 1659797735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val low = math.min(a,\
    \ b)\n        val high = math.max(a, b)\n        val range = high - low\n    \
    \    val step = (range / 2).toInt\n        val mid = low + step\n        val start\
    \ = math.min(mid, high)\n        val end = math.max(mid, high)\n        val midRange\
    \ = end - start\n        val evenRange = midRange / 2\n        val evenStart =\
    \ math.min(evenRange, high)\n        val evenEnd = math.max(evenRange, high)\n\
    \        val evenStep = (evenEnd - evenStart) / 2\n        val evenMid = (evenStart\
    \ + evenEnd) / 2\n        val evenStart = math.min(evenMid, high)\n        val\
    \ evenEnd = math.max(evenMid, high)\n        val evenMidRange = evenEnd - evenStart\n\
    \        val evenMidRangeStep = (evenMidRange / 2).toInt\n        val evenMidRangeStart\
    \ = evenStart + evenMidRangeStep\n        val evenMidRangeEnd = evenEnd - evenMidRangeStep\n\
    \        val evenMidRangeStep2 = evenMidRangeEnd - evenMidRangeStart\n       \
    \ val evenMidRangeStep3 = evenMidRangeStep2 * 2\n        val evenMidRangeStep4\
    \ = evenMidRangeStep3 * 2\n        val evenMidRangeStep5 = evenMidRangeStep4 *\
    \ 2\n        val evenMidRangeStep6 = evenMidRangeStep5 * 2\n        val evenMidRangeStep7\
    \ = evenMidRangeStep6 * 2\n        val evenMidRangeStep8 = evenMidRangeStep7 *\
    \ 2\n        val evenMidRangeStep9 = evenMidRangeStep8 * 2\n        val evenMidRangeStep10\
    \ = evenMidRangeStep9 * 2\n        val evenMidRangeStep11 = evenMidRangeStep10\
    \ * 2\n        val evenMidRangeStep12 = evenMidRangeStep11 * 2\n        val evenMidRangeStep13\
    \ = evenMidRangeStep12 * 2\n        val evenMidRangeStep14 = evenMidRangeStep13\
    \ * 2\n        val evenMidRangeStep15 = evenMidRangeStep14 * 2\n        val evenMidRangeStep16\
    \ = evenMidRangeStep15 * 2\n        val evenMidRangeStep17 = evenMidRangeStep16\
    \ * 2\n        val evenMidRangeStep18 = evenMidRangeStep17 * 2\n        val evenMidRangeStep19\
    \ = evenMidRangeStep18 * 2\n        val evenMidRangeStep20 = evenMidRangeStep19\
    \ * 2\n        val evenMid\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkdt7qaa7.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkdt7qaa7.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenStart\e[0m = math.min(evenMid, high)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenStart is already\
    \ defined as \e[33mvalue\e[0m \e[35mevenStart\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkdt7qaa7.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenEnd\e[0m = math.max(evenMid, high)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenEnd is already defined as \e[33mvalue\e[0m \e[35mevenEnd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkdt7qaa7.scala:11:20 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpkdt7qaa7.scala:51:5 ---------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659797735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n\
    \        val end = (a / b).toInt + 1\n        for (i = start; i < end; i++) {\n\
    \            val x = i * b\n            if (x % 2 == 0) {\n                result.add(x)\n\
    \            }\n        }\n        result.sortWith((x, y) => x < y)\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmmrf40he.scala:14:15 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i = start; i < end; i++) {\n\e\
    [31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               ')' expected,\
    \ but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmmrf40he.scala:14:31\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m\
    \ (i = start; i < end; i++) {\n\e[31m\e[31m   |\e[0m                         \
    \      ^\e[0m\n\e[31m   |\e[0m                               '<-' expected, but\
    \ ';' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpmmrf40he.scala:14:36\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m\
    \ (i = start; i < end; i++) {\n\e[31m\e[31m   |\e[0m                         \
    \           ^\e[0m\n\e[31m   |\e[0m                                    pattern\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmmrf40he.scala:11:21\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmmrf40he.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i\
    \ = start; i < end; i++) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\
    \e[31m   |\e[0mvalue foreach is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.conv"
  stdout: ''
  timestamp: 1659797735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = (a to b).toList\n        for(i <- range) {\n            if((i\
    \ % 2) == 0) {\n                evens += i\n            } else {\n           \
    \     odds += i\n            }\n        }\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr009krgf.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpr009krgf.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = (a to b).iterator\n        while(range.hasNext) {\n     \
    \       val current = range.next\n            val remainder = current % 10\n \
    \           if(remainder == 0) {\n                evens += current\n         \
    \   } else {\n                odds += current\n            }\n        }\n    \
    \    evens.toList ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr_xvxjll.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpr_xvxjll.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val even_count =\
    \ mutable.ListBuffer[Long]()\n        val odd_sum = mutable.ListBuffer[Long]()\n\
    \        val even_sum = mutable.ListBuffer[Long]()\n        val odd_product =\
    \ mutable.ListBuffer[Long]()\n        val even_product = mutable.ListBuffer[Long]()\n\
    \        val odd_product2 = mutable.ListBuffer[Long]()\n        val even_product2\
    \ = mutable.ListBuffer[Long]()\n        val odd_product3 = mutable.ListBuffer[Long]()\n\
    \        val even_product3 = mutable.ListBuffer[Long]()\n        val odd_product4\
    \ = mutable.ListBuffer[Long]()\n        val even_product4 = mutable.ListBuffer[Long]()\n\
    \        val odd_product5 = mutable.ListBuffer[Long]()\n        val even_product5\
    \ = mutable.ListBuffer[Long]()\n        val odd_product6 = mutable.ListBuffer[Long]()\n\
    \        val even_product6 = mutable.ListBuffer[Long]()\n        val odd_product7\
    \ = mutable.ListBuffer[Long]()\n        val even_product7 = mutable.ListBuffer[Long]()\n\
    \        val odd_product8 = mutable.ListBuffer[Long]()\n        val even_product8\
    \ = mutable.ListBuffer[Long]()\n        val odd_product9 = mutable.ListBuffer[Long]()\n\
    \        val even_product9 = mutable.ListBuffer[Long]()\n        val odd_product10\
    \ = mutable.ListBuffer[Long]()\n        val even_product10 = mutable.ListBuffer[Long]()\n\
    \        val odd_product11 = mutable.ListBuffer[Long]()\n        val even_product11\
    \ = mutable.ListBuffer[Long]()\n        val odd_product12 = mutable.ListBuffer[Long]()\n\
    \        val even_product12 = mutable.ListBuffer[Long]()\n        val odd_product13\
    \ = mutable.ListBuffer[Long]()\n        val even_product13 = mutable.ListBuffer[Long]()\n\
    \        val odd_product14 = mutable.ListBuffer\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp65ed1y0.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36meven_count\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_count is already defined as \e[33mvalue\e[0m \e[35meven_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpp65ed1y0.scala:11:20 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp65ed1y0.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp65ed1y0.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp65ed1y0.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpp65ed1y0.scala:15:25 -----------"
  stdout: ''
  timestamp: 1659797736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while(range.hasNext) {\n     \
    \       val current = range.next\n            if(current % 2 == 0) {\n       \
    \         evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp21x44339.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp21x44339.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).toList\n        for(i <- range) {\n            val\
    \ remainder = i % 2\n            if(i == 0 || i == 1) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppro1q3xn.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppro1q3xn.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val evens_count\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_temp = mutable.ListBuffer[Long]()\n\
    \        val even_count_temp = mutable.ListBuffer[Long]()\n        val evens_count_temp\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_temp_temp = mutable.ListBuffer[Long]()\n\
    \        val even_count_temp_temp = mutable.ListBuffer[Long]()\n        val evens_count_temp_temp\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_temp_temp_temp = mutable.ListBuffer[Long]()\n\
    \        val even_count_temp_temp_temp = mutable.ListBuffer[Long]()\n        val\
    \ evens_count_temp_temp_temp = mutable.ListBuffer[Long]()\n        val odd_count_temp_temp_temp_temp\
    \ = mutable.ListBuffer[Long]()\n        val even_count_temp_temp_temp_temp = mutable.ListBuffer[Long]()\n\
    \        val evens_count_temp_temp_temp_temp = mutable.ListBuffer[Long]()\n  \
    \      val odd_count_temp_temp_temp_temp_temp = mutable.ListBuffer[Long]()\n \
    \       val even_count_temp_temp_temp_temp_temp = mutable.ListBuffer[Long]()\n\
    \        val evens_count_temp_temp_temp_temp_temp = mutable.ListBuffer[Long]()\n\
    \        val odd_count_temp_temp_temp_temp_temp_temp = mutable.ListBuffer[Long]()\n\
    \        val even_count_temp_temp_temp_temp_temp_temp = mutable.ListBuffer[Long]()\n\
    \        val evens_count_temp_temp_temp_temp_temp_temp = mutable.ListBuffer[Long]()\n\
    \        val odd_count_temp_temp_temp_temp_temp_temp_temp = mutable.ListBuffer[Long]()\n\
    \        val even_count_temp_temp_temp_temp_temp_temp_temp = mutable.ListBuffer[Long]()\n\
    \        val evens_count_temp_temp_temp_temp_temp_temp_temp = mutable.ListBuffer[Long]()\n\
    \        val odd_count_temp_temp_temp_temp_temp_temp_temp_temp = mutable.ListBuffer[Long]()\n\
    \        val even_count_temp_temp_temp_temp_temp_temp_temp_temp = mutable.ListBuffer[Long]()\n\
    \        val evens_count_temp_temp_temp_temp_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeqj4u4kh.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeqj4u4kh.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeqj4u4kh.scala:12:18\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeqj4u4kh.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeqj4u4kh.scala:14:24\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modd_count\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeqj4u4kh.scala:15:25\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36meven_count\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation "
  stdout: ''
  timestamp: 1659797735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = new mutable.ListBuffer[Long]()\n        val start = (a to\
    \ b).toList\n        val end = (a to b).toList.reverse\n        val mid = a to\
    \ b\n        val mid2 = a to b.reverse\n        val mid3 = a to b.reverse.reverse\n\
    \        val mid4 = a to b.reverse.reverse.reverse\n        val mid5 = a to b.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgmth4o7i.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgmth4o7i.scala:15:26\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mmid2\e[0m = a to b.reverse\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value reverse is not a member of Long\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgmth4o7i.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmid3\e[0m = a to b.reverse.reverse\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       value reverse is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpgmth4o7i.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmid4\e[0m = a to b.reverse.reverse.reverse\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       value reverse is not a member of Long\nException in thread\
    \ \"main\" java.lang.StackOverflowError\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1521)\n\
    \tat dotty.tools.dotc.ast.tpd$TreeOps$$anon$5.apply(tpd.scala:1093)\n\tat dotty.tools.dotc.ast.tpd$TreeOps$$anon$5.apply(tpd.scala:1093)\n\
    \tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1529)\n\
    \tat dotty.tools.dotc.ast.tpd$TreeOps$$anon$5.apply(tpd.scala:1093)\n\tat dotty.tools.dotc.ast.tpd$TreeOps$$anon$5.apply(tpd.scala:1093)\n\
    \tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1529)\n\
    \tat dotty.tools.dotc.ast.tpd$TreeOps$$anon$5.apply(tpd.scala:1093)\n\tat dotty.tools.dotc.ast.tpd$TreeOps$$anon$5.apply(tpd.scala:1093)\n\
    \tat dotty.tools.dotc.ast.Trees$I"
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmpgmth4o7i.scala

    '
  timestamp: 1659797736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val even = a / 2\n   \
    \     val odd = a % 2\n        val evens = a until b\n        evens += even\n\
    \        evens += odd\n        evens.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx_wkn120.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = a until b\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevens\
    \ is already defined as \e[33mvalue\e[0m \e[35mevens\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx_wkn120.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val range = scala.collection.mutable.Range(a, b)\n        range.foreach(x\
    \ => if (x % 2 == 0) evens += x; else odd += x)\n        evens.toList ++ odd.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw01dvt8d.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpw01dvt8d.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpw01dvt8d.scala:13:45 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = scala.collection.mutable.Range(a,\
    \ b)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value Range is not a member of scala.collection.mutable\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659797736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val current = range.next\n            if (current % 2 == 0) {\n     \
    \           evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpon5xapso.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpon5xapso.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = new mutable.ListBuffer[Long]()\n        val n = math.max(math.abs(a),\
    \ math.abs(b))\n        val m = math.min(math.abs(a), math.abs(b))\n        var\
    \ i = a\n        var j = b\n        var k = a\n        while(i <= n) {\n     \
    \       while(j <= m && k <= n) {\n                result.add(i * j / k)\n   \
    \             j += 1\n                k += 1\n            }\n            i +=\
    \ 1\n            j = b\n            k = a\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5rgitgf1.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).iterator\n        while (range.hasNext) {\n \
    \           val current = range.next\n            if (current % 2 == 0) {\n  \
    \              evens += current\n            } else {\n                odds +=\
    \ current\n            }\n        }\n        evens.toList ++ odds.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprawa_n2y.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprawa_n2y.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprawa_n2y.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).iterator\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprawa_n2y.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b).iterator\n\e[31m\e[31m   |\e[0m                            \
    \ ^\e[0m\n\e[31m   |\e[0m                             Found:    (b : Long)\n\e\
    [31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_count = mutable.ListBuffer[Long]()\n\
    \        val even_count = mutable.ListBuffer[Long]()\n        val evens_count\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_max = mutable.ListBuffer[Long]()\n\
    \        val even_count_max = mutable.ListBuffer[Long]()\n        val evens_count_max\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_min = mutable.ListBuffer[Long]()\n\
    \        val even_count_min = mutable.ListBuffer[Long]()\n        val evens_count_min\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_max = mutable.ListBuffer[Long]()\n\
    \        val even_count_max = mutable.ListBuffer[Long]()\n        val evens_count_max\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_min = mutable.ListBuffer[Long]()\n\
    \        val even_count_min = mutable.ListBuffer[Long]()\n        val evens_count_min\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_max = mutable.ListBuffer[Long]()\n\
    \        val even_count_max = mutable.ListBuffer[Long]()\n        val evens_count_max\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_min = mutable.ListBuffer[Long]()\n\
    \        val even_count_min = mutable.ListBuffer[Long]()\n        val evens_count_min\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_max = mutable.ListBuffer[Long]()\n\
    \        val even_count_max = mutable.ListBuffer[Long]()\n        val evens_count_max\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_min = mutable.ListBuffer[Long]()\n\
    \        val even_count_min = mutable.ListBuffer[Long]()\n        val evens_count_min\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_max = mutable.ListBuffer[Long]()\n\
    \        val even_count_max = mutable.ListBuffer[Long]()\n        val evens_count_max\
    \ = mutable.ListBuffer[Long]()\n        val odd_count_min = mutable.ListBuffer[Long]()\n\
    \        val even_count_min = mutable.ListBuffer[\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2876wkbt.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2876wkbt.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36modd_count_max\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_count_max is already defined as \e[33mvalue\e[0m \e[35modd_count_max\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2876wkbt.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36meven_count_max\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_count_max is already defined as \e[33mvalue\e[0m \e[35meven_count_max\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2876wkbt.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mevens_count_max\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevens_count_max is already defined as \e[33mvalue\e[0m \e\
    [35mevens_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2876wkbt.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36modd_count_min\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_count_min is already defined as \e[33mvalue\e[0m \e[35modd_count_min\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded m"
  stdout: ''
  timestamp: 1659797678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val result = mutable.ListBuffer[Long]()\n        val start = (a to b).map(x\
    \ => x.toInt).sorted\n        val end = (a to b).map(x => x.toInt).reverse\n \
    \       val startIndex = start.indexWhere(_ > 0)\n        val endIndex = end.indexWhere(_\
    \ > 0)\n        val startValue = start.take(startIndex).sum\n        val endValue\
    \ = end.take(endIndex).sum\n        val startIndex = start.indexWhere(_ > 0)\n\
    \        val endIndex = end.indexWhere(_ > 0)\n        val startValue = start.take(startIndex).sum\n\
    \        val endValue = end.take(endIndex).sum\n        val startIndex = start.indexWhere(_\
    \ > 0)\n        val endIndex = end.indexWhere(_ > 0)\n        val startValue =\
    \ start.take(startIndex).sum\n        val endValue = end.take(endIndex).sum\n\
    \        val startIndex = start.indexWhere(_ > 0)\n        val endIndex = end.indexWhere(_\
    \ > 0)\n        val startValue = start.take(startIndex).sum\n        val endValue\
    \ = end.take(endIndex).sum\n        val startIndex = start.indexWhere(_ > 0)\n\
    \        val endIndex = end.indexWhere(_ > 0)\n        val startValue = start.take(startIndex).sum\n\
    \        val endValue = end.take(endIndex).sum\n        val startIndex = start.indexWhere(_\
    \ > 0)\n        val endIndex = end.indexWhere(_ > 0)\n        val startValue =\
    \ start.take(startIndex).sum\n        val endValue = end.take(endIndex).sum\n\
    \        val startIndex = start.indexWhere(_ > 0)\n        val endIndex = end.indexWhere(_\
    \ > 0)\n        val startValue = start.take(startIndex).sum\n        val endValue\
    \ = end.take(endIndex).sum\n        val startIndex = start.indexWhere(_ > 0)\n\
    \        val endIndex = end.indexWhere(_ > 0)\n        val startValue = start.take(startIndex).sum\n\
    \        val endValue = end.take(endIndex).sum\n        val startIndex = start.indexWhere(_\
    \ > 0)\n        val endIndex = end.indexWhere(_ > 0)\n        val startValue =\
    \ start.take(startIndex).sum\n        val endValue = end.take(endIndex).sum\n\
    \        val startIndex = start.indexWhere(_ > 0)\n        val endIndex = end.indexWhere(_\
    \ > 0)\n        val startValue = start.take(startIndex).sum\n        val endValue\
    \ = end.take(endIndex).sum\n        val startIndex = start.index\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5xkhx95w.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mstartIndex\e[0m = start.indexWhere(_\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstartIndex is already defined as \e[33mvalue\e[0m \e[35mstartIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5xkhx95w.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mendIndex\e[0m = end.indexWhere(_ > \e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mendIndex is already defined as \e[33mvalue\e[0m \e[35mendIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5xkhx95w.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mstartValue\e[0m = start.take(startIndex).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mstartValue is already defined as \e[33mvalue\e[0m \e[35mstartValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5xkhx95w.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mendValue\e[0m = end.take(endIndex).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mendValue is already defined as \e[33mvalue\e[0m \e[35mendValue\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5xkhx95w.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mstartIndex\e[0m = start.indexWhere(_ > \e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val even = a / 2\n   \
    \     val odd = a % 2\n        val evens = a until b\n        evens foreach {\
    \ x => if (x % 2 == 0) evens += x }\n        evens.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnh1rbzjm.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = a until b\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevens\
    \ is already defined as \e[33mvalue\e[0m \e[35mevens\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnh1rbzjm.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10,\
    \ 14) => []\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).map(_.toLong)\n        for (i <- range) {\n \
    \           if (i % 2 == 0) {\n                evens += i\n            } else\
    \ {\n                odds += i\n            }\n        }\n        evens.toList\
    \ ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo2rly39s.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpo2rly39s.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpo2rly39s.scala:13:26 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo2rly39s.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b).map(_.toLong)\n\e[31m\e[31m   |\e[0m                       \
    \      ^\e[0m\n\e[31m   |\e[0m                             Found:    (b : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797737
