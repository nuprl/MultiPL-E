language: scala
name: HumanEval_141_file_name_check
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        val dotIndex = if (dotIndex < 0) \"No\" else file_name.substring(0,\
    \ dotIndex).trim\n        val dotIndex = dotIndex.equals(\".\") ? \"No\" :\n \
    \           dotIndex.equals(\"..\") ? \"No\" :\n            dotIndex.equals(\"\
    .exe\") ? \"No\" :\n            dotIndex.equals(\".dll\") ? \"Yes\" :\n      \
    \      \"No\"\n        val fileName = file_name.substring(dotIndex.length).trim\n\
    \        val fileName = fileName.equals(\"txt\") ? \"Yes\" :\n            fileName.equals(\"\
    exe\") ? \"Yes\" :\n            fileName.equals(\"dll\") ? \"Yes\" :\n       \
    \     \"No\"\n        fileName\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvfv8c74l.scala:21:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            dotIndex.equals(\e[31m\"..\"\e[0m) ? \e[31m\"\
    No\"\e[0m :\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m  \
    \ |\e[0m                           end of statement expected but '(' found\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpvfv8c74l.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e\
    [0m (dotIndex < \e[31m0\e[0m) \e[31m\"No\"\e[0m \e[33melse\e[0m file_name.substring(\e\
    [31m0\e[0m, dotIndex).trim\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpvfv8c74l.scala:17:24 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvfv8c74l.scala:21:32 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            dotIndex.equals(\e[31m\"..\"\e[0m) ? \e[31m\"\
    No\"\e[0m :\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m\
    \   |\e[0m                                Found:    Unit\n\e[31m   |\e[0m    \
    \                            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7f1wvz9.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb7f1wvz9.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = dot_index + 1\n        val first_letter = file_name.substring(0,\
    \ dot_index)\n        val second_letter = file_name.substring(dot_index)\n   \
    \     val letters = first_letter.toCharArray\n        val letters_set = Set(letters)\n\
    \        val letters_set = letters_set + second_letter.toCharArray\n        val\
    \ letters_set = letters_set + Array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\
    \ 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')\n        val letters_set\
    \ = letters_set + Array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')\n        val letters_set = letters_set\
    \ + Array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D',\
    \ 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\
    \ 'U', 'V', 'W', 'X', 'Y', 'Z')\n        val letters_set = letters_set + Array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\
    \ 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',\
    \ 'X', 'Y', 'Z')\n        val letters_set = letters_set + Array('a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\
    \ 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', '\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpl00u37ib.scala:29:296 ----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mletters_set\e[0m = letters_set\
    \ + Array(\e[31m'a'\e[0m, \e[31m'b'\e[0m, \e[31m'c'\e[0m, \e[31m'd'\e[0m, \e[31m'e'\e\
    [0m, \e[31m'f'\e[0m, \e[31m'g'\e[0m, \e[31m'h'\e[0m, \e[31m'i'\e[0m, \e[31m'j'\e\
    [0m, \e[31m'k'\e[0m, \e[31m'l'\e[0m, \e[31m'm'\e[0m, \e[31m'n'\e[0m, \e[31m'o'\e\
    [0m, \e[31m'p'\e[0m, \e[31m'q'\e[0m, \e[31m'r'\e[0m, \e[31m's'\e[0m, \e[31m't'\e\
    [0m, \e[31m'u'\e[0m, \e[31m'v'\e[0m, \e[31m'w'\e[0m, \e[31m'x'\e[0m, \e[31m'y'\e\
    [0m, \e[31m'z'\e[0m, \e[31m'A'\e[0m, \e[31m'B'\e[0m, \e[31m'C'\e[0m, \e[31m'D'\e\
    [0m, \e[31m'E'\e[0m, \e[31m'F'\e[0m, \e[31m'G'\e[0m, \e[31m'H'\e[0m, \e[31m'I'\e\
    [0m, \e[31m'J'\e[0m, \e[31m'K'\e[0m, \e[31m'L'\e[0m, \e[31m'M'\e[0m, \e[31m'N'\e\
    [0m, \e[31m'O'\e[0m, \e[31m'P'\e[0m, \e[31m'Q'\e[0m, \e[31m'R'\e[0m, \e[31m'S'\e\
    [0m, \e[31m'T'\e[0m, \e[31m'U'\e[0m, \e[31m'V'\e[0m, \e[31m'W'\e[0m, \e[31m'X'\e\
    [0m, '\n\e[31m\e[31m   |\e[0m                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \             unclosed character literal\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpl00u37ib.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpl00u37ib.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mletters_set\e[0m = letters_set + second_letter.toCharArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mletters_set is already defined as"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        if (dotIndex == -1) {\n            \"No\"\n        }\n        else\
    \ if (dotIndex > 0) {\n            val file_name = file_name.substring(0, dotIndex)\n\
    \            val file_name = file_name.trim\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.toUpperCase\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3iynjm5o.scala:103:0 ---------------------------\e\
    [0m\e[0m\n\e[31m103 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3iynjm5o.scala:17:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.trim\n\e[31m\e[31m   |\e[0m               \
    \         ^\e[0m\n\e[31m   |\e[0m                        Recursive \e[33mvalue\e\
    [0m \e[35mfile_name\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3iynjm5o.scala:24:16 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfile_name\
    \ is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3iynjm5o.scala:25:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e\
    [0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3iynjm5o.scala:26:16 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3iynjm5o.scala:27:16 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m "
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnf"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       // Your code here\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]{3}$\"\n\
    \        val pattern2 = \"^[a-zA-Z]{1}$\"\n        val pattern3 = \"^[a-zA-Z]{1}\\\
    .[a-zA-Z]{3}$\"\n        val pattern4 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\n    \
    \    val pattern5 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{3}$\"\n        val\
    \ pattern6 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\n        val pattern7\
    \ = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{3}$\"\n        val pattern8\
    \ = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\n        val pattern9\
    \ = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{3}$\"\n\
    \        val pattern10 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}$\"\n        val pattern11 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{3}$\"\n        val pattern12 = \"^[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\n    \
    \    val pattern13 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{3}$\"\n        val pattern14 = \"^[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\
    \n        val pattern15 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{3}$\"\n        val pattern16\
    \ = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\n        val pattern17 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{3}$\"\n        val pattern18 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\
    \n        val pattern19 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpk2aud912.scala:18:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]{3}$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \          ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpk2aud912.scala:20:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]{1}\\.[a-zA-Z]{3}$\"\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \ invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpk2aud912.scala:21:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\e\
    [0m\n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     invalid escape character\n\e[31m\e\
    [31m-- Error: /tmp/tmpk2aud912.scala:22:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"\
    ^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{3}$\"\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \               invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpk2aud912.scala:22:50\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{3}$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                                 \
    \ ^\e[0m\n\e[31m   |\e[0m                                                invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpk2aud912.scala:23:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mpattern6\e[0m = \e[31m\"\
    ^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \               invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpk2aud91"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name : String = file_name.toLowerCase\n        val dot_pos =\
    \ file_name.indexOf(\".\")\n        val dot_pos_2 = file_name.indexOf(\".\", dot_pos\
    \ + 1)\n        val dot_pos_3 = file_name.indexOf(\".\", dot_pos_2 + 1)\n    \
    \    val dot_pos_4 = file_name.indexOf(\".\", dot_pos_3 + 1)\n        val dot_pos_5\
    \ = file_name.indexOf(\".\", dot_pos_4 + 1)\n        val dot_pos_6 = file_name.indexOf(\"\
    .\", dot_pos_5 + 1)\n        val dot_pos_7 = file_name.indexOf(\".\", dot_pos_6\
    \ + 1)\n        val dot_pos_8 = file_name.indexOf(\".\", dot_pos_7 + 1)\n    \
    \    val dot_pos_9 = file_name.indexOf(\".\", dot_pos_8 + 1)\n        val dot_pos_10\
    \ = file_name.indexOf(\".\", dot_pos_9 + 1)\n        val dot_pos_11 = file_name.indexOf(\"\
    .\", dot_pos_10 + 1)\n        val dot_pos_12 = file_name.indexOf(\".\", dot_pos_11\
    \ + 1)\n        val dot_pos_13 = file_name.indexOf(\".\", dot_pos_12 + 1)\n  \
    \      val dot_pos_14 = file_name.indexOf(\".\", dot_pos_13 + 1)\n        val\
    \ dot_pos_15 = file_name.indexOf(\".\", dot_pos_14 + 1)\n        val dot_pos_16\
    \ = file_name.indexOf(\".\", dot_pos_15 + 1)\n        val dot_pos_17 = file_name.indexOf(\"\
    .\", dot_pos_16 + 1)\n        val dot_pos_18 = file_name.indexOf(\".\", dot_pos_17\
    \ + 1)\n        val dot_pos_19 = file_name.indexOf(\".\", dot_pos_18 + 1)\n  \
    \      val dot_pos_20 = file_name.indexOf(\".\", dot_pos_19 + 1)\n        val\
    \ dot_pos_21 = file_name.indexOf(\".\", dot_pos_20 + 1)\n        val dot_pos_22\
    \ = file_name.indexOf(\".\", dot_pos_21 + 1)\n        val dot_pos_23 = file_name.indexOf(\"\
    .\", dot_pos_22 + 1)\n        val dot_pos_24 = file_name.indexOf(\".\", dot_pos_23\
    \ + 1)\n        val dot_pos_25 = file_name.indexOf(\".\", dot_pos_24 + 1)\n  \
    \      val dot_pos_26 = file_name.indexOf(\".\", dot_pos_25 + 1)\n        val\
    \ dot_pos_27 = file_name.indexOf(\".\", dot_pos_26 + 1)\n        val dot_pos_28\
    \ = file_name.indexOf(\".\", dot_pos_27 + 1)\n        val dot_pos_29 = file_name.indexOf(\"\
    .\", dot_pos_28 + 1)\n        val dot_pos_30 = file_name.indexOf(\".\", dot_pos_29\
    \ + 1)\n        val dot_pos_31 = file_name.indexOf(\".\", dot_pos_30 + 1)\n  \
    \      val dot_pos_32 = file_name.indexOf(\".\", dot_pos_31 + 1)\n        val\
    \ dot_pos_33 = file_name\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1letrlax.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe3g2d0c0.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe3g2d0c0.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.dropWhile(_ == \e[31m'.'\e[0m).drop(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe3g2d0c0.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(_\
    \ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe3g2d0c0.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(_\
    \ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe3g2d0c0.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(_\
    \ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern12 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern16 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxg"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       // Your code goes here\n        val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\
    \n        val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb5jqy2ox.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb5jqy2ox.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb5jqy2ox.scala:67:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m        \e[33mval\e[0m \e[36mpattern49\e[0m = \"^[a-zA-Z\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpb5jqy2ox.scala:69:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m69 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb5jqy2ox.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpb5jqy2ox.scala:69:4 -------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: ^[a-zA-Zdef\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1659805812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.replaceAll(\"\
    \\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"\\\\.\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv5ry9ulx.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv5ry9ulx.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv5ry9ulx.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\.\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv5ry9ulx.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv5ry9ulx.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.replaceAll(\"\
    \\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"\\\\.\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W\", \"\")\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv5ry9ulx.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv5ry9ulx.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv5ry9ulx.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\.\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv5ry9ulx.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv5ry9ulx.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9l"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       // Your code goes here\n        val pattern = \"\"\"^[0-9]{3}\\.[a-z][a-z]$\"\
    \"\".r\n        val pattern2 = \"\"\"^[a-z][a-z]\\.[a-zA-Z0-9]+$\"\"\".r\n   \
    \     val pattern3 = \"\"\"^[a-z][a-z]\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\"\".r\n\
    \        val pattern4 = \"\"\"^[a-z][a-z]\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \"\".r\n        val pattern5 = \"\"\"^[a-z][a-z]\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\"\".r\n        val pattern6 = \"\"\"^[a-z][a-z]\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\"\
    \".r\n        val pattern7 = \"\"\"^[a-z][a-z]\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\"\".r\n        val\
    \ pattern8 = \"\"\"^[a-z][a-z]\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\"\".r\n        val\
    \ pattern9 = \"\"\"^[a-z][a-z]\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\"\
    \".r\n        val pattern10 = \"\"\"^[a-z][a-z]\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\"\".r\n        val pattern11 = \"\"\"^[a-z][a-z]\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\"\".r\n        val pattern12 =\
    \ \"\"\"^[a-z][a-z]\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\"\".r\n        val pattern13 = \"\"\"^[a-z][a-z]\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp86pzpg14.scala:30:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mpattern13\e[0m = \"\"\"\
    ^[a-z][a-z]\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m  \
    \ |\e[0m                        unclosed multi-line string literal\n1 error found\n"
  stdout: ''
  timestamp: 1659805809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n\
    \        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\
    \n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\
    \n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\
    \n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\
    \n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\
    \n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\
    \n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\
    \n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\
    \n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\
    \n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\
    \n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\
    \n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\
    \n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\
    \n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\
    \n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\
    \n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\
    \n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\
    \n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\
    \n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\
    \n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\
    \n        val pattern50 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv_9noq8g.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpv_9noq8g.scala:68:5 ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnf"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpum47curb.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpum47curb.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpum47curb.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpum47curb.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpum47curb.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpum47curb.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpum"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}[.]{1}[a-zA-Z0-9]+$\"\n        val pattern2 =\
    \ \"^[a-zA-Z]+[.]{1}[a-zA-Z0-9]+$\"\n        val pattern3 = \"^[a-zA-Z]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+$\"\
    \n        val pattern4 = \"^[a-zA-Z]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+$\"\
    \n        val pattern5 = \"^[a-zA-Z]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+$\"\
    \n        val pattern6 = \"^[a-zA-Z]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+$\"\
    \n        val pattern7 = \"^[a-zA-Z]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+$\"\
    \n        val pattern8 = \"^[a-zA-Z]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+$\"\
    \n        val pattern9 = \"^[a-zA-Z]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+$\"\
    \n        val pattern10 = \"^[a-zA-Z]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+$\"\
    \n        val pattern12 = \"^[a-zA-Z]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+[.]{1}[a-zA-Z0-9]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpblwa6pvw.scala:29:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mpattern13\e[0m = \"^[a-zA-Z]+\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpblwa6pvw.scala:31:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m31 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpblwa6pvw.scala:30:5 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpblwa6pvw.scala:31:4 -------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: ^[a-zA-Z]+def\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n\
    \        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\
    \n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\
    \n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\
    \n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\
    \n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\
    \n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\
    \n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\
    \n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\
    \n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\
    \n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\
    \n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\
    \n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\
    \n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\
    \n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\
    \n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\
    \n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\
    \n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\
    \n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\
    \n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\
    \n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\
    \n        val pattern50 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv_9noq8g.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpv_9noq8g.scala:68:5 ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp4ysemlw_.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp4ysemlw_.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp4ysemlw_.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp4ysemlw_.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp4ysemlw_.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp4ysemlw_.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp4y"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7f1wvz9.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb7f1wvz9.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7f1wvz9.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb7f1wvz9.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7f1wvz9.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb7f1wvz9.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7nygwr7z.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp7nygwr7z.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp7nygwr7z.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp7nygwr7z.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp7nygwr7z.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp7nygwr7z.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9l"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern12 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfk9qkmng.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpfk9qkmng.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpfk9qkmng.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpfk9qkmng.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpfk9qkmng.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpfk9qkmng.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpfk"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpm9rso0mf.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpm9rso0mf.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpm9rso0mf.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpm9rso0mf.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpm9rso0mf.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpm9rso0mf.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9l"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z0-9]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern3 = \"^[a-zA-Z0-9]+$\"\n        val pattern4 = \"^[a-zA-Z0-9]{3}$\"\
    \n        val pattern5 = \"^[a-zA-Z0-9]{4}$\"\n        val pattern6 = \"^[a-zA-Z0-9]{5}$\"\
    \n        val pattern7 = \"^[a-zA-Z0-9]{6}$\"\n        val pattern8 = \"^[a-zA-Z0-9]{7}$\"\
    \n        val pattern9 = \"^[a-zA-Z0-9]{8}$\"\n        val pattern10 = \"^[a-zA-Z0-9]{9}$\"\
    \n        val pattern11 = \"^[a-zA-Z0-9]{10}$\"\n        val pattern12 = \"^[a-zA-Z0-9]{11}$\"\
    \n        val pattern13 = \"^[a-zA-Z0-9]{12}$\"\n        val pattern14 = \"^[a-zA-Z0-9]{13}$\"\
    \n        val pattern15 = \"^[a-zA-Z0-9]{14}$\"\n        val pattern16 = \"^[a-zA-Z0-9]{15}$\"\
    \n        val pattern17 = \"^[a-zA-Z0-9]{16}$\"\n        val pattern18 = \"^[a-zA-Z0-9]{17}$\"\
    \n        val pattern19 = \"^[a-zA-Z0-9]{18}$\"\n        val pattern20 = \"^[a-zA-Z0-9]{19}$\"\
    \n        val pattern21 = \"^[a-zA-Z0-9]{20}$\"\n        val pattern22 = \"^[a-zA-Z0-9]{21}$\"\
    \n        val pattern23 = \"^[a-zA-Z0-9]{22}$\"\n        val pattern24 = \"^[a-zA-Z0-9]{23}$\"\
    \n        val pattern25 = \"^[a-zA-Z0-9]{24}$\"\n        val pattern26 = \"^[a-zA-Z0-9]{25}$\"\
    \n        val pattern27 = \"^[a-zA-Z0-9]{26}$\"\n        val pattern28 = \"^[a-zA-Z0-9]{27}$\"\
    \n        val pattern29 = \"^[a-zA-Z0-9]{28}$\"\n        val pattern30 = \"^[a-zA-Z0-9]{29}$\"\
    \n        val pattern31 = \"^[a-zA-Z0-9]{30}$\"\n        val pattern32 = \"^[a-zA-Z0-9]{31}$\"\
    \n        val pattern33 = \"^[a-zA-Z0-9]{32}$\"\n        val pattern34 = \"^[a-zA-Z0-9]{33}$\"\
    \n        val pattern35 = \"^[a-zA-Z0-9]{34}$\"\n        val pattern36 = \"^[a-zA-Z0-9]{35}$\"\
    \n        val pattern37 = \"^[a-zA-Z0-9]{36}$\"\n        val pattern38 = \"^[a-zA-Z0-9]{37}$\"\
    \n        val pattern39 = \"^[a-zA-Z0-9\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnmma5gig.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \           ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpnmma5gig.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \              ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpnmma5gig.scala:56:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mpattern39\e[0m = \"^[a-zA-Z0-9\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpnmma5gig.scala:58:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m58 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnmma5gig.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnmma5gig.scala:58:4 -------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: ^[a-zA-Z0-9def\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp82wl68ri.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp82wl68ri.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp82wl68ri.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp82wl68ri.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp82wl68ri.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e"
  stdout: ''
  timestamp: 1659805822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        if (dotIndex == -1) \"No\"\n        else if (!(file_name.substring(0,\
    \ dotIndex).matches(\"^[a-zA-Z]+$\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+[.]\"))) \"No\"\n        else if (!(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmx9edxfn.scala:43:19 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (!(\n\e[31m\e[31m\
    \   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpmx9edxfn.scala:17:24 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z0-9]+$\"\n        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n\
    \        val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern13 = \"^[a-zA-Z]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern15\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphfezv0hm.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \           ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmphfezv0hm.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \              ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmphfezv0hm.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \           invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmphfezv0hm.scala:19:49\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                                 ^\e\
    [0m\n\e[31m   |\e[0m                                                invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmphfezv0hm.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m         \
    \                          invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmphfezv0hm.scala:20:49\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                 \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \           invalid e"
  stdout: ''
  timestamp: 1659805824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.substring(0,file_name.indexOf('.'))\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.toUpperCase\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyigumy8o.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyigumy8o.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,file_name.indexOf(\e\
    [31m'.'\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyigumy8o.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyigumy8o.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpyigumy8o.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of "
  stdout: ''
  timestamp: 1659805824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7f1wvz9.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb7f1wvz9.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        if (dotIndex == -1 || dotIndex > 3 || file_name.substring(0, dotIndex).isEmpty)\
    \ {\n            return \"No\"\n        }\n        val extension = file_name.substring(dotIndex\
    \ + 1)\n        val extensions = List(\"txt\", \"exe\", \"dll\")\n        if (extensions.contains(extension))\
    \ {\n            return \"Yes\"\n        }\n        return \"No\"\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp66qvfrz8.scala:17:24 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       // Your code here\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n\
    \        val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0d5s87qq.scala:18:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp0d5s87qq.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp0d5s87qq.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp0d5s87qq.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp0d5s87qq.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp0d5s87qq.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp0d"
  stdout: ''
  timestamp: 1659805823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.toLowerCase\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        val dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n\
    \        val dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n \
    \       val dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n  \
    \      val dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n   \
    \     val dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n     \
    \   val dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n      \
    \  val dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n       \
    \ val dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n        val\
    \ dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) file_name.length else dotIndex\n        val dotIndex =\
    \ if (dotIndex == -1) file_name.length else dotIndex\n        val dotIndex = if\
    \ (dotIndex == -1) file_name.length else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) file_name.length else dotIndex\n        val dotIndex = if (dotIndex ==\
    \ -1) file_name.length else dotIndex\n        val dotIndex = if (dotIndex == -1)\
    \ file_name.length else dotIndex\n        val dotIndex = if (dotIndex == -1) file_name.length\
    \ else dotIndex\n        val dotIndex = if (dotIndex == -1) file_name.length else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n\
    \        val dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n \
    \       val dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n  \
    \      val dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n   \
    \     val dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n     \
    \   val dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n      \
    \  val dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n       \
    \ val dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n        val\
    \ dotIndex = if (dotIndex == -1) file_name.length else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) file_name.length else dotIndex\n        val dotIndex =\
    \ if (dotIndex == -1) file_name.length else dotIndex\n        val dotIndex = if\
    \ (dotIndex == -1) file_name.length else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) file_name.length else dotIndex\n        val dotIndex = if (dotIndex ==\
    \ -1) file_name.length else dotIndex\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuibkukk8.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e\
    [0m (dotIndex == -\e[31m1\e[0m) file_name.length \e[33melse\e[0m dotIndex\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuibkukk8.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ == -\e[31m1\e[0m) file_name.length \e[33melse\e[0m dotIndex\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuibkukk8.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ == -\e[31m1\e[0m) file_name.length \e[33melse\e[0m dotIndex\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuibkukk8.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ == -\e[31m1\e[0m) file_name.length \e[33melse\e[0m dotIndex\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in"
  stdout: ''
  timestamp: 1659805823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.toLowerCase\n        val dot_index = file_name.indexOf(\"\
    .\") // Find the position of the dot\n        val dot_index = dot_index + 1\n\
    \        val first_letter = file_name.charAt(0).toLowerCase // Get the first letter\
    \ of the filename\n        val second_letter = file_name.charAt(1).toLowerCase\
    \ // Get the second letter of the filename\n        val third_letter = file_name.charAt(2).toLowerCase\
    \ // Get the third letter of the filename\n        val fourth_letter = file_name.charAt(3).toLowerCase\
    \ // Get the fourth letter of the filename\n        val fifth_letter = file_name.charAt(4).toLowerCase\
    \ // Get the fifth letter of the filename\n        val sixth_letter = file_name.charAt(5).toLowerCase\
    \ // Get the sixth letter of the filename\n        val seventh_letter = file_name.charAt(6).toLowerCase\
    \ // Get the seventh letter of the filename\n        val eighth_letter = file_name.charAt(7).toLowerCase\
    \ // Get the eighth letter of the filename\n        val ninth_letter = file_name.charAt(8).toLowerCase\
    \ // Get the ninth letter of the filename\n        val tenth_letter = file_name.charAt(9).toLowerCase\
    \ // Get the tenth letter of the filename\n        val first_letter_is_latin_alphabet\
    \ = first_letter >= 'a' && first_letter <= 'z'\n        val second_letter_is_latin_alphabet\
    \ = second_letter >= 'a' && second_letter <= 'z'\n        val third_letter_is_latin_alphabet\
    \ = third_letter >= 'a' && third_letter <= 'z'\n        val fourth_letter_is_latin_alphabet\
    \ = fourth_letter >= 'a' && fourth_letter <= 'z'\n        val fifth_letter_is_latin_alphabet\
    \ = fifth_letter >= 'a' && fifth_letter <= 'z'\n        val sixth_letter_is_latin_alphabet\
    \ = sixth_letter >= 'a' && sixth_letter <= 'z'\n        val seventh_letter_is_latin_alphabet\
    \ = seventh_letter >= 'a' && seventh_letter <= 'z'\n        val eighth_letter_is_latin_alphabet\
    \ = eighth_letter >= 'a' && eighth_letter <= 'z'\n        val ninth_letter_is_latin_alphabet\
    \ = ninth_letter >= 'a' && ninth_letter <= 'z'\n        val tenth_letter_is_latin_alphabet\
    \ = tenth_letter >= 'a' && tenth_letter <= 'z'\n        val first_letter_is_latin_alphabet_or_dot\
    \ = first_letter_is_latin_alphabet || dot_index == 0\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp57snmuya.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp57snmuya.scala:17:24 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp57snmuya.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        val dotIndex = if (dotIndex < 0) \"No\" else \"Yes\"\n        val\
    \ fileName = file_name.substring(0, dotIndex)\n        val fileName = fileName.trim\n\
    \        val fileName = if (fileName.length < 3) \"No\" else \"Yes\"\n       \
    \ val fileName = if (fileName.contains(\".\")) \"No\" else \"Yes\"\n        val\
    \ fileName = if (fileName.substring(0, 1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.substring(1).matches(\"[a-zA-Z]\") && fileName.substring(1).matches(\"\
    [a-zA-Z]\") && fileName.\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp133yk6md.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp133yk6md.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex <\
    \ \e[31m0\e[0m) \e[31m\"No\"\e[0m \e[33melse\e[0m \e[31m\"Yes\"\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp133yk6md.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.trim\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfileName\
    \ is already defined as \e[33mvalue\e[0m \e[35mfileName\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp133yk6md.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfileName\e[0m = \e[33mif\e[0m (fileName.length < \e[31m3\e[0m) \e[31m\"\
    No\"\e[0m \e[33melse\e[0m \e[31m\"Yes\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp133yk6md.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = \e[33mif\e[0m (fileName.contains(\e\
    [31m\".\"\e[0m)) \e[31m\"No\"\e[0m \e[33melse\e[0m \e[31m\"Yes\"\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileN"
  stdout: ''
  timestamp: 1659805824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern12 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern16 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxg"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        if (file_name.length() > 3 ||\
    \ file_name.contains(\".\") || file_name.substring(0, 1).isEmpty) {\n        \
    \    return \"No\"\n        }\n        if (file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\".\") || file_name.substring(file_name.length()\
    \ - 1, file_name.length()).contains(\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpg06h_yk8.scala:21:2596 ---------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).contains(\e[31m\".\"\e[0m) || file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).contains(\e[31m\".\"\e[0m) || file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).contains(\e[31m\".\"\e[0m) || file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).contains(\e[31m\".\"\e[0m) || file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).contains(\e[31m\".\"\e[0m) || file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).contains(\e[31m\".\"\e[0m) || file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).contains(\e[31m\".\"\e[0m) || file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).contains(\e[31m\".\"\e[0m) || file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).contains(\e[31m\".\"\e[0m) || file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).contains(\e[31m\".\"\e[0m) || file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).contains(\e[31m\".\"\e[0m) || file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).contains(\e[31m\".\"\e[0m) || file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).contains(\e[31m\".\"\e[0m) || file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).contains(\e[31m\".\"\e[0m) || file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).contains(\e[31m\".\"\e[0m) || file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).contains(\e[31m\".\"\e[0m) || file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).contains(\e[31m\".\"\e[0m) || file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).contains(\e[31m\".\"\e[0m) || file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).contains(\e[31m\".\"\e[0m) || file_name.substring(file_name.leng"
  stdout: ''
  timestamp: 1659805820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name : String = file_name\n        val file_name : String = file_name\n\
    \        val file_name : String = file_name\n        val file_name : String =\
    \ file_name\n        val file_name : String = file_name\n        val file_name\
    \ : String = file_name\n        val file_name : String = file_name\n        val\
    \ file_name : String = file_name\n        val file_name : String = file_name\n\
    \        val file_name : String = file_name\n        val file_name : String =\
    \ file_name\n        val file_name : String = file_name\n        val file_name\
    \ : String = file_name\n        val file_name : String = file_name\n        val\
    \ file_name : String = file_name\n        val file_name : String = file_name\n\
    \        val file_name : String = file_name\n        val file_name : String =\
    \ file_name\n        val file_name : String = file_name\n        val file_name\
    \ : String = file_name\n        val file_name : String = file_name\n        val\
    \ file_name : String = file_name\n        val file_name : String = file_name\n\
    \        val file_name : String = file_name\n        val file_name : String =\
    \ file_name\n        val file_name : String = file_name\n        val file_name\
    \ : String = file_name\n        val file_name : String = file_name\n        val\
    \ file_name : String = file_name\n        val file_name : String = file_name\n\
    \        val file_name : String = file_name\n        val file_name : String =\
    \ file_name\n        val file_name : String = file_name\n        val file_name\
    \ : String = file_name\n        val file_name : String = file_name\n        val\
    \ file_name : String = file_name\n        val file_name : String = file_name\n\
    \        val file_name : String = file_name\n        val file_name : String =\
    \ file_name\n        val file_name : String = file_name\n        val file_name\
    \ : String = file_name\n        val file_name : String = file_name\n        val\
    \ file_name : String = file_name\n        val file_name : String = file_name\n\
    \        val file_name : String = file_name\n        val file_name : String =\
    \ file_name\n        val file_name : String = file_name\n        val file_name\
    \ : String = file_name\n        val file_name : String = file_name\n        val\
    \ file_name : String = file_name\n        val file_name : String = file_name\n\
    \        val file_name : String = file_name\n        val file_name : String =\
    \ file_name\n        val file_name : String = file_name\n        val file_name\
    \ : String = file_name\n        val file_name : String = file_name\n        val\
    \ file_name : String = file_name\n        val file_name : String = file_name\n\
    \        val file_name : String = file_name\n        val file_name : String =\
    \ file_name\n        val file_name : String = file_name\n        val file_name\
    \ : String = file_name\n        val file_name : String = file_name\n        val\
    \ file_name : String = file_name\n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbpzsa_op.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m : \e[35mString\e\
    [0m = file_name\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbpzsa_op.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m : \e[35mString\e[0m =\
    \ file_name\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbpzsa_op.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m : \e[35mString\e[0m =\
    \ file_name\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbpzsa_op.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m : \e[35mString\e[0m =\
    \ file_name\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbpzsa_op.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m : \e[35mString\e[0m =\
    \ file_name\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       // Your code here\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb2wrhwjb.scala:18:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpb2wrhwjb.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb2wrhwjb.scala:67:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m        \e[33mval\e[0m \e[36mpattern49\e[0m = \"^[a-zA-Z]+\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpb2wrhwjb.scala:69:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m69 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb2wrhwjb.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpb2wrhwjb.scala:69:4 -------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: ^[a-zA-Z]+def\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0,1)\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprcqmlj5t.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprcqmlj5t.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_nam"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.replaceAll(\"\
    \\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"\\\\W$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W$\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"\\\\W+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W+\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\W*\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W*\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W+$\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W+$\", \"\")\n        val file_name = file_name.replaceAll(\"\
    \\\\W*$\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W*$\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[0-9]$\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[0-9]\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9]\\\\W$\", \"\")\n        val file_name = file_name.replaceAll(\"^[0-9]\\\
    \\W\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^[0-9]\\\\W\\\
    \\W$\", \"\")\n        val file_name = file_name.replaceAll(\"^[0-9]\\\\W\\\\\
    W\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^[0-9]\\\\W\\\\\
    W\\\\W$\", \"\")\n        val file_name = file_name.replaceAll(\"^[0-9]\\\\W\\\
    \\W\\\\W\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^[0-9]\\\
    \\W\\\\W\\\\W\\\\W$\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9]\\\\W\\\\W\\\\W\\\\W\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9]\\\\W\\\\W\\\\W\\\\W\\\\W$\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9]\\\\W\\\\W\\\\W\\\\W\\\\W\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9]\\\\W\\\\W\\\\W\\\\W\\\\W\\\\W$\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9]\\\\W\\\\W\\\\W\\\\W\\\\W\\\\W\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9]\\\\W\\\\W\\\\W\\\\W\\\\W\\\\W\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9]\\\\W\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmhnnbwet.scala:46:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\"\
    ^[0-9]\\\\W\n\e[31m\e[31m   |\e[0m                                           \
    \  ^\e[0m\n\e[31m   |\e[0m                                             unclosed\
    \ string literal\n\e[31m\e[31m-- Error: /tmp/tmpmhnnbwet.scala:48:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmhnnbwet.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.replaceAll(\e[31m\"\\\\W\"\e[0m, \e[31m\"\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmhnnbwet.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmhnnbwet.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded m"
  stdout: ''
  timestamp: 1659805824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7f1wvz9.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb7f1wvz9.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.substring(0,file_name.length-1)\n\
    \        val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n   \
    \     val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n      \
    \  val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n\
    \        val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n   \
    \     val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n      \
    \  val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n\
    \        val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n   \
    \     val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n      \
    \  val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n\
    \        val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n   \
    \     val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n      \
    \  val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n\
    \        val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n   \
    \     val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n      \
    \  val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpny1v5bxe.scala:54:11 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpny1v5bxe.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.length-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpny1v5bxe.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpny1v5bxe.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpny1v5bxe.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern12 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern16 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxg"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\") \n        val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex +\
    \ 1\n        val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex + 1\n\
    \        val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex + 1\n  \
    \      val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex + 1\n    \
    \    val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex + 1\n      \
    \  val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex + 1\n        val\
    \ dotIndex = dotIndex + 1\n        val dotIndex = dotIndex + 1\n        val dotIndex\
    \ = dotIndex + 1\n        val dotIndex = dotIndex + 1\n        val dotIndex =\
    \ dotIndex + 1\n        val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex\
    \ + 1\n        val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex +\
    \ 1\n        val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex + 1\n\
    \        val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex + 1\n  \
    \      val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex + 1\n    \
    \    val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex + 1\n      \
    \  val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex + 1\n        val\
    \ dotIndex = dotIndex + 1\n        val dotIndex = dotIndex + 1\n        val dotIndex\
    \ = dotIndex + 1\n        val dotIndex = dotIndex + 1\n        val dotIndex =\
    \ dotIndex + 1\n        val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex\
    \ + 1\n        val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex +\
    \ 1\n        val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex + 1\n\
    \        val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex + 1\n  \
    \      val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex + 1\n    \
    \    val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex + 1\n      \
    \  val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex + 1\n        val\
    \ dotIndex = dotIndex + 1\n        val dotIndex = dotIndex + 1\n        val dotIndex\
    \ = dotIndex + 1\n        val dotIndex = dotIndex + 1\n        val dotIndex =\
    \ dotIndex + 1\n        val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex\
    \ + 1\n        val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex +\
    \ 1\n        val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex + 1\n\
    \        val dotIndex = dotIndex\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf7sqdy0n.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = dotIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf7sqdy0n.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = dotIndex + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf7sqdy0n.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = dotIndex + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdotIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf7sqdy0n.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdotIndex\e[0m = dotIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdotIndex is already defined\
    \ as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf7sqdy0n.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = dotIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]{1}$\"\n        val pattern3 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+$\"\n   \
    \     val pattern4 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern6 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern7 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern8 = \"^[a-zA-Z]{1}\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern9 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n\
    \        val pattern12 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern13 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern14 = \"^[a-zA-Z]{1}\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp62zer8hp.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \           ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp62zer8hp.scala:19:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]{1}\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \  invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp62zer8hp.scala:20:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     invalid escape character\n\e[31m\e\
    [31m-- Error: /tmp/tmp62zer8hp.scala:20:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                          invalid escape character\n\e[31m\e\
    [31m-- Error: /tmp/tmp62zer8hp.scala:21:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"\
    ^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                     ^\e[0m\n\e[31m   |\e[0m       \
    \                              invalid escape character\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp62zer8hp.scala:21:51 -----------------------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"^[a-zA-Z]{1}\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                          "
  stdout: ''
  timestamp: 1659805824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.toLowerCase\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = dot_index + 1\n        val file_name = file_name.substring(dot_index)\n\
    \        val file_name = file_name.substring(0, file_name.length - 1)\n      \
    \  val file_name = file_name.split(\"\\\\W+\")\n        val file_name = file_name.filter(x\
    \ => x.matches(\"^[a-zA-Z]+$\"))\n        val file_name = file_name.filter(x =>\
    \ x.matches(\"^[a-zA-Z]+\\\\.[a-zA-Z]+$\"))\n        val file_name = file_name.filter(x\
    \ => x.matches(\"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"))\n        val file_name\
    \ = file_name.filter(x => x.matches(\"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+$\"))\n        val file_name = file_name.filter(x => x.matches(\"\
    ^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"))\n    \
    \    val file_name = file_name.filter(x => x.matches(\"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"))\n        val file_name\
    \ = file_name.filter(x => x.matches(\"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"))\n        val file_name\
    \ = file_name.filter(x => x.matches(\"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"))\n  \
    \      val file_name = file_name.filter(x => x.matches(\"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+$\"))\n        val file_name = file_name.filter(x => x.matches(\"\
    ^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"))\n        val file_name\
    \ = file_name.filter(x => x.matches(\"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"))\n        val file_name = file_name.filter(x =>\
    \ x.matches(\"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+$\"))\n        val file_name = file_name.filter(x => x.matches(\"\
    ^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpog2plxq5.scala:35:56 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.filter(\e\
    [36mx\e[0m => x.matches(\"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z\n\
    \e[31m\e[31m   |\e[0m                                                        ^\e\
    [0m\n\e[31m   |\e[0m                                                 unclosed\
    \ string literal\n\e[31m\e[31m-- Error: /tmp/tmpog2plxq5.scala:37:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpog2plxq5.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdot_index\e[0m = dot_index + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdot_index is already defined\
    \ as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpog2plxq5.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(dot_index)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpog2plxq5.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m, file_name.length - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is alr"
  stdout: ''
  timestamp: 1659805824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7f1wvz9.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb7f1wvz9.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = dot_index + 1\n        val first_letter = file_name.substring(0,\
    \ dot_index)\n        val last_letter = file_name.substring(dot_index)\n     \
    \   val first_letter = first_letter.toLowerCase \n        val last_letter = last_letter.toLowerCase\
    \ \n        val letters = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val letters_set\
    \ = letters.toSet\n        val letters_set = letters_set + first_letter\n    \
    \    val letters_set = letters_set + last_letter\n        if (dot_index == file_name.length\
    \ - 1){\n            if (letters_set.contains(file_name.substring(dot_index))){\n\
    \                return \"Yes\"\n            }\n            else{\n          \
    \      return \"No\"\n            }\n        }\n        else{\n            if\
    \ (letters_set.contains(file_name.substring(dot_index))){\n                return\
    \ \"Yes\"\n            }\n            else{\n                return \"No\"\n \
    \           }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkuki9nrp.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkuki9nrp.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfirst_letter\e[0m = first_letter.toLowerCase\
    \ \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirst_letter is already defined as \e[33mvalue\e[0m \e[35mfirst_letter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkuki9nrp.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mlast_letter\e[0m = last_letter.toLowerCase\
    \ \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mlast_letter is already defined as \e[33mvalue\e[0m \e[35mlast_letter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkuki9nrp.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mletters_set\e[0m = letters_set + first_letter\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mletters_set is already defined as \e[33mvalue\e[0m \e[35mletters_set\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkuki9nrp.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mletters_set\e[0m = letters_set + last_letter\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9l"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern12 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+\\\
    .[a-zA-Z\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp95wk26bo.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp95wk26bo.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp95wk26bo.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp95wk26bo.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp95wk26bo.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp95wk26bo.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp95"
  stdout: ''
  timestamp: 1659805826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        val dotIndex = if (dotIndex < 0) \"No\" else \"Yes\"\n        val\
    \ fileName = file_name.substring(0, dotIndex)\n        val fileExtension = file_name.substring(dotIndex\
    \ + 1)\n        val fileExtension = fileExtension.trim\n        val fileExtension\
    \ = fileExtension.toLowerCase\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc0bezk23.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e\
    [0m (dotIndex < \e[31m0\e[0m) \e[31m\"No\"\e[0m \e[33melse\e[0m \e[31m\"Yes\"\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc0bezk23.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfileExtension\e[0m = fileExtension.trim\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfileExtension is already defined as \e[33mvalue\e[0m \e[35mfileExtension\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc0bezk23.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfileExtension\e[0m = fileExtension.toLowerCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfileExtension is already defined as \e[33mvalue\e[0m \e[35mfileExtension\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc0bezk23.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfileExtension\e[0m = fileExtension.substring(\e\
    [31m0\e[0m,\e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileExtension is already defined as \e[33mvalue\e[0m \e[35mfileExtension\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc0bezk23.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = dot_index + 1\n        val first_letter = file_name.charAt(0)\n\
    \        val second_letter = file_name.charAt(1)\n        val third_letter = file_name.charAt(2)\n\
    \        val fourth_letter = file_name.charAt(3)\n        val fifth_letter = file_name.charAt(4)\n\
    \        val sixth_letter = file_name.charAt(5)\n        val seventh_letter =\
    \ file_name.charAt(6)\n        val eighth_letter = file_name.charAt(7)\n     \
    \   val ninth_letter = file_name.charAt(8)\n        val tenth_letter = file_name.charAt(9)\n\
    \        val first_letter_lower = first_letter.toLower\n        val second_letter_lower\
    \ = second_letter.toLower\n        val third_letter_lower = third_letter.toLower\n\
    \        val fourth_letter_lower = fourth_letter.toLower\n        val fifth_letter_lower\
    \ = fifth_letter.toLower\n        val sixth_letter_lower = sixth_letter.toLower\n\
    \        val seventh_letter_lower = seventh_letter.toLower\n        val eighth_letter_lower\
    \ = eighth_letter.toLower\n        val ninth_letter_lower = ninth_letter.toLower\n\
    \        val tenth_letter_lower = tenth_letter.toLower\n        val first_letter_upper\
    \ = first_letter.toUpperCase\n        val second_letter_upper = second_letter.toUpperCase\n\
    \        val third_letter_upper = third_letter.toUpperCase\n        val fourth_letter_upper\
    \ = fourth_letter.toUpperCase\n        val fifth_letter_upper = fifth_letter.toUpperCase\n\
    \        val sixth_letter_upper = sixth_letter.toUpperCase\n        val seventh_letter_upper\
    \ = seventh_letter.toUpperCase\n        val eighth_letter_upper = eighth_letter.toUpperCase\n\
    \        val ninth_letter_upper = ninth_letter.toUpperCase\n        val tenth_letter_upper\
    \ = tenth_letter.toUpperCase\n        val dot_index = file_name.indexOf(\".\"\
    )\n        val dot_index = dot_index + 1\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = dot_index + 1\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = dot_index + 1\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = dot_index + 1\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = dot_index + 1\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = dot_index + 1\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = dot_index + 1\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmmf9n0zo.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmmf9n0zo.scala:50:12 ---------------------------\e[0m\e[0m\n\e\
    [31m50 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = file_name.indexOf(\e\
    [31m\".\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmmf9n0zo.scala:51:12 ---------------------------\e[0m\e[0m\n\e\
    [31m51 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmmf9n0zo.scala:52:12 ---------------------------\e[0m\e[0m\n\e[31m52\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = file_name.indexOf(\e[31m\"\
    .\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmmf9n0zo.scala:53:12 ---------------------------\e[0m\e[0m\n\e\
    [31m53 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdot_index is already defin"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val\
    \ dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpccl16_xh.scala:54:22 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpccl16_xh.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e\
    [0m (dotIndex == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpccl16_xh.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpccl16_xh.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex ==\
    \ -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpccl16_xh.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotInde"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnf"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7f1wvz9.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb7f1wvz9.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        val dotIndex = if (dotIndex < 0) file_name else dotIndex\n     \
    \   val dotIndex = if (dotIndex < 0) file_name else dotIndex\n        val dotIndex\
    \ = if (dotIndex < 0) file_name else dotIndex\n        val dotIndex = if (dotIndex\
    \ < 0) file_name else dotIndex\n        val dotIndex = if (dotIndex < 0) file_name\
    \ else dotIndex\n        val dotIndex = if (dotIndex < 0) file_name else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) file_name else dotIndex\n        val\
    \ dotIndex = if (dotIndex < 0) file_name else dotIndex\n        val dotIndex =\
    \ if (dotIndex < 0) file_name else dotIndex\n        val dotIndex = if (dotIndex\
    \ < 0) file_name else dotIndex\n        val dotIndex = if (dotIndex < 0) file_name\
    \ else dotIndex\n        val dotIndex = if (dotIndex < 0) file_name else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) file_name else dotIndex\n        val\
    \ dotIndex = if (dotIndex < 0) file_name else dotIndex\n        val dotIndex =\
    \ if (dotIndex < 0) file_name else dotIndex\n        val dotIndex = if (dotIndex\
    \ < 0) file_name else dotIndex\n        val dotIndex = if (dotIndex < 0) file_name\
    \ else dotIndex\n        val dotIndex = if (dotIndex < 0) file_name else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) file_name else dotIndex\n        val\
    \ dotIndex = if (dotIndex < 0) file_name else dotIndex\n        val dotIndex =\
    \ if (dotIndex < 0) file_name else dotIndex\n        val dotIndex = if (dotIndex\
    \ < 0) file_name else dotIndex\n        val dotIndex = if (dotIndex < 0) file_name\
    \ else dotIndex\n        val dotIndex = if (dotIndex < 0) file_name else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) file_name else dotIndex\n        val\
    \ dotIndex = if (dotIndex < 0) file_name else dotIndex\n        val dotIndex =\
    \ if (dotIndex < 0) file_name else dotIndex\n        val dotIndex = if (dotIndex\
    \ < 0) file_name else dotIndex\n        val dotIndex = if (dotIndex < 0) file_name\
    \ else dotIndex\n        val dotIndex = if (dotIndex < 0) file_name else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) file_name else dotIndex\n        val\
    \ dotIndex = if (dotIndex < 0) file_name else dotIndex\n        val dotIndex =\
    \ if (dotIndex < 0) file_name else dotIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp234r7yoh.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e\
    [0m (dotIndex < \e[31m0\e[0m) file_name \e[33melse\e[0m dotIndex\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp234r7yoh.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ < \e[31m0\e[0m) file_name \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp234r7yoh.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex <\
    \ \e[31m0\e[0m) file_name \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp234r7yoh.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex <\
    \ \e[31m0\e[0m) file_name \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error"
  stdout: ''
  timestamp: 1659805831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.replaceAll(\"\
    \\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"\\\\W$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W$\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"\\\\W+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W+\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\W*\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W*\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W+$\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W+$\", \"\")\n        val file_name = file_name.replaceAll(\"\
    \\\\W*$\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W*$\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^\\\\W+\\\\W+\", \"\")\n \
    \       val file_name = file_name.replaceAll(\"^\\\\W+\\\\W*\", \"\")\n      \
    \  val file_name = file_name.replaceAll(\"^\\\\W+\\\\W+$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W+\\\\W*$\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^\\\\W*\\\\W+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W*\\\\W*\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W*\\\
    \\W+$\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W*\\\\W*$\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W+\\\\W+\\\\W+\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W+\\\\W+\\\\W*\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W+\\\\W+\\\\W+$\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W+\\\\W+\\\\W*$\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W+\\\\W*\\\\W+\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W+\\\\W*\\\\W*\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W+\\\\W*\\\\W+$\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W+\\\\W*\\\\W*$\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W*\\\\W+\\\\W+\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W*\\\\W+\\\\\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3_u2agwu.scala:47:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\"\
    ^\\\\W*\\\\W+\\\\\n\e[31m\e[31m   |\e[0m                                     \
    \        ^\e[0m\n\e[31m   |\e[0m                                             unclosed\
    \ string literal\n\e[31m\e[31m-- Error: /tmp/tmp3_u2agwu.scala:49:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3_u2agwu.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.replaceAll(\e[31m\"\\\\W\"\e[0m, \e[31m\"\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_u2agwu.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_u2agwu.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded"
  stdout: ''
  timestamp: 1659805831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnf"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}[.]{1}[a-zA-Z]{0,1}$\"\n        val pattern2\
    \ = \"^[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}$\"\n        val pattern3 = \"^[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}$\"\
    \n        val pattern4 = \"^[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}$\"\
    \n        val pattern5 = \"^[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}$\"\
    \n        val pattern6 = \"^[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}$\"\
    \n        val pattern7 = \"^[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}$\"\
    \n        val pattern8 = \"^[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}$\"\
    \n        val pattern9 = \"^[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}$\"\
    \n        val pattern10 = \"^[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}$\"\
    \n        val pattern11 = \"^[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}$\"\
    \n        val pattern12 = \"^[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcmi_7i3_.scala:28:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mpattern12\e[0m = \"^[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpcmi_7i3_.scala:30:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m30 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcmi_7i3_.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpcmi_7i3_.scala:30:4 -------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0mNot found: ^[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.]{1}[a-zA-Z]{0,1}[.def\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern12 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern16 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxgeuyj7c.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxg"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        if (dotIndex == -1) {\n            \"No\"\n        } else {\n  \
    \          val file_name = file_name.substring(0, dotIndex)\n            val file_name\
    \ = file_name.toUpperCase\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name.substring(0,1)\n            val file_name\
    \ = file_name.substring(0,1)\n            val file_name = file_name.substring(0,1)\n\
    \            val file_name = file_name\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxdqr_x3l.scala:102:0 ---------------------------\e\
    [0m\e[0m\n\e[31m102 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxdqr_x3l.scala:17:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.trim\n\e[31m\e[31m   |\e[0m               \
    \         ^\e[0m\n\e[31m   |\e[0m                        Recursive \e[33mvalue\e\
    [0m \e[35mfile_name\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxdqr_x3l.scala:23:16 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxdqr_x3l.scala:24:16 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxdqr_x3l.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxdqr_x3l.scala:26:16 ------------"
  stdout: ''
  timestamp: 1659805834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       // Your code here\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]{0,1}$\"\
    \n        val pattern1 = \"^[a-zA-Z]{0,1}[0-9]{3}\\.[a-zA-Z]{0,1}$\"\n       \
    \ val pattern2 = \"^[a-zA-Z]{0,1}[0-9]{3}$\"\n        val pattern3 = \"^[a-zA-Z]{0,1}[0-9]{3}\\\
    .[a-zA-Z]{0,1}$\"\n        val pattern4 = \"^[a-zA-Z]{0,1}[0-9]{3}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}$\"\n        val pattern5 = \"^[a-zA-Z]{0,1}[0-9]{3}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}$\"\n        val pattern6 = \"^[a-zA-Z]{0,1}[0-9]{3}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}$\"\n        val\
    \ pattern7 = \"^[a-zA-Z]{0,1}[0-9]{3}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}$\"\n        val pattern8 = \"^[a-zA-Z]{0,1}[0-9]{3}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}$\"\n        val pattern9 = \"^[a-zA-Z]{0,1}[0-9]{3}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}$\"\n        val pattern10 = \"^[a-zA-Z]{0,1}[0-9]{3}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}$\"\n        val pattern11 = \"^[a-zA-Z]{0,1}[0-9]{3}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}$\"\n        val\
    \ pattern12 = \"^[a-zA-Z]{0,1}[0-9]{3}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}$\"\n        val pattern13 = \"^[a-zA-Z]{0,1}[0-9]{3}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpko5eypc5.scala:18:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]{0,1}$\"\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \            ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpko5eypc5.scala:19:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]{0,1}[0-9]{3}\\.[a-zA-Z]{0,1}$\"\e[0m\n\e[31m\e[31m   |\e[0m        \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                                 invalid escape character\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpko5eypc5.scala:21:47 -----------------------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]{0,1}[0-9]{3}\\\
    .[a-zA-Z]{0,1}$\"\e[0m\n\e[31m\e[31m   |\e[0m                                \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \         invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpko5eypc5.scala:22:47\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]{0,1}[0-9]{3}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}$\"\e[0m\n\e[31m\e[31m   |\e[0m                                \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \         invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpko5eypc5.scala:22:62\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]{0,1}[0-9]{3}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}$\"\e[0m\n\e[31m\e[31m   |\e[0m                                \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                         invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpko5eypc5.scala:23:47\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"^[a-zA-Z]{0,1}[0-9]{3}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}$\"\e[0m\n\e[31m\e[31m   |\e["
  stdout: ''
  timestamp: 1659805833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7nygwr7z.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp7nygwr7z.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp7nygwr7z.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp7nygwr7z.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp7nygwr7z.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp7nygwr7z.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp82wl68ri.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp82wl68ri.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp82wl68ri.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp82wl68ri.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp82wl68ri.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e"
  stdout: ''
  timestamp: 1659805822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        val dotIndex = if (dotIndex < 0) \"No\" else \"Yes\"\n        val\
    \ fileName = file_name.substring(0, dotIndex)\n        val fileExtension = file_name.substring(dotIndex\
    \ + 1)\n        val fileExtension = fileExtension.trim\n        val fileExtension\
    \ = fileExtension.toLowerCase\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc0bezk23.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e\
    [0m (dotIndex < \e[31m0\e[0m) \e[31m\"No\"\e[0m \e[33melse\e[0m \e[31m\"Yes\"\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc0bezk23.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfileExtension\e[0m = fileExtension.trim\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfileExtension is already defined as \e[33mvalue\e[0m \e[35mfileExtension\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc0bezk23.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfileExtension\e[0m = fileExtension.toLowerCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfileExtension is already defined as \e[33mvalue\e[0m \e[35mfileExtension\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc0bezk23.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfileExtension\e[0m = fileExtension.substring(\e\
    [31m0\e[0m,\e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileExtension is already defined as \e[33mvalue\e[0m \e[35mfileExtension\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc0bezk23.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.toLowerCase\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = dot_index + 1\n        val file_name = file_name.substring(dot_index)\n\
    \        val file_name = file_name.substring(0, file_name.length - 1)\n      \
    \  val file_name = file_name.split(\"\\\\W+\")\n        val file_name = file_name.filter(x\
    \ => x.length == 1 && x.matches(\"^[a-zA-Z]+$\"))\n        val file_name = file_name.filter(x\
    \ => x.contains(\".\"))\n        val file_name = file_name.filter(x => x.startsWith(\"\
    a\") || x.startsWith(\"A\"))\n        val file_name = file_name.filter(x => x.endsWith(\"\
    txt\") || x.endsWith(\"exe\") || x.endsWith(\"dll\"))\n        val file_name =\
    \ file_name.filter(x => x.length == 3)\n        val file_name = file_name.filter(x\
    \ => x.contains(\".\"))\n        val file_name = file_name.filter(x => x.contains(\"\
    .\"))\n        val file_name = file_name.filter(x => x.contains(\".\"))\n    \
    \    val file_name = file_name.filter(x => x.contains(\".\"))\n        val file_name\
    \ = file_name.filter(x => x.contains(\".\"))\n        val file_name = file_name.filter(x\
    \ => x.contains(\".\"))\n        val file_name = file_name.filter(x => x.contains(\"\
    .\"))\n        val file_name = file_name.filter(x => x.contains(\".\"))\n    \
    \    val file_name = file_name.filter(x => x.contains(\".\"))\n        val file_name\
    \ = file_name.filter(x => x.contains(\".\"))\n        val file_name = file_name.filter(x\
    \ => x.contains(\".\"))\n        val file_name = file_name.filter(x => x.contains(\"\
    .\"))\n        val file_name = file_name.filter(x => x.contains(\".\"))\n    \
    \    val file_name = file_name.filter(x => x.contains(\".\"))\n        val file_name\
    \ = file_name.filter(x => x.contains(\".\"))\n        val file_name = file_name.filter(x\
    \ => x.contains(\".\"))\n        val file_name = file_name.filter(x => x.contains(\"\
    .\"))\n        val file_name = file_name.filter(x => x.contains(\".\"))\n    \
    \    val file_name = file_name.filter(x => x.contains(\".\"))\n        val file_name\
    \ = file_name.filter(x => x.contains(\".\"))\n        val file_name = file_name.filter(x\
    \ => x.contains(\".\"))\n        val file_name = file_name.filter(x => x.contains(\"\
    .\"))\n        val file_name = file_name.filter(x => x.contains(\".\"))\n    \
    \    val file_name = file_name.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvmbth4f5.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvmbth4f5.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvmbth4f5.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(dot_index)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvmbth4f5.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m, file_name.length - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvmbth4f5.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.split(\e\
    [31m\"\\\\W+\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definit"
  stdout: ''
  timestamp: 1659805834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]{1}\\.[a-zA-Z0-9]+$\"\n        val pattern2 = \"^[a-zA-Z]{1}$\"\n   \
    \     val pattern3 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n       \
    \ val pattern4 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern5 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern6 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern7 = \"^[a-zA-Z]{1}\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern8 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n\
    \        val pattern11 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern12 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern13 = \"^[a-zA-Z]{1}\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern14 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpem4rnafj.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \           ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpem4rnafj.scala:18:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]{1}\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \  invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpem4rnafj.scala:20:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     invalid escape character\n\e[31m\e\
    [31m-- Error: /tmp/tmpem4rnafj.scala:20:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                          invalid escape character\n\e[31m\e\
    [31m-- Error: /tmp/tmpem4rnafj.scala:21:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                     ^\e[0m\n\e[31m   |\e[0m       \
    \                              invalid escape character\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpem4rnafj.scala:21:51 -----------------------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]{1}\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                          "
  stdout: ''
  timestamp: 1659805834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.toLowerCase\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjhvmps0j.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjhvmps0j.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjhvmps0j.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjhvmps0j.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjhvmps0j.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e"
  stdout: ''
  timestamp: 1659805835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern4 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n\
    \        val pattern7 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n    \
    \    val pattern9 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\\
    .[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\
    \n        val pattern14 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvaegr9zg.scala:33:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mpattern17\e[0m = \"^[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z\n\e[31m\e[31m   |\e[0m                \
    \        ^\e[0m\n\e[31m   |\e[0m                        unclosed string literal\n\
    \e[31m\e[31m-- Error: /tmp/tmpvaegr9zg.scala:35:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpvaegr9zg.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpvaegr9zg.scala:35:4 -------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0mNot\
    \ found: ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Zdef\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0,1)\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprcqmlj5t.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprcqmlj5t.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_nam"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]{1}$\"\n        val pattern2 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+$\"\n   \
    \     val pattern3 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n       \
    \ val pattern4 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern5 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern6 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern7 = \"^[a-zA-Z]{1}\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern8 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n\
    \        val pattern11 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern12 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern13 = \"^[a-zA-Z]{1}\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern14 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpyff7oxwn.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \           ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpyff7oxwn.scala:19:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]{1}\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \  invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpyff7oxwn.scala:20:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     invalid escape character\n\e[31m\e\
    [31m-- Error: /tmp/tmpyff7oxwn.scala:20:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                          invalid escape character\n\e[31m\e\
    [31m-- Error: /tmp/tmpyff7oxwn.scala:21:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                     ^\e[0m\n\e[31m   |\e[0m       \
    \                              invalid escape character\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpyff7oxwn.scala:21:51 -----------------------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]{1}\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                          "
  stdout: ''
  timestamp: 1659805835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name : String = \"example.txt\"\n        val file_name : String\
    \ = \"1example.dll\"\n        val file_name : String = \"1example.txt\"\n    \
    \    val file_name : String = \"example\"\n        val file_name : String = \"\
    example1\"\n        val file_name : String = \"example1.exe\"\n        val file_name\
    \ : String = \"example1.dll\"\n        val file_name : String = \"example1.exe\"\
    \n        val file_name : String = \"example1.exe\"\n        val file_name : String\
    \ = \"example1.exe\"\n        val file_name : String = \"example1.exe\"\n    \
    \    val file_name : String = \"example1.exe\"\n        val file_name : String\
    \ = \"example1.exe\"\n        val file_name : String = \"example1.exe\"\n    \
    \    val file_name : String = \"example1.exe\"\n        val file_name : String\
    \ = \"example1.exe\"\n        val file_name : String = \"example1.exe\"\n    \
    \    val file_name : String = \"example1.exe\"\n        val file_name : String\
    \ = \"example1.exe\"\n        val file_name : String = \"example1.exe\"\n    \
    \    val file_name : String = \"example1.exe\"\n        val file_name : String\
    \ = \"example1.exe\"\n        val file_name : String = \"example1.exe\"\n    \
    \    val file_name : String = \"example1.exe\"\n        val file_name : String\
    \ = \"example1.exe\"\n        val file_name : String = \"example1.exe\"\n    \
    \    val file_name : String = \"example1.exe\"\n        val file_name : String\
    \ = \"example1.exe\"\n        val file_name : String = \"example1.exe\"\n    \
    \    val file_name : String = \"example1.exe\"\n        val file_name : String\
    \ = \"example1.exe\"\n        val file_name : String = \"example1.exe\"\n    \
    \    val file_name : String = \"example1.exe\"\n        val file_name : String\
    \ = \"example1.exe\"\n        val file_name : String = \"example1.exe\"\n    \
    \    val file_name : String = \"example1.exe\"\n        val file_name : String\
    \ = \"example1.exe\"\n        val file_name : String = \"example1.exe\"\n    \
    \    val file_name : String = \"example1.exe\"\n        val file_name : String\
    \ = \"example1.exe\"\n        val file_name : String = \"example1.exe\"\n    \
    \    val file_name : String = \"example1.exe\"\n        val file_name : String\
    \ = \"example1.exe\"\n        val file_name : String = \"example1.exe\"\n    \
    \    val file_name : String = \"example1.exe\"\n        val file_name : String\
    \ = \"example1.exe\"\n        val file_name : String = \"example1.exe\"\n\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2spgwqha.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m : \e[35mString\e\
    [0m = \e[31m\"1example.dll\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2spgwqha.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m : \e[35mString\e[0m =\
    \ \e[31m\"1example.txt\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2spgwqha.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m : \e[35mString\e[0m =\
    \ \e[31m\"example\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2spgwqha.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m : \e[35mString\e[0m =\
    \ \e[31m\"example1\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2spgwqha.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m : \e[35mString\e[0m =\
    \ \e[31m\"example1.exe\"\e[0m\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659805836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7f1wvz9.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb7f1wvz9.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.toLowerCase\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjhvmps0j.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjhvmps0j.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjhvmps0j.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjhvmps0j.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjhvmps0j.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e"
  stdout: ''
  timestamp: 1659805835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0,1)\n        val file_name\
    \ = file_name.toUpperCase\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp18fh5o2x.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp18fh5o2x.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,file_name.indexOf(\e\
    [31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp18fh5o2x.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp18fh5o2x.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp18fh5o2x.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of "
  stdout: ''
  timestamp: 1659805836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n\
    \        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\
    \n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\
    \n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\
    \n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\
    \n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\
    \n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\
    \n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\
    \n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\
    \n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\
    \n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\
    \n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\
    \n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\
    \n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\
    \n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\
    \n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\
    \n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\
    \n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\
    \n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\
    \n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\
    \n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\
    \n        val pattern50 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphp_yi7nr.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphp_yi7nr.scala:68:5 ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]{1}$\"\n        val pattern2 = \"^[a-zA-Z]{1}[a-zA-Z]{1}$\"\n       \
    \ val pattern3 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\n        val pattern4\
    \ = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\n        val pattern5 =\
    \ \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\n        val pattern6\
    \ = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\n\
    \        val pattern7 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern8 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern9 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern10 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern11 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern12 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern13 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern14 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern15 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern16 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpp1z7q200.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \           ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpp1z7q200.scala:33:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mpattern16\e[0m = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpp1z7q200.scala:35:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m35 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp1z7q200.scala:34:5 ---------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpp1z7q200.scala:35:4 -------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: ^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}def\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659805835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dot_index = file_name.indexOf(\"\
    .\")\n        if(dot_index == -1){\n            \"No\"\n        }\n        else\
    \ if(dot_index > 0 && dot_index < file_name.length-1){\n            val first_letter\
    \ = file_name.charAt(dot_index-1)\n            val last_letter = file_name.charAt(dot_index)\n\
    \            if(first_letter < 'a' || first_letter > 'z' || first_letter < 'A'\
    \ || first_letter > 'Z'){\n                \"No\"\n            }\n           \
    \ else if(last_letter < '0' || last_letter > '9'){\n                \"No\"\n \
    \           }\n            else{\n                \"Yes\"\n            }\n   \
    \     }\n        else{\n            \"No\"\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5_j8q40c.scala:17:24 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = if (dot_index == -1) -1 else dot_index\n       \
    \ val first_letter = file_name.charAt(0)\n        val first_letter = if (first_letter\
    \ == '_') first_letter else first_letter.toUpperCase\n        val letters = ('A'-'Z').toSet\n\
    \        val letters_index = letters.indexOf(first_letter)\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letters_index\
    \ = if (letters_index == -1) -1 else letters_index\n        val letter\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu7_47_if.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu7_47_if.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdot_index\e[0m = \e[33mif\e[0m (dot_index == -\e[31m1\e[0m) -\e[31m1\e\
    [0m \e[33melse\e[0m dot_index\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu7_47_if.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfirst_letter\e[0m = \e[33mif\e[0m (first_letter\
    \ == \e[31m'_'\e[0m) first_letter \e[33melse\e[0m first_letter.toUpperCase\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirst_letter is already defined as \e[33mvalue\e[0m \e[35mfirst_letter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu7_47_if.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mletters_index\e[0m = \e[33mif\e[0m (letters_index\
    \ == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m letters_index\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mletters_index is already defined as \e[33mvalue\e[0m \e[35mletters_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu7_47_if.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mletters_index\e[0m = \e[33mif\e[0m (letters_index\
    \ == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m lett"
  stdout: ''
  timestamp: 1659805837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0,1)\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprcqmlj5t.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprcqmlj5t.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_nam"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val\
    \ dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpccl16_xh.scala:54:22 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpccl16_xh.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e\
    [0m (dotIndex == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpccl16_xh.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpccl16_xh.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex ==\
    \ -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpccl16_xh.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotInde"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\") // Find the position of the dot\n        if (dotIndex == -1) {\n        \
    \    \"No\"\n        } else if (dotIndex == 0) {\n            \"No\"\n       \
    \ } else {\n            val firstLetter = file_name.substring(0, dotIndex).toLowerCase\
    \ // Find the first letter of the substring before the dot\n            if (firstLetter.length\
    \ != 1 || (firstLetter == 'a' && firstLetter != 'b' && firstLetter != 'c' && firstLetter\
    \ != 'd' && firstLetter != 'e' && firstLetter != 'f' && firstLetter != 'g' &&\
    \ firstLetter != 'h' && firstLetter != 'i' && firstLetter != 'j' && firstLetter\
    \ != 'k' && firstLetter != 'l' && firstLetter != 'm' && firstLetter != 'n' &&\
    \ firstLetter != 'o' && firstLetter != 'p' && firstLetter != 'q' && firstLetter\
    \ != 'r' && firstLetter != 's' && firstLetter != 't' && firstLetter != 'u' &&\
    \ firstLetter != 'v' && firstLetter != 'w' && firstLetter != 'x' && firstLetter\
    \ != 'y' && firstLetter != 'z')) {\n                \"No\"\n            } else\
    \ {\n                val lastLetter = file_name.substring(dotIndex).toLowerCase\
    \ // Find the last letter of the substring after the dot\n                if (lastLetter.length\
    \ != 1 || (lastLetter == 'a' && lastLetter != 'b' && lastLetter != 'c' && lastLetter\
    \ != 'd' && lastLetter != 'e' && lastLetter != 'f' && lastLetter != 'g' && lastLetter\
    \ != 'h' && lastLetter != 'i' && lastLetter != 'j' && lastLetter != 'k' && lastLetter\
    \ != 'l' && lastLetter != 'm' && lastLetter != 'n' && lastLetter != 'o' && lastLetter\
    \ != 'p' && lastLetter != 'q' && lastLetter != 'r' && lastLetter != 's' && lastLetter\
    \ != 't' && lastLetter != 'u' && lastLetter != 'v' && lastLetter != 'w' && lastLetter\
    \ != 'x' && lastLetter != 'y' && lastLetter != 'z')) {\n                    \"\
    No\"\n                } else {\n                    if (file_name.contains(\"\
    .txt\") || file_name.contains(\".exe\") || file_name.contains(\".dll\")) {\n \
    \                       \"Yes\"\n                    } else {\n              \
    \          \"No\"\n                    }\n                }\n            }\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdir4irkm.scala:17:24 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0,1)\n        val file_name\
    \ = file_name.toUpperCase\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp18fh5o2x.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp18fh5o2x.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,file_name.indexOf(\e\
    [31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp18fh5o2x.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp18fh5o2x.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp18fh5o2x.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of "
  stdout: ''
  timestamp: 1659805836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val\
    \ dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpccl16_xh.scala:54:22 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpccl16_xh.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e\
    [0m (dotIndex == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpccl16_xh.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpccl16_xh.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex ==\
    \ -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpccl16_xh.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotInde"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name : String = file_name.trim\n        if (file_name.length()\
    \ > 3 || file_name.indexOf('.') < 1 || file_name.substring(0, 1).isEmpty) {\n\
    \            return \"No\"\n        }\n        if (file_name.substring(file_name.indexOf('.')\
    \ + 1).toLowerCase != \"exe\" && file_name.substring(file_name.indexOf('.') +\
    \ 1).toLowerCase != \"dll\") {\n            return \"No\"\n        }\n       \
    \ if (file_name.substring(0,1).toLowerCase != \"a\" && file_name.substring(0,1).toLowerCase\
    \ != \"b\" && file_name.substring(0,1).toLowerCase != \"c\" && file_name.substring(0,1).toLowerCase\
    \ != \"d\" && file_name.substring(0,1).toLowerCase != \"e\" && file_name.substring(0,1).toLowerCase\
    \ != \"f\" && file_name.substring(0,1).toLowerCase != \"g\" && file_name.substring(0,1).toLowerCase\
    \ != \"h\" && file_name.substring(0,1).toLowerCase != \"i\" && file_name.substring(0,1).toLowerCase\
    \ != \"j\" && file_name.substring(0,1).toLowerCase != \"k\" && file_name.substring(0,1).toLowerCase\
    \ != \"l\" && file_name.substring(0,1).toLowerCase != \"m\" && file_name.substring(0,1).toLowerCase\
    \ != \"n\" && file_name.substring(0,1).toLowerCase != \"o\" && file_name.substring(0,1).toLowerCase\
    \ != \"p\" && file_name.substring(0,1).toLowerCase != \"q\" && file_name.substring(0,1).toLowerCase\
    \ != \"r\" && file_name.substring(0,1).toLowerCase != \"s\" && file_name.substring(0,1).toLowerCase\
    \ != \"t\" && file_name.substring(0,1).toLowerCase != \"u\" && file_name.substring(0,1).toLowerCase\
    \ != \"v\" && file_name.substring(0,1).toLowerCase != \"w\" && file_name.substring(0,1).toLowerCase\
    \ != \"x\" && file_name.substring(0,1).toLowerCase != \"y\" && file_name.substring(0,1).toLowerCase\
    \ != \"z\") {\n            return \"No\"\n        }\n        return \"Yes\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E039] Reference Error: /tmp/tmpvc8mozc9.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m : \e[35mString\e\
    [0m = file_name.trim\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is a forward reference extending over the definition\
    \ of file_name\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       // Your code here\n        val pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern2 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4\
    \ = \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3hic8edv.scala:67:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m        \e[33mval\e[0m \e[36mpattern49\e[0m = \"^[a-zA-Z]+\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmp3hic8edv.scala:69:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m69 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3hic8edv.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3hic8edv.scala:69:4 -------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: ^[a-zA-Z]+def\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        val dotIndex = if (dotIndex < 0) \"No\" else file_name.substring(0,\
    \ dotIndex).trim\n        val dotIndex = if (dotIndex.isEmpty) \"No\" else dotIndex\n\
    \        val dotIndex = if (dotIndex == \"No\") \"No\" else dotIndex\n       \
    \ val dotIndex = if (dotIndex.startsWith(\"a\")) \"No\" else dotIndex\n      \
    \  val dotIndex = if (dotIndex.startsWith(\"A\")) \"No\" else dotIndex\n     \
    \   val dotIndex = if (dotIndex.endsWith(\"txt\")) \"No\" else dotIndex\n    \
    \    val dotIndex = if (dotIndex.endsWith(\"exe\")) \"No\" else dotIndex\n   \
    \     val dotIndex = if (dotIndex.endsWith(\"dll\")) \"No\" else dotIndex\n  \
    \      val dotIndex = if (dotIndex.contains(\".\")) \"No\" else dotIndex\n   \
    \     val dotIndex = if (dotIndex.contains(\"..\")) \"No\" else dotIndex\n   \
    \     val dotIndex = if (dotIndex.contains(\"\\\\\")) \"No\" else dotIndex\n \
    \       val dotIndex = if (dotIndex.contains(\"/\")) \"No\" else dotIndex\n  \
    \      val dotIndex = if (dotIndex.contains(\":\")) \"No\" else dotIndex\n   \
    \     val dotIndex = if (dotIndex.contains(\";\")) \"No\" else dotIndex\n    \
    \    val dotIndex = if (dotIndex.contains(\"<\")) \"No\" else dotIndex\n     \
    \   val dotIndex = if (dotIndex.contains(\">\")) \"No\" else dotIndex\n      \
    \  val dotIndex = if (dotIndex.contains(\"|\")) \"No\" else dotIndex\n       \
    \ val dotIndex = if (dotIndex.contains(\"'\")) \"No\" else dotIndex\n        val\
    \ dotIndex = if (dotIndex.contains(\"#\")) \"No\" else dotIndex\n        val dotIndex\
    \ = if (dotIndex.contains(\"%\")) \"No\" else dotIndex\n        val dotIndex =\
    \ if (dotIndex.contains(\"&\")) \"No\" else dotIndex\n        val dotIndex = if\
    \ (dotIndex.contains(\"*\")) \"No\" else dotIndex\n        val dotIndex = if (dotIndex.contains(\"\
    +\")) \"No\" else dotIndex\n        val dotIndex = if (dotIndex.contains(\"-\"\
    )) \"No\" else dotIndex\n        val dotIndex = if (dotIndex.contains(\".\"))\
    \ \"No\" else dotIndex\n        val dotIndex = if (dotIndex.contains(\":\")) \"\
    No\" else dotIndex\n        val dotIndex = if (dotIndex.contains(\";\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp72b0ez6m.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp72b0ez6m.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex < \e[31m0\e[0m) \e[31m\"No\"\e\
    [0m \e[33melse\e[0m file_name.substring(\e[31m0\e[0m, dotIndex).trim\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp72b0ez6m.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex.isEmpty)\
    \ \e[31m\"No\"\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp72b0ez6m.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ == \e[31m\"No\"\e[0m) \e[31m\"No\"\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp72b0ez6m.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex.startsWith(\e\
    [31m\"a\"\e[0m)) \e[31m\"No\"\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0,1)\n        val file_name\
    \ = file_name.toUpperCase\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp18fh5o2x.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp18fh5o2x.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,file_name.indexOf(\e\
    [31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp18fh5o2x.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp18fh5o2x.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp18fh5o2x.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of "
  stdout: ''
  timestamp: 1659805836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       // Your code here\n        val pattern = \"^[0-9]{3}$\"\n        val pattern2\
    \ = \"^[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\n        val pattern3\
    \ = \"^[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\
    \n        val pattern4 = \"^[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\n        val pattern5\
    \ = \"^[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\n        val pattern6\
    \ = \"^[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\
    \n        val pattern7 = \"^[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\n        val pattern8\
    \ = \"^[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\n        val pattern9\
    \ = \"^[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\
    \n        val pattern10 = \"^[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\n        val pattern11\
    \ = \"^[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpuser9ohs.scala:19:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                  ^\e[0m\n\e[31m   |\e[0m \
    \                                               invalid escape character\n\e[31m\e\
    [31m-- Error: /tmp/tmpuser9ohs.scala:20:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                                 \
    \ ^\e[0m\n\e[31m   |\e[0m                                                invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpuser9ohs.scala:20:76 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                                 \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                      invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpuser9ohs.scala:21:50\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                  ^\e[0m\n\e[31m   |\e[0m \
    \                                               invalid escape character\n\e[31m\e\
    [31m-- Error: /tmp/tmpuser9ohs.scala:21:76 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]$\"\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                            "
  stdout: ''
  timestamp: 1659805835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z0-9]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n\
    \        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\
    \n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz_e4rym8.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \           ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpz_e4rym8.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \              ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz_e4rym8.scala:68:5\
    \ ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7f1wvz9.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb7f1wvz9.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.toLowerCase\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = dot_index + 1\n        val file_name = file_name.substring(0,dot_index)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.toUpperCase\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4hz55no0.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4hz55no0.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,dot_index)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4hz55no0.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4hz55no0.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4hz55no0.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptzk9ijvr.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptzk9ijvr.scala:68:5 ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name : String = file_name\n        val file_name : String = file_name\n\
    \        val file_name : String = file_name\n        val file_name : String =\
    \ file_name\n        val file_name : String = file_name\n        val file_name\
    \ : String = file_name\n        val file_name : String = file_name\n        val\
    \ file_name : String = file_name\n        val file_name : String = file_name\n\
    \        val file_name : String = file_name\n        val file_name : String =\
    \ file_name\n        val file_name : String = file_name\n        val file_name\
    \ : String = file_name\n        val file_name : String = file_name\n        val\
    \ file_name : String = file_name\n        val file_name : String = file_name\n\
    \        val file_name : String = file_name\n        val file_name : String =\
    \ file_name\n        val file_name : String = file_name\n        val file_name\
    \ : String = file_name\n        val file_name : String = file_name\n        val\
    \ file_name : String = file_name\n        val file_name : String = file_name\n\
    \        val file_name : String = file_name\n        val file_name : String =\
    \ file_name\n        val file_name : String = file_name\n        val file_name\
    \ : String = file_name\n        val file_name : String = file_name\n        val\
    \ file_name : String = file_name\n        val file_name : String = file_name\n\
    \        val file_name : String = file_name\n        val file_name : String =\
    \ file_name\n        val file_name : String = file_name\n        val file_name\
    \ : String = file_name\n        val file_name : String = file_name\n        val\
    \ file_name : String = file_name\n        val file_name : String = file_name\n\
    \        val file_name : String = file_name\n        val file_name : String =\
    \ file_name\n        val file_name : String = file_name\n        val file_name\
    \ : String = file_name\n        val file_name : String = file_name\n        val\
    \ file_name : String = file_name\n        val file_name : String = file_name\n\
    \        val file_name : String = file_name\n        val file_name : String =\
    \ file_name\n        val file_name : String = file_name\n        val file_name\
    \ : String = file_name\n        val file_name : String = file_name\n        val\
    \ file_name : String = file_name\n        val file_name : String = file_name\n\
    \        val file_name : String = file_name\n        val file_name : String =\
    \ file_name\n        val file_name : String = file_name\n        val file_name\
    \ : String = file_name\n        val file_name : String = file_name\n        val\
    \ file_name : String = file_name\n        val file_name : String = file_name\n\
    \        val file_name : String = file_name\n        val file_name : String =\
    \ file_name\n        val file_name : String = file_name\n        val file_name\
    \ : String = file_name\n        val file_name : String = file_name\n        val\
    \ file_name : String = file_name\n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbpzsa_op.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m : \e[35mString\e\
    [0m = file_name\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbpzsa_op.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m : \e[35mString\e[0m =\
    \ file_name\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbpzsa_op.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m : \e[35mString\e[0m =\
    \ file_name\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbpzsa_op.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m : \e[35mString\e[0m =\
    \ file_name\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbpzsa_op.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m : \e[35mString\e[0m =\
    \ file_name\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.dropWhile(c\
    \ => !c.isDigit).drop(1).dropWhile(c => !c.isLetter).drop(1)\n        val file_name\
    \ = file_name.dropWhile(c => !c.isDigit).drop(1).dropWhile(c => !c.isLetter).drop(1)\n\
    \        val file_name = file_name.dropWhile(c => !c.isDigit).drop(1).dropWhile(c\
    \ => !c.isLetter).drop(1)\n        val file_name = file_name.dropWhile(c => !c.isDigit).drop(1).dropWhile(c\
    \ => !c.isLetter).drop(1)\n        val file_name = file_name.dropWhile(c => !c.isDigit).drop(1).dropWhile(c\
    \ => !c.isLetter).drop(1)\n        val file_name = file_name.dropWhile(c => !c.isDigit).drop(1).dropWhile(c\
    \ => !c.isLetter).drop(1)\n        val file_name = file_name.dropWhile(c => !c.isDigit).drop(1).dropWhile(c\
    \ => !c.isLetter).drop(1)\n        val file_name = file_name.dropWhile(c => !c.isDigit).drop(1).dropWhile(c\
    \ => !c.isLetter).drop(1)\n        val file_name = file_name.dropWhile(c => !c.isDigit).drop(1).dropWhile(c\
    \ => !c.isLetter).drop(1)\n        val file_name = file_name.dropWhile(c => !c.isDigit).drop(1).dropWhile(c\
    \ => !c.isLetter).drop(1)\n        val file_name = file_name.dropWhile(c => !c.isDigit).drop(1).dropWhile(c\
    \ => !c.isLetter).drop(1)\n        val file_name = file_name.dropWhile(c => !c.isDigit).drop(1).dropWhile(c\
    \ => !c.isLetter).drop(1)\n        val file_name = file_name.dropWhile(c => !c.isDigit).drop(1).dropWhile(c\
    \ => !c.isLetter).drop(1)\n        val file_name = file_name.dropWhile(c => !c.isDigit).drop(1).dropWhile(c\
    \ => !c.isLetter).drop(1)\n        val file_name = file_name.dropWhile(c => !c.isDigit).drop(1).dropWhile(c\
    \ => !c.isLetter).drop(1)\n        val file_name = file_name.dropWhile(c => !c.isDigit).drop(1).dropWhile(c\
    \ => \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpg87sgnor.scala:33:83 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(\e\
    [36mc\e[0m => !c.isDigit).drop(\e[31m1\e[0m).dropWhile(\e[36mc\e[0m => \n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpg87sgnor.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(\e\
    [36mc\e[0m => !c.isDigit).drop(\e[31m1\e[0m).dropWhile(\e[36mc\e[0m => !c.isLetter).drop(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg87sgnor.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(\e\
    [36mc\e[0m => !c.isDigit).drop(\e[31m1\e[0m).dropWhile(\e[36mc\e[0m => !c.isLetter).drop(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg87sgnor.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(\e\
    [36mc\e[0m => !c.isDigit).drop(\e[31m1\e[0m).dropWhile(\e[36mc\e[0m => !c.isLetter).drop(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        if (dotIndex == -1) {\n            \"No\"\n        } else {\n  \
    \          val file_name = file_name.substring(0, dotIndex)\n            val extension\
    \ = file_name.substring(dotIndex + 1)\n            if (extension.equals(\"txt\"\
    ) || extension.equals(\"exe\") || extension.equals(\"dll\")) {\n             \
    \   \"Yes\"\n            } else {\n                \"No\"\n            }\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5_7nkgjy.scala:17:24 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5_7nkgjy.scala:22:28\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m, dotIndex)\n\e[31m\e\
    [31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m             \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name : String = file_name.toLowerCase\n        val dot_index\
    \ = file_name.indexOf(\".\")\n        val dot_index = dot_index + 1\n        val\
    \ file_name = file_name.substring(0, dot_index)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw34ef1ng.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw34ef1ng.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m, dot_index)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw34ef1ng.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw34ef1ng.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw34ef1ng.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   "
  stdout: ''
  timestamp: 1659805845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        if(dotIndex == -1){\n            \"No\"\n        }\n        else\
    \ if(dotIndex == 0){\n            \"No\"\n        }\n        else if(file_name.substring(0,1)\
    \ < 'a' || file_name.substring(0,1) > 'z'){\n            \"No\"\n        }\n \
    \       else if(file_name.substring(dotIndex,dotIndex+1) < 'a' || file_name.substring(dotIndex,dotIndex+1)\
    \ > 'z' || file_name.substring(dotIndex+1,dotIndex+2) < '0' || file_name.substring(dotIndex+1,dotIndex+2)\
    \ > '9'){\n            \"No\"\n        }\n        else{\n            \"Yes\"\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqf7j6mdw.scala:17:24 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n\
    \        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\
    \n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\
    \n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\
    \n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\
    \n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\
    \n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\
    \n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\
    \n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\
    \n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\
    \n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\
    \n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\
    \n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\
    \n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\
    \n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\
    \n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\
    \n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\
    \n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\
    \n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\
    \n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\
    \n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\
    \n        val pattern50 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphnvmhqe8.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmphnvmhqe8.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphnvmhqe8.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmphnvmhqe8.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.replaceAll(\"\
    \\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"\\\\.\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\w\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\w\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\w\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\w\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\w\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\w\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\w\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\w\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\w\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\w\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\w\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\w\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\w\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\w\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\w\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\w\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\w\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\w\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\w\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\w\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\w\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\w\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\w\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\w\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\w\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\w\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\w\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\w\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\w\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\w\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\w\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\w\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\w\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\w\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\w\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\w\", \"\")\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjozokhe.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptjozokhe.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptjozokhe.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\.\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptjozokhe.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\w\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptjozokhe.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval"
  stdout: ''
  timestamp: 1659805844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpum47curb.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpum47curb.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpum47curb.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpum47curb.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpum47curb.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpum47curb.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpum"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dot_index = file_name.indexOf(\"\
    .\")\n        if(dot_index == -1){\n            \"No\"\n        }\n        else\
    \ if(dot_index > 0){\n            if(file_name.substring(dot_index - 1, dot_index).isEmpty){\n\
    \                \"No\"\n            }\n            else if(file_name.substring(dot_index\
    \ - 1, dot_index).matches(\"^[a-zA-Z]+\")){\n                \"No\"\n        \
    \    }\n            else{\n                \"Yes\"\n            }\n        }\n\
    \        else{\n            \"Yes\"\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9aoroon6.scala:17:24 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0,1)\n        val file_name\
    \ = file_name.toCharArray\n        val file_name = file_name.filter(x => x >=\
    \ 'a' && x <= 'z' || x >= 'A' && x <= 'Z')\n        val file_name = file_name.filter(x\
    \ => !x.isEmpty)\n        val file_name = file_name.filter(x => !x.equals(\".\"\
    ))\n        val file_name = file_name.filter(x => !x.equals(\"txt\") && !x.equals(\"\
    exe\") && !x.equals(\"dll\"))\n        val file_name = file_name.filter(x => !x.equals(\"\
    0\") && !x.equals(\"1\") && !x.equals(\"2\") && !x.equals(\"3\") && !x.equals(\"\
    4\") && !x.equals(\"5\") && !x.equals(\"6\") && !x.equals(\"7\") && !x.equals(\"\
    8\") && !x.equals(\"9\"))\n        val file_name = file_name.filter(x => !x.equals(\"\
    .\"))\n        val file_name = file_name.filter(x => !x.equals(\"txt\") && !x.equals(\"\
    exe\") && !x.equals(\"dll\"))\n        val file_name = file_name.filter(x => !x.equals(\"\
    0\") && !x.equals(\"1\") && !x.equals(\"2\") && !x.equals(\"3\") && !x.equals(\"\
    4\") && !x.equals(\"5\") && !x.equals(\"6\") && !x.equals(\"7\") && !x.equals(\"\
    8\") && !x.equals(\"9\"))\n        val file_name = file_name.filter(x => !x.equals(\"\
    .\"))\n        val file_name = file_name.filter(x => !x.equals(\"txt\") && !x.equals(\"\
    exe\") && !x.equals(\"dll\"))\n        val file_name = file_name.filter(x => !x.equals(\"\
    0\") && !x.equals(\"1\") && !x.equals(\"2\") && !x.equals(\"3\") && !x.equals(\"\
    4\") && !x.equals(\"5\") && !x.equals(\"6\") && !x.equals(\"7\") && !x.equals(\"\
    8\") && !x.equals(\"9\"))\n        val file_name = file_name.filter(x => !x.equals(\"\
    .\"))\n        val file_name = file_name.filter(x => !x.equals(\"txt\") && !x.equals(\"\
    exe\") && !x.equals(\"dll\"))\n        val file_name = file_name.filter(x => !x.equals(\"\
    0\") && !x.equals(\"1\") && !x.equals(\"2\") && !x.equals(\"3\") && !x.equals(\"\
    4\") && !x.equals(\"5\") \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp71uuy4b2.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp71uuy4b2.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,file_name.indexOf(\e\
    [31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp71uuy4b2.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp71uuy4b2.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toCharArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp71uuy4b2.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.filter(\e[36mx\e\
    [0m => x >= \e[31m'a'\e[0m && x <= \e[31m'z'\e[0m || x >= \e[31m'A'\e[0m && x\
    \ <= \e[31m'Z'\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[3"
  stdout: ''
  timestamp: 1659805846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        if(dotIndex == -1)\n            return \"No\"\n        val file_name\
    \ = file_name.substring(0, dotIndex)\n        val file_name = file_name.toUpperCase\n\
    \        val file_name = file_name.replaceAll(\"[^A-Za-z]\", \"\")\n        val\
    \ file_name = file_name.substring(0, 1)\n        if(file_name != \"A\" && file_name\
    \ != \"B\" && file_name != \"C\" && file_name != \"D\" && file_name != \"E\" &&\
    \ file_name != \"F\" && file_name != \"G\" && file_name != \"H\" && file_name\
    \ != \"I\" && file_name != \"J\" && file_name != \"K\" && file_name != \"L\" &&\
    \ file_name != \"M\" && file_name != \"N\" && file_name != \"O\" && file_name\
    \ != \"P\" && file_name != \"Q\" && file_name != \"R\" && file_name != \"S\" &&\
    \ file_name != \"T\" && file_name != \"U\" && file_name != \"V\" && file_name\
    \ != \"W\" && file_name != \"X\" && file_name != \"Y\" && file_name != \"Z\")\n\
    \            return \"No\"\n        else\n            return \"Yes\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvvwirgyc.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m, dotIndex)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvvwirgyc.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvvwirgyc.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"[^A-Za-z]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvvwirgyc.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpvvwirgyc.scala:17:24 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\e\
    [31m\e[3"
  stdout: ''
  timestamp: 1659805841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}[.]{1}[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+[.]{1}[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+$\"\
    \n        val pattern4 = \"^[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+$\"\
    \n        val pattern5 = \"^[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+$\"\
    \n        val pattern6 = \"^[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+$\"\
    \n        val pattern7 = \"^[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+$\"\
    \n        val pattern8 = \"^[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+$\"\
    \n        val pattern9 = \"^[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+$\"\
    \n        val pattern10 = \"^[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+$\"\
    \n        val pattern12 = \"^[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+$\"\
    \n        val pattern14 = \"^[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1q20iiex.scala:30:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mpattern14\e[0m = \"^[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Z\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmp1q20iiex.scala:32:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m32 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1q20iiex.scala:31:5 ---------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1q20iiex.scala:32:4 -------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: ^[a-zA-Z]+[.]{1}[a-zA-Z]+[.]{1}[a-zA-Zdef\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb89ifu8c.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpb89ifu8c.scala:68:5 ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = if (dot_index == -1) -1 else dot_index\n       \
    \ val file_name = file_name.substring(0, dot_index)\n        val file_name = file_name.trim\n\
    \        val file_name = file_name.substring(0, file_name.length - 1)\n      \
    \  val file_name = file_name.toUpperCase\n        val file_name = file_name.substring(0,\
    \ file_name.indexOf(\".\"));\n        val file_name = file_name.substring(0, file_name.indexOf(\"\
    .\"));\n        val file_name = file_name.substring(0, file_name.indexOf(\".\"\
    ));\n        val file_name = file_name.substring(0, file_name.indexOf(\".\"));\n\
    \        val file_name = file_name.substring(0, file_name.indexOf(\".\"));\n \
    \       val file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  \
    \      val file_name = file_name.substring(0, file_name.indexOf(\".\"));\n   \
    \     val file_name = file_name.substring(0, file_name.indexOf(\".\"));\n    \
    \    val file_name = file_name.substring(0, file_name.indexOf(\".\"));\n     \
    \   val file_name = file_name.substring(0, file_name.indexOf(\".\"));\n      \
    \  val file_name = file_name.substring(0, file_name.indexOf(\".\"));\n       \
    \ val file_name = file_name.substring(0, file_name.indexOf(\".\"));\n        val\
    \ file_name = file_name.substring(0, file_name.indexOf(\".\"));\n        val file_name\
    \ = file_name.substring(0, file_name.indexOf(\".\"));\n        val file_name =\
    \ file_name.substring(0, file_name.indexOf(\".\"));\n        val file_name = file_name.substring(0,\
    \ file_name.indexOf(\".\"));\n        val file_name = file_name.substring(0, file_name.indexOf(\"\
    .\"));\n        val file_name = file_name.substring(0, file_name.indexOf(\".\"\
    ));\n        val file_name = file_name.substring(0, file_name.indexOf(\".\"));\n\
    \        val file_name = file_name.substring(0, file_name.indexOf(\".\"));\n \
    \       val file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  \
    \      val file_name = file_name.substring(0, file_name.indexOf(\".\"));\n   \
    \     val file_name = file_name.substring(0, file_name.indexOf(\".\"));\n    \
    \    val file_name = file_name.substring(0, file_name.indexOf(\".\"));\n     \
    \   val file_name = file_name.substring(0, file_name.indexOf(\".\"));\n      \
    \  val file_name = file_name.substring(0, file_name.indexOf(\".\"));\n       \
    \ val file_name = file_name.substring(0, file_name.indexOf(\".\"));\n        val\
    \ file_name = file_name.substring(0, file_name.indexOf(\".\"));\n        val file_name\
    \ = file_name.substring(0, file_name.indexOf(\".\"));\n        val file_name =\
    \ file_name.substring(0, file_name.indexOf(\".\"));\n        val file_name = file_name.substring(0,\
    \ file_name.indexOf(\".\"));\n        val file_name = file_name.substring(0, file_name.indexOf\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp5gpml8s.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp5gpml8s.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdot_index\e[0m = \e[33mif\e[0m (dot_index == -\e[31m1\e[0m) -\e[31m1\e\
    [0m \e[33melse\e[0m dot_index\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp5gpml8s.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m, dot_index)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp5gpml8s.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfile_name\
    \ is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp5gpml8s.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m, file_name.length -\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods mu"
  stdout: ''
  timestamp: 1659805846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        if (dotIndex == -1) {\n            \"No\"\n        }\n        else\
    \ if (dotIndex > 0 && dotIndex < file_name.length-1) {\n            val fileName\
    \ = file_name.substring(0, dotIndex)\n            val extension = file_name.substring(dotIndex+1)\n\
    \            if (fileName.matches(\"^[a-zA-Z]+$\") && extension.matches(\"^[txt|exe|dll]$\"\
    )) {\n                \"Yes\"\n            }\n            else {\n           \
    \     \"No\"\n            }\n        }\n        else {\n            \"No\"\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnfipnzq7.scala:17:24 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dot_index = file_name.indexOf(\"\
    .\") // Find the position of the dot\n        if (dot_index == -1) return \"No\"\
    \ // No dot\n        if (file_name.length < 3) return \"No\" // Too short\n  \
    \      if (file_name.charAt(0) > 'z' || file_name.charAt(0) > 'Z') return \"No\"\
    \ // First letter not latin alpha\n        if (file_name.charAt(dot_index-1) !=\
    \ 'a' && file_name.charAt(dot_index-1) != 'z' && file_name.charAt(dot_index-1)\
    \ != 'A') return \"No\" // First letter not latin alpha\n        if (file_name.charAt(dot_index)\
    \ != 'a' && file_name.charAt(dot_index) != 'z' && file_name.charAt(dot_index)\
    \ != 'A' && file_name.charAt(dot_index) != 'Z') return \"No\" // First letter\
    \ not latin alpha\n        if (file_name.substring(dot_index-1).matches(\"^[a-zA-Z]+$\"\
    )) return \"No\" // Substring before dot not latin alpha\n        if (file_name.substring(dot_index).matches(\"\
    ^[txt|exe|dll]+$\")) return \"Yes\" // Substring after dot is valid\n        return\
    \ \"No\" // Substring after dot is invalid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphs8m22pi.scala:17:24 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.toLowerCase\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        val dotIndex = dotIndex + 1\n        val dotIndex = dotIndex - 1\n\
    \        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n  \
    \      val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n    \
    \    val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n      \
    \  val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val\
    \ dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex\
    \ = dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex =\
    \ dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex\
    \ - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex -\
    \ 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n\
    \        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n  \
    \      val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n    \
    \    val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n      \
    \  val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val\
    \ dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex\
    \ = dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex =\
    \ dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex\
    \ - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex -\
    \ 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n\
    \        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n  \
    \      val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n    \
    \    val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n      \
    \  val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val\
    \ dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex\
    \ = dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex =\
    \ dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex\
    \ - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex -\
    \ 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n\
    \        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n  \
    \      val dotIndex = dotIndex - 1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ams6yau.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = dotIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8ams6yau.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = dotIndex - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8ams6yau.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = dotIndex - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdotIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ams6yau.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdotIndex\e[0m = dotIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdotIndex is already defined\
    \ as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ams6yau.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = dotIndex\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659805847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       // Your code here\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb2wrhwjb.scala:18:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpb2wrhwjb.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb2wrhwjb.scala:67:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m        \e[33mval\e[0m \e[36mpattern49\e[0m = \"^[a-zA-Z]+\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpb2wrhwjb.scala:69:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m69 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb2wrhwjb.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpb2wrhwjb.scala:69:4 -------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: ^[a-zA-Z]+def\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       // Your code here\n        val file_name = file_name.trim\n        if\
    \ (file_name.length() > 3 || file_name.indexOf('.') < 1 || file_name.substring(0,\
    \ 1).isEmpty) {\n            return \"No\"\n        }\n        val dot_index =\
    \ file_name.indexOf(\".\")\n        if (dot_index < 0 || dot_index > file_name.length\
    \ - 1 || file_name.substring(dot_index).contains(\"txt\") || file_name.substring(dot_index).contains(\"\
    exe\") || file_name.substring(dot_index).contains(\"dll\")) {\n            return\
    \ \"No\"\n        }\n        return \"Yes\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyx5j7yje.scala:18:24 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val regex = \"\"\"^[0-9]{3}\\.[a-zA-Z]+$\"\"\".r\n        val result =\
    \ regex.findFirstIn(file_name).map(_.toString.toLowerCase)\n        result match\
    \ {\n            case Some(valid) => valid\n            case None => \"No\"\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcr10xxox.scala:25)\n\tat Problem.main(tmpcr10xxox.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb89ifu8c.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpb89ifu8c.scala:68:5 ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7f1wvz9.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb7f1wvz9.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb89ifu8c.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpb89ifu8c.scala:68:5 ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.replaceAll(\"\
    \\\\s\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\W\", \"\")\n\
    \        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\D\", \"\")\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7zu28oyl.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\s\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7zu28oyl.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7zu28oyl.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\D\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7zu28oyl.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\D\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7zu28oyl.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e["
  stdout: ''
  timestamp: 1659805846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9l"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       // Your code here\n        val pattern = \"^[0-9]{3}$\"\n        val pattern1\
    \ = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern2 = \"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern3 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern4 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern5 = \"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern6 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n     \
    \   val pattern7 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern8 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern9 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n     \
    \   val pattern10 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n     \
    \   val pattern11 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern12 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptqdx_q6l.scala:20:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                     invalid escape character\n\e[31m\e[31m--\
    \ Error: /tmp/tmptqdx_q6l.scala:21:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e\
    [31m\e[31m   |\e[0m                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                              invalid escape character\n\
    \e[31m\e[31m-- Error: /tmp/tmptqdx_q6l.scala:21:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmptqdx_q6l.scala:22:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                     invalid escape character\n\e[31m\e[31m--\
    \ Error: /tmp/tmptqdx_q6l.scala:22:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                                 \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \              invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmptqdx_q6l.scala:22:90\
    \ ----"
  stdout: ''
  timestamp: 1659805846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val\
    \ dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpccl16_xh.scala:54:22 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpccl16_xh.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e\
    [0m (dotIndex == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpccl16_xh.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpccl16_xh.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex ==\
    \ -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpccl16_xh.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotInde"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0,1)\n        val file_name\
    \ = file_name.toUpperCase\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp18fh5o2x.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp18fh5o2x.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,file_name.indexOf(\e\
    [31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp18fh5o2x.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp18fh5o2x.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp18fh5o2x.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of "
  stdout: ''
  timestamp: 1659805836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0,1)\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprcqmlj5t.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprcqmlj5t.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_nam"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       // Your code here\n        val pattern = \"\"\"^[0-9]{3}\\.[a-z][a-z][a-z]$\"\
    \"\".r\n        val pattern2 = \"\"\"^[a-z][a-z][a-z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\
    \"\".r\n        val pattern3 = \"\"\"^[a-z][a-z][a-z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]$\"\"\".r\n        val pattern4 = \"\"\"^[a-z][a-z][a-z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\
    \"\".r\n        val pattern5 = \"\"\"^[a-z][a-z][a-z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\
    \"\".r\n        val pattern6 = \"\"\"^[a-z][a-z][a-z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]$\"\"\".r\n        val pattern7 = \"\"\"^[a-z][a-z][a-z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\
    \"\".r\n        val pattern8 = \"\"\"^[a-z][a-z][a-z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\
    \"\".r\n        val pattern9 = \"\"\"^[a-z][a-z][a-z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]$\"\"\".r\n        val pattern10 = \"\"\"^[a-z][a-z][a-z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\
    \"\".r\n        val pattern11 = \"\"\"^[a-z][a-z][a-z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmaink6e8.scala:28:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mpattern11\e[0m = \"\"\"\
    ^[a-z][a-z][a-z]\\.[a-zA-Z][a-zA-Z][a-zA-Z]\n\e[31m\e[31m   |\e[0m           \
    \             ^\e[0m\n\e[31m   |\e[0m                        unclosed multi-line\
    \ string literal\n1 error found\n"
  stdout: ''
  timestamp: 1659805844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       // Your code here\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb2wrhwjb.scala:18:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpb2wrhwjb.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb2wrhwjb.scala:67:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m        \e[33mval\e[0m \e[36mpattern49\e[0m = \"^[a-zA-Z]+\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpb2wrhwjb.scala:69:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m69 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb2wrhwjb.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpb2wrhwjb.scala:69:4 -------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: ^[a-zA-Z]+def\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7f1wvz9.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb7f1wvz9.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\") // Find the position of the dot\n        val dotLength = dotIndex // Find\
    \ the length of the dot\n        val dotString = file_name.substring(0,dotIndex)\
    \ // Get the substring before the dot\n        val dotStringLength = dotString.length\
    \ // Find the length of the substring before the dot\n        val dotStringIsValid\
    \ = dotStringLength == 1 && dotString.matches(\"[a-zA-Z]\") // Is the substring\
    \ before the dot a latin alphapet letter?\n        val dotStringIsNotEmpty = dotString.length\
    \ > 0 // Is the substring before the dot empty?\n        val dotStringIsValidAndNotEmpty\
    \ = dotStringIsValid && dotStringIsNotEmpty // Are the conditions satisfied?\n\
    \        val dotStringIsValidAndNotEmptyAndNotStartWithLetter = dotStringIsValid\
    \ && dotStringIsNotEmpty && dotString.charAt(0) != 'a' && dotString.charAt(0)\
    \ != 'A' // Are the conditions satisfied?\n        val dotStringIsValidAndNotEmptyAndNotEndWithLetter\
    \ = dotStringIsValid && dotStringIsNotEmpty && dotString.charAt(dotString.length-1)\
    \ != 'a' && dotString.charAt(dotString.length-1) != 'A' // Are the conditions\
    \ satisfied?\n        val dotStringIsValidAndNotEmptyAndNotStartWithLetterAndNotEndWithLetter\
    \ = dotStringIsValid && dotStringIsNotEmpty && dotString.charAt(0) != 'a' && dotString.charAt(dotString.length-1)\
    \ != 'A' && dotString.charAt(dotString.length-1) != 'a' && dotString.charAt(dotString.length-1)\
    \ != 'A' // Are the conditions satisfied?\n        val dotStringIsValidAndNotEmptyAndNotStartWithLetterAndNotEndWithLetterAndNotContainsDot\
    \ = dotStringIsValid && dotStringIsNotEmpty && dotString.charAt(0) != 'a' && dotString.charAt(dotString.length-1)\
    \ != 'A' && dotString.charAt(dotString.length-1) != 'a' && dotString.charAt(dotString.length-1)\
    \ != 'A' && dotString.indexOf(\".\") == -1 // Are the conditions satisfied?\n\
    \        val dotStringIsValidAndNotEmptyAndNotStartWithLetterAndNotEndWithLetterAndNotContainsDotAndNotContainsDot\
    \ = dotStringIsValid && dotStringIsNotEmpty && dotString.charAt(0) != 'a' && dotString.charAt(dotString.length-1)\
    \ != 'A' && dotString.charAt(dotString.length-1) != 'a' && dotString.charAt(dotString.length-1)\
    \ != 'A' && dotString.indexOf(\".\") != -1 && dot\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp47e6vgfv.scala:17:24 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp47e6vgfv.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern4 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n\
    \        val pattern7 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n    \
    \    val pattern9 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\\
    .[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\
    \n        val pattern14 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n    \
    \    val pattern16 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\\
    .[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\
    \n\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpczxzibxl.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dot_index = file_name.indexOf(\"\
    .\")\n        if(dot_index == -1){\n            \"No\"\n        }\n        else\
    \ if(dot_index == 0){\n            \"No\"\n        }\n        else if(file_name.substring(dot_index-1).isEmpty){\n\
    \            \"No\"\n        }\n        else if(file_name.substring(dot_index-1,\
    \ dot_index).matches(\"^[a-zA-Z]+\")){\n            \"No\"\n        }\n      \
    \  else if(file_name.substring(dot_index-1, dot_index).matches(\"^[a-zA-Z]+$\"\
    )){\n            \"No\"\n        }\n        else if(file_name.substring(dot_index-1,\
    \ dot_index).matches(\"^[a-zA-Z]+$\")){\n            \"No\"\n        }\n     \
    \   else if(file_name.substring(dot_index-1, dot_index).matches(\"^[a-zA-Z]+$\"\
    )){\n            \"No\"\n        }\n        else if(file_name.substring(dot_index-1,\
    \ dot_index).matches(\"^[a-zA-Z]+$\")){\n            \"No\"\n        }\n     \
    \   else if(file_name.substring(dot_index-1, dot_index).matches(\"^[a-zA-Z]+$\"\
    )){\n            \"No\"\n        }\n        else if(file_name.substring(dot_index-1,\
    \ dot_index).matches(\"^[a-zA-Z]+$\")){\n            \"No\"\n        }\n     \
    \   else if(file_name.substring(dot_index-1, dot_index).matches(\"^[a-zA-Z]+$\"\
    )){\n            \"No\"\n        }\n        else if(file_name.substring(dot_index-1,\
    \ dot_index).matches(\"^[a-zA-Z]+$\")){\n            \"No\"\n        }\n     \
    \   else if(file_name.substring(dot_index-1, dot_index).matches(\"^[a-zA-Z]+$\"\
    )){\n            \"No\"\n        }\n        else if(file_name.substring(dot_index-1,\
    \ dot_index).matches(\"^[a-zA-Z]+$\")){\n            \"No\"\n        }\n     \
    \   else if(file_name.substring(dot_index-1, dot_index).matches(\"^[a-zA-Z]+$\"\
    )){\n            \"No\"\n        }\n        else if(file_name.substring(dot_index-1,\
    \ dot_index).matches(\"^[a-zA-Z]+$\")){\n            \"No\"\n        }\n     \
    \   else if(file_name.substring(dot_index-1, dot_index).matches(\"^[a-zA-Z]+$\"\
    )){\n            \"No\"\n        }\n        else if(file_name.substring(dot_index-1,\
    \ dot_index).matches(\"^[a-zA-Z]+$\")){\n            \"No\"\n        }\n     \
    \   else if(file_name.substring(dot_index-1, dot_index).matches(\"^[a-zA-Z]+$\"\
    )){\n            \"No\"\n        }\n        else if(file_name.substring(dot_index-1,\
    \ dot_index).matches(\"^[a-zA-Z]+$\")){\n            \"No\"\n        }\n     \
    \   else if(file_name.substring(dot_index-1, dot_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdlcrmd4m.scala:80:4 ----------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdlcrmd4m.scala:17:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.trim\n\e[31m\e[31m   |\e[0m               \
    \         ^\e[0m\n\e[31m   |\e[0m                        Recursive \e[33mvalue\e\
    [0m \e[35mfile_name\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7f1wvz9.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb7f1wvz9.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9lxa2chl.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9l"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnf"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       // Your code here\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\
    \n        val pattern1 = \"^[a-zA-Z]{1}$\"\n        val pattern2 = \"^[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}$\"\n        val pattern3 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\
    \n        val pattern4 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\
    \n        val pattern5 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\n        val pattern6 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\
    \n        val pattern7 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\
    \n        val pattern8 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\n        val pattern9 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\
    \n        val pattern10 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\
    \n        val pattern11 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}$\"\n        val pattern12 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxxoe7x6h.scala:18:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \           ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpxxoe7x6h.scala:20:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \ invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxxoe7x6h.scala:21:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     invalid escape character\n\e[31m\e\
    [31m-- Error: /tmp/tmpxxoe7x6h.scala:21:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                       invalid escape character\n\e[31m\e[31m--\
    \ Error: /tmp/tmpxxoe7x6h.scala:22:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\e[0m\n\e[31m\e[31m \
    \  |\e[0m                                     ^\e[0m\n\e[31m   |\e[0m        \
    \                             invalid escape character\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpxxoe7x6h.scala:22:50 -----------------------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                   "
  stdout: ''
  timestamp: 1659805850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe3g2d0c0.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe3g2d0c0.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.dropWhile(_ == \e[31m'.'\e[0m).drop(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe3g2d0c0.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(_\
    \ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe3g2d0c0.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(_\
    \ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe3g2d0c0.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(_\
    \ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val regex = \"\"\"^[0-9]{3}\\.[a-zA-Z]+$\"\"\".r\n        val result =\
    \ regex.findFirstIn(file_name).map(_.toString.toLowerCase)\n        val isNotEmpty\
    \ = result.nonEmpty\n        val isNotValid = result.forall(_.toString.toLowerCase\
    \ != \"exe\" && _.toString.toLowerCase != \"dll\")\n        val isNotLatinLetter\
    \ = result.forall(_.toString.toLowerCase != \"exe\" && _.toString.toLowerCase\
    \ != \"dll\" && _.toString.toLowerCase != \"txt\")\n        val isNotValid = result.forall(_.toString.toLowerCase\
    \ != \"exe\" && _.toString.toLowerCase != \"dll\" && _.toString.toLowerCase !=\
    \ \"txt\")\n        val isNotEmpty = result.nonEmpty\n        val isNotEmpty =\
    \ result.nonEmpty\n        if(isNotEmpty && isNotValid && isNotLatinLetter &&\
    \ isNotValid){\n            \"Yes\"\n        }\n        else{\n            \"\
    No\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0d40nyu3.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misNotValid\e[0m = result.forall(_.toString.toLowerCase\
    \ != \e[31m\"exe\"\e[0m && _.toString.toLowerCase != \e[31m\"dll\"\e[0m && _.toString.toLowerCase\
    \ != \e[31m\"txt\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misNotValid is already defined as \e[33mvalue\e[0m \e[35misNotValid\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0d40nyu3.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36misNotEmpty\e[0m = result.nonEmpty\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misNotEmpty is already defined as \e[33mvalue\e[0m \e[35misNotEmpty\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0d40nyu3.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36misNotEmpty\e[0m = result.nonEmpty\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0misNotEmpty\
    \ is already defined as \e[33mvalue\e[0m \e[35misNotEmpty\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp0d40nyu3.scala:20:39\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36misNotValid\e[0m = result.forall(_.toString.toLowerCase != \e[31m\"exe\"\
    \e[0m && _.toString.toLowerCase != \e[31m\"dll\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp0d40nyu3."
  stdout: ''
  timestamp: 1659805850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7f1wvz9.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb7f1wvz9.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0,1)\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprcqmlj5t.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprcqmlj5t.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_nam"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = if (dot_index == -1) -1 else dot_index\n       \
    \ val first_letter = file_name.charAt(0)\n        val first_letter = if (first_letter\
    \ == '_') first_letter else first_letter.toUpperCase\n        val first_letter\
    \ = if (first_letter < 'A' || first_letter > 'Z') first_letter else first_letter\n\
    \        val last_letter = file_name.charAt(file_name.length-1)\n        val last_letter\
    \ = if (last_letter == '_') last_letter else last_letter.toUpperCase\n       \
    \ val last_letter = if (last_letter < 'A' || last_letter > 'Z') last_letter else\
    \ last_letter\n        if (dot_index == -1 || dot_index == 0 || dot_index == file_name.length-1\
    \ || \n            dot_index == 0 || dot_index == file_name.length-1 || \n   \
    \         dot_index == 0 || dot_index == file_name.length-1 || \n            dot_index\
    \ == 0 || dot_index == file_name.length-1 || \n            dot_index == 0 || dot_index\
    \ == file_name.length-1 || \n            dot_index == 0 || dot_index == file_name.length-1\
    \ || \n            dot_index == 0 || dot_index == file_name.length-1 || \n   \
    \         dot_index == 0 || dot_index == file_name.length-1 || \n            dot_index\
    \ == 0 || dot_index == file_name.length-1 || \n            dot_index == 0 || dot_index\
    \ == file_name.length-1 || \n            dot_index == 0 || dot_index == file_name.length-1\
    \ || \n            dot_index == 0 || dot_index == file_name.length-1 || \n   \
    \         dot_index == 0 || dot_index == file_name.length-1 || \n            dot_index\
    \ == 0 || dot_index == file_name.length-1 || \n            dot_index == 0 || dot_index\
    \ == file_name.length-1 || \n            dot_index == 0 || dot_index == file_name.length-1\
    \ || \n            dot_index == 0 || dot_index == file_name.length-1 || \n   \
    \         dot_index == 0 || dot_index == file_name.length-1 || \n            dot_index\
    \ == 0 || dot_index == file_name.length-1 || \n            dot_index == 0 || dot_index\
    \ == file_name.length-1 || \n            dot_index == 0 || dot_index == file_name.length-1\
    \ || \n            dot_index == 0 || dot_index == file_name.length-1 || \n   \
    \         dot_index == 0 || dot_index == file_name.length-1 || \n            dot_index\
    \ == 0 || dot_index == file_name.length-1 || \n            dot_index == 0 || dot_index\
    \ == file_name.length-1 || \n            dot_index == 0 || dot_index == file_name.length-1\
    \ || \n            dot_index == 0 || dot_index == file_name.length-1 || \n   \
    \         dot_index == 0 || dot_index == file_name.length-1 || \n            dot_index\
    \ == 0 || \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0fwk0pb9.scala:54:29 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m            dot_index == \e[31m0\e[0m || \n\e[31m\e[31m\
    \   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m               \
    \              expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp0fwk0pb9.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = \e[33mif\e\
    [0m (dot_index == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dot_index\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0fwk0pb9.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfirst_letter\e[0m = \e[33mif\e[0m (first_letter\
    \ == \e[31m'_'\e[0m) first_letter \e[33melse\e[0m first_letter.toUpperCase\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirst_letter is already defined as \e[33mvalue\e[0m \e[35mfirst_letter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0fwk0pb9.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfirst_letter\e[0m = \e[33mif\e[0m (first_letter\
    \ < \e[31m'A'\e[0m || first_letter > \e[31m'Z'\e[0m) first_letter \e[33melse\e\
    [0m first_letter\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirst_letter is already defined as \e[33mvalue\e[0m \e[35mfirst_letter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel "
  stdout: ''
  timestamp: 1659805849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp82wl68ri.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp82wl68ri.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp82wl68ri.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp82wl68ri.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp82wl68ri.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e"
  stdout: ''
  timestamp: 1659805822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern16 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbimjax_a.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpbimjax_a.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpbimjax_a.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpbimjax_a.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpbimjax_a.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpbimjax_a.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp"
  stdout: ''
  timestamp: 1659805852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = dot_index + 1\n        val file_name = file_name.substring(0,\
    \ dot_index)\n        val file_name = file_name.trim\n        val file_name =\
    \ file_name.substring(0,1)\n        val file_name = file_name.toUpperCase\n  \
    \      val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvbu3iqrq.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvbu3iqrq.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m, dot_index)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvbu3iqrq.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfile_name\
    \ is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvbu3iqrq.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvbu3iqrq.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659805852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.substring(0,file_name.indexOf('.'))\n\
    \        val file_name = file_name.substring(0,file_name.indexOf('.')+1)\n   \
    \     val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n      \
    \  val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf('.')-1)\n        val file_name\
    \ = file_name.substring(0,file_name.indexOf('.')-1)\n        val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n\
    \        val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n   \
    \     val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n      \
    \  val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf('.')-1)\n        val file_name\
    \ = file_name.substring(0,file_name.indexOf('.')-1)\n        val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n\
    \        val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n   \
    \     val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n      \
    \  val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf('.')-1)\n        val file_name\
    \ = file_name.substring(0,file_name.indexOf('.')-1)\n        val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n\
    \        val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n   \
    \     val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n      \
    \  val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf('.')-1)\n        val file_name\
    \ = file_name.substring(0,file_name.indexOf('.')-1)\n        val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n\
    \        val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n   \
    \     val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n      \
    \  val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf('.')-1)\n        val file_name\
    \ = file_name.substring(0,file_name.indexOf('.')-1)\n        val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n\
    \        val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n   \
    \     val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n      \
    \  val file_name = file_name.substring(0,file_name.indexOf('.')-1)\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf('.')-1)\n        val file_name\
    \ = file_name.substring(0,file_name.indexOf('.')-1)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsw_e8zxw.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m'.'\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsw_e8zxw.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m'.'\e[0m)+\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsw_e8zxw.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m'.'\e[0m)-\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsw_e8zxw.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m'.'\e[0m)-\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of to"
  stdout: ''
  timestamp: 1659805853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnf"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnfeu_yzj.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpnf"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb89ifu8c.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpb89ifu8c.scala:68:5 ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0,1)\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprcqmlj5t.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprcqmlj5t.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_nam"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}[.]{1}[a-zA-Z]{1}$\"\n        val pattern2 =\
    \ \"^[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}$\"\n        val pattern3 = \"^[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}$\"\
    \n        val pattern4 = \"^[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}$\"\
    \n        val pattern5 = \"^[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}$\"\
    \n        val pattern6 = \"^[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}$\"\
    \n        val pattern7 = \"^[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}$\"\
    \n        val pattern8 = \"^[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}$\"\
    \n        val pattern9 = \"^[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}$\"\
    \n        val pattern10 = \"^[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}$\"\
    \n        val pattern11 = \"^[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}$\"\
    \n        val pattern12 = \"^[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnwqco8c9.scala:28:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mpattern12\e[0m = \"^[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpnwqco8c9.scala:30:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m30 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwqco8c9.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwqco8c9.scala:30:4 -------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0mNot found: ^[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]{1}[.]{1}[a-zA-Z]def\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe3g2d0c0.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe3g2d0c0.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.dropWhile(_ == \e[31m'.'\e[0m).drop(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe3g2d0c0.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(_\
    \ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe3g2d0c0.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(_\
    \ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe3g2d0c0.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(_\
    \ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7f1wvz9.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb7f1wvz9.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dot_index = file_name.indexOf(\"\
    .\")\n        if (dot_index == -1) {\n            \"No\"\n        } else if (dot_index\
    \ == 0) {\n            \"No\"\n        } else if (file_name.substring(dot_index\
    \ - 1, dot_index).isEmpty) {\n            \"No\"\n        } else if (file_name.substring(dot_index\
    \ - 1, dot_index) !in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) {\n            \"No\"\n        } else {\n            \"Yes\"\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpthiqxi3x.scala:25:69 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        } \e[33melse\e[0m \e[33mif\e[0m (file_name.substring(dot_index\
    \ - \e[31m1\e[0m, dot_index) !in \e[31m\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \e[0m) {\n\e[31m\e[31m   |\e[0m                                              \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \    ')' expected, but string literal found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpthiqxi3x.scala:17:24 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dot_index = file_name.indexOf(\"\
    .\") \n        val dot_index = dot_index + 1\n        val first_letter = file_name.charAt(0)\n\
    \        val second_letter = file_name.charAt(1)\n        val third_letter = file_name.charAt(2)\n\
    \        val fourth_letter = file_name.charAt(3)\n        val fifth_letter = file_name.charAt(4)\n\
    \        val sixth_letter = file_name.charAt(5)\n        val seventh_letter =\
    \ file_name.charAt(6)\n        val eighth_letter = file_name.charAt(7)\n     \
    \   val ninth_letter = file_name.charAt(8)\n        val tenth_letter = file_name.charAt(9)\n\
    \        val first_letter_check = first_letter >= 'a' && first_letter <= 'z'\n\
    \        val second_letter_check = second_letter >= 'a' && second_letter <= 'z'\n\
    \        val third_letter_check = third_letter >= 'a' && third_letter <= 'z'\n\
    \        val fourth_letter_check = fourth_letter >= 'a' && fourth_letter <= 'z'\n\
    \        val fifth_letter_check = fifth_letter >= 'a' && fifth_letter <= 'z'\n\
    \        val sixth_letter_check = sixth_letter >= 'a' && sixth_letter <= 'z'\n\
    \        val seventh_letter_check = seventh_letter >= 'a' && seventh_letter <=\
    \ 'z'\n        val eighth_letter_check = eighth_letter >= 'a' && eighth_letter\
    \ <= 'z'\n        val ninth_letter_check = ninth_letter >= 'a' && ninth_letter\
    \ <= 'z'\n        val tenth_letter_check = tenth_letter >= 'a' && tenth_letter\
    \ <= 'z'\n        val dot_check = dot_index != 0\n        val dot_check_check\
    \ = dot_check && dot_index != file_name.length - 1\n        val dot_check_check_check\
    \ = dot_check_check && dot_index != 0\n        val dot_check_check_check_check\
    \ = dot_check_check_check && dot_index != file_name.length - 1\n        val dot_check_check_check_check_check\
    \ = dot_check_check_check_check && dot_index != 0\n        val dot_check_check_check_check_check_check\
    \ = dot_check_check_check_check_check && dot_index != file_name.length - 1\n \
    \       val dot_check_check_check_check_check_check_check = dot_check_check_check_check_check_check\
    \ && dot_index != 0\n        val dot_check_check_check_check_check_check_check_check\
    \ = dot_check_check_check_check_check_check_check_check && dot_index != file_name.length\
    \ - 1\n        val dot_check_check_check_check_check_check_check_check_check =\
    \ dot_check_check_\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxl0hw2x1.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpxl0hw2x1.scala:17:24 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxl0hw2x1.scala:47:66 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mdot_check_check_check_check_check_check_check_check\e\
    [0m = dot_check_check_check_check_check_check_check_check && dot_index != file_name.length\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35mdot_check_check_check_check_check_check_check_check\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxl0hw2x1.scala:48:72\
    \ ------------------------\e[0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e\
    [36mdot_check_check_check_check_check_check_check_check_check\e[0m = dot_check_check_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                       Not found: dot_check_check_\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpxl0hw2x1.scala:49:5 ---------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   "
  stdout: ''
  timestamp: 1659805854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.toLowerCase\n        val dotIndex = file_name.indexOf(\"\
    .\") // Find the position of the dot\n        val dotSubstring = file_name.substring(0,\
    \ dotIndex) // Get the substring before the dot\n        val dotSubstringLength\
    \ = dotSubstring.length // Get the length of the substring before the dot\n  \
    \      val dotSubstringChar = dotSubstring.charAt(0).toChar // Get the first character\
    \ of the substring before the dot\n        val dotSubstringCharLength = dotSubstringChar.length\
    \ // Get the length of the first character of the substring before the dot\n \
    \       val dotSubstringCharUpper = dotSubstringChar.toUpper // Get the first\
    \ character of the substring before the dot\n        val dotSubstringCharUpperLength\
    \ = dotSubstringCharUpper.length // Get the length of the first character of the\
    \ substring before the dot\n        val dotSubstringCharLower = dotSubstringChar.toLower\
    \ // Get the first character of the substring before the dot\n        val dotSubstringCharLowerLength\
    \ = dotSubstringCharLower.length // Get the length of the first character of the\
    \ substring before the dot\n        val dotSubstringCharDigit = dotSubstringChar.toDigit\
    \ // Get the first character of the substring before the dot\n        val dotSubstringCharDigitLength\
    \ = dotSubstringCharDigit.length // Get the length of the first character of the\
    \ substring before the dot\n        val dotSubstringCharUpperDigit = dotSubstringCharUpper.toDigit\
    \ // Get the first character of the substring before the dot\n        val dotSubstringCharUpperDigitLength\
    \ = dotSubstringCharUpperDigit.length // Get the length of the first character\
    \ of the substring before the dot\n        val dotSubstringCharLowerDigit = dotSubstringCharLower.toDigit\
    \ // Get the first character of the substring before the dot\n        val dotSubstringCharLowerDigitLength\
    \ = dotSubstringCharLowerDigit.length // Get the length of the first character\
    \ of the substring before the dot\n        val dotSubstringCharDigitUpper = dotSubstringCharDigit.toUpper\
    \ // Get the first character of the substring before the dot\n        val dotSubstringCharDigitUpperLength\
    \ = dotSubstringCharDigitUpper.length // Get the length of the first character\
    \ of the substring before the dot\n        val dotSubstringCharDigitLower = dotSubstringCharDigit.toLower\
    \ // Get the first character of the substring before the dot\n        val dotSubstringCharDigitLowerLength\
    \ = dotSubstringCharDigitLower.length // Get the length of the first character\
    \ of the substring before the dot\n        val dotSubstringCharDigitUpperDigit\
    \ = dotSubstringCharDigitUpper.toDigit // Get the first character of the substring\
    \ before the dot\n        val dotSubstringCharDigitUpperDigitLength = \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpluksy_cl.scala:38:51 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mdotSubstringCharDigitUpperDigitLength\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \   ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpluksy_cl.scala:17:24 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toLowerCase\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpluksy_cl.scala:39:5 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.substring(0,file_name.length-1)\n\
    \        val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n   \
    \     val file_name = file_name.substring(0,1)\n        val file_name = file_name.toUpperCase\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp2l_mlmz.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.length-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp2l_mlmz.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpp2l_mlmz.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp2l_mlmz.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpp2l_mlmz.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659805854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0,1)\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprcqmlj5t.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprcqmlj5t.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_nam"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7nygwr7z.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp7nygwr7z.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp7nygwr7z.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp7nygwr7z.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp7nygwr7z.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp7nygwr7z.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val regex = \"\"\"^[0-9]{3}\\.[a-z][a-z][a-z]$\"\"\".r\n        val file_ext\
    \ = file_name.substring(file_name.lastIndexOf('.') + 1)\n        val file_name\
    \ = file_name.substring(0, file_name.lastIndexOf('.'))\n        val file_ext =\
    \ file_name.substring(file_name.lastIndexOf('.') + 1)\n        if (regex.findFirstIn(file_name).isEmpty)\
    \ {\n            return \"No\"\n        }\n        if (file_ext != \"txt\" &&\
    \ file_ext != \"exe\" && file_ext != \"dll\") {\n            return \"No\"\n \
    \       }\n        if (file_ext == \"txt\") {\n            if (file_name.substring(0,1)\
    \ != \"a\" && file_name.substring(0,1) != \"b\" && file_name.substring(0,1) !=\
    \ \"c\" && file_name.substring(0,1) != \"d\" && file_name.substring(0,1) != \"\
    e\" && file_name.substring(0,1) != \"f\" && file_name.substring(0,1) != \"g\"\
    \ && file_name.substring(0,1) != \"h\" && file_name.substring(0,1) != \"i\" &&\
    \ file_name.substring(0,1) != \"j\" && file_name.substring(0,1) != \"k\" && file_name.substring(0,1)\
    \ != \"l\" && file_name.substring(0,1) != \"m\" && file_name.substring(0,1) !=\
    \ \"n\" && file_name.substring(0,1) != \"o\" && file_name.substring(0,1) != \"\
    p\" && file_name.substring(0,1) != \"q\" && file_name.substring(0,1) != \"r\"\
    \ && file_name.substring(0,1) != \"s\" && file_name.substring(0,1) != \"t\" &&\
    \ file_name.substring(0,1) != \"u\" && file_name.substring(0,1) != \"v\" && file_name.substring(0,1)\
    \ != \"w\" && file_name.substring(0,1) != \"x\" && file_name.substring(0,1) !=\
    \ \"y\" && file_name.substring(0,1) != \"z\") {\n                return \"No\"\
    \n            }\n        }\n        if (file_ext == \"exe\") {\n            if\
    \ (file_name.substring(0,1) != \"a\" && file_name.substring(0,1) != \"b\" && file_name.substring(0,1)\
    \ != \"c\" && file_name.substring(0,1) != \"d\" && file_name.substring(0,1) !=\
    \ \"e\" && file_name.substring(0,1) != \"f\" && file_name.substring(0,1) != \"\
    g\" && file_name.substring(0,1) != \"h\" && file_name.substring(0,1) != \"i\"\
    \ && file_name.substring(0,1) != \"j\" && file_name.substring(0,1) != \"k\" &&\
    \ file_name.substring(0,1) != \"l\" && file_name.substring(0,1) != \"m\" && file_name.substring(0,1)\
    \ != \"n\" && file_name.substring(0,1) != \"o\" && file_name.substring(0,1) !=\
    \ \"p\" && file_name.substring(0,1) != \"q\" && file_name.substring(0,1) != \"\
    r\" && file_name.substring(0,1) != \"s\" && file_name.substring(0,1) != \"t\"\
    \ && file_name.substring(0,1) != \"u\" && file_name.substring(0,1) \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvu1yip6y.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvu1yip6y.scala:65:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m65 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvu1yip6y.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_ext\e[0m = file_name.substring(file_name.lastIndexOf(\e\
    [31m'.'\e[0m) + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_ext is already defined as \e[33mvalue\e[0m \e[35mfile_ext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpvu1yip6y.scala:19:24 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m, file_name.lastIndexOf(\e[31m'.'\e[0m))\n\e[31m\e[31m   |\e[0m    \
    \                    ^\e[0m\n\e[31m   |\e[0m                        Recursive\
    \ \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpvu1yip6y.scala:64:1 ---------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpvu1yip6y.scala:35:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m35 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659805854
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val regex = \"\"\"^[0-9]{3}\\.[a-zA-Z]+$\"\"\".r\n        val result =\
    \ regex.findFirstIn(file_name).getOrElse(\"No\")\n        \n        if(result\
    \ == \"No\"){\n            val regex = \"\"\"^[a-zA-Z]+\\.[a-zA-Z]+$\"\"\".r\n\
    \            val result = regex.findFirstIn(file_name).getOrElse(\"No\")\n   \
    \     }\n        \n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj47ynr3_.scala:28)\n\tat Problem.main(tmpj47ynr3_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        if (dotIndex == -1) {\n            \"No\"\n        } else {\n  \
    \          val file_name = file_name.substring(0, dotIndex)\n            val file_name\
    \ = file_name.toUpperCase\n            val file_name = file_name.replaceAll(\"\
    [^a-zA-Z]\", \"\")\n            val file_name = file_name.substring(0, 1)\n  \
    \          if (file_name != \"A\" && file_name != \"B\" && file_name != \"C\"\
    \ && file_name != \"D\" && file_name != \"E\" && file_name != \"F\" && file_name\
    \ != \"G\" && file_name != \"H\" && file_name != \"I\" && file_name != \"J\" &&\
    \ file_name != \"K\" && file_name != \"L\" && file_name != \"M\" && file_name\
    \ != \"N\" && file_name != \"O\" && file_name != \"P\" && file_name != \"Q\" &&\
    \ file_name != \"R\" && file_name != \"S\" && file_name != \"T\" && file_name\
    \ != \"U\" && file_name != \"V\" && file_name != \"W\" && file_name != \"X\" &&\
    \ file_name != \"Y\" && file_name != \"Z\") {\n                \"No\"\n      \
    \      } else {\n                \"Yes\"\n            }\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvvmi9abi.scala:17:24 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvvmi9abi.scala:23:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e\
    [0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfile_name is\
    \ already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvvmi9abi.scala:24:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e\
    [0m \e[36mfile_name\e[0m = file_name.replaceAll(\e[31m\"[^a-zA-Z]\"\e[0m, \e[31m\"\
    \"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvvmi9abi.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpvvmi9abi.scala:22:28 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m, dotIndex)\n\e[31m\e[31m   |\e[0m          "
  stdout: ''
  timestamp: 1659805853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dot_index = file_name.indexOf(\"\
    .\")\n        val dot_index = dot_index + 1\n        val first_letter = file_name.charAt(0)\n\
    \        val last_letter = file_name.charAt(dot_index-1)\n        val letters\
    \ = ('A'-'Z') ++ ('a'-'z')\n        val letters_count = letters.length\n     \
    \   val dot_index = file_name.indexOf(\".\")\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index + 1\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu9em203j.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu9em203j.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = file_name.indexOf(\e\
    [31m\".\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu9em203j.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu9em203j.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu9em203j.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e["
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]{1}\\.[a-zA-Z0-9]+$\"\n        val pattern3 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern4 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern5 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern6 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern8 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern9 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n\
    \        val pattern10 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern12 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern13 = \"^[a-zA-Z]{1}\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern14 = \"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcwfjlmzk.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \           ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpcwfjlmzk.scala:18:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]{1}\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \  invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpcwfjlmzk.scala:19:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     invalid escape character\n\e[31m\e\
    [31m-- Error: /tmp/tmpcwfjlmzk.scala:19:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                          invalid escape character\n\e[31m\e\
    [31m-- Error: /tmp/tmpcwfjlmzk.scala:20:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]{1}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                     ^\e[0m\n\e[31m   |\e[0m       \
    \                              invalid escape character\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpcwfjlmzk.scala:20:51 -----------------------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]{1}\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                          "
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0,1)\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprcqmlj5t.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprcqmlj5t.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcqmlj5t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_nam"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       // Your code here\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern12 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern14 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7e7vpeg4.scala:18:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp7e7vpeg4.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp7e7vpeg4.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp7e7vpeg4.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp7e7vpeg4.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp7e7vpeg4.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp7e"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpum47curb.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpum47curb.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpum47curb.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpum47curb.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpum47curb.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpum47curb.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpum"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z0-9]+$\"\n        val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern14\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprgkwhmql.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \           ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmprgkwhmql.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \              ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmprgkwhmql.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \           invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmprgkwhmql.scala:19:49\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                                 ^\e\
    [0m\n\e[31m   |\e[0m                                                invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmprgkwhmql.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m         \
    \                          invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmprgkwhmql.scala:20:49\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                 \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \           invalid e"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n       \
    \ val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n   \
    \     val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\
    \n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\
    \n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\
    \n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\
    \n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\
    \n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\
    \n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\
    \n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\
    \n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\
    \n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\
    \n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\
    \n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\
    \n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\
    \n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\
    \n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\
    \n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\
    \n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\
    \n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpb7f1wvz9.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7f1wvz9.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb7f1wvz9.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val\
    \ pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:17:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:20:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp_u6mo9za.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n        val pattern1 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern2 = \"^[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp5enarqof.scala:18:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5enarqof.scala:68:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5enarqof.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       // Your code here\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        if (dotIndex == -1) \"No\"\n  \
    \      else if (!(file_name.substring(0,dotIndex).matches(\"[a-zA-Z]\"))) \"No\"\
    \n        else if (!(file_name.substring(dotIndex).matches(\"[0-9]\"))) \"No\"\
    \n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9]\")))\
    \ \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name.substring(dotIndex).matches(\"[a-zA-Z0-9\\\
    .]\"))) \"No\"\n        else if (!(file_name\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1wxhsomp.scala:24:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (!(file_name.substring(dotIndex).matches(\e\
    [31m\"[a-zA-Z0-9\\.]\"\e[0m))) \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                                invalid escape character\n\
    \e[31m\e[31m-- Error: /tmp/tmp1wxhsomp.scala:25:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (!(file_name.substring(dotIndex).matches(\e\
    [31m\"[a-zA-Z0-9\\.]\"\e[0m))) \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                                invalid escape character\n\
    \e[31m\e[31m-- Error: /tmp/tmp1wxhsomp.scala:26:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (!(file_name.substring(dotIndex).matches(\e\
    [31m\"[a-zA-Z0-9\\.]\"\e[0m))) \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                                invalid escape character\n\
    \e[31m\e[31m-- Error: /tmp/tmp1wxhsomp.scala:27:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (!(file_name.substring(dotIndex).matches(\e\
    [31m\"[a-zA-Z0-9\\.]\"\e[0m))) \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                                invalid escape character\n\
    \e[31m\e[31m-- Error: /tmp/tmp1wxhsomp.scala:28:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (!(file_name.substring(dotIndex).matches(\e\
    [31m\"[a-zA-Z0-9\\.]\"\e[0m))) \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                                invalid escape character\n\
    \e[31m\e[3"
  stdout: ''
  timestamp: 1659805854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val\
    \ dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpccl16_xh.scala:54:22 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpccl16_xh.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e\
    [0m (dotIndex == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpccl16_xh.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpccl16_xh.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex ==\
    \ -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpccl16_xh.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotInde"
  stdout: ''
  timestamp: 1659805825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       // Your code here\n        val pattern = \"\"\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    \"\".r\n        val pattern2 = \"\"\"^[a-zA-Z]{1}\\.[a-zA-Z]+$\"\"\".r\n     \
    \   val pattern3 = \"\"\"^[a-zA-Z]{1}\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\"\".r\n     \
    \   val pattern4 = \"\"\"^[a-zA-Z]{1}\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\"\
    \".r\n        val pattern5 = \"\"\"^[a-zA-Z]{1}\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\"\".r\n        val pattern6 = \"\"\"^[a-zA-Z]{1}\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\"\".r\n        val pattern7 = \"\"\"^[a-zA-Z]{1}\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\"\"\
    .r\n        val pattern8 = \"\"\"^[a-zA-Z]{1}\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\"\".r\n        val pattern9\
    \ = \"\"\"^[a-zA-Z]{1}\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\"\".r\n        val pattern10 = \"\"\"^[a-zA-Z]{1}\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\"\".r\n        val pattern11 = \"\"\"^[a-zA-Z]{1}\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\"\".r\n        val pattern12 = \"\"\"^[a-zA-Z]{1}\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\"\".r\n        val pattern13\
    \ = \"\"\"^[a-zA-Z]{1}\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \"\".r\n        val pattern14 = \"\"\"^[a-zA-Z]{1}\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\"\".r\n        val pattern15 = \"\"\"^[a-zA-Z]{1}\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwg_ee30g.scala:32:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mpattern15\e[0m = \"\"\"\
    ^[a-zA-Z]{1}\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\n\e[31m\e[31m   |\e[0m                    \
    \    ^\e[0m\n\e[31m   |\e[0m                        unclosed multi-line string\
    \ literal\n1 error found\n"
  stdout: ''
  timestamp: 1659805854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        if(dotIndex == -1){\n            \"No\"\n        }\n        else\
    \ if(dotIndex > 0 && dotIndex < file_name.length-1){\n            val file_name\
    \ = file_name.substring(0, dotIndex)\n            val file_name = file_name.toUpperCase\n\
    \            val file_name = file_name.replaceAll(\"[^a-zA-Z]\", \"\")\n     \
    \       val file_name = file_name.replaceAll(\"^[a-zA-Z]\", \"\")\n          \
    \  if(file_name.contains(\".\") && file_name.contains(\".\") && file_name.contains(\"\
    .\")){\n                \"No\"\n            }\n            else{\n           \
    \     \"Yes\"\n            }\n        }\n        else{\n            \"No\"\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt64wo2nu.scala:17:24 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt64wo2nu.scala:24:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e\
    [0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfile_name is\
    \ already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt64wo2nu.scala:25:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e\
    [0m \e[36mfile_name\e[0m = file_name.replaceAll(\e[31m\"[^a-zA-Z]\"\e[0m, \e[31m\"\
    \"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt64wo2nu.scala:26:16 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^[a-zA-Z]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpt64wo2nu.scala:23:28 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m, dotIndex)\n\e[31"
  stdout: ''
  timestamp: 1659805854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val regex = \"\"\"^(?!.*\\.\\.)(?!.*\\.)(?!.*\\..*)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpco2yi4xv.scala:17:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mregex\e[0m = \"\"\"^(?!.*\\\
    .\\.)(?!.*\\.)(?!.*\\..*)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\\
    .)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\..*\\.)(?!.*\\\
    ..*\\.)(?!\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m \
    \                   unclosed multi-line string literal\n1 error found\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    //\
    \ file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n    def fileNameCheck(file_name : String) : String = {\n \
    \       val file_name = file_name.trim\n        val dotIndex = file_name.indexOf(\"\
    .\")\n        if (dotIndex == -1 || dotIndex == 0 || file_name.substring(0, dotIndex).isEmpty)\
    \ {\n            \"No\"\n        } else {\n            val fileExtension = file_name.substring(dotIndex\
    \ + 1)\n            if (fileExtension.equalsIgnoreCase(\"txt\") || fileExtension.equalsIgnoreCase(\"\
    exe\") || fileExtension.equalsIgnoreCase(\"dll\")) {\n                \"Yes\"\n\
    \            } else {\n                \"No\"\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj57dvb27.scala:17:24 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805855
