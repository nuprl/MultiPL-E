name: HumanEval_10_make_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Find the shortest palindrome that begins with a supplied string.\n    //\
  \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
  \ that is a palindrome.\n    // - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
  \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
  \    // 'catac'\n    def makePalindrome(string : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
  \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
  \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
  xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\"\
  )));\n    }\n\n}\n"
completions: ["        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedLongestPalindrome = longestPalindrome.reverse\n        longestPalindrome\
    \ + reversedLongestPalindrome", "        val longestPalindrome = string.takeWhile(_\
    \ != string.reverse.charAt(0))\n        val reversedString = string.reverse\n\
    \        val reversedLongestPalindrome = longestPalindrome.reverse\n        val\
    \ reversedLongestPalindromeLength = reversedLongestPalindrome.length\n       \
    \ val reversedLongestPalindromePrefix = reversedString.take(reversedLongestPalindromeLength)\n\
    \        val reversedLongestPalindromeSuffix = reversedString.drop(reversedLongestPalindromeLength)\n\
    \        val reversedLongestPalindromePrefix = reversedLongestPalindromePrefix\
    \ + reversedLongestPalindromeSuffix\n        longestPalindrome + reversedLongestPalindromePrefix",
  "        val longestPalindrome = string.substring(string.length / 2).reverse\n \
    \       val prefix = string.substring(0, string.length / 2)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindrome = longestPalindrome + reversedPrefix\n\
    \        palindrome", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string)\n        val reversedString = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ string.takeWhile(x => x != string.reverse.charAt(0))\n        val reversedString\
    \ = string.reverse\n        val reversedLongestPalindrome = longestPalindrome.reverse\n\
    \        val reversedLongestPalindromeSuffix = reversedLongestPalindrome + reversedString\n\
    \        longestPalindrome + reversedLongestPalindromeSuffix", "        val longestPalindrome\
    \ = findLongestPalindrome(string)\n        val reversedString = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ string.substring(string.length/2).reverse\n        val prefixString = string.substring(0,\
    \ string.length/2)\n        val suffixString = string.substring(string.length/2)\n\
    \        val palindrome = longestPalindrome + prefixString + suffixString\n  \
    \      palindrome", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val reversedLongestPalindrome = reverseString(longestPalindrome)\n  \
    \      longestPalindrome + reversedLongestPalindrome", "        val longestPalindrome\
    \ = longestPalindrome(string, string.size)\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = longestPalindrome(string.substring(0,string.length-1))\n\
    \        string + longestPalindrome", "        val longestPalindrome = string.takeWhile(x\
    \ => x == string.last).reverse\n        val prefixString = string.takeWhile(x\
    \ => x != longestPalindrome).reverse\n        longestPalindrome + prefixString",
  "        val longestPalindromicSuffix = string.takeWhile(c => c != string.last).reverse\n\
    \        val longestPalindromicPrefixString = string.takeWhile(c => c != longestPalindromicSuffix.last).reverse\n\
    \        longestPalindromicSuffix + longestPalindromicPrefixString", "       \
    \ val longestPalindrome = findLongestPalindrome(string.trim())\n        val reversedLongestPalindrome\
    \ = reverseString(longestPalindrome)\n        longestPalindrome + reversedLongestPalindrome",
  "        val longestPalindrome = findLongestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedString = longestPalindrome.trim().reverse\n        longestPalindrome\
    \ + reversedString", "        val longestPalindromicSuffix = string.substring(string.length-1)\n\
    \        val longestPalindromicPrefixString = string.substring(0, string.length-1)\n\
    \        val longestPalindromicPrefix = longestPalindromicPrefixString.reverse\n\
    \        val palindromicSuffix = longestPalindromicSuffix.reverse\n        val\
    \ palindrome = longestPalindromicPrefix + palindromicSuffix + longestPalindromicSuffix\n\
    \        palindrome", "        val longestPalindromicSuffix = longestPalindromicSuffix(string,\
    \ string.length)\n        val reversedLongestPalindromicSuffix = reversedLongestPalindromicSuffix(longestPalindromicSuffix,\
    \ longestPalindromicSuffix.length)\n        longestPalindromicSuffix ++ reversedLongestPalindromicSuffix",
  "        val longestPalindrome = string.takeWhile(x => x != string.reverse).reverse\n\
    \        longestPalindrome + longestPalindrome.takeWhile(x => x != longestPalindrome.reverse).reverse",
  "        val longestPalindrome = findLongestPalindrome(string.trim())\n        longestPalindrome\
    \ + longestPalindrome.trim().reverse", "        val longestPalindrome = findLongestPalindrome(string.split(''))\n\
    \        longestPalindrome + reverseString(longestPalindrome)", "        val longestPalindrome\
    \ = longestPalindrome(string, string.size)\n        string + longestPalindrome",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedLongestPalindrome = reverseString(longestPalindrome)\n  \
    \      longestPalindrome + reversedLongestPalindrome", "        val longestPalindrome\
    \ = longestPalindrome(string.tail)\n        string + longestPalindrome", "   \
    \     val longestPalindrome = string.takeWhile(x => x == string.last).reverse\n\
    \        string + longestPalindrome", "        val longestPalindrome = longestPalindrome(string.substring(0,string.length-1))\n\
    \        string + longestPalindrome", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ longestPalindrome(string.trim())\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = findLongestPalindrome(string.trim())\n        val\
    \ reversedLongestPalindrome = longestPalindrome.reverse\n        val reversedLongestPalindromeString\
    \ = reversedLongestPalindrome.toString\n        val reversedLongestPalindromeStringLength\
    \ = reversedLongestPalindromeString.length\n        val longestPalindromeLength\
    \ = longestPalindrome.length\n        val longestPalindromeStringLength = longestPalindromeStringLength\n\
    \        val longestPalindromeStringLengthPlusOne = longestPalindromeStringLength\
    \ + 1\n        val longestPalindromeStringLengthMinusOne = longestPalindromeStringLength\
    \ - 1\n        val longestPalindromeStringLengthMinusOnePlusOne = longestPalindromeStringLengthMinusOne\
    \ + 1\n        val longestPalindromeStringLengthMinusOneMinusOne = longestPalindromeStringLengthMinusOne\
    \ - 1\n        val longestPalindromeStringLengthMinusOneMinusOnePlusOne = longestPalindromeStringLengthMinusOneMinusOne\
    \ + 1\n        val longestPalindromeStringLengthMinusOneMinusOneMinusOne = longestPalindromeStringLengthMinusOneMinusOne\
    \ - 1\n        val longestPalindromeStringLengthMinusOneMinusOneMinusOnePlusOne\
    \ = longestPalindromeStringLengthMinusOneMinusOneMinusOne + 1\n        val longestPalindromeStringLengthMinusOneMinusOneMinusOneMinusOnePlusOne\
    \ = longestPalindromeStringLengthMinusOneMinusOneMinusOneMinusOne - 1\n      \
    \  val longestPalindromeStringLengthMinusOneMinusOneMinusOneMinusOneMinusOnePlusOne\
    \ = longestPalindromeStringLengthMinusOneMinusOneMinusOneMinusOnePlusOne + 1\n\
    \        val longestPalindromeStringLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOnePlusOne\
    \ = longestPalindromeStringLengthMinusOneMinusOneMinusOneMinusOneMinusOnePlusOne\
    \ - 1\n        val longestPalindromeStringLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOnePlusOne\
    \ = longestPalindromeStringLengthMinusOne", "        val longestPalindrome = longestPalindrome(string,\
    \ string.size)\n        longestPalindrome + reverseOfLongestPalindrome(longestPalindrome,\
    \ string.size)", "        val longestPalindrome = longestPalindrome(string, \"\
    \", \"\")\n        longestPalindrome + reverseString(longestPalindrome)", "  \
    \      val longestPalindromicSuffix = findLongestPalindromicSuffix(string.tail)\n\
    \        val reversedLongestPalindromicSuffix = reverseString(longestPalindromicSuffix)\n\
    \        string + reversedLongestPalindromicSuffix", "        val longestPalindrome\
    \ = longestPalindrome(string.trim())\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = longestPalindrome(string.trim())\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = findLongestPalindrome(string.chars)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ longestPalindrome(string.tail)\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = string.substring(0, string.length / 2)\n      \
    \  val reversedString = longestPalindrome.reverse\n        longestPalindrome +\
    \ reversedString", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string.trim())\n        val reversedString = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ findLongestPalindrome(string)\n        val reversedString = longestPalindrome.reverse\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ longestPalindrome(string, string.size)\n        string + longestPalindrome",
  "        val longestPalindrome = longestPalindrome(string.trim())\n        longestPalindrome\
    \ + longestPalindrome.reverse", "        val longestPalindrome = longestPalindrome(string.tail)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindromicSuffix\
    \ = string.substring(string.length / 2)\n        val reversedLongestPalindromicSuffix\
    \ = longestPalindromicSuffix.reverse\n        val reversedLongestPalindromicSuffixString\
    \ = reversedLongestPalindromicSuffix.toString\n        val reversedLongestPalindromicSuffixStringLength\
    \ = reversedLongestPalindromicSuffixString.length\n        val reversedLongestPalindromicSuffixStringLength\
    \ = reversedLongestPalindromicSuffixString.length\n        val reversedLongestPalindromicSuffixStringLength\
    \ = reversedLongestPalindromicSuffixString.length\n        val reversedLongestPalindromicSuffixStringLength\
    \ = reversedLongestPalindromicSuffixString.length\n        val reversedLongestPalindromicSuffixStringLength\
    \ = reversedLongestPalindromicSuffixString.length\n        val reversedLongestPalindromicSuffixStringLength\
    \ = reversedLongestPalindromicSuffixString.length\n        val reversedLongestPalindromicSuffixStringLength\
    \ = reversedLongestPalindromicSuffixString.length\n        val reversedLongestPalindromicSuffixStringLength\
    \ = reversedLongestPalindromicSuffixString.length\n        val reversedLongestPalindromicSuffixStringLength\
    \ = reversedLongestPalindromicSuffixString.length\n        val reversedLongestPalindromicSuffixStringLength\
    \ = reversedLongestPalindromicSuffixString.length\n        val reversedLongestPalindromicSuffixStringLength\
    \ = reversedLongestPalindromicSuffixString.length\n        val reversedLongestPalindromicSuffixStringLength\
    \ = reversedLongestPalindromicSuffixString.length\n        val reversedLongestPalindromicSuffixStringLength\
    \ = reversedLongestPalindromicSuffixString.length\n        val reversedLongestPalindromicSuffixStringLength\
    \ = reversedLongestPalindromicSuffixString.length\n        val reversedLongestPalindromicSuffixStringLength\
    \ = reversedLongestPalindromicSuffixString.length\n        val reversedLongestPalindromicSuffixStringLength\
    \ = reversedLongestPalindromicSuffixString.length\n        val reversedLongestPalindromicSuffixStringLength\
    \ = reversedLongestPalindromicSuffixString.length\n        val reversedLongestPalindromicSuffixStringLength\
    \ = reversedLongestPalindromicSuffixString.length\n        ", "        val longestPalindrome\
    \ = longestPalindrome(string, \"\")\n        longestPalindrome + longestPalindrome.reverse",
  "        val longestPalindrome = findLongestPalindrome(string)\n        val reversedString\
    \ = longestPalindrome.substring(longestPalindrome.lastIndexOf(string) + string.length)\n\
    \        reversedString + longestPalindrome", "        val longestPalindrome =\
    \ findLongestPalindrome(string.tail)\n        string +: longestPalindrome.reverse",
  "        val longestPalindrome = string.takeWhile(x => x == string.last).reverse\n\
    \        string + longestPalindrome", "        val longestPalindrome = findLongestPalindrome(string.split(''))\n\
    \        longestPalindrome + longestPalindrome.split('').reverse.mkString", " \
    \       val longestPalindrome = string.substring(0,string.length-1)\n        val\
    \ reversedString = longestPalindrome.reverse\n        longestPalindrome + reversedString",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = findLongestPalindrome(string.tail)\n\
    \        val reversedString = string.tail.reverse\n        val reversedLongestPalindrome\
    \ = findLongestPalindrome(reversedString)\n        longestPalindrome + reversedLongestPalindrome",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = string.substring(string.length\
    \ / 2)\n        val reversedString = longestPalindrome.reverse\n        string\
    \ + reversedString", "        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedLongestPalindrome = longestPalindrome.reverse\n        string\
    \ + reversedLongestPalindrome", "        val longestPalindrome = findLongestPalindrome(string.chars)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ longestPalindrome(string.tail)\n        string +: longestPalindrome.reverse",
  "        val longestPalindrome = string.substring(0,string.length-1)\n        val\
    \ reversedString = longestPalindrome.substring(longestPalindrome.length-1)\n \
    \       string + reversedString", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string.trim())\n        val reversedLongestPalindrome\
    \ = reverseString(longestPalindrome)\n        longestPalindrome + reversedLongestPalindrome",
  "        val longestPalindrome = findLongestPalindrome(string.split(''))\n     \
    \   val reversedLongestPalindrome = longestPalindrome.reverse\n        string\
    \ + reversedLongestPalindrome", "        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedLongestPalindrome = longestPalindrome.reverse\n        longestPalindrome\
    \ + reversedLongestPalindrome", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string)\n        val reversedString = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ string.takeWhile(x => x == string.last).reverse\n        string + longestPalindrome",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = longestPalindrome(string.tail)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string.split(''))\n        val reversedLongestPalindrome\
    \ = reverseString(longestPalindrome)\n        string + reversedLongestPalindrome",
  "        val longestPalindrome = findLongestPalindrome(string.chars)\n        val\
    \ reversedLongestPalindrome = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedLongestPalindrome", "        val longestPalindrome = string.takeWhile(x\
    \ => x.toString.toLowerCase == x.toString.toLowerCase && x != x.toString.toUpperCase).reverse\n\
    \        val prefixString = string.takeWhile(x => x.toString.toLowerCase == x.toString.toLowerCase\
    \ && x != x.toString.toUpperCase).reverse\n        val suffixString = string.drop(longestPalindrome.length)\n\
    \        val reversedString = prefixString + longestPalindrome + suffixString\n\
    \        return reversedString", "        val longestPalindromicSuffix = longestPalindromicSuffix(string,\
    \ 0)\n        val longestPalindromicPrefixString = longestPalindromicPrefixString(string,\
    \ longestPalindromicSuffix)\n        val longestPalindromicPrefix = longestPalindromicPrefix(longestPalindromicPrefixString)\n\
    \        longestPalindromicPrefix + longestPalindromicSuffix", "        val longestPalindrome\
    \ = longestPalindrome(string.trim())\n        val reversedString = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ findLongestPalindrome(string)\n        val reversedLongestPalindrome = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedLongestPalindrome", "        val longestPalindrome\
    \ = string.substring(0, string.length-1)\n        val reversedString = longestPalindrome.substring(longestPalindrome.length-1)\
    \ + longestPalindrome.substring(0, longestPalindrome.length-1)\n        reversedString",
  "        val longestPalindrome = findLongestPalindrome(string.trim())\n        val\
    \ reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = findLongestPalindrome(string.split(''))\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string)\n        val reversedLongestPalindrome = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedLongestPalindrome", "        val longestPalindrome\
    \ = findLongestPalindrome(string.split(''))\n        val reversedLongestPalindrome\
    \ = reverseString(longestPalindrome)\n        longestPalindrome + reversedLongestPalindrome",
  "        val longestPalindrome = findLongestPalindrome(string.trim())\n        val\
    \ reversedLongestPalindrome = reverseString(longestPalindrome)\n        string\
    \ + reversedLongestPalindrome", "        val longestPalindrome = string.takeWhile(_\
    \ != string.last).reverse\n        val prefixString = string.takeWhile(_ != longestPalindrome)\n\
    \        val suffixString = longestPalindrome + string.drop(longestPalindrome.length)\n\
    \        prefixString + suffixString", "        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        longestPalindrome + longestPalindrome.trim().reverse", "        val longestPalindrome\
    \ = longestPalindrome(string, string.size)\n        string + longestPalindrome.reverse",
  "        val longestPalindromicSuffix = string.substring(string.length-1)\n    \
    \    val longestPalindromicPrefixString = string.substring(0, string.length-1)\n\
    \        val longestPalindromicPrefix = longestPalindromicPrefixString.reverse\n\
    \        val palindrome = longestPalindromicPrefix + longestPalindromicSuffix\
    \ + longestPalindromicPrefixString.reverse\n        return palindrome", "    \
    \    val longestPalindrome = string.takeWhile(x => x != string.last).reverse\n\
    \        string + longestPalindrome", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        string + longestPalindrome.reverse", "        var longestPalindrome =\
    \ string\n        var longestPalindromeLength = string.length\n        var longestPalindromePrefix\
    \ = \"\"\n        var longestPalindromeSuffix = \"\"\n        var longestPalindromePostfix\
    \ = \"\"\n        var longestPalindromePostfixLength = 0\n        var longestPalindromePostfixPrefix\
    \ = \"\"\n        var longestPalindromePostfixSuffix = \"\"\n        var longestPalindromePostfixPostfix\
    \ = \"\"\n        var longestPalindromePostfixPostfixLength = 0\n        var longestPalindromePostfixPostfixPrefix\
    \ = \"\"\n        var longestPalindromePostfixPostfixSuffix = \"\"\n        var\
    \ longestPalindromePostfixPostfixPostfix = \"\"\n        var longestPalindromePostfixPostfixPostfixLength\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPrefix = \"\"\n     \
    \   var longestPalindromePostfixPostfixPostfixSuffix = \"\"\n        var longestPalindromePostfixPostfixPostfixPostfix\
    \ = \"\"\n        var longestPalindromePostfixPostfixPostfixPostfixLength = 0\n\
    \        var longestPalindromePostfixPostfixPostfixPostfixPrefix = \"\"\n    \
    \    var longestPalindromePostfixPostfixPostfixPostfixSuffix = \"\"\n        var\
    \ longestPalindromePostfixPostfixPostfixPostfixPostfix = \"\"\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\"\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\"\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\"\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\"\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n        var longestPalindromePost", "        val longestPalindrome =\
    \ findLongestPalindrome(string)\n        val reversedString = longestPalindrome.tail.reverse\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ findLongestPalindrome(string.chars)\n        val reversedLongestPalindrome =\
    \ longestPalindrome.reverse\n        longestPalindrome + reversedLongestPalindrome",
  "        val longestPalindrome = string.substring(string.length/2).reverse\n   \
    \     val reversedString = string.substring(0,string.length/2).reverse\n     \
    \   reversedString + longestPalindrome", "        val longestPalindrome = string.takeWhile(x\
    \ => x == string.last).reverse\n        val palindrome = longestPalindrome + longestPalindrome.takeWhile(x\
    \ => x != longestPalindrome.last).reverse\n        palindrome", "        val longestPalindrome\
    \ = findLongestPalindrome(string.split(''))\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = string.takeWhile(x => x != string.reverse).reverse\n\
    \        val reversedString = string.takeWhile(x => x != string.reverse).reverse\n\
    \        val reversedLongestPalindrome = longestPalindrome.reverse\n        val\
    \ reversedLongestPalindromeWithSuffix = reversedLongestPalindrome + reversedString\n\
    \        longestPalindrome.reverse.takeWhile(x => x != longestPalindrome.reverse).reverse\
    \ + reversedLongestPalindromeWithSuffix", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ string.takeWhile(x => x != string.reverse).reverse\n        longestPalindrome\
    \ + longestPalindrome.takeWhile(x => x != longestPalindrome.reverse).reverse",
  "        val longestPalindrome = longestPalindrome(string, string.size)\n      \
    \  string + longestPalindrome", "        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedString = longestPalindrome.reverse\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = longestPalindrome(string,\
    \ string.size)\n        string + longestPalindrome", "        val longestPalindrome\
    \ = longestPalindrome(string.tail)\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = findLongestPalindrome(string.trim())\n        longestPalindrome\
    \ + longestPalindrome.substring(longestPalindrome.length - 1)", "        val longestPalindrome\
    \ = string.takeWhile(x => x != string.reverse).reverse\n        longestPalindrome\
    \ + longestPalindrome.takeWhile(x => x != longestPalindrome.reverse).reverse",
  "        val longestPalindrome = string.substring(string.length / 2).reverse\n \
    \       val reversedString = string.substring(0, string.length / 2).reverse\n\
    \        val palindrome = longestPalindrome + reversedString\n        palindrome",
  "        val longestPalindrome = string.substring(string.length/2).reverse\n   \
    \     val prefix = string.substring(0, string.length/2)\n        val suffix =\
    \ longestPalindrome + prefix\n        prefix + suffix", "        val longestPalindrome\
    \ = longestPalindrome(string, string.size)\n        string + longestPalindrome",
  "        val longestPalindrome = string.takeWhile(x => x != string.reverse.charAt(0))\n\
    \        longestPalindrome + string.reverse.charAt(longestPalindrome.size)", " \
    \       val longestPalindrome = longestPalindrome(string, string.size)\n     \
    \   string + longestPalindrome", "        val longestPalindrome = longestPalindrome(string.tail)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string.trim())\n        longestPalindrome + longestPalindrome.substring(longestPalindrome.lastIndexOf('\
    \ ')).reverse", "        val longestPalindrome = findLongestPalindrome(string.chars)\n\
    \        longestPalindrome + string.reverse.takeWhile(x => x != longestPalindrome).reverse",
  "        val longestPalindrome = findLongestPalindrome(string.trim())\n        val\
    \ reversedString = longestPalindrome.tail.reverse\n        longestPalindrome +\
    \ reversedString", "        val longestPalindromicSuffix = longestPalindromicSuffix(string.tail)\n\
    \        val reversedString = reverseString(string.take(longestPalindromicSuffix))\n\
    \        reversedString + longestPalindromicSuffix", "        val longestPalindrome\
    \ = findLongestPalindrome(string.trim())\n        val reversedString = longestPalindrome.trim().reverse\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ string.takeWhile(x => x != string.last).reverse\n        val prefix = string.takeWhile(x\
    \ => x != longestPalindrome)\n        val suffix = string.drop(longestPalindrome.length)\n\
    \        prefix + longestPalindrome + suffix", "        val longestPalindrome\
    \ = string.substring(string.length / 2)\n        val reversedString = longestPalindrome.substring(longestPalindrome.length\
    \ / 2).toString.reverse\n        string + reversedString", "        val longestPalindrome\
    \ = findLongestPalindrome(string.chars)\n        val reversedString = longestPalindrome.reverse\n\
    \        string + reversedString", "        val longestPalindrome = string.substring(string.length/2).reverse\n\
    \        val reversedString = string.substring(0,string.length/2) + \"$longestPalindrome\"\
    \n        reversedString", "        val longestPalindrome = longestPalindrome(string,\
    \ \"\")\n        longestPalindrome + reverseString(longestPalindrome)", "    \
    \    val longestPalindrome = string.substring(0, string.length / 2)\n        val\
    \ reversedString = longestPalindrome.reverse\n        longestPalindrome + reversedString",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        string\
    \ + longestPalindrome", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string.trim())\n        val reversedLongestPalindrome\
    \ = longestPalindrome.reverse\n        longestPalindrome + reversedLongestPalindrome",
  "        val longestPalindrome = longestPalindrome(string.trim())\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedLongestPalindrome = reverseString(longestPalindrome)\n  \
    \      longestPalindrome + reversedLongestPalindrome", "        var longestPalindrome\
    \ = string\n        var longestPalindromeLength = 0\n        var longestPalindromePrefix\
    \ = \"\"\n        var longestPalindromeSuffix = \"\"\n        var longestPalindromePostfix\
    \ = \"\"\n        var longestPalindromePostfixLength = 0\n        var longestPalindromePostfixPrefix\
    \ = \"\"\n        var longestPalindromePostfixSuffix = \"\"\n        var longestPalindromePostfixPostfix\
    \ = \"\"\n        var longestPalindromePostfixPostfixLength = 0\n        var longestPalindromePostfixPostfixPrefix\
    \ = \"\"\n        var longestPalindromePostfixPostfixSuffix = \"\"\n        var\
    \ longestPalindromePostfixPostfixPostfix = \"\"\n        var longestPalindromePostfixPostfixPostfixLength\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPrefix = \"\"\n     \
    \   var longestPalindromePostfixPostfixPostfixSuffix = \"\"\n        var longestPalindromePostfixPostfixPostfixPostfix\
    \ = \"\"\n        var longestPalindromePostfixPostfixPostfixPostfixLength = 0\n\
    \        var longestPalindromePostfixPostfixPostfixPostfixPrefix = \"\"\n    \
    \    var longestPalindromePostfixPostfixPostfixPostfixSuffix = \"\"\n        var\
    \ longestPalindromePostfixPostfixPostfixPostfixPostfix = \"\"\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\"\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\"\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\"\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\"\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n        var longestPalindromePostfix", "        val longestPalindrome\
    \ = findLongestPalindrome(string.trim())\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = longestPalindrome(string.trim())\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val reversedLongestPalindrome = reverseString(longestPalindrome)\n  \
    \      longestPalindrome + reversedLongestPalindrome", "        val longestPalindrome\
    \ = string.takeWhile(_ != string.reverse.head)\n        val reversedString = string.reverse\n\
    \        val reversedLongestPalindrome = longestPalindrome.reverse\n        val\
    \ reversedLongestPalindromeWithSuffix = reversedLongestPalindrome + reversedString\n\
    \        longestPalindrome.reverse.head + reversedLongestPalindromeWithSuffix",
  "        val longestPalindrome = longestPalindrome(string.trim())\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = longestPalindrome(string,\
    \ string.size)\n        longestPalindrome + reverseOfLongestPalindrome(longestPalindrome,\
    \ string.size)", "        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedLongestPalindrome = reverseString(longestPalindrome)\n  \
    \      longestPalindrome + reversedLongestPalindrome", "        val longestPalindrome\
    \ = findLongestPalindrome(string.trim())\n        val reversedString = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ findLongestPalindrome(string.trim())\n        val reversedLongestPalindrome\
    \ = reverseString(longestPalindrome)\n        string + reversedLongestPalindrome",
  "        val longestPalindrome = string.tails.reverse.takeWhile(_.isLetter).reverse\n\
    \        val palindrome = string.takeWhile(_.isLetter) + longestPalindrome\n \
    \       palindrome", "        val longestPalindrome = longestPalindrome(string,\
    \ string.size)\n        string + longestPalindrome", "        val longestPalindrome\
    \ = findLongestPalindrome(string.trim())\n        longestPalindrome + longestPalindrome.trim().reverse",
  "        val longestPalindrome = string.takeWhile(_ != string.reverse).reverse\n\
    \        val reversedString = string.takeWhile(_ != string.reverse).reverse\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ longestPalindrome(string, new StringBuilder)\n        longestPalindrome + reversePostfix(longestPalindrome)",
  "        val longestPalindrome = string.takeWhile(x => x == string.last).reverse\n\
    \        string + longestPalindrome", "        val longestPalindrome = findLongestPalindrome(string.split(''))\n\
    \        val reversedLongestPalindrome = longestPalindrome.reverse\n        string\
    \ + reversedLongestPalindrome", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = findLongestPalindrome(string.dropRight(1))\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ longestPalindrome(string.trim())\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = longestPalindrome(string, string.size)\n      \
    \  string + longestPalindrome", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val reversedString = longestPalindrome.substring(longestPalindrome.lastIndexOf('a')\
    \ + 1) + longestPalindrome.substring(0, longestPalindrome.lastIndexOf('a') + 1)\n\
    \        reversedString", "        val longestPalindromicSuffix = longestPalindromicSuffix(string,\
    \ string.length)\n        val reversedLongestPalindromicSuffix = reversedLongestPalindromicSuffix(longestPalindromicSuffix,\
    \ string.length)\n        val reversedLongestPalindromicSuffixString = reversedLongestPalindromicSuffix.mkString\n\
    \        val reversedLongestPalindromicSuffixString = reversedLongestPalindromicSuffixString.substring(0,string.length)\n\
    \        val reversedLongestPalindromicSuffixString = reversedLongestPalindromicSuffixString\
    \ + reversedLongestPalindromicSuffix\n        val reversedLongestPalindromicSuffixString\
    \ = reversedLongestPalindromicSuffixString + longestPalindromicSuffix\n      \
    \  val reversedLongestPalindromicSuffixString = reversedLongestPalindromicSuffixString\
    \ + longestPalindromicSuffix\n        val reversedLongestPalindromicSuffixString\
    \ = reversedLongestPalindromicSuffixString + longestPalindromicSuffix\n      \
    \  val reversedLongestPalindromicSuffixString = reversedLongestPalindromicSuffixString\
    \ + longestPalindromicSuffix\n        val reversedLongestPalindromicSuffixString\
    \ = reversedLongestPalindromicSuffixString + longestPalindromicSuffix\n      \
    \  val reversedLongestPalindromicSuffixString = reversedLongestPalindromicSuffixString\
    \ + longestPalindromicSuffix\n        val reversedLongestPalindromicSuffixString\
    \ = reversedLongestPalindromicSuffixString + longestPalindromicSuffix\n      \
    \  val reversedLongestPalindromicSuffixString = reversedLongestPalindromicSuffixString\
    \ + longestPalindromicSuffix\n        val reversedLongestPalindromicSuffixString\
    \ = reversedLongestPalindromicSuffixString + longestPalindromicSuffix\n      \
    \  val reversedLongestPalindromicSuffixString = reversedLongestPalindromicSuffixString\
    \ + longestPalindromicSuffix\n        val reversedLongestPalindromicSuffixString\
    \ = reversedLongestPalindromicSuffixString + longestPalindromicSuffix\n      \
    \  val reversedLongestPalindromicSuffixString = reversedLongestPalindromicSuffixString\
    \ + longestPalindromicSuffix\n        val reversedLongestPalindromicSuffixString\
    \ = ", "        val longestPalindrome = string.takeWhile(x => x != string.last).reverse\n\
    \        string + longestPalindrome", "        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedLongestPalindrome = longestPalindrome.reverse\n        longestPalindrome\
    \ + reversedLongestPalindrome", "        var longestPalindrome = string\n    \
    \    var longestPalindromeLength = string.length\n        var longestPalindromePrefix\
    \ = string\n        var longestPalindromeSuffix = string\n        var longestPalindromeSuffixReversed\
    \ = string\n        var longestPalindromeSuffixReversedLength = string.length\n\
    \        var longestPalindromeSuffixReversedPrefix = string\n        var longestPalindromeSuffixReversedSuffix\
    \ = string\n        var longestPalindromeSuffixReversedSuffixReversed = string\n\
    \        var longestPalindromeSuffixReversedSuffixReversedLength = string.length\n\
    \        var longestPalindromeSuffixReversedSuffixReversedPrefix = string\n  \
    \      var longestPalindromeSuffixReversedSuffixReversedSuffix = string\n    \
    \    var longestPalindromeSuffixReversedSuffixReversedSuffixReversed = string\n\
    \        var longestPalindromeSuffixReversedSuffixReversedSuffixReversedLength\
    \ = string.length\n        var longestPalindromeSuffixReversedSuffixReversedSuffixReversedPrefix\
    \ = string\n        var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffix\
    \ = string\n        var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversed\
    \ = string\n        var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedLength\
    \ = string.length\n        var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedPrefix\
    \ = string\n        var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffix\
    \ = string\n        var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversed\
    \ = string\n        var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedLength\
    \ = string.length\n        var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedPrefix\
    \ = string\n        var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffix\
    \ = string\n        var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversed\
    \ = string\n        var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedLength\
    \ = string.length\n        var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedPrefix\
    \ = string\n        var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversed",
  "        val longestPalindrome = longestPalindrome(string.trim())\n        val reversedString\
    \ = reverseString(longestPalindrome)\n        longestPalindrome + reversedString",
  "        val longestPalindrome = longestPalindrome(string.trim())\n        val reversedString\
    \ = reverseString(longestPalindrome)\n        longestPalindrome + reversedString",
  "        val longestPalindrome = findLongestPalindrome(string)\n        val reversedLongestPalindrome\
    \ = reverseString(longestPalindrome)\n        longestPalindrome + reversedLongestPalindrome",
  "        val longestPalindrome = findLongestPalindrome(string.trim())\n        val\
    \ reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindromicSuffix = string.substring(string.length-1)\n\
    \        val reversedLongestPalindromicSuffix = longestPalindromicSuffix.reverse\n\
    \        val reversedLongestPalindromicSuffixString = reversedLongestPalindromicSuffix.toString\n\
    \        val reversedLongestPalindromicSuffixStringLength = reversedLongestPalindromicSuffixString.length\n\
    \        val reversedLongestPalindromicSuffixStringLength = reversedLongestPalindromicSuffixString.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longestPalindromicSuffixStringLength = longestPalindromicSuffix.length\n\
    \        val longest", "        val longestPalindrome = string.substring(string.length/2).reverse\n\
    \        val reversedString = string.substring(0,string.length/2) + longestPalindrome\n\
    \        reversedString", "        val longestPalindromicSuffix = longestPalindromicSuffix(string,\
    \ string.size)\n        val longestPalindromicPrefixString = longestPalindromicPrefix(string,\
    \ longestPalindromicSuffix)\n        longestPalindromicPrefixString + longestPalindromicSuffix",
  "        val longestPalindrome = findLongestPalindrome(string.trim())\n        longestPalindrome\
    \ + reverseString(longestPalindrome)", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ string.substring(string.length-1)\n        val reversedString = string.substring(0,string.length-1)\n\
    \        val reversedLongestPalindrome = reversedString.substring(0,reversedString.length-1)\n\
    \        longestPalindrome + reversedLongestPalindrome", "        val longestPalindrome\
    \ = longestPalindrome(string.trim())\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = string.substring(0, string.length/2).reverse\n\
    \        val prefixString = string.substring(longestPalindrome.length, string.length)\n\
    \        val palindrome = longestPalindrome + prefixString\n        palindrome",
  "        val longestPalindrome = string.takeWhile(x => x != string.last).reverse\n\
    \        val prefix = string.takeWhile(x => x != longestPalindrome).reverse\n\
    \        prefix + longestPalindrome", "        val longestPalindrome = findLongestPalindrome(string.tail)\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = string.takeWhile(x => x\
    \ != string.last).reverse\n        string + longestPalindrome", "        val longestPalindrome\
    \ = string.takeWhile(_ != string.last).reverse\n        val reversedString = string.drop(longestPalindrome.length)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ findLongestPalindrome(string)\n        val reversedString = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ longestPalindrome(string.trim())\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = longestPalindrome(string, \"\")\n        longestPalindrome\
    \ + reverseString(longestPalindrome)", "        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = longestPalindrome(string.tail)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ longestPalindrome(string, string.size)\n        longestPalindrome + reverseString(longestPalindrome)",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = string.takeWhile(x\
    \ => x != string.last).reverse\n        val prefixString = string.takeWhile(x\
    \ => x != longestPalindrome).reverse\n        longestPalindrome + prefixString",
  "        val longestPalindrome = findLongestPalindrome(string.split(''))\n     \
    \   val reversedLongestPalindrome = reverseString(longestPalindrome)\n       \
    \ string + reversedLongestPalindrome", "        val longestPalindrome = longestPalindrome(string.tail)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindromicSuffix\
    \ = longestPalindromicSuffix(string, string.length)\n        val reversedString\
    \ = reverseString(string, longestPalindromicSuffix)\n        reversedString +\
    \ longestPalindromicSuffix", "        val longestPalindrome = findLongestPalindrome(string.dropRight(1))\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string.trim())\n        val reversedString = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ longestPalindrome(string.trim())\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = findLongestPalindrome(string.trim())\n        val\
    \ reversedLongestPalindrome = longestPalindrome.reverse\n        longestPalindrome\
    \ + reversedLongestPalindrome", "        val longestPalindrome = longestPalindrome(string,\
    \ string.size)\n        string + longestPalindrome", "        val longestPalindrome\
    \ = string.takeWhile(x => x == string.last).reverse\n        val prefixString\
    \ = string.takeWhile(x => x != longestPalindrome).reverse\n        longestPalindrome\
    \ + prefixString", "        val longestPalindrome = findLongestPalindrome(string.split(''))\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string.chars)\n        longestPalindrome + reverseString(longestPalindrome.charAt(longestPalindrome.length\
    \ - 1))", "        val longestPalindrome = findLongestPalindrome(string.dropRight(1))\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ string.takeWhile(c => c != string.last).reverse\n        val prefix = string.takeWhile(c\
    \ => c != longestPalindrome).reverse\n        prefix + longestPalindrome", " \
    \       val longestPalindrome = string.tails.reverse.mkString(\"\")\n        val\
    \ reversedString = string.takeRight(longestPalindrome.length).reverse\n      \
    \  longestPalindrome + reversedString", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ longestPalindrome(string, string.size)\n        string + longestPalindrome",
  "        val longestPalindrome = string.takeWhile(x => x.toString.toInt == x.toString.toInt.reverse).reverse\n\
    \        val reversedString = longestPalindrome.takeWhile(x => x.toString.toInt\
    \ == x.toString.toInt.reverse).reverse\n        longestPalindrome + reversedString",
  "        val longestPalindrome = findLongestPalindrome(string)\n        val reversedLongestPalindrome\
    \ = longestPalindrome.reverse\n        longestPalindrome + reversedLongestPalindrome",
  "        val longestPalindrome = findLongestPalindrome(string)\n        string +\
    \ longestPalindrome.reverse", "        val longestPalindrome = string.zipWithIndex.maxBy(_._2)._1\n\
    \        val reversedString = string.substring(longestPalindrome.length)\n   \
    \     string + reversedString + longestPalindrome", "        val longestPalindrome\
    \ = string.takeWhile(x => x != string.last).reverse\n        longestPalindrome\
    \ + string.dropWhile(x => x != longestPalindrome).reverse", "        val longestPalindrome\
    \ = findLongestPalindrome(string.tail)\n        string + longestPalindrome.reverse",
  "        val longestPalindromicSuffix = string.substring(string.length-1)\n    \
    \    val reversedString = string.substring(0,string.length-1)\n        val reversedLongestPalindromicSuffix\
    \ = reversedString.substring(0,reversedString.length-1)\n        val reversedLongestPalindromicSuffixString\
    \ = reversedLongestPalindromicSuffix.reverse\n        val reversedLongestPalindromicSuffixStringLength\
    \ = reversedLongestPalindromicSuffixString.length\n        val longestPalindromicSuffixStringLength\
    \ = longestPalindromicSuffix.length\n        val longestPalindromicSuffixStringLengthInReverse\
    \ = longestPalindromicSuffixStringLength - reversedLongestPalindromicSuffixStringLength\n\
    \        val longestPalindromicSuffixStringLengthInReverseString = longestPalindromicSuffixStringLengthInReverse.toString\n\
    \        val longestPalindromicSuffixStringLengthInReverseStringLength = longestPalindromicSuffixStringLengthInReverseString.length\n\
    \        val longestPalindromicSuffixStringLengthInReverseStringLengthInReverse\
    \ = longestPalindromicSuffixStringLengthInReverseStringLength - reversedLongestPalindromicSuffixStringLengthInReverse\n\
    \        val longestPalindromicSuffixStringLengthInReverseStringLengthInReverseString\
    \ = longestPalindromicSuffixStringLengthInReverseStringLengthInReverse.toString\n\
    \        val longestPalindromicSuffixStringLengthInReverseStringLengthInReverseStringLength\
    \ = longestPalindromicSuffixStringLengthInReverseStringLengthInReverseStringLength\
    \ - reversedLongestPalindromicSuffixStringLengthInReverseStringLengthInReverse\n\
    \        val longestPalindromicSuffixStringLengthInReverseStringLengthInReverseStringLengthInReverse\
    \ = longestPalindromicSuffixStringLengthInReverseStringLengthInReverseStringLengthInReverse.toString\n\
    \        val longestPalindromicSuffixStringLengthInReverseStringLengthInReverseStringLengthInReverseStringLength\
    \ = longestPalindromicSuffixStringLengthInReverseStringLengthInReverseStringLengthInReverse.toString\n\
    \        val longestPalindromicSuffixStringLengthInReverseStringLengthInReverseStringLengthInReverseStringLengthInReverse\
    \ = longestPalindromicSuffixStringLengthInReverseStringLengthInReverseStringLengthInReverseStringLengthInReverse.toString\n\
    \        val longestPalindromicSuffixStringLengthInReverseStringLengthInReverseStringLengthInReverseStringLengthInReverseStringLength\
    \ = longestPalindromicSuffixStringLengthInReverseStringLengthInReverseStringLengthInReverseStringLengthIn",
  "        val longestPalindrome = longestPalindrome(string.trim())\n        string\
    \ + longestPalindrome.reverse"]
stop_tokens:
- "\n    }\n"
