name: HumanEval_10_make_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Find the shortest palindrome that begins with a supplied string.\n    //\
  \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
  \ that is a palindrome.\n    // - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
  \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
  \    // 'catac'\n    def makePalindrome(string : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
  \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
  \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
  xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\"\
  )));\n    }\n\n}\n"
completions: ["        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedLongestPalindrome = longestPalindrome.reverse\n        longestPalindrome\
    \ + reversedLongestPalindrome", "        val longestPalindrome = string.takeWhile(_\
    \ != string.reverse.charAt(0))\n        val reversedString = string.reverse\n\
    \        val reversedLongestPalindrome = longestPalindrome.reverse\n        val\
    \ reversedLongestPalindromeLength = reversedLongestPalindrome.length\n       \
    \ val reversedLongestPalindromePrefix = reversedString.take(reversedLongestPalindromeLength)\n\
    \        val reversedLongestPalindromeSuffix = reversedString.drop(reversedLongestPalindromeLength)\n\
    \        val reversedLongestPalindromePrefix = reversedLongestPalindromePrefix\
    \ + reversedLongestPalindromeSuffix\n        longestPalindrome + reversedLongestPalindromePrefix",
  "        val longestPalindrome = string.substring(string.length / 2).reverse\n \
    \       val prefix = string.substring(0, string.length / 2)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindrome = longestPalindrome + reversedPrefix\n\
    \        palindrome", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string)\n        val reversedString = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ string.takeWhile(x => x != string.reverse.charAt(0))\n        val reversedString\
    \ = string.reverse\n        val reversedLongestPalindrome = longestPalindrome.reverse\n\
    \        val reversedLongestPalindromeSuffix = reversedLongestPalindrome + reversedString\n\
    \        longestPalindrome + reversedLongestPalindromeSuffix", "        val longestPalindrome\
    \ = findLongestPalindrome(string)\n        val reversedString = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ string.substring(string.length/2).reverse\n        val prefixString = string.substring(0,\
    \ string.length/2)\n        val suffixString = string.substring(string.length/2)\n\
    \        val palindrome = longestPalindrome + prefixString + suffixString\n  \
    \      palindrome", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val reversedLongestPalindrome = reverseString(longestPalindrome)\n  \
    \      longestPalindrome + reversedLongestPalindrome", "        val longestPalindrome\
    \ = longestPalindrome(string, string.size)\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = longestPalindrome(string.substring(0,string.length-1))\n\
    \        string + longestPalindrome", "        val longestPalindrome = string.takeWhile(x\
    \ => x == string.last).reverse\n        val prefixString = string.takeWhile(x\
    \ => x != longestPalindrome).reverse\n        longestPalindrome + prefixString",
  "        val longestPalindromicSuffix = string.takeWhile(c => c != string.last).reverse\n\
    \        val longestPalindromicPrefixString = string.takeWhile(c => c != longestPalindromicSuffix.last).reverse\n\
    \        longestPalindromicSuffix + longestPalindromicPrefixString", "       \
    \ val longestPalindrome = findLongestPalindrome(string.trim())\n        val reversedLongestPalindrome\
    \ = reverseString(longestPalindrome)\n        longestPalindrome + reversedLongestPalindrome",
  "        val longestPalindrome = findLongestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedString = longestPalindrome.trim().reverse\n        longestPalindrome\
    \ + reversedString", "        val longestPalindromicSuffix = string.substring(string.length-1)\n\
    \        val longestPalindromicPrefixString = string.substring(0, string.length-1)\n\
    \        val longestPalindromicPrefix = longestPalindromicPrefixString.reverse\n\
    \        val palindromicSuffix = longestPalindromicSuffix.reverse\n        val\
    \ palindrome = longestPalindromicPrefix + palindromicSuffix + longestPalindromicSuffix\n\
    \        palindrome", "        val longestPalindromicSuffix = longestPalindromicSuffix(string,\
    \ string.length)\n        val reversedLongestPalindromicSuffix = reversedLongestPalindromicSuffix(longestPalindromicSuffix,\
    \ longestPalindromicSuffix.length)\n        longestPalindromicSuffix ++ reversedLongestPalindromicSuffix",
  "        val longestPalindrome = string.takeWhile(x => x != string.reverse).reverse\n\
    \        longestPalindrome + longestPalindrome.takeWhile(x => x != longestPalindrome.reverse).reverse",
  "        val longestPalindrome = findLongestPalindrome(string.trim())\n        longestPalindrome\
    \ + longestPalindrome.trim().reverse"]
stop_tokens:
- "\n    }\n"
