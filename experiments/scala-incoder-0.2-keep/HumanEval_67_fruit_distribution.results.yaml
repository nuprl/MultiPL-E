language: scala
name: HumanEval_67_fruit_distribution
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples and \")\n      \
    \  val oranges = s.split(\"oranges and \")\n        val mangos = s.split(\"mango\
    \ and \")\n        val apples_count = apples.map(_.toInt).sum\n        val oranges_count\
    \ = oranges.map(_.toInt).sum\n        val mangos_count = mangos.map(_.toInt).sum\n\
    \        val apples_count = apples_count - oranges_count - mangos_count\n    \
    \    val oranges_count = oranges_count - apples_count\n        val mangos_count\
    \ = mangos_count - apples_count\n        val apples_count = apples_count - oranges_count\
    \ - mangos_count\n        val oranges_count = oranges_count - apples_count\n \
    \       val mangos_count = mangos_count - apples_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val oranges_count = oranges_count\
    \ - apples_count\n        val mangos_count = mangos_count - apples_count\n   \
    \     val apples_count = apples_count - oranges_count - mangos_count\n       \
    \ val oranges_count = oranges_count - apples_count\n        val mangos_count =\
    \ mangos_count - apples_count\n        val apples_count = apples_count - oranges_count\
    \ - mangos_count\n        val oranges_count = oranges_count - apples_count\n \
    \       val mangos_count = mangos_count - apples_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val oranges_count = oranges_count\
    \ - apples_count\n        val mangos_count = mangos_count - apples_count\n   \
    \     val apples_count = apples_count - oranges_count - mangos_count\n       \
    \ val oranges_count = oranges_count - apples_count\n        val mangos_count =\
    \ mangos_count - apples_count\n        val apples_count = apples_count - oranges_count\
    \ - mangos_count\n        val oranges_count = oranges_count - apples_count\n \
    \       val mangos_count = mangos_count - apples_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val oranges_count = oranges_count\
    \ - apples_count\n        val mangos_count = mangos_count - apples_count\n   \
    \     val apples_count = apples_count - oranges_count - mangos_count\n       \
    \ val oranges_count = oranges_count - apples_count\n        val mangos_count =\
    \ mangos_count - apples_count\n        val apples_count = apples_count - oranges_count\
    \ - mangos_count\n        val oranges_count = oranges_count - apples_count\n \
    \       val \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp0t_bi9la.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp0t_bi9la.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count\
    \ - oranges_count - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0t_bi9la.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_count -\
    \ apples_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0t_bi9la.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count - apples_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0t_bi9la.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - oranges_count\
    \ - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_cou"
  stdout: ''
  timestamp: 1659794982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt).sum\n\
    \        val oranges = s.split(\" \").map(_.toInt).sum\n        val mangos = s.split(\"\
    \ \").map(_.toInt).sum\n        val fruits = apples + oranges + mangos\n     \
    \   fruits - n - mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpo5tbpwnl.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpo5tbpwnl.scala:15)\n\
    \tat Problem$.main(tmpo5tbpwnl.scala:22)\n\tat Problem.main(tmpo5tbpwnl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val fruits = apples ++\
    \ oranges\n        val mangos = fruits.filter(x => x % 2 == 0)\n        fruits.length\
    \ - mangos.length\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpvp9rjpya.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpvp9rjpya.scala:15)\n\
    \tat Problem$.main(tmpvp9rjpya.scala:22)\n\tat Problem.main(tmpvp9rjpya.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples and \")\n      \
    \  val oranges = s.split(\"oranges and \")\n        val fruits = s.split(\"fruits\
    \ and \")\n        val apples_count = apples(0).split(\" \").length\n        val\
    \ oranges_count = oranges(0).split(\" \").length\n        val fruits_count = fruits(0).split(\"\
    \ \").length\n        val apples_sum = apples(0).split(\" \").map(_.toInt).sum\n\
    \        val oranges_sum = oranges(0).split(\" \").map(_.toInt).sum\n        val\
    \ fruits_sum = fruits(0).split(\" \").map(_.toInt).sum\n        val mangos = fruits_sum\
    \ - apples_sum - oranges_sum\n        fruits_sum - apples_sum - oranges_sum -\
    \ mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$2(tmpw2v3wpax.scala:22)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpw2v3wpax.scala:22)\n\
    \tat Problem$.main(tmpw2v3wpax.scala:28)\n\tat Problem.main(tmpw2v3wpax.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\"and\").map(_.toInt)\n        val mangos = s.split(\"\
    and\").map(_.toInt)\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpff0bfshu.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpff0bfshu.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mapples_count\e[0m = apples.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpff0bfshu.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges.sum\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpff0bfshu.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos.sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmangos_count\
    \ is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpff0bfshu.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mapples_sum\e[0m = apples.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_sum is already defined as \e[33mvalue\e[0m \e[35mapples_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpff0bfshu.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e["
  stdout: ''
  timestamp: 1659794982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(1).toLong\n        val mangoes\
    \ = n - apples - oranges\n        fruits.last.toLong - apples - oranges\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpri3hdqu0.scala:17)\n\
    \tat Problem$.main(tmpri3hdqu0.scala:22)\n\tat Problem.main(tmpri3hdqu0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val fruits = apples + oranges + mangos\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_count_in_basket\
    \ = apples_count - mangos_count\n        val oranges_count_in_basket = oranges_count\
    \ - mangos_count\n        val mangos_count_in_basket = apples_count_in_basket\
    \ - oranges_count_in_basket\n        fruits_count_in_basket - (apples_count_in_basket\
    \ + oranges_count_in_basket + mangos_count_in_basket)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq2v4xsry.scala:25:8 -------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        fruits_count_in_basket - (apples_count_in_basket\
    \ + oranges_count_in_basket + mangos_count_in_basket)\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: fruits_count_in_basket\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794978
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(1).toLong\n        val mangoes\
    \ = n - apples - oranges\n        fruits.last.toLong - apples - oranges\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpri3hdqu0.scala:17)\n\
    \tat Problem$.main(tmpri3hdqu0.scala:22)\n\tat Problem.main(tmpri3hdqu0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val fruits = apples + oranges + mangos\n\
    \        val basket = fruits.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples_count - oranges_count - mangos_count\n    \
    \    val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val apples_count = apples_count - oranges_count - mangos_count\n    \
    \    val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val apples_count = apples_count\
    \ - mangos_count\n        val apples_count = apples_count - oranges_count - mangos_count\n\
    \        val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val apples_count = apples_count\
    \ - mangos_count\n        val apples_count = apples_count - oranges_count - mangos_count\n\
    \        val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val apples_count = apples_count\
    \ - mangos_count\n        val apples_count = apples_count - oranges_count - mangos_count\n\
    \        val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val apples_count = apples_count\
    \ - mangos_count\n        val apples_count = apples_count - oranges_count - mangos_count\n\
    \        val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val apples_count = apples_count\
    \ - mangos_count\n        val apples_count = apples_count - oranges_count - mangos_count\n\
    \        val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val apples_count = apples_count\
    \ - mangos_count\n        val apples_count = apples_count - oranges_count - mangos_count\n\
    \        val apples_count = apple\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptpi51mes.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count\
    \ - oranges_count - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptpi51mes.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - mangos_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptpi51mes.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - oranges_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptpi51mes.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - mangos_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptpi51mes.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m"
  stdout: ''
  timestamp: 1659794981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val mangos = s.split(\"\
    \ \").map(_.toInt)\n        val basket = new mutable.ArrayBuffer[Int]()\n    \
    \    basket += n\n        basket += apples(0)\n        basket += oranges(0)\n\
    \        basket += mangos(0)\n        val total = apples(0) + oranges(0) + mangos(0)\n\
    \        val count = apples(0) + oranges(0)\n        val totalMangos = mangos(0)\n\
    \        val totalApples = apples(0)\n        val totalOranges = oranges(0)\n\
    \        val totalFruits = apples(0) + oranges(0) + mangos(0)\n        val totalMangoFruits\
    \ = mangos(0)\n        val totalAppleFruits = apples(0)\n        val totalOrangeFruits\
    \ = oranges(0)\n        val totalFruitsMango = apples(0) + oranges(0)\n      \
    \  val totalFruitsApple = apples(0)\n        val totalFruitsOrange = oranges(0)\n\
    \        val totalFruitsMangoFruits = mangos(0)\n        val totalFruitsAppleFruits\
    \ = apples(0)\n        val totalFruitsOrangeFruits = oranges(0)\n        val totalFruitsMangoFruitsApple\
    \ = mangos(0)\n        val totalFruitsAppleFruitsOrange = apples(0)\n        val\
    \ totalFruitsOrangeFruitsMango = oranges(0)\n        val totalFruitsMangoFruitsAppleFruits\
    \ = mangos(0)\n        val totalFruitsAppleFruitsOrangeFruits = apples(0)\n  \
    \      val totalFruitsOrangeFruitsMangoFruits = oranges(0)\n        val totalFruitsMangoFruitsAppleFruitsOrange\
    \ = mangos(0)\n        val totalFruitsAppleFruitsOrangeFruitsMango = apples(0)\n\
    \        val totalFruitsOrangeFruitsMangoFruitsAppleFruits = oranges(0)\n    \
    \    val totalFruitsMangoFruitsAppleFruitsOrangeFruits = mangos(0)\n        val\
    \ totalFru\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_1y4b2ox.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_1y4b2ox.scala:18:25\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mbasket\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_1y4b2ox.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = s.toInt\n        val mangos = n - apples - oranges - fruits\n\
    \        mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpwnws4dtl.scala:15)\n\
    \tat Problem$.main(tmpwnws4dtl.scala:22)\n\tat Problem.main(tmpwnws4dtl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0)\n        val\
    \ oranges = s.split(\"oranges\")(0)\n        val mangos = s.split(\"mango\")(0)\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_total = apples_count\
    \ + oranges_count + mangos_count\n        val oranges_total = apples_count - mangos_count\n\
    \        val mangos_total = apples_count - oranges_count\n        val apples_percentage\
    \ = apples_count / apples_total\n        val oranges_percentage = oranges_count\
    \ / oranges_total\n        val mangos_percentage = mangos_count / mangos_total\n\
    \        val apples_percentage_rounded = math.round(apples_percentage*100d).toInt\n\
    \        val oranges_percentage_rounded = math.round(oranges_percentage*100d).toInt\n\
    \        val mangos_percentage_rounded = math.round(mangos_percentage*100d).toInt\n\
    \        val apples_percentage_rounded_rounded = math.round(apples_percentage_rounded*100d).toInt\n\
    \        val oranges_percentage_rounded_rounded = math.round(oranges_percentage_rounded*100d).toInt\n\
    \        val mangos_percentage_rounded_rounded = math.round(mangos_percentage_rounded*100d).toInt\n\
    \        val apples_percentage_rounded_rounded_rounded = math.round(apples_percentage_rounded_rounded*100d).toInt\n\
    \        val oranges_percentage_rounded_rounded_rounded = math.round(oranges_percentage_rounded_rounded*100d).toInt\n\
    \        val mangos_percentage_rounded_rounded_rounded = math.round(mangos_percentage_rounded_rounded*100d).toInt\n\
    \        val apples_percentage_rounded_rounded_rounded_rounded = math.round(apples_percentage_rounded_rounded_rounded*100d).toInt\n\
    \        val oranges_percentage_rounded_rounded_rounded_rounded = math.round(oranges_percentage_rounded_rounded_rounded*100d).toInt\n\
    \        val mangos_percentage_rounded_rounded_rounded_rounded = math.round(mangos_percentage_rounded_rounded_rounded*100d).toInt\n\
    \        val apples_percentage_rounded_rounded_rounded_rounded_rounded = math.round(apples_percentage_rounded_rounded_rounded_rounded*100d).toInt\n\
    \        val oranges_percentage_rounded_rounded_rounded_rounded_rounded = math.round(oranges_percentage_roun\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmoolcojw.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmoolcojw.scala:40:84\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e\
    [36moranges_percentage_rounded_rounded_rounded_rounded_rounded\e[0m = math.round(oranges_percentage_roun\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                   Not found: oranges_percentage_roun\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmoolcojw.scala:41:5 ---------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val fruits = apples + oranges + mangos\n\
    \        val basket = fruits.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples_count - oranges_count - mangos_count\n    \
    \    val apples_count = apples_count / fruits\n        val oranges_count = oranges_count\
    \ / fruits\n        val mangos_count = mangos_count / fruits\n        val mangos_count\
    \ = mangos_count - apples_count * fruits\n        fruits_count = apples_count\
    \ + oranges_count + mangos_count\n        fruits_count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbdxmt6po.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count\
    \ - oranges_count - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbdxmt6po.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count / fruits\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbdxmt6po.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_count /\
    \ fruits\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbdxmt6po.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count / fruits\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbdxmt6po.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count - apples_count\
    \ *"
  stdout: ''
  timestamp: 1659794977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val basket = new mutable.HashMap[String,\
    \ Int]()\n        basket.put(\"apples\", apples)\n        basket.put(\"oranges\"\
    , oranges)\n        basket.put(\"mangos\", mangos)\n        val totalFruits =\
    \ apples + oranges + mangos\n        val fruits = basket.filter(_._2 > 0).map(_._1).sum\n\
    \        fruits - totalFruits\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1sg3kl95.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \")(0)\n        val oranges\
    \ = s.split(\" \")(1)\n        val fruits = s.split(\" \")(2)\n        val apples_count\
    \ = apples.toLong\n        val oranges_count = oranges.toLong\n        val fruits_count\
    \ = fruits.toLong\n        val apples_count = apples_count - oranges_count\n \
    \       val oranges_count = oranges_count - apples_count\n        val fruits_count\
    \ = fruits_count - apples_count\n        fruits_count - apples_count + oranges_count\
    \ - apples_count + apples_count - oranges_count + oranges_count - apples_count\
    \ + apples_count - oranges_count + oranges_count - apples_count + apples_count\
    \ - oranges_count\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9fsxddf4.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count\
    \ - oranges_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9fsxddf4.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_count -\
    \ apples_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9fsxddf4.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfruits_count\e[0m = fruits_count - apples_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfruits_count is already defined as \e[33mvalue\e[0m \e[35mfruits_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1659794978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val mangos = s.split(\"\
    \ \").map(_.toInt)\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3rkk155x.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3rkk155x.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mapples_count\e[0m = apples.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3rkk155x.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges.sum\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3rkk155x.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos.sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmangos_count\
    \ is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3rkk155x.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mapples_sum\e[0m = apples.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_sum is already defined as \e[33mvalue\e[0m \e[35mapples_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3rkk155x.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e["
  stdout: ''
  timestamp: 1659794982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(1).toLong\n        val mangoes\
    \ = n - apples - oranges\n        fruits.last.toLong - apples - oranges\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpri3hdqu0.scala:17)\n\
    \tat Problem$.main(tmpri3hdqu0.scala:22)\n\tat Problem.main(tmpri3hdqu0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = n - fruits\n    \
    \    fruits + mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpp9010woi.scala:15)\n\
    \tat Problem$.main(tmpp9010woi.scala:22)\n\tat Problem.main(tmpp9010woi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \")(0).toLong\n      \
    \  val oranges = s.split(\" \")(1).toLong\n        val mangos = s.split(\" \"\
    )(2).toLong\n        val totalFruits = apples + oranges + mangos\n        val\
    \ appleFruits = apples - mangos\n        val orangeFruits = oranges - mangos\n\
    \        val mangoFruits = mangos - apples\n        val totalFruitsWithApples\
    \ = appleFruits + orangeFruits + mangoFruits\n        val appleFruitsWithApples\
    \ = appleFruits - mangoFruits\n        val orangeFruitsWithApples = orangeFruits\
    \ - mangoFruits\n        val mangoFruitsWithApples = mangoFruits - appleFruits\n\
    \        val totalFruitsWithApplesAndOranges = appleFruitsWithApples + orangeFruitsWithApples\
    \ + mangoFruitsWithApples\n        val appleFruitsWithApplesAndOranges = appleFruitsWithApples\
    \ - mangoFruitsWithApples\n        val orangeFruitsWithApplesAndOranges = orangeFruitsWithApples\
    \ - mangoFruitsWithApples\n        val mangoFruitsWithApplesAndOranges = mangoFruitsWithApples\
    \ - appleFruitsWithApples\n        val totalFruitsWithApplesAndOrangesAndMangos\
    \ = appleFruitsWithApplesAndOranges + orangeFruitsWithApplesAndOranges + mangoFruitsWithApplesAndOranges\n\
    \        val appleFruitsWithApplesAndOrangesAndMangos = appleFruitsWithApplesAndOranges\
    \ - mangoFruitsWithApplesAndOranges\n        val orangeFruitsWithApplesAndOrangesAndMangos\
    \ = orangeFruitsWithApplesAndOranges - mangoFruitsWithApplesAndOranges\n     \
    \   val mangoFruitsWithApplesAndOrangesAndMangos = mangoFruitsWithApplesAndOranges\
    \ - appleFruitsWithApplesAndOranges\n        val totalFruitsWithApplesAndOrangesAndMangosAndTotal\
    \ = appleFruitsWithApplesAndOrangesAndMangos + orangeFruitsWithApplesAndOrange\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppnb47x7r.scala:34:106 -----------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mtotalFruitsWithApplesAndOrangesAndMangosAndTotal\e\
    [0m = appleFruitsWithApplesAndOrangesAndMangos + orangeFruitsWithApplesAndOrange\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: orangeFruitsWithApplesAndOrange\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppnb47x7r.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val basket = new mutable.HashMap[String,\
    \ Int]()\n        basket.put(\"apples\", apples)\n        basket.put(\"oranges\"\
    , oranges)\n        basket.put(\"mangos\", mangos)\n        val totalFruits =\
    \ apples + oranges + mangos\n        val fruits = basket.filter(_._2 > 0).map(_._1).sum\n\
    \        fruits - totalFruits\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1sg3kl95.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \")(0).toLong\n      \
    \  val oranges = s.split(\" \")(1).toLong\n        val fruits = s.split(\" \"\
    )(2).toLong\n        val apples_oranges = apples + oranges\n        val apples_fruits\
    \ = apples + fruits\n        val oranges_fruits = oranges + fruits\n        val\
    \ apples_oranges_fruits = apples_oranges + fruits\n        val apples_oranges_oranges_fruits\
    \ = apples_oranges + oranges_fruits\n        val apples_oranges_oranges_oranges_fruits\
    \ = apples_oranges + oranges_fruits + fruits\n        val apples_oranges_oranges_oranges_oranges_fruits\
    \ = apples_oranges + oranges_fruits + fruits + fruits\n        val apples_oranges_oranges_oranges_oranges_oranges_fruits\
    \ = apples_oranges + oranges_fruits + fruits + fruits + fruits\n        val apples_oranges_oranges_oranges_oranges_oranges_oranges_fruits\
    \ = apples_oranges + oranges_fruits + fruits + fruits + fruits + fruits\n    \
    \    val apples_oranges_oranges_oranges_oranges_oranges_oranges_fruits = apples_oranges\
    \ + oranges_fruits + fruits + fruits + fruits + fruits + fruits\n        val apples_oranges_oranges_oranges_oranges_oranges_oranges_oranges_fruits\
    \ = apples_oranges + oranges_fruits + fruits + fruits + fruits + fruits + fruits\
    \ + fruits\n        val apples_oranges_oranges_oranges_oranges_oranges_oranges_oranges_fruits\
    \ = apples_oranges + oranges_fruits + fruits + fruits + fruits + fruits + fruits\
    \ + fruits\n        val apples_oranges_oranges_oranges_oranges_oranges_oranges_oranges_oranges_fruits\
    \ = apples_oranges + oranges_fruits + fruits + fruits + fruits + fruits + fruits\
    \ + fruits + fruits\n        val apples_oranges_oranges_oranges_oranges_oranges_oranges_oranges_oranges_oranges_fruits\
    \ = apples_oranges + oranges_fruits + fruits + fruits + fruits + fruits + fruits\
    \ + fruits + fruits + fruits\n        val apples_oranges_oranges_oranges_oranges_oranges_oranges_oranges_oranges_oranges_fruits\
    \ = apples_oranges + oranges_fruits + fruits + fruits + fruits + fruits + \n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdj74v7yj.scala:32:169 --------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mapples_oranges_oranges_oranges_oranges_oranges_oranges_oranges_oranges_oranges_fruits\e\
    [0m = apples_oranges + oranges_fruits + fruits + fruits + fruits + fruits + \n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdj74v7yj.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mapples_oranges_oranges_oranges_oranges_oranges_oranges_fruits\e\
    [0m = apples_oranges + oranges_fruits + fruits + fruits + fruits + fruits + fruits\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_oranges_oranges_oranges_oranges_oranges_oranges_fruits\
    \ is already defined as \e[33mvalue\e[0m \e[35mapples_oranges_oranges_oranges_oranges_oranges_oranges_fruits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdj74v7yj.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mapples_oranges_oranges_oranges_oranges_oranges_oranges_oranges_fruits\e\
    [0m = apples_oranges + oranges_fruits + fruits + fruits + fruits + fruits + fruits\
    \ + fruits\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_oranges_oranges_oranges_oranges_oranges_oranges_oranges_fruits\
    \ is already defined as \e[33mvalue\e[0m "
  stdout: ''
  timestamp: 1659794981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val mangos = s.split(\"\
    \ \").map(_.toInt)\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_sum\
    \ = apples.sum\n        val oranges_sum = oranges.sum\n        val mangos_sum\
    \ = mangos.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3rkk155x.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3rkk155x.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mapples_count\e[0m = apples.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3rkk155x.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges.sum\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3rkk155x.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos.sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmangos_count\
    \ is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3rkk155x.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mapples_sum\e[0m = apples.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_sum is already defined as \e[33mvalue\e[0m \e[35mapples_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3rkk155x.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e["
  stdout: ''
  timestamp: 1659794982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = n - apples - oranges\n        val fruits = apples + oranges\
    \ + mangos\n        fruits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpryliqr34.scala:15)\n\
    \tat Problem$.main(tmpryliqr34.scala:22)\n\tat Problem.main(tmpryliqr34.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val fruits = apples + oranges + mangos\n\
    \        val basket = fruits.toLong\n        val apples_count = apples / fruits\n\
    \        val oranges_count = oranges / fruits\n        val mangos_count = mangos\
    \ / fruits\n        val apples_remain = apples % fruits\n        val oranges_remain\
    \ = oranges % fruits\n        val mangos_remain = mangos % fruits\n        val\
    \ apples_total = apples_count + apples_remain\n        val oranges_total = oranges_count\
    \ + oranges_remain\n        val mangos_total = mangos_count + mangos_remain\n\
    \        val apples_remain = apples_total - apples_count * fruits\n        val\
    \ oranges_remain = oranges_total - oranges_count * fruits\n        val mangos_remain\
    \ = mangos_total - mangos_count * fruits\n        val apples_total = apples_count\
    \ * fruits\n        val oranges_total = oranges_count * fruits\n        val mangos_total\
    \ = mangos_count * fruits\n        val apples_remain = apples_total - apples_count\
    \ * fruits\n        val oranges_remain = oranges_total - oranges_count * fruits\n\
    \        val mangos_remain = mangos_total - mangos_count * fruits\n        val\
    \ apples_total = apples_count * fruits\n        val oranges_total = oranges_count\
    \ * fruits\n        val mangos_total = mangos_count * fruits\n        val apples_remain\
    \ = apples_total - apples_count * fruits\n        val oranges_remain = oranges_total\
    \ - oranges_count * fruits\n        val mangos_remain = mangos_total - mangos_count\
    \ * fruits\n        val apples_total = apples_count * fruits\n        val oranges_total\
    \ = oranges_count * fruits\n        val mangos_total = mangos_count * fruits\n\
    \        val apples_remain = apples_total - apples_count * fruits\n        val\
    \ oranges_remain = oranges_total - oranges_count * fruits\n        val mangos_remain\
    \ = mangos_total - mangos_count * fruits\n        val apples_total = apples_count\
    \ * fruits\n        val oranges_total = oranges_count * fruits\n        val mangos_total\
    \ = mangos_count * fruits\n        val apples_remain = apples_total \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgns598nh.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mapples_remain\e[0m = apples_total\
    \ - apples_count * fruits\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_remain is already defined as \e[33mvalue\e[0m \e[35mapples_remain\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgns598nh.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36moranges_remain\e[0m = oranges_total\
    \ - oranges_count * fruits\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_remain is already defined as \e[33mvalue\e[0m \e[35moranges_remain\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgns598nh.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mmangos_remain\e[0m = mangos_total -\
    \ mangos_count * fruits\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_remain is already defined as \e[33mvalue\e[0m \e[35mmangos_remain\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgns598nh.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mapples_total\e[0m = apples_count * fruits\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mapples_total is already defined as \e[33mvalue\e[0m \e[35mapples_total\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgns598nh.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mv"
  stdout: ''
  timestamp: 1659794981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(1).toLong\n        val mango\
    \ = fruits(2).toLong\n        val apples_count = apples + oranges\n        val\
    \ oranges_count = oranges\n        val mango_count = apples_count - oranges_count\n\
    \        val apples_count = apples + oranges + mango\n        val oranges_count\
    \ = oranges\n        val mango_count = apples_count - oranges_count - mango\n\
    \        val apples_count = apples + oranges + mango\n        val oranges_count\
    \ = oranges\n        val mango_count = apples_count - oranges_count - mango\n\
    \        val apples_count = apples + oranges + mango\n        val oranges_count\
    \ = oranges\n        val mango_count = apples_count - oranges_count - mango\n\
    \        val apples_count = apples + oranges + mango\n        val oranges_count\
    \ = oranges\n        val mango_count = apples_count - oranges_count - mango\n\
    \        val apples_count = apples + oranges + mango\n        val oranges_count\
    \ = oranges\n        val mango_count = apples_count - oranges_count - mango\n\
    \        val apples_count = apples + oranges + mango\n        val oranges_count\
    \ = oranges\n        val mango_count = apples_count - oranges_count - mango\n\
    \        val apples_count = apples + oranges + mango\n        val oranges_count\
    \ = oranges\n        val mango_count = apples_count - oranges_count - mango\n\
    \        val apples_count = apples + oranges + mango\n        val oranges_count\
    \ = oranges\n        val mango_count = apples_count - oranges_count - mango\n\
    \        val apples_count = apples + oranges + mango\n        val oranges_count\
    \ = oranges\n        val mango_count = apples_count - oranges_count - mango\n\
    \        val apples_count = apples + oranges + mango\n        val oranges_count\
    \ = oranges\n        val mango_count = apples_count - oranges_count - mango\n\
    \        val apples_count = apples + oranges + mango\n        val oranges_count\
    \ = oranges\n        val mango_count = apples_count - oranges_count - mango\n\
    \        val apples_count = apples + oranges + mango\n        val oranges_count\
    \ = oranges\n        val mango_count = apples_count - oranges_count - mango\n\
    \        val apples_count = apples + oranges + mango\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpspzblnbv.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples\
    \ + oranges + mango\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpspzblnbv.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0moranges_count\
    \ is already defined as \e[33mvalue\e[0m \e[35moranges_count\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpspzblnbv.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmango_count\e[0m = apples_count - oranges_count - mango\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmango_count is already defined as \e[33mvalue\e[0m \e[35mmango_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpspzblnbv.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples + oranges\
    \ + mango\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpspzblnbv.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0"
  stdout: ''
  timestamp: 1659794981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val fruits = apples + oranges + mangos\n\
    \        val basket = fruits.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples_count - oranges_count - mangos_count\n    \
    \    val oranges_count = oranges_count - apples_count\n        val mangos_count\
    \ = mangos_count - apples_count - oranges_count\n        val apples_count = apples_count\
    \ - mangos_count\n        val oranges_count = oranges_count - apples_count\n \
    \       val mangos_count = mangos_count - oranges_count\n        val apples_count\
    \ = apples_count - oranges_count\n        val oranges_count = oranges_count -\
    \ apples_count\n        val mangos_count = mangos_count - apples_count\n     \
    \   val apples_count = apples_count - mangos_count\n        val oranges_count\
    \ = oranges_count - apples_count\n        val mangos_count = mangos_count - oranges_count\n\
    \        val apples_count = apples_count - oranges_count\n        val oranges_count\
    \ = oranges_count - apples_count\n        val mangos_count = mangos_count - apples_count\n\
    \        val apples_count = apples_count - mangos_count\n        val oranges_count\
    \ = oranges_count - apples_count\n        val mangos_count = mangos_count - oranges_count\n\
    \        val apples_count = apples_count - oranges_count\n        val oranges_count\
    \ = oranges_count - apples_count\n        val mangos_count = mangos_count - apples_count\n\
    \        val apples_count = apples_count - mangos_count\n        val oranges_count\
    \ = oranges_count - apples_count\n        val mangos_count = mangos_count - oranges_count\n\
    \        val apples_count = apples_count - oranges_count\n        val oranges_count\
    \ = oranges_count - apples_count\n        val mangos_count = mangos_count - apples_count\n\
    \        val apples_count = apples_count - mangos_count\n        val oranges_count\
    \ = oranges_count - apples_count\n        val mangos_count = mangos_count - oranges_count\n\
    \        val apples_count = apples_count - oranges_count\n        val oranges_count\
    \ = oranges_count - apples_count\n        val mangos_count = mangos_count - apples_count\n\
    \        val apples_count = apples_count - mangos_count\n        val oranges_count\
    \ = oranges_count - apples_count\n        val mang\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmox5mt66.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmox5mt66.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mapples_count\e[0m = apples_count - oranges_count - mangos_count\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmox5mt66.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_count -\
    \ apples_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmox5mt66.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count - apples_count\
    \ - oranges_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmox5mt66.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - mangos_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overload"
  stdout: ''
  timestamp: 1659794981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = n - apples - oranges\n        val apples_count = apples.toInt\n\
    \        val oranges_count = oranges.toInt\n        val mangos_count = n - apples_count\
    \ - oranges_count\n        val apples_sum = apples_count.toInt\n        val oranges_sum\
    \ = oranges_count.toInt\n        val mangos_sum = n - apples_sum - oranges_sum\n\
    \        val apples_percentage = apples_sum.toDouble / apples_count.toDouble\n\
    \        val oranges_percentage = oranges_sum.toDouble / oranges_count.toDouble\n\
    \        val mangos_percentage = mangos_sum.toDouble / mangos_count.toDouble\n\
    \        val mangos_count = mangos_sum.toInt\n        apples_percentage * oranges_percentage\
    \ * mangos_percentage\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjzkh4rou.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_sum.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpjzkh4rou.scala:28:8 ---------------------\e[0m\e[0m\n\
    \e[31m28 |\e[0m        apples_percentage * oranges_percentage * mangos_percentage\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = n - fruits\n    \
    \    fruits\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpfqs9b7al.scala:15)\n\
    \tat Problem$.main(tmpfqs9b7al.scala:22)\n\tat Problem.main(tmpfqs9b7al.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = n.toInt\n        val oranges = s.toInt\n\
    \        val mangos = apples - oranges\n        mangos\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmp6s9ol6h1.scala:16)\n\
    \tat Problem$.main(tmp6s9ol6h1.scala:21)\n\tat Problem.main(tmp6s9ol6h1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = n - apples - oranges\n        val fruits = apples + oranges\
    \ + mangos\n        fruits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpryliqr34.scala:15)\n\
    \tat Problem$.main(tmpryliqr34.scala:22)\n\tat Problem.main(tmpryliqr34.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0)\n        val\
    \ oranges = s.split(\"oranges\")(0)\n        val mangos = s.split(\"mango\")(0)\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_total = apples_count\
    \ + apples_count - oranges_count - mangos_count\n        val oranges_total = oranges_count\
    \ + oranges_count - apples_count - mangos_count\n        val mangos_count = apples_total\
    \ + oranges_total - apples_count - mangos_count\n        mangos_count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt5mjdd46.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = apples_total\
    \ + oranges_total - apples_count - mangos_count\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659794985
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = n - fruits\n    \
    \    fruits - mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmp1pv1dj2v.scala:15)\n\
    \tat Problem$.main(tmp1pv1dj2v.scala:22)\n\tat Problem.main(tmp1pv1dj2v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = n - fruits\n    \
    \    fruits\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpfqs9b7al.scala:15)\n\
    \tat Problem$.main(tmpfqs9b7al.scala:22)\n\tat Problem.main(tmpfqs9b7al.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \")(0).toLong\n      \
    \  val oranges = s.split(\" \")(1).toLong\n        val mangos = s.split(\" \"\
    )(2).toLong\n        val total = apples + oranges + mangos\n        val apples_count\
    \ = apples.toInt\n        val oranges_count = oranges.toInt\n        val mangos_count\
    \ = mangos.toInt\n        val apples_count = apples_count - mangos_count\n   \
    \     val oranges_count = oranges_count - apples_count\n        val mangos_count\
    \ = mangos_count - apples_count - oranges_count\n        val apples_count = apples_count\
    \ + oranges_count + mangos_count\n        apples_count + mangos_count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzltr681l.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count\
    \ - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzltr681l.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_count -\
    \ apples_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzltr681l.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count - apples_count\
    \ - oranges_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzltr681l.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count + oranges_count\
    \ + mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1659794987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = n - apples - oranges\n        val fruits = apples + oranges\
    \ + mangos\n        fruits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpryliqr34.scala:15)\n\
    \tat Problem$.main(tmpryliqr34.scala:22)\n\tat Problem.main(tmpryliqr34.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \")(0)\n        val oranges\
    \ = s.split(\" \")(1)\n        val fruits = s.split(\" \")(2)\n        val apples_count\
    \ = apples.toLong\n        val oranges_count = oranges.toLong\n        val fruits_count\
    \ = fruits.toLong\n        val mango_fruits = fruits_count - apples_count - oranges_count\n\
    \        mango_fruits\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmphm4ygyo1.scala:19)\n\
    \tat Problem$.main(tmphm4ygyo1.scala:25)\n\tat Problem.main(tmphm4ygyo1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0).trim\n   \
    \     val oranges = s.split(\"oranges\")(0).trim\n        val mangos = s.split(\"\
    mango\")(0).trim\n        val apples_count = apples.toInt\n        val oranges_count\
    \ = oranges.toInt\n        val mangos_count = mangos.toInt\n        val apples_count\
    \ = apples_count - oranges_count\n        val oranges_count = oranges_count -\
    \ apples_count\n        val mangos_count = mangos_count - apples_count - oranges_count\n\
    \        val apples_count = apples_count - mangos_count\n        val oranges_count\
    \ = oranges_count - apples_count - mangos_count\n        val mangos_count = mangos_count\
    \ - apples_count - oranges_count - mangos_count\n        val apples_count = apples_count\
    \ - mangos_count - oranges_count\n        val oranges_count = oranges_count -\
    \ apples_count - mangos_count - oranges_count\n        val mangos_count = mangos_count\
    \ - apples_count - oranges_count - mangos_count - apples_count\n        val apples_count\
    \ = apples_count - mangos_count - oranges_count - mangos_count - apples_count\
    \ - oranges_count\n        val oranges_count = oranges_count - apples_count -\
    \ mangos_count - apples_count - oranges_count - mangos_count - apples_count\n\
    \        val mangos_count = mangos_count - apples_count - oranges_count - mangos_count\
    \ - apples_count - oranges_count - mangos_count - apples_count - oranges_count\n\
    \        val apples_count = apples_count - mangos_count - oranges_count - mangos_count\
    \ - apples_count - oranges_count - mangos_count - apples_count - oranges_count\
    \ - mangos_count\n        val oranges_count = oranges_count - apples_count - mangos_count\
    \ - apples_count - oranges_count - mangos_count - apples_count - oranges_count\
    \ - mangos_count - apples_count - oranges_count\n        val mangos_count = mangos_count\
    \ - apples_count - oranges_count - mangos_count - apples_count - oranges_count\
    \ - mangos_count - apples_count - oranges_count - mangos_count - apples_count\
    \ - oranges_count - mangos_count\n        val apples_count = apples_count - mangos_count\
    \ - oranges_count - mangos_count - apples_count - oranges_count - mangos_count\
    \ - apples_count - oranges_count - mangos_count - apples_count \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn5hqzv0j.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count\
    \ - oranges_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn5hqzv0j.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_count -\
    \ apples_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn5hqzv0j.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count - apples_count\
    \ - oranges_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn5hqzv0j.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - mangos_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn5hqzv0j.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36moranges_co"
  stdout: ''
  timestamp: 1659794991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val fruits = apples + oranges + mangos\n\
    \        val basket = fruits.toLong\n        val totalFruits = fruits.toLong\n\
    \        val applesInBasket = apples.toLong\n        val orangesInBasket = oranges.toLong\n\
    \        val mangoInBasket = mangos.toLong\n        val totalFruitsInBasket =\
    \ fruits.toLong\n        val applesInBasketPercentage = applesInBasket.toDouble\
    \ / totalFruits\n        val orangesInBasketPercentage = orangesInBasket.toDouble\
    \ / totalFruits\n        val mangoInBasketPercentage = mangoInBasket.toDouble\
    \ / totalFruits\n        val totalFruitsInBasketPercentage = totalFruitsInBasket.toDouble\
    \ / totalFruits\n        val applesInBasketPercentagePercentage = applesInBasketPercentage.toDouble\
    \ / totalFruits\n        val orangesInBasketPercentagePercentage = orangesInBasketPercentage.toDouble\
    \ / totalFruits\n        val mangoInBasketPercentagePercentage = mangoInBasketPercentage.toDouble\
    \ / totalFruits\n        val totalFruitsInBasketPercentagePercentage = totalFruitsInBasketPercentage.toDouble\
    \ / totalFruits\n        val applesInBasketPercentagePercentagePercentage = applesInBasketPercentagePercentage.toDouble\
    \ / totalFruits\n        val orangesInBasketPercentagePercentage = orangesInBasketPercentagePercentage.toDouble\
    \ / totalFruits\n        val mangoInBasketPercentagePercentagePercentage = mangoInBasketPercentagePercentage.toDouble\
    \ / totalFruits\n        val totalFruitsInBasketPercentagePercentagePercentage\
    \ = totalFruitsInBasketPercentagePercentage.toDouble / totalFruits\n        val\
    \ applesInBasketPercentagePercentagePercentagePercentage = applesInBasketPercentagePercentagePercentage.toDouble\
    \ / totalFruits\n        val orangesInBasketPercentagePercentagePercentage = orangesInBasketPercentagePercentage.toDouble\
    \ / totalFruits\n        val mangoInBasketPercentagePercentagePercentage = mangoInBasketPercentagePercentage.toDouble\
    \ / totalFruits\n        val totalFruitsInBasketPercentagePercentagePercentage\
    \ = totalFruitsInBasketPercentagePercentage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp79cbac2y.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36morangesInBasketPercentagePercentage\e\
    [0m = orangesInBasketPercentagePercentage.toDouble / totalFruits\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0morangesInBasketPercentagePercentage is already defined as\
    \ \e[33mvalue\e[0m \e[35morangesInBasketPercentagePercentage\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp79cbac2y.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmangoInBasketPercentagePercentagePercentage\e[0m = mangoInBasketPercentagePercentage.toDouble\
    \ / totalFruits\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoInBasketPercentagePercentagePercentage is already defined\
    \ as \e[33mvalue\e[0m \e[35mmangoInBasketPercentagePercentagePercentage\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp79cbac2y.scala:40:12 ---------------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m        \e[33mval\e[0m \e[36mtotalFruitsInBasketPercentagePercentagePercentage\e\
    [0m = totalFruitsInBasketPercentagePercentage\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalFruitsInBasketPercentagePercentagePercentage is already\
    \ defined as \e[33mvalue\e[0m \e[35mtotalFruitsInBasketPercentagePercentagePercentage\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp79cbac2y.scala:41:5 ---------------------\e[0m\e[0m\n\
    \e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0"
  stdout: ''
  timestamp: 1659794991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val arr = s.split(\" \")\n        val apples =\
    \ arr.filter(_.equals(\"apples\")).map(_.toInt)\n        val oranges = arr.filter(_.equals(\"\
    oranges\")).map(_.toInt)\n        val mangoes = arr.filter(_.equals(\"mangoes\"\
    )).map(_.toInt)\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangoes_count = mangoes.sum\n        val total_count\
    \ = apples_count + oranges_count + mangoes_count\n        val apples_count = apples.sum\n\
    \        val oranges_count = oranges.sum\n        val mangoes_count = mangoes.sum\n\
    \        val total_count = apples_count + oranges_count + mangoes_count\n    \
    \    val apples_count = apples.sum\n        val oranges_count = oranges.sum\n\
    \        val mangoes_count = mangoes.sum\n        val total_count = apples_count\
    \ + oranges_count + mangoes_count\n        val apples_count = apples.sum\n   \
    \     val oranges_count = oranges.sum\n        val mangoes_count = mangoes.sum\n\
    \        val total_count = apples_count + oranges_count + mangoes_count\n    \
    \    val apples_count = apples.sum\n        val oranges_count = oranges.sum\n\
    \        val mangoes_count = mangoes.sum\n        val total_count = apples_count\
    \ + oranges_count + mangoes_count\n        val apples_count = apples.sum\n   \
    \     val oranges_count = oranges.sum\n        val mangoes_count = mangoes.sum\n\
    \        val total_count = apples_count + oranges_count + mangoes_count\n    \
    \    val apples_count = apples.sum\n        val oranges_count = oranges.sum\n\
    \        val mangoes_count = mangoes.sum\n        val total_count = apples_count\
    \ + oranges_count + mangoes_count\n        val apples_count = apples.sum\n   \
    \     val oranges_count = oranges.sum\n        val mangoes_count = mangoes.sum\n\
    \        val total_count = apples_count + oranges_count + mangoes_count\n    \
    \    val apples_count = apples.sum\n        val oranges_count = oranges.sum\n\
    \        val mangoes_count = mangoes.sum\n        val total_count = apples_count\
    \ + oranges_count + mangoes_count\n        val apples_count = apples.sum\n   \
    \     val oranges_count = oranges.sum\n        val mangoes_count = mangoes.sum\n\
    \        val total_count = \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe4dro0uf.scala:58:25 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mval\e[0m \e[36mtotal_count\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpe4dro0uf.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpe4dro0uf.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges.sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0moranges_count\
    \ is already defined as \e[33mvalue\e[0m \e[35moranges_count\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe4dro0uf.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmangoes_count\e[0m = mangoes.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoes_count is already defined as \e[33mvalue\e[0m \e[35mmangoes_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe4dro0uf.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mtotal_count\e[0m = apples_count + oranges_count\
    \ + mangoes_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotal_count is already defined as \e[33mvalue\e[0m \e[35mtotal_c"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt).sum\n\
    \        val oranges = s.split(\" \").map(_.toInt).sum\n        val mangos = s.split(\"\
    \ \").map(_.toInt).sum\n        val fruits  = apples + oranges + mangos\n    \
    \    val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_count = apple\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3i1sahib.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3i1sahib.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0moranges_count\
    \ is already defined as \e[33mvalue\e[0m \e[35moranges_count\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3i1sahib.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmangos_count\e[0m = mangos.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3i1sahib.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples.toLong\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3i1sahib.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0moranges_count\
    \ is already defined as \e[33mva"
  stdout: ''
  timestamp: 1659794991
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangoes = n - fruits\n   \
    \     mangoes\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmp1cbg2eyg.scala:15)\n\
    \tat Problem$.main(tmp1cbg2eyg.scala:22)\n\tat Problem.main(tmp1cbg2eyg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(1).trim\n   \
    \     val oranges = s.split(\"oranges\")(1).trim\n        val mangos = s.split(\"\
    mango\")(1).trim\n        val apples_count = apples.toInt\n        val oranges_count\
    \ = oranges.toInt\n        val mangos_count = mangos.toInt\n        val apples_sum\
    \ = apples_count + oranges_count + mangos_count\n        val oranges_sum = apples_count\
    \ - apples_sum + oranges_count + mangos_count\n        val mangos_sum = apples_sum\
    \ - apples_count - oranges_count + mangos_count\n        val apples_count = apples_sum\
    \ / apples_sum\n        val oranges_count = oranges_sum / oranges_sum\n      \
    \  val mangos_count = mangos_sum / mangos_sum\n        val apples_count = apples_count\
    \ * apples_count\n        val oranges_count = oranges_count * oranges_count\n\
    \        val mangos_count = mangos_count * mangos_count\n        val apples_count\
    \ = apples_count + oranges_count + mangos_count\n        val apples_sum = apples_count\
    \ * apples_count\n        val oranges_sum = oranges_count * oranges_count\n  \
    \      val mangos_count = mangos_count * mangos_count\n        val mangos_sum\
    \ = apples_sum - apples_count - oranges_count + mangos_count\n        val apples_count\
    \ = apples_sum / apples_sum\n        val oranges_count = oranges_sum / oranges_sum\n\
    \        val mangos_count = mangos_sum / mangos_sum\n        val apples_count\
    \ = apples_count * apples_count\n        val oranges_count = oranges_count * oranges_count\n\
    \        val mangos_count = mangos_count * mangos_count\n        val apples_count\
    \ = apples_count + oranges_count + mangos_count\n        val apples_sum = apples_count\
    \ * apples_count\n        val oranges_sum = oranges_count * oranges_count\n  \
    \      val mangos_count = mangos_count * mangos_count\n        val mangos_sum\
    \ = apples_sum - apples_count - oranges_count + mangos_count\n        val apples_count\
    \ = apples_sum / apples_sum\n        val oranges_count = oranges_sum / oranges_sum\n\
    \        val mangos_count = mangos_sum / mangos_sum\n        val apples_count\
    \ = apples_count * apples_count\n        val oranges_count = oranges_count * oranges_count\n\
    \        val mangos_count = mangos_count * mangos_count\n        val apples_count\
    \ = apples_count + \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyrhsc1ae.scala:52:41 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count\
    \ + \n\e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyrhsc1ae.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mapples_count\e[0m = apples_sum / apples_sum\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mapples_count\
    \ is already defined as \e[33mvalue\e[0m \e[35mapples_count\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyrhsc1ae.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36moranges_count\e[0m = oranges_sum / oranges_sum\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0moranges_count\
    \ is already defined as \e[33mvalue\e[0m \e[35moranges_count\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyrhsc1ae.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmangos_count\e[0m = mangos_sum / mangos_sum\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmangos_count\
    \ is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyrhsc1ae.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mapples_count\e[0m = apples_count * apples_count\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659794991
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \")(0)\n        val oranges\
    \ = s.split(\" \")(1)\n        val fruits = s.split(\" \")(2)\n        val apples_count\
    \ = apples.toLong\n        val oranges_count = oranges.toLong\n        val fruits_count\
    \ = fruits.toLong\n        val apples_sum = apples_count + apples_count - oranges_count\
    \ - oranges_count\n        val oranges_sum = oranges_count + oranges_count - apples_count\
    \ - apples_count\n        val fruits_sum = fruits_count + fruits_count - apples_count\
    \ - apples_count - oranges_count - oranges_count\n        fruits_sum - fruits_sum\
    \ - apples_sum - apples_sum - oranges_sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpv53auary.scala:19)\n\
    \tat Problem$.main(tmpv53auary.scala:27)\n\tat Problem.main(tmpv53auary.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0).trim\n   \
    \     val oranges = s.split(\"oranges\")(0).trim\n        val mangos = s.split(\"\
    mango\")(0).trim\n        val apples_count = apples.toLong\n        val oranges_count\
    \ = oranges.toLong\n        val mangos_count = mangos.toLong\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val oranges_count = oranges_count\
    \ - apples_count\n        val mangos_count = mangos_count - apples_count\n   \
    \     val apples_count = apples_count - oranges_count - mangos_count\n       \
    \ val oranges_count = oranges_count - apples_count\n        val mangos_count =\
    \ mangos_count - apples_count\n        val apples_count = apples_count - oranges_count\
    \ - mangos_count\n        val oranges_count = oranges_count - apples_count\n \
    \       val mangos_count = mangos_count - apples_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val oranges_count = oranges_count\
    \ - apples_count\n        val mangos_count = mangos_count - apples_count\n   \
    \     val apples_count = apples_count - oranges_count - mangos_count\n       \
    \ val oranges_count = oranges_count - apples_count\n        val mangos_count =\
    \ mangos_count - apples_count\n        val apples_count = apples_count - oranges_count\
    \ - mangos_count\n        val oranges_count = oranges_count - apples_count\n \
    \       val mangos_count = mangos_count - apples_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val oranges_count = oranges_count\
    \ - apples_count\n        val mangos_count = mangos_count - apples_count\n   \
    \     val apples_count = apples_count - oranges_count - mangos_count\n       \
    \ val oranges_count = oranges_count - apples_count\n        val mangos_count =\
    \ mangos_count - apples_count\n        val apples_count = apples_count - oranges_count\
    \ - mangos_count\n        val oranges_count = oranges_count - apples_count\n \
    \       val mangos_count = mangos_count - apples_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val oranges_count = oranges_count\
    \ - apples_count\n        val mangos_count = mangos_count - apples_count\n   \
    \     val apples_count = apples_count - oranges_count - mangos_count\n       \
    \ val oranges_count = oranges_count - apples_count\n        val mangos_count =\
    \ mangos_count - apple\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptfbu08rx.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count\
    \ - oranges_count - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptfbu08rx.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_count -\
    \ apples_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptfbu08rx.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count - apples_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptfbu08rx.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - oranges_count\
    \ - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptfbu08rx.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m      "
  stdout: ''
  timestamp: 1659794991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val arr = s.split(\" \")\n        val apples =\
    \ arr.map(_.toInt)\n        val oranges = arr.filter(_.toInt != 0).map(_.toInt)\n\
    \        val mangoes = arr.filter(_.toInt == 0).map(_.toInt)\n        val apples_count\
    \ = apples.sum\n        val oranges_count = oranges.sum\n        val mangoes_count\
    \ = mangoes.sum\n        val apples_sum = apples.sum\n        val oranges_sum\
    \ = oranges.sum\n        val mangoes_sum = mangoes.sum\n        val apples_percentage\
    \ = apples_count / apples_sum * 100\n        val oranges_percentage = oranges_count\
    \ / oranges_sum * 100\n        val mangoes_percentage = mangoes_count / mangoes_sum\
    \ * 100\n        val apples_percentage_rounded = Math.round(apples_percentage)\n\
    \        val oranges_percentage_rounded = Math.round(oranges_percentage)\n   \
    \     val mangoes_percentage_rounded = Math.round(mangoes_percentage)\n      \
    \  val apples_percentage_rounded_rounded = Math.round(apples_percentage_rounded)\n\
    \        val oranges_percentage_rounded_rounded = Math.round(oranges_percentage_rounded)\n\
    \        val mangoes_percentage_rounded_rounded = Math.round(mangoes_percentage_rounded)\n\
    \        val apples_percentage_rounded_rounded_rounded = Math.round(apples_percentage_rounded_rounded)\n\
    \        val oranges_percentage_rounded_rounded_rounded = Math.round(oranges_percentage_rounded_rounded)\n\
    \        val mangoes_percentage_rounded_rounded_rounded = Math.round(mangoes_percentage_rounded_rounded)\n\
    \        val apples_percentage_rounded_rounded_rounded_rounded = Math.round(apples_percentage_rounded_rounded_rounded)\n\
    \        val oranges_percentage_rounded_rounded_rounded_rounded = Math.round(oranges_percentage_rounded_rounded_rounded)\n\
    \        val mangoes_percentage_rounded_rounded_rounded_rounded = Math.round(mangoes_percentage_rounded_rounded_rounded)\n\
    \        val apples_percentage_rounded_rounded_rounded_rounded_rounded = Math.round(apples_percentage_rounded_rounded_rounded_rounded)\n\
    \        val oranges_percentage_rounded_rounded_rounded_rounded_rounded = Math.round(oranges_percentage_rounded_rounded_rounded_rounded)\n\
    \        val mangoes_percentage_rounded_rounded_rounded_rounded_rounded = Math.round(mangoes_percentage_rounded_rounded_rounded_rounded\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9c2brkhr.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9c2brkhr.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val fruits = apples ++\
    \ oranges\n        val apples_count = apples.sum\n        val oranges_count =\
    \ oranges.sum\n        val mango_count = fruits.filter(f => f > 0).sum\n     \
    \   val apples_percent = apples_count / n\n        val oranges_percent = oranges_count\
    \ / n\n        val mango_percent = (fruits - apples_count - oranges_count) / n\n\
    \        apples_percent * oranges_percent * mango_percent\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr7ja9c22.scala:23:36 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmango_percent\e[0m = (fruits\
    \ - apples_count - oranges_count) / n\n\e[31m\e[31m   |\e[0m                 \
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of Array[Int],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659794993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = n - fruits\n    \
    \    fruits + mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpp9010woi.scala:15)\n\
    \tat Problem$.main(tmpp9010woi.scala:22)\n\tat Problem.main(tmpp9010woi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val mangos = s.split(\"\
    \ \").map(_.toInt)\n        val fruits = apples ++ oranges ++ mangos\n       \
    \ val totalFruits = fruits.sum\n        val totalApples = apples.sum\n       \
    \ val totalOranges = oranges.sum\n        val totalMangos = mangos.sum\n     \
    \   val totalFruitsInBasket = totalFruits - totalApples - totalOranges - totalMangos\n\
    \        val totalFruitsInBasketInt = totalFruitsInBasket.toInt\n        val totalFruitsInBasketInt\
    \ = totalFruitsInBasket - totalFruitsInBasketInt\n        val totalFruitsInBasketInt\
    \ = totalFruitsInBasket - totalFruitsInBasketInt\n        val totalMangos = mangos.sum\n\
    \        val totalMangos = mangos.sum\n        val totalMangos = mangos.sum\n\
    \        val totalMangos = mangos.sum\n        val totalMangos = mangos.sum\n\
    \        val totalMangos = mangos.sum\n        val totalMangos = mangos.sum\n\
    \        val totalMangos = mangos.sum\n        val totalMangos = mangos.sum\n\
    \        val totalMangos = mangos.sum\n        val totalMangos = mangos.sum\n\
    \        val totalMangos = mangos.sum\n        val totalMangos = mangos.sum\n\
    \        val totalMangos = mangos.sum\n        val totalMangos = mangos.sum\n\
    \        val totalMangos = mangos.sum\n        val totalMangos = mangos.sum\n\
    \        val totalMangos = mangos.sum\n        val totalMangos = mangos.sum\n\
    \        val totalMangos = mangos.sum\n        val totalMangos = mangos.sum\n\
    \        val totalMangos = mangos.sum\n        val totalMangos = mangos.sum\n\
    \        val totalMangos = mangos.sum\n        val totalMangos = mangos.sum\n\
    \        val totalMangos = mangos.sum\n        val totalMangos = mangos.sum\n\
    \        val totalMangos = mangos.sum\n        val totalM\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvgxfdg5k.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvgxfdg5k.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtotalFruitsInBasketInt\e[0m = totalFruitsInBasket - totalFruitsInBasketInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalFruitsInBasketInt is already defined as \e[33mvalue\e\
    [0m \e[35mtotalFruitsInBasketInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvgxfdg5k.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mtotalFruitsInBasketInt\e\
    [0m = totalFruitsInBasket - totalFruitsInBasketInt\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalFruitsInBasketInt is already defined as \e[33mvalue\e\
    [0m \e[35mtotalFruitsInBasketInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvgxfdg5k.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mtotalMangos\e[0m = mangos.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mtotalMangos\
    \ is already defined as \e[33mvalue\e[0m \e[35mtotalMangos\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvgxfdg5k.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtotalMangos\e[0m = mangos.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalMangos is already defined as \e[33mvalue\e[0m \e[35mtotalMangos\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overlo"
  stdout: ''
  timestamp: 1659794993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = n - apples - oranges\n        val apples_count = apples.toInt\n\
    \        val oranges_count = oranges.toInt\n        val mangos_count = n - apples_count\
    \ - oranges_count\n        val apples_count = apples_count.toInt\n        val\
    \ oranges_count = oranges_count.toInt\n        val mangos_count = mangos_count.toInt\n\
    \        val apples_count = apples_count.toInt\n        val oranges_count = oranges_count.toInt\n\
    \        val mangos_count = mangos_count.toInt\n        val apples_count = apples_count.toInt\n\
    \        val oranges_count = oranges_count.toInt\n        val mangos_count = mangos_count.toInt\n\
    \        val apples_count = apples_count.toInt\n        val oranges_count = oranges_count.toInt\n\
    \        val mangos_count = mangos_count.toInt\n        val apples_count = apples_count.toInt\n\
    \        val oranges_count = oranges_count.toInt\n        val mangos_count = mangos_count.toInt\n\
    \        val apples_count = apples_count.toInt\n        val oranges_count = oranges_count.toInt\n\
    \        val mangos_count = mangos_count.toInt\n        val apples_count = apples_count.toInt\n\
    \        val oranges_count = oranges_count.toInt\n        val mangos_count = mangos_count.toInt\n\
    \        val apples_count = apples_count.toInt\n        val oranges_count = oranges_count.toInt\n\
    \        val mangos_count = mangos_count.toInt\n        val apples_count = apples_count.toInt\n\
    \        val oranges_count = oranges_count.toInt\n        val mangos_count = mangos_count.toInt\n\
    \        val apples_count = apples_count.toInt\n        val oranges_count = oranges_count.toInt\n\
    \        val mangos_count = mangos_count.toInt\n        val apples_count = apples_count.toInt\n\
    \        val oranges_count = oranges_count.toInt\n        val mangos_count = mangos_count.toInt\n\
    \        val apples_count = apples_count.toInt\n        val oranges_count = oranges_count.toInt\n\
    \        val mangos_count = mangos_count.toInt\n        val apples_count = apples_count.toInt\n\
    \        val oranges_count = oranges_count.toInt\n        val mangos_count = mangos_count.toInt\n\
    \        val apples_count = apples_count.toInt\n        val oranges_count = oranges_count.toInt\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpqlegq4ce.scala:62:11 ---------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpqlegq4ce.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqlegq4ce.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_count.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqlegq4ce.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqlegq4ce.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ define"
  stdout: ''
  timestamp: 1659794991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val basket = new mutable.HashMap[String,\
    \ Int]()\n        basket.put(\"apples\", apples)\n        basket.put(\"oranges\"\
    , oranges)\n        basket.put(\"mangos\", mangos)\n        val totalFruits =\
    \ apples + oranges + mangos\n        val totalFruitsCount = basket.size\n    \
    \    val mangoFruitsCount = totalFruits - totalFruitsCount\n        val mangoFruits\
    \ = mangoFruitsCount / totalFruits\n        val mangoFruitsCount = mangoFruitsCount\
    \ % totalFruits\n        val mangoFruitsCount = mangoFruitsCount.toInt\n     \
    \   val mangoFruitsCount = mangoFruitsCount + mangoFruits\n        val mangoFruitsCount\
    \ = mangoFruitsCount.toLong\n        val mangoFruitsCount = mangoFruitsCount +\
    \ mangoFruits\n        val mangoFruitsCount = mangoFruitsCount + mangoFruits\n\
    \        val mangoFruitsCount = mangoFruitsCount + mangoFruits\n        val mangoFruitsCount\
    \ = mangoFruitsCount + mangoFruits\n        val mangoFruitsCount = mangoFruitsCount\
    \ + mangoFruits\n        val mangoFruitsCount = mangoFruitsCount + mangoFruits\n\
    \        val mangoFruitsCount = mangoFruitsCount + mangoFruits\n        val mangoFruitsCount\
    \ = mangoFruitsCount + mangoFruits\n        val mangoFruitsCount = mangoFruitsCount\
    \ + mangoFruits\n        val mangoFruitsCount = mangoFruitsCount + mangoFruits\n\
    \        val mangoFruitsCount = mangoFruitsCount + mangoFruits\n        val mangoFruitsCount\
    \ = mangoFruitsCount + mangoFruits\n        val mangoFruitsCount = mangoFruitsCount\
    \ + mangoFruits\n        val mangoFruitsCount = mangoFruitsCount + mangoFruits\n\
    \        val mang\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkungdnh_.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkungdnh_.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmangoFruitsCount\e[0m = mangoFruitsCount % totalFruits\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmangoFruitsCount is already defined as \e[33mvalue\e[0m \e[35mmangoFruitsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkungdnh_.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsCount\e[0m = mangoFruitsCount.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmangoFruitsCount is already defined as \e[33mvalue\e[0m \e[35mmangoFruitsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkungdnh_.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsCount\e[0m = mangoFruitsCount\
    \ + mangoFruits\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsCount is already defined as \e[33mvalue\e[0m \e\
    [35mmangoFruitsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkungdnh_.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsCount\e[0m =\
    \ mangoFruitsCount.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsCount is already defined as \e[33mvalue\e[0m \e\
    [35mmangoFruitsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods m"
  stdout: ''
  timestamp: 1659794993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = s.toInt\n        val mangos = n - apples - oranges - fruits\n\
    \        mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpwnws4dtl.scala:15)\n\
    \tat Problem$.main(tmpwnws4dtl.scala:22)\n\tat Problem.main(tmpwnws4dtl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val arr = s.split(\" \")\n        val apples =\
    \ arr.map(_.toInt)\n        val oranges = arr.filter(_.toString.contains(\"oranges\"\
    )).map(_.toInt)\n        val mangos = arr.filter(_.toString.contains(\"mango\"\
    )).map(_.toInt)\n        val apples_oranges = apples ++ oranges\n        val apples_mangos\
    \ = apples ++ mangos\n        val oranges_mangos = oranges ++ mangos\n       \
    \ val apples_oranges_mangos = apples_oranges ++ apples_mangos\n        val apples_oranges_mangos_sum\
    \ = apples_oranges_mangos.sum\n        val apples_oranges_mangos_sum_of_apples\
    \ = apples_oranges_mangos_sum.filter(_.toString.contains(\"apples\")).map(_.toInt).sum\n\
    \        val apples_oranges_mangos_sum_of_oranges = apples_oranges_mangos_sum.filter(_.toString.contains(\"\
    oranges\")).map(_.toInt).sum\n        val apples_oranges_mangos_sum_of_mangos\
    \ = apples_oranges_mangos_sum.filter(_.toString.contains(\"mango\")).map(_.toInt).sum\n\
    \        val apples_oranges_mangos_sum_of_apples_oranges = apples_oranges_mangos_sum_of_apples\
    \ + apples_oranges_mangos_sum_of_oranges\n        val apples_oranges_mangos_sum_of_apples_mangos\
    \ = apples_oranges_mangos_sum_of_apples + apples_oranges_mangos_sum_of_mangos\n\
    \        val apples_oranges_mangos_sum_of_oranges_mangos = apples_oranges_mangos_sum_of_oranges\
    \ + apples_oranges_mangos_sum_of_mangos\n        val apples_oranges_mangos_sum_of_apples_oranges_mangos\
    \ = apples_oranges_mangos_sum_of_apples_oranges + apples_oranges_mangos_sum_of_oranges_mangos\n\
    \        val apples_oranges_mangos_sum_of_apples_oranges_mangos_sum = apples_oranges_mangos_sum_of_apples_oranges_mangos\
    \ + apples_oranges_mangos_sum_of_apples_oranges_mangos\n        val apples_oranges_mangos_sum_of_apples_oranges_mangos_sum_of_apples\
    \ = apples_oranges_mangos_sum_of_apples_oranges_mangos_sum.filter(_.toString.contains(\"\
    apples\")).map(_.toInt).sum\n        val apples_oranges_mangos_sum_of_apples_oranges_mangos_sum_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpni3mg1j1.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpni3mg1j1.scala:24:76\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mapples_oranges_mangos_sum_of_apples\e[0m = apples_oranges_mangos_sum.filter(_.toString.contains(\e\
    [31m\"apples\"\e[0m)).map(_.toInt).sum\n\e[31m\e[31m   |\e[0m                \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                     value filter is not a member of\
    \ Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpni3mg1j1.scala:25:77 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mapples_oranges_mangos_sum_of_oranges\e\
    [0m = apples_oranges_mangos_sum.filter(_.toString.contains(\e[31m\"oranges\"\e\
    [0m)).map(_.toInt).sum\n\e[31m\e[31m   |\e[0m                                \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                  value filter is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpni3mg1j1.scala:26:76 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mapples_oranges_mangos_sum_of_mangos\e\
    [0m = apples_oranges_mangos_sum.filter(_.toString.contains(\e[31m\"mango\"\e[0m)).map(_.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value filter is not a\
    \ member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpni3mg1j1.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659794993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val fruits = apples + oranges + mangos\n\
    \        val basket = fruits.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples_count - oranges_count - mangos_count\n    \
    \    val oranges_count = oranges_count - apples_count\n        val mangos_count\
    \ = mangos_count - apples_count - oranges_count\n        val apples_count = apples_count\
    \ - mangos_count\n        val oranges_count = oranges_count - apples_count\n \
    \       val mangos_count = mangos_count - apples_count - oranges_count\n     \
    \   val apples_count = apples_count - mangos_count\n        val oranges_count\
    \ = oranges_count - apples_count\n        val mangos_count = mangos_count - apples_count\
    \ - oranges_count\n        val apples_count = apples_count - mangos_count\n  \
    \      val oranges_count = oranges_count - apples_count\n        val mangos_count\
    \ = mangos_count - apples_count - oranges_count\n        val apples_count = apples_count\
    \ - mangos_count\n        val oranges_count = oranges_count - apples_count\n \
    \       val mangos_count = mangos_count - apples_count - oranges_count\n     \
    \   val apples_count = apples_count - mangos_count\n        val oranges_count\
    \ = oranges_count - apples_count\n        val mangos_count = mangos_count - apples_count\
    \ - oranges_count\n        val apples_count = apples_count - mangos_count\n  \
    \      val oranges_count = oranges_count - apples_count\n        val mangos_count\
    \ = mangos_count - apples_count - oranges_count\n        val apples_count = apples_count\
    \ - mangos_count\n        val oranges_count = oranges_count - apples_count\n \
    \       val mangos_count = mangos_count - apples_count - oranges_count\n     \
    \   val apples_count = apples_count - mangos_count\n        val oranges_count\
    \ = oranges_count - apples_count\n        val mangos_count = mangos_count - apples_count\
    \ - oranges_count\n        val apples_count = apples_count - mangos_count\n  \
    \      val oranges_count = oranges_count - apples_count\n        val mangos_count\
    \ = mangos_count - apples_count - oranges_count\n        val apples_count = apples_count\
    \ - mangos_count\n        val oranges_count = oranges_count - apples_count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe64k8xxq.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count\
    \ - oranges_count - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe64k8xxq.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_count -\
    \ apples_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe64k8xxq.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count - apples_count\
    \ - oranges_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe64k8xxq.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - mangos_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe64k8xxq.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m      "
  stdout: ''
  timestamp: 1659794993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples and \").map(_.toInt)\n\
    \        val oranges = s.split(\"oranges and \").map(_.toInt)\n        val mangos\
    \ = s.split(\"mango and \").map(_.toInt)\n        val fruits = apples ++ oranges\
    \ ++ mangos\n        val totalFruits = fruits.sum\n        val totalApples = apples.sum\n\
    \        val totalOranges = oranges.sum\n        val totalMangos = mangos.sum\n\
    \        val totalFruitsPerApple = totalFruits / totalApples\n        val totalFruitsPerOrange\
    \ = totalFruits / totalOranges\n        val totalFruitsPerMango = totalFruits\
    \ / totalMangos\n        val totalFruitsPerAppleAndOrange = totalFruitsPerApple\
    \ * totalFruitsPerOrange\n        val totalFruitsPerAppleAndMango = totalFruitsPerApple\
    \ * totalFruitsPerMango\n        val totalFruitsPerOrangeAndMango = totalFruitsPerOrange\
    \ * totalFruitsPerMango\n        val totalFruitsPerAppleAndOrangeAndMango = totalFruitsPerAppleAndOrange\
    \ * totalFruitsPerMango\n        val totalFruitsPerAppleAndOrangeAndMangoAndTotal\
    \ = totalFruitsPerAppleAndOrangeAndMango * totalFruits\n        totalFruitsPerAppleAndOrangeAndMangoAndTotal\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpn0i97qdl.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpn0i97qdl.scala:15)\n\
    \tat Problem$.main(tmpn0i97qdl.scala:34)\n\tat Problem.main(tmpn0i97qdl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = s.toInt\n        val mangos = n - apples - oranges - fruits\n\
    \        mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpwnws4dtl.scala:15)\n\
    \tat Problem$.main(tmpwnws4dtl.scala:22)\n\tat Problem.main(tmpwnws4dtl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(1).toLong\n        val mangoes\
    \ = n - apples - oranges\n        fruits.last.toLong - fruits(0).toLong - fruits(1).toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpxfxw86j6.scala:17)\n\
    \tat Problem$.main(tmpxfxw86j6.scala:22)\n\tat Problem.main(tmpxfxw86j6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794994
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val fruits = apples ++\
    \ oranges\n        val mangos = fruits.filter(x => x % 2 == 0)\n        fruits.length\
    \ - mangos.length\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpvp9rjpya.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpvp9rjpya.scala:15)\n\
    \tat Problem$.main(tmpvp9rjpya.scala:22)\n\tat Problem.main(tmpvp9rjpya.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val fruits = apples ++\
    \ oranges\n        val apples_count = apples.sum\n        val oranges_count =\
    \ oranges.sum\n        val mangos = fruits.filter(_ % 2 == 1).length\n       \
    \ val mangos_count = fruits.filter(_ % 2 == 1).length\n        val total_count\
    \ = apples_count + oranges_count + mangos\n        val total_apples_count = apples.sum\n\
    \        val total_oranges_count = oranges.sum\n        val total_mangos_count\
    \ = fruits.filter(_ % 2 == 1).length\n        val total_mangos_count = fruits.filter(_\
    \ % 2 == 1).length\n        val total_apples_count = apples.sum\n        val total_oranges_count\
    \ = oranges.sum\n        val total_mangos_count = fruits.filter(_ % 2 == 1).length\n\
    \        val total_mangos_count = fruits.filter(_ % 2 == 1).length\n        val\
    \ total_apples_count = apples.sum\n        val total_oranges_count = oranges.sum\n\
    \        val total_mangos_count = fruits.filter(_ % 2 == 1).length\n        val\
    \ total_mangos_count = fruits.filter(_ % 2 == 1).length\n        val total_apples_count\
    \ = apples.sum\n        val total_oranges_count = oranges.sum\n        val total_mangos_count\
    \ = fruits.filter(_ % 2 == 1).length\n        val total_mangos_count = fruits.filter(_\
    \ % 2 == 1).length\n        val total_apples_count = apples.sum\n        val total_oranges_count\
    \ = oranges.sum\n        val total_mangos_count = fruits.filter(_ % 2 == 1).length\n\
    \        val total_mangos_count = fruits.filter(_ % 2 == 1).length\n        val\
    \ total_apples_count = apples.sum\n        val total_oranges_count = oranges.sum\n\
    \        val total_mangos_count = fruits.filter(_ % 2 == 1).length\n        val\
    \ total_mangos_count = fruits.filter(_ % 2 == 1).length\n        val total_apples_count\
    \ = apples.sum\n        val total_oranges_count = oranges.sum\n        val total_mangos_count\
    \ = fruits.filter(_ % 2 == 1).length\n        val total_mangos_count = fruits.filter(_\
    \ % 2 == 1).length\n        val total_apples_count = apples.sum\n        val total_oranges_count\
    \ = oranges.sum\n        val total_mangos_count = fruits.filter(_ % 2 == 1).length\n\
    \        val total_mangos_count = fruits.filter(_ % 2 == 1).length\n        val\
    \ total_apples_count = apples.sum\n        val total_orange\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptztucwsp.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptztucwsp.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtotal_mangos_count\e[0m = fruits.filter(_ % \e[31m2\e[0m == \e[31m1\e\
    [0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotal_mangos_count is already defined as \e[33mvalue\e[0m\
    \ \e[35mtotal_mangos_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptztucwsp.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mtotal_apples_count\e[0m\
    \ = apples.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotal_apples_count is already defined as \e[33mvalue\e[0m\
    \ \e[35mtotal_apples_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptztucwsp.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mtotal_oranges_count\e[0m\
    \ = oranges.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotal_oranges_count is already defined as \e[33mvalue\e[0m\
    \ \e[35mtotal_oranges_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptztucwsp.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mtotal_mangos_count\e[0m\
    \ = fruits.filter(_ % \e[31m2\e[0m == \e[31m1\e[0m).length\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mtotal_mangos_count is already defined as \e[33mvalue\e[0m \e[35mtotal_mangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659794997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val mangos = s.split(\"\
    \ \").map(_.toInt)\n        val fruits = apples ++ oranges ++ mangos\n       \
    \ val apples_count = apples.sum\n        val oranges_count = oranges.sum\n   \
    \     val mangos_count = mangos.sum\n        val total_count = apples_count +\
    \ oranges_count + mangos_count\n        val apples_count = apples.sum\n      \
    \  val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n  \
    \      val total_count = apples_count + oranges_count + mangos_count\n       \
    \ val apples_count = apples.sum\n        val oranges_count = oranges.sum\n   \
    \     val mangos_count = mangos.sum\n        val total_count = apples_count +\
    \ oranges_count + mangos_count\n        val apples_count = apples.sum\n      \
    \  val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n  \
    \      val total_count = apples_count + oranges_count + mangos_count\n       \
    \ val apples_count = apples.sum\n        val oranges_count = oranges.sum\n   \
    \     val mangos_count = mangos.sum\n        val total_count = apples_count +\
    \ oranges_count + mangos_count\n        val apples_count = apples.sum\n      \
    \  val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n  \
    \      val total_count = apples_count + oranges_count + mangos_count\n       \
    \ val apples_count = apples.sum\n        val oranges_count = oranges.sum\n   \
    \     val mangos_count = mangos.sum\n        val total_count = apples_count +\
    \ oranges_count + mangos_count\n        val apples_count = apples.sum\n      \
    \  val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n  \
    \      val total_count = apples_count + oranges_count + mangos_count\n       \
    \ val apples_count = apples.sum\n        val oranges_count = oranges.sum\n   \
    \     val mangos_count = mangos.sum\n        val total_count = apples_count +\
    \ oranges_count + mangos_count\n        val apples_count = apples.sum\n      \
    \  val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n  \
    \      val total_count = apples_count + oranges_count + mangos_count\n       \
    \ val apples_count = apples.sum\n        val oranges_count = oranges.sum\n   \
    \     val mangos_count = mangos.sum\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8etwjon_.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8etwjon_.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges.sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0moranges_count\
    \ is already defined as \e[33mvalue\e[0m \e[35moranges_count\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8etwjon_.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmangos_count\e[0m = mangos.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8etwjon_.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mtotal_count\e[0m = apples_count + oranges_count\
    \ + mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotal_count is already defined as \e[33mvalue\e[0m \e[35mtotal_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8etwjon_.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples.sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mapples_count\
    \ is"
  stdout: ''
  timestamp: 1659795000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \")(0).toLong\n      \
    \  val oranges = s.split(\" \")(1).toLong\n        val mangos = s.split(\" \"\
    )(2).toLong\n        val fruits = apples + oranges + mangos\n        val totalFruits\
    \ = fruits.toLong\n        val appleFruits = apples - mangos\n        val orangeFruits\
    \ = oranges - mangos\n        val mangoFruits = mangos - mangos\n        val totalFruitsWithApples\
    \ = appleFruits + orangeFruits + mangoFruits\n        val totalFruitsWithApplesAndOranges\
    \ = appleFruits + orangeFruits\n        val totalFruitsWithApplesAndOrangesAndMangos\
    \ = appleFruits + orangeFruits + mangoFruits\n        val totalFruitsWithApplesAndOrangesAndMangosAndTotal\
    \ = appleFruits + orangeFruits + mangoFruits + totalFruits\n        val totalFruitsWithApplesAndOrangesAndMangosAndTotalAndApples\
    \ = appleFruits + orangeFruits + mangoFruits + totalFruitsWithApples + appleFruits\n\
    \        val totalFruitsWithApplesAndOrangesAndMangosAndTotalAndApplesAndOranges\
    \ = appleFruits + orangeFruits + mangoFruits + totalFruitsWithApples + appleFruits\
    \ + orangeFruits\n        val totalFruitsWithApplesAndOrangesAndMangosAndTotalAndApplesAndOrangesAndMangos\
    \ = appleFruits + orangeFruits + mangoFruits + totalFruitsWithApples + appleFruits\
    \ + orangeFruits + mangoFruits\n        val totalFruitsWithApplesAndOrangesAndMangosAndTotalAndApplesAndOrangesAndMangosAndTotal\
    \ = appleFruits + orangeFruits + mangoFruits + totalFruitsWithApples + appleFruits\
    \ + orangeFruits + mangoFruits + totalFruitsWithApplesAndOranges + appleFruits\
    \ + orangeFruits\n        val totalFruitsWithApplesAndOrangesAndMangosAndTotalAndApplesAndOrangesAndMangosAndTotalAndApples\
    \ = appleFruits + orangeFruits + mangoFru\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5i7cozh_.scala:31:137 -----------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mtotalFruitsWithApplesAndOrangesAndMangosAndTotalAndApplesAndOrangesAndMangosAndTotalAndApples\e\
    [0m = appleFruits + orangeFruits + mangoFru\n\e[31m\e[31m   |\e[0m           \
    \                                                                            \
    \                                                  ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                     Not found: mangoFru\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5i7cozh_.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples and \")\n      \
    \  val oranges = s.split(\"oranges and \")\n        val mangos = s.split(\"mango\
    \ and \")\n        val apples_count = apples(0).split(\" \").length\n        val\
    \ oranges_count = oranges(0).split(\" \").length\n        val mangos_count = mangos(0).split(\"\
    \ \").length\n        val apples_sum = apples(0).split(\" \").map(_.toInt).sum\n\
    \        val oranges_sum = oranges(0).split(\" \").map(_.toInt).sum\n        val\
    \ mangos_sum = mangos(0).split(\" \").map(_.toInt).sum\n        val apples_count\
    \ = apples(0).split(\" \").length\n        val oranges_count = oranges(0).split(\"\
    \ \").length\n        val mangos_count = mangos(0).split(\" \").length\n     \
    \   val apples_sum = apples(0).split(\" \").map(_.toInt).sum\n        val oranges_sum\
    \ = oranges(0).split(\" \").map(_.toInt).sum\n        val mangos_sum = mangos(0).split(\"\
    \ \").map(_.toInt).sum\n        val apples_count = apples(0).split(\" \").length\n\
    \        val oranges_count = oranges(0).split(\" \").length\n        val mangos_count\
    \ = mangos(0).split(\" \").length\n        val apples_sum = apples(0).split(\"\
    \ \").map(_.toInt).sum\n        val oranges_sum = oranges(0).split(\" \").map(_.toInt).sum\n\
    \        val mangos_sum = mangos(0).split(\" \").map(_.toInt).sum\n        val\
    \ apples_count = apples(0).split(\" \").length\n        val oranges_count = oranges(0).split(\"\
    \ \").length\n        val mangos_count = mangos(0).split(\" \").length\n     \
    \   val apples_sum = apples(0).split(\" \").map(_.toInt).sum\n        val oranges_sum\
    \ = oranges(0).split(\" \").map(_.toInt).sum\n        val mangos_sum = mangos(0).split(\"\
    \ \").map(_.toInt).sum\n        val apples_count = apples(0).split(\" \").length\n\
    \        val oranges_count = oranges(0).split(\" \").length\n        val mangos_count\
    \ = mangos(0).split(\" \").length\n        val apples_sum = apples(0).split(\"\
    \ \").map(_.toInt).sum\n        val oranges_sum = oranges(0).split(\" \").map(_.toInt).sum\n\
    \        val mangos_sum = mangos(0).split(\" \").map(_.toInt).sum\n        val\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp36fxv6ip.scala:48:11 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp36fxv6ip.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples(\e\
    [31m0\e[0m).split(\e[31m\" \"\e[0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp36fxv6ip.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges(\e[31m0\e\
    [0m).split(\e[31m\" \"\e[0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp36fxv6ip.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos(\e[31m0\e\
    [0m).split(\e[31m\" \"\e[0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp36fxv6ip.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mapples_sum\e[0m = apples(\e[31m0\e[0m).split(\e\
    [31m\" \"\e[0m).map(_.toInt).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m"
  stdout: ''
  timestamp: 1659795001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val fruits = apples ++\
    \ oranges\n        val apples_count = apples.sum\n        val oranges_count =\
    \ oranges.sum\n        val mango_count = fruits.filter(_ % 2 == 0).sum\n     \
    \   val mango_count = fruits.filter(_ % 2 == 1).sum\n        fruits.filter(_ %\
    \ 2 == 0).sum - fruits.filter(_ % 2 == 1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpize3udd7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmango_count\e[0m = fruits.filter(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmango_count is already defined as \e[33mvalue\e[0m \e[35mmango_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659794998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = n - fruits\n    \
    \    fruits\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpfqs9b7al.scala:15)\n\
    \tat Problem$.main(tmpfqs9b7al.scala:22)\n\tat Problem.main(tmpfqs9b7al.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = n - fruits\n    \
    \    fruits - mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmp1pv1dj2v.scala:15)\n\
    \tat Problem$.main(tmp1pv1dj2v.scala:22)\n\tat Problem.main(tmp1pv1dj2v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = n.toInt\n        val oranges = s.toInt\n\
    \        val mangos = apples - oranges\n        val fruits = apples + oranges\
    \ + mangos\n        fruits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpn7sjjmex.scala:16)\n\
    \tat Problem$.main(tmpn7sjjmex.scala:22)\n\tat Problem.main(tmpn7sjjmex.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795003
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(1).toLong\n        val mangoes\
    \ = n - apples - oranges\n        fruits.toList.map(x => x.toLong).sum - mangoes\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpgsp8ntg4.scala:17)\n\
    \tat Problem$.main(tmpgsp8ntg4.scala:22)\n\tat Problem.main(tmpgsp8ntg4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(1).toLong\n        val mangoes\
    \ = n - apples - oranges\n        apples + oranges + mangoes\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp_to03ajh.scala:17)\n\
    \tat Problem$.main(tmp_to03ajh.scala:22)\n\tat Problem.main(tmp_to03ajh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795003
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(1).toLong\n        val mangoes\
    \ = n - apples - oranges\n        fruits.toList.map(x => x.toLong).sum - mangoes\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpgsp8ntg4.scala:17)\n\
    \tat Problem$.main(tmpgsp8ntg4.scala:22)\n\tat Problem.main(tmpgsp8ntg4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(1).toLong\n        val mangoes\
    \ = n - apples - oranges\n        fruits.last.toLong - apples - oranges\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpri3hdqu0.scala:17)\n\
    \tat Problem$.main(tmpri3hdqu0.scala:22)\n\tat Problem.main(tmpri3hdqu0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val mangos = s.split(\"\
    \ \").map(_.toInt)\n        val fruits = apples ++ oranges ++ mangos\n       \
    \ val apples_count = apples.sum\n        val oranges_count = oranges.sum\n   \
    \     val mangos_count = mangos.sum\n        val apples_total = apples_count +\
    \ oranges_count + mangos_count\n        val oranges_total = oranges_count + apples_count\
    \ + mangos_count\n        val mangos_total = apples_count + oranges_count + mangos_count\n\
    \        val apples_percent = apples_count / apples_total\n        val oranges_percent\
    \ = oranges_count / oranges_total\n        val mangos_percent = mangos_count /\
    \ mangos_total\n        val apples_percent = apples_count / apples_total\n   \
    \     val oranges_percent = oranges_count / oranges_total\n        val mangos_percent\
    \ = mangos_count / mangos_total\n        val apples_percent = apples_count / apples_total\n\
    \        val oranges_percent = oranges_count / oranges_total\n        val mangos_percent\
    \ = mangos_count / mangos_total\n        val apples_percent = apples_count / apples_total\n\
    \        val oranges_percent = oranges_count / oranges_total\n        val mangos_percent\
    \ = mangos_count / mangos_total\n        val apples_percent = apples_count / apples_total\n\
    \        val oranges_percent = oranges_count / oranges_total\n        val mangos_percent\
    \ = mangos_count / mangos_total\n        val apples_percent = apples_count / apples_total\n\
    \        val oranges_percent = oranges_count / oranges_total\n        val mangos_percent\
    \ = mangos_count / mangos_total\n        val apples_percent = apples_count / apples_total\n\
    \        val oranges_percent = oranges_count / oranges_total\n        val mangos_percent\
    \ = mangos_count / mangos_total\n        val apples_percent = apples_count / apples_total\n\
    \        val oranges_percent = oranges_count / oranges_total\n        val mangos_percent\
    \ = mangos_count / mangos_total\n        val apples_percent = apples_count / apples_total\n\
    \        val oranges_percent = oranges_count / oranges_total\n        val mangos_percent\
    \ = mangos_count / mangos_total\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpfahm16wq.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpfahm16wq.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mapples_percent\e[0m = apples_count\
    \ / apples_total\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_percent is already defined as \e[33mvalue\e[0m \e[35mapples_percent\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfahm16wq.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36moranges_percent\e[0m = oranges_count\
    \ / oranges_total\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_percent is already defined as \e[33mvalue\e[0m \e\
    [35moranges_percent\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfahm16wq.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmangos_percent\e[0m = mangos_count\
    \ / mangos_total\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_percent is already defined as \e[33mvalue\e[0m \e[35mmangos_percent\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfahm16wq.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mapples_percent\e[0m = apples_count /\
    \ apples_total\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_percent is already defined as \e[33mva"
  stdout: ''
  timestamp: 1659795002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = n - fruits\n    \
    \    mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpp_z9_vif.scala:15)\n\
    \tat Problem$.main(tmpp_z9_vif.scala:22)\n\tat Problem.main(tmpp_z9_vif.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795003
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0).toInt\n  \
    \      val oranges = s.split(\"oranges\")(0).toInt\n        val mangos = s.split(\"\
    mangos\")(0).toInt\n        val fruits = apples + oranges + mangos\n        fruits.toLong\
    \ - n - mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmp_gm8q67u.scala:15)\n\
    \tat Problem$.main(tmp_gm8q67u.scala:22)\n\tat Problem.main(tmp_gm8q67u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val arr = s.split(\" \")\n        val apples =\
    \ arr.filter(_.equals(\"apples\")).map(_.toInt)\n        val oranges = arr.filter(_.equals(\"\
    oranges\")).map(_.toInt)\n        val mangos = arr.filter(_.equals(\"mango\")).map(_.toInt)\n\
    \        val total = apples.sum + oranges.sum + mangos.sum\n        val apples_count\
    \ = apples.sum\n        val oranges_count = oranges.sum\n        val mangos_count\
    \ = mangos.sum\n        val apples_percent = apples_count / total * 100\n    \
    \    val oranges_percent = oranges_count / total * 100\n        val mangos_percent\
    \ = mangos_count / total * 100\n        val apples_percent = apples_percent.toInt\n\
    \        val oranges_percent = oranges_percent.toInt\n        val mangos_percent\
    \ = mangos_percent.toInt\n        val apples_count = apples_count.toInt\n    \
    \    val oranges_count = oranges_count.toInt\n        val mangos_count = mangos_count.toInt\n\
    \        val apples_percent = apples_percent.toInt\n        val oranges_percent\
    \ = oranges_percent.toInt\n        val mangos_percent = mangos_percent.toInt\n\
    \        val apples_count = apples_count.toInt\n        val oranges_count = oranges_count.toInt\n\
    \        val mangos_count = mangos_count.toInt\n        val apples_percent = apples_percent.toInt\n\
    \        val oranges_percent = oranges_percent.toInt\n        val mangos_percent\
    \ = mangos_percent.toInt\n        val apples_count = apples_count.toInt\n    \
    \    val oranges_count = oranges_count.toInt\n        val mangos_count = mangos_count.toInt\n\
    \        val apples_percent = apples_percent.toInt\n        val oranges_percent\
    \ = oranges_percent.toInt\n        val mangos_percent = mangos_percent.toInt\n\
    \        val apples_count = apples_count.toInt\n        val oranges_count = oranges_count.toInt\n\
    \        val mangos_count = mangos_count.toInt\n        val apples_percent = apples_percent.toInt\n\
    \        val oranges_percent = oranges_percent.toInt\n        val mangos_percent\
    \ = mangos_percent.toInt\n        val apples_count = apples_count.toInt\n    \
    \    val oranges_count = oranges_count.toInt\n        val mangos_count = mangos_count.toInt\n\
    \        val apples_percent = apples_percent.toInt\n        val oranges_percent\
    \ = orange\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5jr1x2l_.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mapples_percent\e[0m = apples_percent.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mapples_percent is already defined as \e[33mvalue\e[0m \e[35mapples_percent\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5jr1x2l_.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36moranges_percent\e[0m = oranges_percent.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0moranges_percent is already defined as \e[33mvalue\e[0m \e[35moranges_percent\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5jr1x2l_.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmangos_percent\e[0m = mangos_percent.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmangos_percent is already defined as \e[33mvalue\e[0m \e[35mmangos_percent\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5jr1x2l_.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5jr1x2l_.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_count.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val arr = s.split(\" \")\n        val apples =\
    \ arr.toList.map(_.toInt)\n        val oranges = arr.toList.filter(_.toInt % 2\
    \ == 0).map(_.toInt)\n        val mangoes = arr.toList.filter(_.toInt % 2 == 1).map(_.toInt)\n\
    \        val apples_count = apples.sum\n        val oranges_count = oranges.sum\n\
    \        val mangoes_count = mangoes.sum\n        val total_count = apples_count\
    \ + oranges_count + mangoes_count\n        val apples_percentage = apples.sum\
    \ / total_count\n        val oranges_percentage = oranges.sum / total_count\n\
    \        val mangoes_percentage = mangoes.sum / total_count\n        val total_percentage\
    \ = apples_percentage + oranges_percentage + mangoes_percentage\n        val apples_percentage_rounded\
    \ = apples_percentage * 100\n        val oranges_percentage_rounded = oranges_percentage\
    \ * 100\n        val mangoes_percentage_rounded = mangoes_percentage * 100\n \
    \       val total_percentage_rounded = total_percentage * 100\n        val apples_percentage_rounded_rounded\
    \ = apples_percentage_rounded + oranges_percentage_rounded + mangoes_percentage_rounded\n\
    \        val apples_percentage_rounded_rounded_rounded = apples_percentage_rounded_rounded\
    \ / 100\n        val oranges_percentage_rounded_rounded = oranges_percentage_rounded\
    \ / 100\n        val mangoes_percentage_rounded_rounded = mangoes_percentage_rounded\
    \ / 100\n        val total_percentage_rounded_rounded = total_percentage_rounded\
    \ / 100\n        val apples_percentage_rounded_rounded_rounded_rounded = apples_percentage_rounded_rounded_rounded\
    \ * 100\n        val oranges_percentage_rounded_rounded_rounded = oranges_percentage_rounded_rounded\
    \ * 100\n        val mangoes_percentage_rounded_rounded_rounded = mangoes_percentage_rounded_rounded\
    \ * 100\n        val total_percentage_rounded_rounded_rounded = total_percentage_rounded_rounded\
    \ * 100\n        val apples_percentage_rounded_rounded_rounded_rounded_rounded\
    \ = apples_percentage_rounded_rounded_rounded_rounded * 100\n        val oranges_percentage_rounded_rounded_rounded_rounded\
    \ = oranges_percentage_rounded_rounded_rounded * 100\n        val mangoes_percentage_rounded_rounded_rounded_rounded\
    \ = mangoes_percentage_rounded_rounded_rounded * 100\n        val total_percentage_rounded_rounded_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbneuhkua.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbneuhkua.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val arr = s.split(\" \")\n        var apples =\
    \ 0\n        var oranges = 0\n        var mangoes = 0\n        var total = 0\n\
    \        for (i <- 0 until arr.length) {\n            val item = arr(i)\n    \
    \        if (item == \"apples\") {\n                apples += 1\n            \
    \    total += apples * n\n            } else if (item == \"oranges\") {\n    \
    \            oranges += 1\n                total += oranges * n\n            }\
    \ else if (item == \"mango\") {\n                mangoes += 1\n              \
    \  total += mangoes * n\n            }\n        }\n        return total - mangoes\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoi0mwahb.scala:24:22 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                total += apples * n\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpoi0mwahb.scala:27:22 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m                total += oranges * n\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member of Int\
    \ - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoi0mwahb.scala:30:22\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                total +=\
    \ mangoes * n\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value += is not a member of Int - did you mean Int.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0)\n        val\
    \ oranges = s.split(\"oranges\")(0)\n        val mangos = s.split(\"mango\")(0)\n\
    \        val apples_count = apples.toInt\n        val oranges_count = oranges.toInt\n\
    \        val mangos_count = mangos.toInt\n        val basket_count = n - apples_count\
    \ - oranges_count - mangos_count\n        val apples_count = apples.toInt\n  \
    \      val oranges_count = oranges.toInt\n        val mangos_count = mangos.toInt\n\
    \        val basket_count = n - apples_count - oranges_count - mangos_count\n\
    \        val apples_count = apples.toInt\n        val oranges_count = oranges.toInt\n\
    \        val mangos_count = mangos.toInt\n        val basket_count = n - apples_count\
    \ - oranges_count - mangos_count\n        val apples_count = apples.toInt\n  \
    \      val oranges_count = oranges.toInt\n        val mangos_count = mangos.toInt\n\
    \        val basket_count = n - apples_count - oranges_count - mangos_count\n\
    \        val apples_count = apples.toInt\n        val oranges_count = oranges.toInt\n\
    \        val mangos_count = mangos.toInt\n        val basket_count = n - apples_count\
    \ - oranges_count - mangos_count\n        val apples_count = apples.toInt\n  \
    \      val oranges_count = oranges.toInt\n        val mangos_count = mangos.toInt\n\
    \        val basket_count = n - apples_count - oranges_count - mangos_count\n\
    \        val apples_count = apples.toInt\n        val oranges_count = oranges.toInt\n\
    \        val mangos_count = mangos.toInt\n        val basket_count = n - apples_count\
    \ - oranges_count - mangos_count\n        val apples_count = apples.toInt\n  \
    \      val oranges_count = oranges.toInt\n        val mangos_count = mangos.toInt\n\
    \        val basket_count = n - apples_count - oranges_count - mangos_count\n\
    \        val apples_count = apples.toInt\n        val oranges_count = oranges.toInt\n\
    \        val mangos_count = mangos.toInt\n        val basket_count = n - apples_count\
    \ - oranges_count - mangos_count\n        val apples_count = apples.toInt\n  \
    \      val oranges_count = oranges.toInt\n        val mangos_count = mangos.toInt\n\
    \        val basket_count = n - apples_count - orange\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpppqf7903.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpppqf7903.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0moranges_count\
    \ is already defined as \e[33mvalue\e[0m \e[35moranges_count\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpppqf7903.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmangos_count\e[0m = mangos.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpppqf7903.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mbasket_count\e[0m = n - apples_count\
    \ - oranges_count - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbasket_count is already defined as \e[33mvalue\e[0m \e[35mbasket_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpppqf7903.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n"
  stdout: ''
  timestamp: 1659795003
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = n - apples - oranges\n        val fruits = apples + oranges\
    \ + mangos\n        fruits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpryliqr34.scala:15)\n\
    \tat Problem$.main(tmpryliqr34.scala:22)\n\tat Problem.main(tmpryliqr34.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples and \")\n      \
    \  val oranges = s.split(\"oranges and \")\n        val mangos = s.split(\"mango\
    \ and \")\n        val apples_count = apples.map(_.toInt).sum\n        val oranges_count\
    \ = oranges.map(_.toInt).sum\n        val mangos_count = mangos.map(_.toInt).sum\n\
    \        val apples_total = apples_count + apples_count - 1\n        val oranges_total\
    \ = oranges_count + oranges_count - 1\n        val mangos_count = mangos_count\
    \ + mangos_count - 1\n        val apples_total = apples_total + apples_total -\
    \ 1\n        val oranges_total = oranges_total + oranges_total - 1\n        val\
    \ mangos_count = mangos_count + mangos_count - 1\n        val apples_total = apples_total\
    \ + apples_total - 1\n        val oranges_total = oranges_total + oranges_total\
    \ - 1\n        val mangos_count = mangos_count + mangos_count - 1\n        val\
    \ apples_total = apples_total + apples_total - 1\n        val oranges_total =\
    \ oranges_total + oranges_total - 1\n        val mangos_count = mangos_count +\
    \ mangos_count - 1\n        val apples_total = apples_total + apples_total - 1\n\
    \        val oranges_total = oranges_total + oranges_total - 1\n        val mangos_count\
    \ = mangos_count + mangos_count - 1\n        val apples_total = apples_total +\
    \ apples_total - 1\n        val oranges_total = oranges_total + oranges_total\
    \ - 1\n        val mangos_count = mangos_count + mangos_count - 1\n        val\
    \ apples_total = apples_total + apples_total - 1\n        val oranges_total =\
    \ oranges_total + oranges_total - 1\n        val mangos_count = mangos_count +\
    \ mangos_count - 1\n        val apples_total = apples_total + apples_total - 1\n\
    \        val oranges_total = oranges_total + oranges_total - 1\n        val mangos_count\
    \ = mangos_count + mangos_count - 1\n        val apples_total = apples_total +\
    \ apples_total - 1\n        val oranges_total = oranges_total + oranges_total\
    \ - 1\n        val mangos_count = mangos_count + mangos_count - 1\n        val\
    \ apples_total = apples_total + apples_total - 1\n        val oranges_total =\
    \ oranges_total + oranges_total - 1\n        val mangos_count = mangos_count +\
    \ mangos_count - 1\n        val apples_total = apples_total + apples_total - 1\n\
    \        val oranges_total = oranges_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppv4j12th.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count\
    \ + mangos_count - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppv4j12th.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mapples_total\e[0m = apples_total + apples_total\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_total is already defined as \e[33mvalue\e[0m \e[35mapples_total\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppv4j12th.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36moranges_total\e[0m = oranges_total +\
    \ oranges_total - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_total is already defined as \e[33mvalue\e[0m \e[35moranges_total\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppv4j12th.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count + mangos_count\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppv4j12th.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m"
  stdout: ''
  timestamp: 1659795003
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = s.toInt\n        val mango = n - apples - oranges - fruits\n\
    \        mango\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpg6ogqicg.scala:15)\n\
    \tat Problem$.main(tmpg6ogqicg.scala:22)\n\tat Problem.main(tmpg6ogqicg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0).toLong\n \
    \       val oranges = s.split(\"oranges\")(0).toLong\n        val mangos = s.split(\"\
    mango\")(0).toLong\n        val fruit = apples + oranges + mangos\n        fruit\
    \ - n\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp6sx0v4xf.scala:15)\n\
    \tat Problem$.main(tmp6sx0v4xf.scala:22)\n\tat Problem.main(tmp6sx0v4xf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0)\n        val\
    \ oranges = s.split(\"oranges\")(0)\n        val mangos = s.split(\"mangos\")(0)\n\
    \        val fruits = s.split(\"fruits\")(0)\n        val apples_count = apples.toInt\n\
    \        val oranges_count = oranges.toInt\n        val mangos_count = mangos.toInt\n\
    \        val fruits_count = fruits.toInt\n        val total_count = apples_count\
    \ + oranges_count + mangos_count + fruits_count\n        val apples_count = apples.toInt\n\
    \        val oranges_count = oranges.toInt\n        val mangos_count = mangos.toInt\n\
    \        val fruits_count = fruits.toInt\n        val total_count = apples_count\
    \ + oranges_count + mangos_count + fruits_count\n        val apples_count = apples.toInt\n\
    \        val oranges_count = oranges.toInt\n        val mangos_count = mangos.toInt\n\
    \        val fruits_count = fruits.toInt\n        val total_count = apples_count\
    \ + oranges_count + mangos_count + fruits_count\n        val apples_count = apples.toInt\n\
    \        val oranges_count = oranges.toInt\n        val mangos_count = mangos.toInt\n\
    \        val fruits_count = fruits.toInt\n        val total_count = apples_count\
    \ + oranges_count + mangos_count + fruits_count\n        val apples_count = apples.toInt\n\
    \        val oranges_count = oranges.toInt\n        val mangos_count = mangos.toInt\n\
    \        val fruits_count = fruits.toInt\n        val total_count = apples_count\
    \ + oranges_count + mangos_count + fruits_count\n        val apples_count = apples.toInt\n\
    \        val oranges_count = oranges.toInt\n        val mangos_count = mangos.toInt\n\
    \        val fruits_count = fruits.toInt\n        val total_count = apples_count\
    \ + oranges_count + mangos_count + fruits_count\n        val apples_count = apples.toInt\n\
    \        val oranges_count = oranges.toInt\n        val mangos_count = mangos.toInt\n\
    \        val fruits_count = fruits.toInt\n        val total_count = apples_count\
    \ + oranges_count + mangos_count + fruits_count\n        val apples_count = apples.toInt\n\
    \        val oranges_count = oranges.toInt\n        val mangos_count = mangos.toInt\n\
    \        val fruits_count = fruits.toInt\n        val total_count = apples_count\
    \ + oranges_count + mangos_count + fruits_count\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuc2k81ix.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpuc2k81ix.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0moranges_count\
    \ is already defined as \e[33mvalue\e[0m \e[35moranges_count\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuc2k81ix.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmangos_count\e[0m = mangos.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuc2k81ix.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mfruits_count\e[0m = fruits.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mfruits_count is already defined as \e[33mvalue\e[0m \e[35mfruits_count\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpuc2k81ix.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mtotal_count\e[0m = apples_count + oranges_count\
    \ + mangos_count + fruits_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val basket = new mutable.HashMap[String,\
    \ Int]()\n        basket.put(\"apples\", apples)\n        basket.put(\"oranges\"\
    , oranges)\n        basket.put(\"mangos\", mangos)\n        val totalFruits =\
    \ apples + oranges + mangos\n        val totalFruitsCount = basket.values.sum\n\
    \        val mangoFruitsCount = totalFruits - totalFruitsCount\n        val mangoFruitsCount\
    \ = mangoFruitsCount.toLong\n        mangoFruitsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptmz8q8ne.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsCount\e[0m =\
    \ mangoFruitsCount.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsCount is already defined as \e[33mvalue\e[0m \e\
    [35mmangoFruitsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmptmz8q8ne.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = n - fruits\n    \
    \    mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpp_z9_vif.scala:15)\n\
    \tat Problem$.main(tmpp_z9_vif.scala:22)\n\tat Problem.main(tmpp_z9_vif.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples and \")\n      \
    \  val oranges = s.split(\"oranges and \")\n        val mangos = s.split(\"mango\
    \ and \")\n        val apples_count = apples.map(_.toInt).sum\n        val oranges_count\
    \ = oranges.map(_.toInt).sum\n        val mangos_count = mangos.map(_.toInt).sum\n\
    \        val apples_total = apples_count + apples_count - 1\n        val oranges_total\
    \ = oranges_count + oranges_count - 1\n        val mangos_count = mangos_count\
    \ + mangos_count - 1\n        val apples_count = apples_count + apples_count -\
    \ 1\n        val oranges_count = oranges_count + oranges_count - 1\n        val\
    \ mangos_count = mangos_count + mangos_count - 1\n        val apples_total = apples_count\
    \ + apples_count - 1\n        val oranges_total = oranges_count + oranges_count\
    \ - 1\n        val mangos_count = mangos_count + mangos_count - 1\n        val\
    \ apples_count = apples_count + apples_count - 1\n        val oranges_count =\
    \ oranges_count + oranges_count - 1\n        val mangos_count = mangos_count +\
    \ mangos_count - 1\n        val apples_total = apples_count + apples_count - 1\n\
    \        val oranges_total = oranges_count + oranges_count - 1\n        val mangos_count\
    \ = mangos_count + mangos_count - 1\n        val apples_count = apples_count +\
    \ apples_count - 1\n        val oranges_count = oranges_count + oranges_count\
    \ - 1\n        val mangos_count = mangos_count + mangos_count - 1\n        val\
    \ apples_total = apples_count + apples_count - 1\n        val oranges_total =\
    \ oranges_count + oranges_count - 1\n        val mangos_count = mangos_count +\
    \ mangos_count - 1\n        val apples_count = apples_count + apples_count - 1\n\
    \        val oranges_count = oranges_count + oranges_count - 1\n        val mangos_count\
    \ = mangos_count + mangos_count - 1\n        val apples_total = apples_count +\
    \ apples_count - 1\n        val oranges_total = oranges_count + oranges_count\
    \ - 1\n        val mangos_count = mangos_count + mangos_count - 1\n        val\
    \ apples_count = apples_count + apples_count - 1\n        val oranges_count =\
    \ oranges_count + oranges_count - 1\n        val mangos_count = mangos_count +\
    \ mangos_count - 1\n        val apples_total = apples_count + apples_count - 1\n\
    \        val oranges_total = oranges_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6h8m3o4.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count\
    \ + mangos_count - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa6h8m3o4.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count + apples_count\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa6h8m3o4.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_count +\
    \ oranges_count - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa6h8m3o4.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count + mangos_count\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa6h8m3o4.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m"
  stdout: ''
  timestamp: 1659795005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val mangos = s.split(\"\
    \ \").map(_.toInt)\n        val fruits = apples ++ oranges ++ mangos\n       \
    \ val total = fruits.sum\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_percentage\
    \ = apples_count / total * 100\n        val oranges_percentage = oranges_count\
    \ / total * 100\n        val mangos_percentage = mangos_count / total * 100\n\
    \        val apples_percentage_rounded = math.round(apples_percentage)\n     \
    \   val oranges_percentage_rounded = math.round(oranges_percentage)\n        val\
    \ mangos_percentage_rounded = math.round(mangos_percentage)\n        val apples_percentage_rounded_rounded\
    \ = math.round(apples_percentage_rounded)\n        val oranges_percentage_rounded_rounded\
    \ = math.round(oranges_percentage_rounded)\n        val mangos_percentage_rounded_rounded\
    \ = math.round(mangos_percentage_rounded)\n        val apples_percentage_rounded_rounded_rounded\
    \ = math.round(apples_percentage_rounded_rounded)\n        val oranges_percentage_rounded_rounded_rounded\
    \ = math.round(oranges_percentage_rounded_rounded)\n        val mangos_percentage_rounded_rounded_rounded\
    \ = math.round(mangos_percentage_rounded_rounded)\n        val apples_percentage_rounded_rounded_rounded_rounded\
    \ = math.round(apples_percentage_rounded_rounded_rounded)\n        val oranges_percentage_rounded_rounded_rounded_rounded\
    \ = math.round(oranges_percentage_rounded_rounded_rounded)\n        val mangos_percentage_rounded_rounded_rounded_rounded\
    \ = math.round(mangos_percentage_rounded_rounded_rounded)\n        val apples_percentage_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(apples_percentage_rounded_rounded_rounded_rounded)\n        val\
    \ oranges_percentage_rounded_rounded_rounded_rounded_rounded = math.round(oranges_percentage_rounded_rounded_rounded)\n\
    \        val mangos_percentage_rounded_rounded_rounded_rounded_rounded = math.round(mangos_percentage_rounded_rounded_rounded_rounded)\n\
    \        val apples_percentage_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(apples_percentage_rounded_roun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo1ruyqsw.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo1ruyqsw.scala:41:91\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e\
    [36mapples_percentage_rounded_rounded_rounded_rounded_rounded_rounded\e[0m = math.round(apples_percentage_rounded_roun\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Not found: apples_percentage_rounded_roun\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo1ruyqsw.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = n - fruits\n    \
    \    fruits + mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpp9010woi.scala:15)\n\
    \tat Problem$.main(tmpp9010woi.scala:22)\n\tat Problem.main(tmpp9010woi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = s.toInt\n        val mangos = n - apples - oranges - fruits\n\
    \        mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpwnws4dtl.scala:15)\n\
    \tat Problem$.main(tmpwnws4dtl.scala:22)\n\tat Problem.main(tmpwnws4dtl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = n - apples - oranges\n        val apples_count = apples.toInt\n\
    \        val oranges_count = oranges.toInt\n        val mangos_count = mangos.toInt\n\
    \        val apples_count = apples_count - oranges_count\n        val oranges_count\
    \ = oranges_count - apples_count\n        val mangos_count = mangos_count - apples_count\
    \ - oranges_count\n        val apples_count = apples_count - oranges_count - mangos_count\n\
    \        val oranges_count = oranges_count - apples_count - mangos_count\n   \
    \     val mangos_count = mangos_count - apples_count - oranges_count - apples_count\n\
    \        val apples_count = apples_count - oranges_count - mangos_count - oranges_count\n\
    \        val oranges_count = oranges_count - apples_count - mangos_count - apples_count\
    \ - mangos_count\n        val mangos_count = mangos_count - apples_count - oranges_count\
    \ - apples_count - oranges_count - mangos_count\n        val apples_count = apples_count\
    \ - oranges_count - mangos_count - oranges_count - mangos_count - apples_count\n\
    \        val oranges_count = oranges_count - apples_count - mangos_count - oranges_count\
    \ - mangos_count - apples_count - mangos_count\n        val mangos_count = mangos_count\
    \ - apples_count - oranges_count - apples_count - oranges_count - mangos_count\
    \ - apples_count - oranges_count\n        val apples_count = apples_count - oranges_count\
    \ - mangos_count - oranges_count - mangos_count - apples_count - mangos_count\
    \ - oranges_count - mangos_count\n        val oranges_count = oranges_count -\
    \ apples_count - mangos_count - oranges_count - mangos_count - apples_count -\
    \ mangos_count - oranges_count - mangos_count - apples_count\n        val mangos_count\
    \ = mangos_count - apples_count - oranges_count - apples_count - oranges_count\
    \ - mangos_count - apples_count - oranges_count - mangos_count - apples_count\
    \ - oranges_count\n        val apples_count = apples_count - oranges_count - mangos_count\
    \ - oranges_count - mangos_count - apples_count - mangos_count - oranges_count\
    \ - mangos_count - apples_count - oranges_count - mangos_count\n        val oranges_count\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyc8h1r4v.scala:37:27 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = \n\e\
    [31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m        \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyc8h1r4v.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count\
    \ - oranges_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyc8h1r4v.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_count -\
    \ apples_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyc8h1r4v.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count - apples_count\
    \ - oranges_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyc8h1r4v.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - oranges_count\
    \ - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^"
  stdout: ''
  timestamp: 1659795007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \")(0)\n        val oranges\
    \ = s.split(\" \")(1)\n        val mangos = s.split(\" \")(2)\n        val apples_count\
    \ = apples.toLong\n        val oranges_count = oranges.toLong\n        val mangos_count\
    \ = mangos.toLong\n        val apples_sum = apples_count + apples_count - 1\n\
    \        val oranges_sum = oranges_count + oranges_count - 1\n        val mangos_sum\
    \ = mangos_count + mangos_count - 1\n        val apples_percentage = apples_sum\
    \ / apples_count * 100\n        val oranges_percentage = oranges_sum / oranges_count\
    \ * 100\n        val mangos_percentage = mangos_sum / mangos_count * 100\n   \
    \     val apples_percentage_rounded = math.round(apples_percentage)\n        val\
    \ oranges_percentage_rounded = math.round(oranges_percentage)\n        val mangos_percentage_rounded\
    \ = math.round(mangos_percentage)\n        val apples_percentage_rounded_rounded\
    \ = math.round(apples_percentage_rounded)\n        val oranges_percentage_rounded_rounded\
    \ = math.round(oranges_percentage_rounded)\n        val mangos_percentage_rounded_rounded\
    \ = math.round(mangos_percentage_rounded)\n        val apples_percentage_rounded_rounded_rounded\
    \ = math.round(apples_percentage_rounded_rounded)\n        val oranges_percentage_rounded_rounded_rounded\
    \ = math.round(oranges_percentage_rounded_rounded)\n        val mangos_percentage_rounded_rounded_rounded\
    \ = math.round(mangos_percentage_rounded_rounded)\n        val apples_percentage_rounded_rounded_rounded_rounded\
    \ = math.round(apples_percentage_rounded_rounded_rounded)\n        val oranges_percentage_rounded_rounded_rounded_rounded\
    \ = math.round(oranges_percentage_rounded_rounded_rounded)\n        val mangos_percentage_rounded_rounded_rounded_rounded\
    \ = math.round(mangos_percentage_rounded_rounded_rounded)\n        val apples_percentage_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(apples_percentage_rounded_rounded_rounded_rounded)\n        val\
    \ oranges_percentage_rounded_rounded_rounded_rounded_rounded = math.round(oranges_percentage_rounded_rounded_rounded)\n\
    \        val mangos_percentage_rounded_rounded_rounded_rounded_rounded = math.round(mangos_percentage_rounded_rounded_rounded_rounded)\n\
    \        val apples_percentage_rounded_rounded_rounded_roun\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgql2rx5r.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgql2rx5r.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0).toLong\n \
    \       val oranges = s.split(\"oranges\")(0).toLong\n        val mangos = s.split(\"\
    mangos\")(0).toLong\n        val basket = new mutable.HashMap[String, Long]()\n\
    \        basket.put(\"apples\", apples)\n        basket.put(\"oranges\", oranges)\n\
    \        basket.put(\"mangos\", mangos)\n        val total = apples + oranges\
    \ + mangos\n        val fruits = basket.filter(_._2 > 0).map(_._1).sum\n     \
    \   fruits - mangos - total - apples - oranges\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5krfryxu.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = n - apples - oranges\n        val apples_count = apples.toInt\n\
    \        val oranges_count = oranges.toInt\n        val mangos_count = mangos.toInt\n\
    \        val apples_count = apples_count - oranges_count\n        val oranges_count\
    \ = oranges_count - apples_count\n        val mangos_count = mangos_count - apples_count\
    \ - oranges_count\n        apples_count + oranges_count + mangos_count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0fb1t8b9.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count\
    \ - oranges_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0fb1t8b9.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_count -\
    \ apples_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0fb1t8b9.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count - apples_count\
    \ - oranges_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1659795006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples and \").map(_.toInt)\n\
    \        val oranges = s.split(\"oranges and \").map(_.toInt)\n        val mangos\
    \ = s.split(\"mango and \").map(_.toInt)\n        val apples_count = apples.sum\n\
    \        val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n\
    \        val total_count = apples_count + oranges_count + mangos_count\n     \
    \   val apples_percent = apples.map(x => x / total_count).sum\n        val oranges_percent\
    \ = oranges.map(x => x / total_count).sum\n        val mangos_percent = mangos.map(x\
    \ => x / total_count).sum\n        val total_percent = apples_percent + oranges_percent\
    \ + mangos_percent\n        val total_percent = total_percent * 100\n        val\
    \ apples_percent = apples_percent * 100\n        val oranges_percent = oranges_percent\
    \ * 100\n        val mangos_percent = mangos_percent * 100\n        val total_percent\
    \ = total_percent * 100\n        val apples_percent = apples_percent * 100\n \
    \       val oranges_percent = oranges_percent * 100\n        val mangos_percent\
    \ = mangos_percent * 100\n        val total_percent = total_percent * 100\n  \
    \      val apples_percent = apples_percent * 100\n        val oranges_percent\
    \ = oranges_percent * 100\n        val mangos_percent = mangos_percent * 100\n\
    \        val total_percent = total_percent * 100\n        val apples_percent =\
    \ apples_percent * 100\n        val oranges_percent = oranges_percent * 100\n\
    \        val mangos_percent = mangos_percent * 100\n        val total_percent\
    \ = total_percent * 100\n        val apples_percent = apples_percent * 100\n \
    \       val oranges_percent = oranges_percent * 100\n        val mangos_percent\
    \ = mangos_percent * 100\n        val total_percent = total_percent * 100\n  \
    \      val apples_percent = apples_percent * 100\n        val oranges_percent\
    \ = oranges_percent * 100\n        val mangos_percent = mangos_percent * 100\n\
    \        val total_percent = total_percent * 100\n        val apples_percent =\
    \ apples_percent * 100\n        val oranges_percent = oranges_percent * 100\n\
    \        val mangos_percent = mangos_percent * 100\n        val total_percent\
    \ = total_percent * 100\n        val apples_percent = apples_percent * 100\n \
    \       val oranges_percent = oranges_percent * 100\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl4cp6v56.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mtotal_percent\e[0m = total_percent\
    \ * \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotal_percent is already defined as \e[33mvalue\e[0m \e[35mtotal_percent\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl4cp6v56.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mapples_percent\e[0m = apples_percent\
    \ * \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_percent is already defined as \e[33mvalue\e[0m \e[35mapples_percent\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl4cp6v56.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36moranges_percent\e[0m = oranges_percent\
    \ * \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_percent is already defined as \e[33mvalue\e[0m \e\
    [35moranges_percent\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpl4cp6v56.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmangos_percent\e[0m = mangos_percent\
    \ * \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_percent is already defined as \e[33mvalue\e[0m \e[35mmangos_percent\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl4cp6v56.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mtotal_percent\e[0m = total_percent *\
    \ \e["
  stdout: ''
  timestamp: 1659795011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val fruits = apples ++\
    \ oranges\n        val apples_count = apples.sum\n        val oranges_count =\
    \ oranges.sum\n        val mangos = fruits.filter(_ % 2 == 0)\n        val mangos_count\
    \ = mangos.sum\n        val total_count = apples_count + oranges_count + mangos_count\n\
    \        val mangos_count = mangos.sum\n        val total_count = apples_count\
    \ + oranges_count + mangos_count\n        val mangos_count = mangos.sum\n    \
    \    val total_count = apples_count + oranges_count + mangos_count\n        val\
    \ mangos_count = mangos.sum\n        val total_count = apples_count + oranges_count\
    \ + mangos_count\n        val mangos_count = mangos.sum\n        val total_count\
    \ = apples_count + oranges_count + mangos_count\n        val mangos_count = mangos.sum\n\
    \        val total_count = apples_count + oranges_count + mangos_count\n     \
    \   val mangos_count = mangos.sum\n        val total_count = apples_count + oranges_count\
    \ + mangos_count\n        val mangos_count = mangos.sum\n        val total_count\
    \ = apples_count + oranges_count + mangos_count\n        val mangos_count = mangos.sum\n\
    \        val total_count = apples_count + oranges_count + mangos_count\n     \
    \   val mangos_count = mangos.sum\n        val total_count = apples_count + oranges_count\
    \ + mangos_count\n        val mangos_count = mangos.sum\n        val total_count\
    \ = apples_count + oranges_count + mangos_count\n        val mangos_count = mangos.sum\n\
    \        val total_count = apples_count + oranges_count + mangos_count\n     \
    \   val mangos_count = mangos.sum\n        val total_count = apples_count + oranges_count\
    \ + mangos_count\n        val mangos_count = mangos.sum\n        val total_count\
    \ = apples_count + oranges_count + mangos_count\n        val mangos_count = mangos.sum\n\
    \        val total_count = apples_count + oranges_count + mangos_count\n     \
    \   val mangos_count = mangos.sum\n        val total_count = apples_count + oranges_count\
    \ + mangos_count\n        val mangos_count = mangos.sum\n        val total_count\
    \ = apples_count + oranges_count + mangos_count\n        val mangos_count = mangos.sum\n\
    \        val total_count = apples_count + oranges_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq6w9yfvv.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq6w9yfvv.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mtotal_count\e[0m = apples_count + oranges_count\
    \ + mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotal_count is already defined as \e[33mvalue\e[0m \e[35mtotal_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq6w9yfvv.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos.sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmangos_count\
    \ is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq6w9yfvv.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtotal_count\e[0m = apples_count + oranges_count + mangos_count\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotal_count is already defined as \e[33mvalue\e[0m \e[35mtotal_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq6w9yfvv.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos.sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^"
  stdout: ''
  timestamp: 1659795013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples and \")\n      \
    \  val oranges = s.split(\"oranges and \")\n        val mangos = s.split(\"mango\
    \ and \")\n        val fruits = s.split(\"fruits in the basket\")\n        val\
    \ apples_count = apples(0).trim().toInt\n        val oranges_count = oranges(0).trim().toInt\n\
    \        val mangos_count = mangos(0).trim().toInt\n        val fruits_count =\
    \ fruits(0).trim().toInt\n        val total_apples = apples_count + oranges_count\
    \ + mangos_count\n        val total_fruits = fruits_count + apples_count + oranges_count\
    \ + mangos_count\n        val apples_percentage = apples_count / total_apples\
    \ * 100\n        val oranges_percentage = oranges_count / total_oranges * 100\n\
    \        val mangos_percentage = mangos_count / total_mangos * 100\n        val\
    \ fruits_percentage = fruits_count / total_fruits * 100\n        val total_percentage\
    \ = apples_percentage + oranges_percentage + mangos_percentage + fruits_percentage\n\
    \        val total_percentage_rounded = total_percentage.roundToInt\n        val\
    \ total_percentage_rounded_rounded = total_percentage_rounded + 1\n        val\
    \ total_percentage_rounded_rounded_rounded = total_percentage_rounded_rounded\
    \ + 1\n        val total_percentage_rounded_rounded_rounded_rounded = total_percentage_rounded_rounded_rounded\
    \ + 1\n        val total_percentage_rounded_rounded_rounded_rounded_rounded =\
    \ total_percentage_rounded_rounded_rounded_rounded + 1\n        val total_percentage_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = total_percentage_rounded_rounded_rounded_rounded_rounded + 1\n        val\
    \ total_percentage_rounded_rounded_rounded_rounded_rounded_rounded_rounded = total_percentage_rounded_rounded_rounded_rounded_rounded_rounded\
    \ + 1\n        val total_percentage_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = total_percentage_rounded_rounded_rounded_rounded_rounded_rounded + 1\n   \
    \     val total_percentage_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = total_percentage_rounded_rounded_rounded_rounded_rounded_rounded + 1\n   \
    \     val total_percentage_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = total_percentage_rounded_rounded_rounded_rounded_rounded_rounded_rounded +\
    \ 1\n        val total_percentage_rounded_rounded_rounded_roun\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfsbznkha.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfsbznkha.scala:26:49\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36moranges_percentage\e[0m = oranges_count / total_oranges * \e[31m100\e[0m\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Not found:\
    \ total_oranges\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfsbznkha.scala:27:47\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mmangos_percentage\e[0m = mangos_count / total_mangos * \e[31m100\e[0m\n\e\
    [31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                               Not found:\
    \ total_mangos\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfsbznkha.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659795012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = n.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = fruits - apples -\
    \ oranges\n        mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpns97ohth.scala:16)\n\
    \tat Problem$.main(tmpns97ohth.scala:22)\n\tat Problem.main(tmpns97ohth.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val arr = s.split(\" \")\n        val apples =\
    \ arr.head.toLong\n        val oranges = arr.last.toLong\n        val fruits =\
    \ apples + oranges\n        val mangoes = n - fruits\n        mangoes\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"oranges\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp9y6gm2zc.scala:17)\n\
    \tat Problem$.main(tmp9y6gm2zc.scala:23)\n\tat Problem.main(tmp9y6gm2zc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0).toLong\n \
    \       val oranges = s.split(\"oranges\")(0).toLong\n        val mangos = s.split(\"\
    mango\")(0).toLong\n        val total = apples + oranges + mangos\n        val\
    \ basket = new mutable.HashMap[String, Long]()\n        basket.put(\"apples\"\
    , apples)\n        basket.put(\"oranges\", oranges)\n        basket.put(\"mangos\"\
    , mangos)\n        basket.put(\"total\", total)\n        val result = basket.getOrElse(\"\
    mangos\", 0)\n        result - n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6slsk7y1.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \")(0).toLong\n      \
    \  val oranges = s.split(\" \")(1).toLong\n        val fruits = s.split(\" \"\
    )(2).toLong\n        val mangos = n - apples - oranges - fruits\n        mangos\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp179o75mb.scala:16)\n\
    \tat Problem$.main(tmp179o75mb.scala:22)\n\tat Problem.main(tmp179o75mb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795014
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val arr = s.split(\" \")\n        val apples =\
    \ arr.map(_.toInt)\n        val oranges = arr.filter(_.toString.contains(\"oranges\"\
    )).map(_.toInt)\n        val mangoes = arr.filter(_.toString.contains(\"mango\"\
    )).map(_.toInt)\n        val total = apples.sum + oranges.sum + mangoes.sum\n\
    \        val result = total - apples.sum - oranges.sum - mangoes.sum\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpdvu_wroi.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpdvu_wroi.scala:16)\n\
    \tat Problem$.main(tmpdvu_wroi.scala:24)\n\tat Problem.main(tmpdvu_wroi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val basket = new mutable.HashMap[String,\
    \ Int]()\n        basket.put(\"apples\", apples)\n        basket.put(\"oranges\"\
    , oranges)\n        basket.put(\"mangos\", mangos)\n        val totalFruits =\
    \ apples + oranges + mangos\n        val fruitsInBasket = basket.filter(_._2 >\
    \ 0).map(_._1).sum\n        val mangoFruits = fruitsInBasket - mangos\n      \
    \  fruitsInBasket - mangos\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx8rrucs4.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = s.toInt\n        val apples_count = apples + oranges\n \
    \       val oranges_count = apples - oranges\n        val mangos = n - apples_count\
    \ - oranges_count\n        fruits - mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpqoaxylw9.scala:15)\n\
    \tat Problem$.main(tmpqoaxylw9.scala:24)\n\tat Problem.main(tmpqoaxylw9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795014
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0).toLong\n \
    \       val oranges = s.split(\"oranges\")(0).toLong\n        val mangos = s.split(\"\
    mango\")(0).toLong\n        val fruit = apples + oranges + mangos\n        fruit\
    \ - n\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp6sx0v4xf.scala:15)\n\
    \tat Problem$.main(tmp6sx0v4xf.scala:22)\n\tat Problem.main(tmp6sx0v4xf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(1).toLong\n        val mangoes\
    \ = n - apples - oranges\n        fruits.last.toLong - apples - oranges\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpri3hdqu0.scala:17)\n\
    \tat Problem$.main(tmpri3hdqu0.scala:22)\n\tat Problem.main(tmpri3hdqu0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(1).trim\n   \
    \     val oranges = s.split(\"oranges\")(1).trim\n        val mangos = s.split(\"\
    mango\")(1).trim\n        val fruits = s.split(\"fruits\")(1).trim\n        val\
    \ basket = fruits.split(\" \").map(_.toInt)\n        val totalApples = apples.toInt\n\
    \        val totalOranges = oranges.toInt\n        val totalMangos = mangos.toInt\n\
    \        val totalFruits = fruits.toInt\n        val totalBasket = basket.toInt\n\
    \        val totalFruitsInBasket = totalBasket - totalApples - totalOranges -\
    \ totalMangos\n        val totalMangoInBasket = totalFruitsInBasket - totalFruits\n\
    \        totalMangoInBasket.toLong\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe821x_3v.scala:24:33 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mtotalBasket\e[0m = basket.toInt\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue toInt is not a member of Array[Int], but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = n - fruits\n    \
    \    fruits + mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpp9010woi.scala:15)\n\
    \tat Problem$.main(tmpp9010woi.scala:22)\n\tat Problem.main(tmpp9010woi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val mangos = s.split(\"\
    \ \").map(_.toInt)\n        val fruits = apples ++ oranges ++ mangos\n       \
    \ val totalFruits = fruits.sum\n        val totalApples = apples.sum\n       \
    \ val totalOranges = oranges.sum\n        val totalMangos = mangos.sum\n     \
    \   val totalFruitsPerApple = totalFruits / totalApples\n        val totalFruitsPerOrange\
    \ = totalFruits / totalOranges\n        val totalFruitsPerMango = totalFruits\
    \ / totalMangos\n        val totalFruitsPerAppleAndOrange = totalFruitsPerApple\
    \ * totalFruitsPerOrange\n        val totalFruitsPerAppleAndMango = totalFruitsPerApple\
    \ * totalFruitsPerMango\n        val totalFruitsPerOrangeAndMango = totalFruitsPerOrange\
    \ * totalFruitsPerMango\n        val totalFruitsPerAppleAndOrangeAndMango = totalFruitsPerAppleAndOrange\
    \ * totalFruitsPerMango\n        val totalFruitsPerAppleAndOrangeAndMangoAndTotal\
    \ = totalFruitsPerAppleAndOrangeAndMango * totalFruits\n        totalFruitsPerAppleAndOrangeAndMangoAndTotal\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpcsx5g88u.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpcsx5g88u.scala:15)\n\
    \tat Problem$.main(tmpcsx5g88u.scala:34)\n\tat Problem.main(tmpcsx5g88u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val fruits = apples ++\
    \ oranges\n        val mangoes = fruits.filter(x => x % 2 == 0)\n        fruits.size\
    \ - mangoes.size\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp4_gxdqjh.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp4_gxdqjh.scala:15)\n\
    \tat Problem$.main(tmp4_gxdqjh.scala:22)\n\tat Problem.main(tmp4_gxdqjh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val arr = s.split(\" \")\n        val apples =\
    \ arr.filter(_.toString.toInt > 0).length\n        val oranges = arr.filter(_.toString.toInt\
    \ < 0).length\n        val mangoes = arr.filter(_.toString.toInt == 0).length\n\
    \        val total = apples + oranges + mangoes\n        val apples_count = apples\
    \ + mangoes\n        val oranges_count = oranges + mangoes\n        val mangoes_count\
    \ = mangoes\n        val apples_percentage = (apples_count * 100) / total\n  \
    \      val oranges_percentage = (oranges_count * 100) / total\n        val mangoes_percentage\
    \ = (mangoes_count * 100) / total\n        val apples_percentage_rounded = Math.round(apples_percentage)\n\
    \        val oranges_percentage_rounded = Math.round(oranges_percentage)\n   \
    \     val mangoes_percentage_rounded = Math.round(mangoes_percentage)\n      \
    \  val apples_percentage_rounded_rounded = Math.round(apples_percentage_rounded)\n\
    \        val oranges_percentage_rounded_rounded = Math.round(oranges_percentage_rounded)\n\
    \        val mangoes_percentage_rounded_rounded = Math.round(mangoes_percentage_rounded)\n\
    \        val apples_percentage_rounded_rounded_rounded = Math.round(apples_percentage_rounded_rounded)\n\
    \        val oranges_percentage_rounded_rounded_rounded = Math.round(oranges_percentage_rounded_rounded)\n\
    \        val mangoes_percentage_rounded_rounded_rounded = Math.round(mangoes_percentage_rounded_rounded)\n\
    \        val apples_percentage_rounded_rounded_rounded_rounded = Math.round(apples_percentage_rounded_rounded_rounded)\n\
    \        val oranges_percentage_rounded_rounded_rounded_rounded = Math.round(oranges_percentage_rounded_rounded_rounded)\n\
    \        val mangoes_percentage_rounded_rounded_rounded_rounded = Math.round(mangoes_percentage_rounded_rounded_rounded)\n\
    \        val apples_percentage_rounded_rounded_rounded_rounded_rounded = Math.round(apples_percentage_rounded_rounded_rounded_rounded)\n\
    \        val oranges_percentage_rounded_rounded_rounded_rounded_rounded = Math.round(oranges_percentage_rounded_rounded_rounded_rounded)\n\
    \        val mangoes_percentage_rounded_rounded_rounded_rounded_rounded = Math.round(mangoes_percentage_rounded_rounded_rounded_rounded)\n\
    \        val apples_percentage_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(apples_\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkiyc2ut6.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkiyc2ut6.scala:41:91\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e\
    [36mapples_percentage_rounded_rounded_rounded_rounded_rounded_rounded\e[0m = Math.round(apples_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                                          Not found: apples_\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkiyc2ut6.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = n - apples - oranges\n        val apples_count = apples.toInt\n\
    \        val oranges_count = oranges.toInt\n        val mangos_count = mangos.toInt\n\
    \        val apples_count = apples_count - oranges_count\n        val oranges_count\
    \ = oranges_count - apples_count\n        val mangos_count = mangos_count - apples_count\
    \ - oranges_count\n        val apples_count = apples_count - oranges_count - mangos_count\n\
    \        val oranges_count = oranges_count - apples_count - mangos_count\n   \
    \     val mangos_count = mangos_count - apples_count - oranges_count - apples_count\n\
    \        val apples_count = apples_count - oranges_count - mangos_count - oranges_count\n\
    \        val oranges_count = oranges_count - apples_count - mangos_count - apples_count\
    \ - mangos_count\n        val mangos_count = mangos_count - apples_count - oranges_count\
    \ - apples_count - oranges_count - mangos_count\n        val apples_count = apples_count\
    \ - oranges_count - mangos_count - oranges_count - mangos_count - apples_count\n\
    \        val oranges_count = oranges_count - apples_count - mangos_count - oranges_count\
    \ - mangos_count - apples_count - mangos_count\n        val mangos_count = mangos_count\
    \ - apples_count - oranges_count - apples_count - oranges_count - mangos_count\
    \ - apples_count - mangos_count - oranges_count\n        val apples_count = apples_count\
    \ - oranges_count - mangos_count - oranges_count - mangos_count - apples_count\
    \ - mangos_count - oranges_count - mangos_count\n        val oranges_count = oranges_count\
    \ - apples_count - mangos_count - oranges_count - mangos_count - apples_count\
    \ - mangos_count - oranges_count - mangos_count - apples_count\n        val mangos_count\
    \ = mangos_count - apples_count - oranges_count - apples_count - oranges_count\
    \ - mangos_count - apples_count - mangos_count - oranges_count - mangos_count\
    \ - apples_count\n        val apples_count = apples_count - oranges_count - mangos_count\
    \ - oranges_count - mangos_count - apples_count - mangos_count - oranges_count\
    \ - mangos_count - apples_count - mangos_count - oranges_count\n        val \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpbsjc_6_4.scala:37:11 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpbsjc_6_4.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count\
    \ - oranges_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsjc_6_4.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_count -\
    \ apples_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsjc_6_4.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count - apples_count\
    \ - oranges_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbsjc_6_4.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - oranges_count\
    \ - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_c"
  stdout: ''
  timestamp: 1659795015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val fruits = apples ++\
    \ oranges\n        val totalApples = apples.sum\n        val totalOranges = oranges.sum\n\
    \        val totalFruits = fruits.sum\n        val mangos = totalFruits - totalApples\
    \ - totalOranges\n        mangos\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpqybpycsg.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpqybpycsg.scala:15)\n\
    \tat Problem$.main(tmpqybpycsg.scala:25)\n\tat Problem.main(tmpqybpycsg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = s.toInt\n        val mangos = n - apples - oranges - fruits\n\
    \        fruits\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpwdby1dux.scala:15)\n\
    \tat Problem$.main(tmpwdby1dux.scala:22)\n\tat Problem.main(tmpwdby1dux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = n - fruits\n    \
    \    mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpp_z9_vif.scala:15)\n\
    \tat Problem$.main(tmpp_z9_vif.scala:22)\n\tat Problem.main(tmpp_z9_vif.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \")(0).toLong\n      \
    \  val oranges = s.split(\" \")(1).toLong\n        val mangos = s.split(\" \"\
    )(2).toLong\n        val total = apples + oranges + mangos\n        val apples_count\
    \ = apples.toInt\n        val oranges_count = oranges.toInt\n        val mangos_count\
    \ = mangos.toInt\n        val apples_count = apples_count - mangos_count\n   \
    \     val oranges_count = oranges_count - mangos_count\n        val mangos_count\
    \ = mangos_count - apples_count\n        val apples_count = apples_count - oranges_count\n\
    \        val oranges_count = oranges_count - apples_count\n        val mangos_count\
    \ = mangos_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val oranges_count = oranges_count - apples_count\n        val mangos_count\
    \ = mangos_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val oranges_count = oranges_count - apples_count\n        val mangos_count\
    \ = mangos_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val oranges_count = oranges_count - apples_count\n        val mangos_count\
    \ = mangos_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val oranges_count = oranges_count - apples_count\n        val mangos_count\
    \ = mangos_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val oranges_count = oranges_count - apples_count\n        val mangos_count\
    \ = mangos_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val oranges_count = oranges_count - apples_count\n        val mangos_count\
    \ = mangos_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val oranges_count = oranges_count - apples_count\n        val mangos_count\
    \ = mangos_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val oranges_count = oranges_count - apples_count\n        val mangos_count\
    \ = mangos_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val oranges_count = oranges_count - apples_count\n        val mangos_count\
    \ = mangos_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val oranges_count = oranges_count - apples_count\n        val mangos_count\
    \ = mangos_count - orange\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqf5ehb4q.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count\
    \ - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqf5ehb4q.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_count -\
    \ mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqf5ehb4q.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count - apples_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqf5ehb4q.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - oranges_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqf5ehb4q.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_count -\
    \ apples"
  stdout: ''
  timestamp: 1659795015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val fruits = apples ++\
    \ oranges\n        val mangos = fruits.filter(_ % 2 == 0)\n        fruits.length\
    \ - mangos.length\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpnc56z6ck.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpnc56z6ck.scala:15)\n\
    \tat Problem$.main(tmpnc56z6ck.scala:22)\n\tat Problem.main(tmpnc56z6ck.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \")(0).toLong\n      \
    \  val oranges = s.split(\" \")(1).toLong\n        val mangos = s.split(\" \"\
    )(2).toLong\n        val totalFruits = apples + oranges + mangos\n        val\
    \ fruitsInBasket = n - totalFruits\n        val mangoFruits = fruitsInBasket -\
    \ mangos\n        mangoFruits\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp5611q5nr.scala:16)\n\
    \tat Problem$.main(tmp5611q5nr.scala:24)\n\tat Problem.main(tmp5611q5nr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val fruits = apples ++\
    \ oranges\n        val totalFruits = fruits.sum\n        val mangoFruits = totalFruits\
    \ - fruits\n        mangoFruits\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpviim8ou9.scala:19:38 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmangoFruits\e[0m = totalFruits\
    \ - fruits\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e\
    [0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double):\
    \ Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\
    \e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e\
    [0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments\
    \ ((fruits : Array[Int]))\n1 error found\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val mangos = s.split(\"\
    \ \").map(_.toInt)\n        val fruits = apples ++ oranges ++ mangos\n       \
    \ val basket = fruits.toSet\n        val count = fruits.count(_ == n)\n      \
    \  fruits.count(_ == n) - count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpui1idyka.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpui1idyka.scala:15)\n\
    \tat Problem$.main(tmpui1idyka.scala:24)\n\tat Problem.main(tmpui1idyka.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0).trim().toInt\n\
    \        val oranges = s.split(\"oranges\")(0).trim().toInt\n        val mangos\
    \ = s.split(\"mango\")(0).trim().toInt\n        val fruits = apples + oranges\
    \ + mangos\n        fruits.toLong - n - mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6\"\n\
    \tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmp2qp0g51l.scala:16)\n\
    \tat Problem$.main(tmp2qp0g51l.scala:22)\n\tat Problem.main(tmp2qp0g51l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\"and\").map(_.toInt)\n        val fruits = apples\
    \ ++ oranges\n        val total = fruits.sum\n        val mango = n - total\n\
    \        mango\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmphjv5pd3q.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmphjv5pd3q.scala:15)\n\
    \tat Problem$.main(tmphjv5pd3q.scala:23)\n\tat Problem.main(tmphjv5pd3q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val mangos = s.split(\"\
    \ \").map(_.toInt)\n        val basket = new mutable.HashMap[String, Int]()\n\
    \        basket.put(\"apples\", apples.sum)\n        basket.put(\"oranges\", oranges.sum)\n\
    \        basket.put(\"mangos\", mangos.sum)\n        val totalFruits = apples.sum\
    \ + oranges.sum + mangos.sum\n        val totalFruitsCount = apples.sum + oranges.sum\
    \ + mangos.sum\n        val totalFruitsCount2 = apples.sum + oranges.sum + mangos.sum\n\
    \        val totalFruitsCount3 = apples.sum + oranges.sum + mangos.sum\n     \
    \   val totalFruitsCount4 = apples.sum + oranges.sum + mangos.sum\n        val\
    \ totalFruitsCount5 = apples.sum + oranges.sum + mangos.sum\n        val totalFruitsCount6\
    \ = apples.sum + oranges.sum + mangos.sum\n        val totalFruitsCount7 = apples.sum\
    \ + oranges.sum + mangos.sum\n        val totalFruitsCount8 = apples.sum + oranges.sum\
    \ + mangos.sum\n        val totalFruitsCount9 = apples.sum + oranges.sum + mangos.sum\n\
    \        val totalFruitsCount10 = apples.sum + oranges.sum + mangos.sum\n    \
    \    val totalFruitsCount11 = apples.sum + oranges.sum + mangos.sum\n        val\
    \ totalFruitsCount12 = apples.sum + oranges.sum + mangos.sum\n        val totalFruitsCount13\
    \ = apples.sum + oranges.sum + mangos.sum\n        val totalFruitsCount14 = apples.sum\
    \ + oranges.sum + mangos.sum\n        val totalFruitsCount15 = apples.sum + oranges.sum\
    \ + mangos.sum\n        val totalFruitsCount16 = apples.sum + oranges.sum + mangos.sum\n\
    \        val totalFruitsCount17 = apples.sum + oranges.sum + mangos.sum\n    \
    \    val totalFruitsCount18 = apples.sum + oranges.sum + mangos.sum\n        val\
    \ totalFruitsCount19 = apples.sum + oranges.sum + mangos.sum\n        val totalFruitsCount20\
    \ = apples.\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsyfbvxfg.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpsyfbvxfg.scala:18:25 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsyfbvxfg.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795021
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0).toLong\n \
    \       val oranges = s.split(\"oranges\")(0).toLong\n        val mangos = s.split(\"\
    mango\")(0).toLong\n        val totalFruits = apples + oranges + mangos\n    \
    \    val totalFruitsCount = totalFruits - apples - oranges - mangos\n        val\
    \ totalFruitsCountInBasket = totalFruitsCount / n\n        val mangoFruitsCount\
    \ = totalFruitsCount - totalFruitsCountInBasket\n        mangoFruitsCount\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp_qkdfbqi.scala:15)\n\
    \tat Problem$.main(tmp_qkdfbqi.scala:25)\n\tat Problem.main(tmp_qkdfbqi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795022
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0).toLong\n \
    \       val oranges = s.split(\"oranges\")(0).toLong\n        val mangos = s.split(\"\
    mango\")(0).toLong\n        val fruits = apples + oranges + mangos\n        fruits.toLong\
    \ - n - mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp4es2t70z.scala:15)\n\
    \tat Problem$.main(tmp4es2t70z.scala:22)\n\tat Problem.main(tmp4es2t70z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795022
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0).toLong\n \
    \       val oranges = s.split(\"oranges\")(0).toLong\n        val mangos = s.split(\"\
    mango\")(0).toLong\n        val fruits = apples + oranges + mangos\n        fruits\
    \ - n\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpajxp9geb.scala:15)\n\
    \tat Problem$.main(tmpajxp9geb.scala:22)\n\tat Problem.main(tmpajxp9geb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795023
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = s.toInt\n        val mangos = n - apples - oranges - fruits\n\
    \        mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpwnws4dtl.scala:15)\n\
    \tat Problem$.main(tmpwnws4dtl.scala:22)\n\tat Problem.main(tmpwnws4dtl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(1).toLong\n        val mangoes\
    \ = n - apples - oranges\n        fruits.last.toLong - apples - oranges\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpri3hdqu0.scala:17)\n\
    \tat Problem$.main(tmpri3hdqu0.scala:22)\n\tat Problem.main(tmpri3hdqu0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val fruits = apples + oranges + mangos\n\
    \        val basket = fruits.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples_count - oranges_count - mangos_count\n    \
    \    val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val apples_count = apples_count - oranges_count - mangos_count\n    \
    \    val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val apples_count = apples_count - oranges_count - mangos_count\n    \
    \    val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val apples_count = apples_count - oranges_count - mangos_count\n    \
    \    val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val apples_count = apples_count - oranges_count - mangos_count\n    \
    \    val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val apples_count = apples_count - oranges_count - mangos_count\n    \
    \    val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val apples_count = apples_count - oranges_count - mangos_count\n    \
    \    val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val apples_count = apples_count - oranges_count - mangos_count\n    \
    \    val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count\n        val apples_count = apples_count - mangos_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgy7zcp2s.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count\
    \ - oranges_count - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgy7zcp2s.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - mangos_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgy7zcp2s.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - oranges_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgy7zcp2s.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - mangos_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgy7zcp2s.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m"
  stdout: ''
  timestamp: 1659795023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples and \")\n      \
    \  val oranges = s.split(\"oranges and \")\n        val mangos = s.split(\"mango\
    \ and \")\n        val apples_count = apples.map(_.toInt).sum\n        val oranges_count\
    \ = oranges.map(_.toInt).sum\n        val mangos_count = mangos.map(_.toInt).sum\n\
    \        val total_count = apples_count + oranges_count + mangos_count\n     \
    \   val apples_count = apples.map(_.toInt).sum\n        val oranges_count = oranges.map(_.toInt).sum\n\
    \        val mangos_count = mangos.map(_.toInt).sum\n        val total_count =\
    \ apples_count + oranges_count + mangos_count\n        val apples_count = apples.map(_.toInt).sum\n\
    \        val oranges_count = oranges.map(_.toInt).sum\n        val mangos_count\
    \ = mangos.map(_.toInt).sum\n        val total_count = apples_count + oranges_count\
    \ + mangos_count\n        val apples_count = apples.map(_.toInt).sum\n       \
    \ val oranges_count = oranges.map(_.toInt).sum\n        val mangos_count = mangos.map(_.toInt).sum\n\
    \        val total_count = apples_count + oranges_count + mangos_count\n     \
    \   val apples_count = apples.map(_.toInt).sum\n        val oranges_count = oranges.map(_.toInt).sum\n\
    \        val mangos_count = mangos.map(_.toInt).sum\n        val total_count =\
    \ apples_count + oranges_count + mangos_count\n        val apples_count = apples.map(_.toInt).sum\n\
    \        val oranges_count = oranges.map(_.toInt).sum\n        val mangos_count\
    \ = mangos.map(_.toInt).sum\n        val total_count = apples_count + oranges_count\
    \ + mangos_count\n        val apples_count = apples.map(_.toInt).sum\n       \
    \ val oranges_count = oranges.map(_.toInt).sum\n        val mangos_count = mangos.map(_.toInt).sum\n\
    \        val total_count = apples_count + oranges_count + mangos_count\n     \
    \   val apples_count = apples.map(_.toInt).sum\n        val oranges_count = oranges.map(_.toInt).sum\n\
    \        val mangos_count = mangos.map(_.toInt).sum\n        val total_count =\
    \ apples_count + oranges_count + mangos_count\n        val apples_count = apples.map(_.toInt).sum\n\
    \        val oranges_count = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyka3dfix.scala:51:27 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = \n\e\
    [31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m        \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyka3dfix.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples.map(_.toInt).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyka3dfix.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges.map(_.toInt).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyka3dfix.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos.map(_.toInt).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyka3dfix.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mtotal_count\e[0m = apples_count + oranges_count\
    \ + mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0"
  stdout: ''
  timestamp: 1659795024
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = s.toInt\n        val mangos = n - apples - oranges - fruits\n\
    \        mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpwnws4dtl.scala:15)\n\
    \tat Problem$.main(tmpwnws4dtl.scala:22)\n\tat Problem.main(tmpwnws4dtl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = n.toInt\n        val oranges = s.toInt\n\
    \        val mangos = apples - oranges\n        val fruits = apples + oranges\
    \ + mangos\n        fruits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpn7sjjmex.scala:16)\n\
    \tat Problem$.main(tmpn7sjjmex.scala:22)\n\tat Problem.main(tmpn7sjjmex.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795003
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = n - apples - oranges\n        val fruits = apples + oranges\
    \ + mangos\n        fruits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpryliqr34.scala:15)\n\
    \tat Problem$.main(tmpryliqr34.scala:22)\n\tat Problem.main(tmpryliqr34.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val fruits = apples + oranges + mangos\n\
    \        val basket = fruits.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples_count - oranges_count - mangos_count\n    \
    \    val mangos_count = apples_count - oranges_count - mangos_count\n        val\
    \ mangos_count = apples_count - oranges_count - mangos_count\n        val mangos_count\
    \ = apples_count - oranges_count - mangos_count\n        val mangos_count = apples_count\
    \ - oranges_count - mangos_count\n        val mangos_count = apples_count - oranges_count\
    \ - mangos_count\n        val mangos_count = apples_count - oranges_count - mangos_count\n\
    \        val mangos_count = apples_count - oranges_count - mangos_count\n    \
    \    val mangos_count = apples_count - oranges_count - mangos_count\n        val\
    \ mangos_count = apples_count - oranges_count - mangos_count\n        val mangos_count\
    \ = apples_count - oranges_count - mangos_count\n        val mangos_count = apples_count\
    \ - oranges_count - mangos_count\n        val mangos_count = apples_count - oranges_count\
    \ - mangos_count\n        val mangos_count = apples_count - oranges_count - mangos_count\n\
    \        val mangos_count = apples_count - oranges_count - mangos_count\n    \
    \    val mangos_count = apples_count - oranges_count - mangos_count\n        val\
    \ mangos_count = apples_count - oranges_count - mangos_count\n        val mangos_count\
    \ = apples_count - oranges_count - mangos_count\n        val mangos_count = apples_count\
    \ - oranges_count - mangos_count\n        val mangos_count = apples_count - oranges_count\
    \ - mangos_count\n        val mangos_count = apples_count - oranges_count - mangos_count\n\
    \        val mangos_count = apples_count - oranges_count - mangos_count\n    \
    \    val mangos_count = apples_count - oranges_count - mangos_count\n        val\
    \ mangos_count = apples_count - oranges_count - mangos_count\n        val mangos_count\
    \ = apples_count - oranges_count - mangos_count\n        val mangos_count = apples_count\
    \ - oranges_count - \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp250nijat.scala:48:57 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = apples_count\
    \ - oranges_count - \n\e[31m\e[31m   |\e[0m                                  \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \         expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp250nijat.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count\
    \ - oranges_count - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp250nijat.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = apples_count - oranges_count\
    \ - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp250nijat.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = apples_count - oranges_count\
    \ - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp250nijat.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m"
  stdout: ''
  timestamp: 1659795023
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = n - apples - oranges\n        val fruits = apples + oranges\
    \ + mangos\n        fruits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpryliqr34.scala:15)\n\
    \tat Problem$.main(tmpryliqr34.scala:22)\n\tat Problem.main(tmpryliqr34.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = n.toInt\n        val oranges = s.toInt\n\
    \        val mangos = apples - oranges\n        fruitsDistribution(apples, oranges,\
    \ mangos)\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptamgvk7n.scala:18:8 -------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        fruitsDistribution(apples, oranges, mangos)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not\
    \ found: fruitsDistribution\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795021
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = n.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = fruits - apples -\
    \ oranges\n        mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpns97ohth.scala:16)\n\
    \tat Problem$.main(tmpns97ohth.scala:22)\n\tat Problem.main(tmpns97ohth.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0).toLong\n \
    \       val oranges = s.split(\"oranges\")(0).toLong\n        val mangos = s.split(\"\
    mango\")(0).toLong\n        val fruits = apples + oranges + mangos\n        fruits.toLong\
    \ - n - mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp4es2t70z.scala:15)\n\
    \tat Problem$.main(tmp4es2t70z.scala:22)\n\tat Problem.main(tmp4es2t70z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val basket = new mutable.HashMap[String,\
    \ Int]()\n        basket.put(\"apples\", apples)\n        basket.put(\"oranges\"\
    , oranges)\n        basket.put(\"mangos\", mangos)\n        val totalFruits =\
    \ apples + oranges + mangos\n        val fruits = basket.filter(_._2 > 0)\n  \
    \      val totalFruitsCount = fruits.filter(_._2 > 0).size\n        val mangoFruitsCount\
    \ = fruits.filter(_._2 == 1).size\n        val mangoFruitsCount = fruits.filter(_._2\
    \ == 1).size\n        val mangoFruitsCount = fruits.filter(_._2 == 1).size\n \
    \       val mangoFruitsCount = fruits.filter(_._2 == 1).size\n        val mangoFruitsCount\
    \ = fruits.filter(_._2 == 1).size\n        val mangoFruitsCount = fruits.filter(_._2\
    \ == 1).size\n        val mangoFruitsCount = fruits.filter(_._2 == 1).size\n \
    \       val mangoFruitsCount = fruits.filter(_._2 == 1).size\n        val mangoFruitsCount\
    \ = fruits.filter(_._2 == 1).size\n        val mangoFruitsCount = fruits.filter(_._2\
    \ == 1).size\n        val mangoFruitsCount = fruits.filter(_._2 == 1).size\n \
    \       val mangoFruitsCount = fruits.filter(_._2 == 1).size\n        val mangoFruitsCount\
    \ = fruits.filter(_._2 == 1).size\n        val mangoFruitsCount = fruits.filter(_._2\
    \ == 1).size\n        val mangoFruitsCount = fruits.filter(_._2 == 1).size\n \
    \       val mangoFruitsCount = fruits.filter(_._2 == 1).size\n        val mangoFruitsCount\
    \ = fruits.filter(_._2 == 1).size\n        val mangoFruitsCount = fruits.filter(_._2\
    \ == 1).size\n        val mangoFruitsCount = fruits.filter(_._2 == 1).size\n \
    \       val mangoFruitsCount = fruits.filter(_._2 == 1).size\n        val mangoFruitsCount\
    \ = fruits.filter(_._2 == 1).size\n        val mangoFruitsCount = fruits.filter(_._2\
    \ == 1).size\n        val mangoFruitsCount = fruits.filter(_._2 == 1).size\n \
    \       val mang\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2doqxpuw.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2doqxpuw.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmangoFruitsCount\e[0m = fruits.filter(_._2 == \e[31m1\e[0m).size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmangoFruitsCount is already defined as \e[33mvalue\e[0m \e[35mmangoFruitsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2doqxpuw.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsCount\e[0m = fruits.filter(_._2\
    \ == \e[31m1\e[0m).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsCount is already defined as \e[33mvalue\e[0m \e\
    [35mmangoFruitsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2doqxpuw.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsCount\e[0m =\
    \ fruits.filter(_._2 == \e[31m1\e[0m).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsCount is already defined as \e[33mvalue\e[0m \e\
    [35mmangoFruitsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2doqxpuw.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsCount\e[0m =\
    \ fruits.filter(_._2 == \e[31m1\e[0m).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsCount is already defined as \e[33mvalue\e[0m \e\
    [35mmangoFruitsCount\e[0m"
  stdout: ''
  timestamp: 1659795024
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \")(0).toLong\n      \
    \  val oranges = s.split(\" \")(1).toLong\n        val fruits = s.split(\" \"\
    )(2).toLong\n        val apples_oranges = apples + oranges\n        val fruits_apples\
    \ = fruits + apples\n        val mangos = fruits_apples - oranges\n        mangos\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpctsr94xr.scala:16)\n\
    \tat Problem$.main(tmpctsr94xr.scala:24)\n\tat Problem.main(tmpctsr94xr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples and \")\n      \
    \  val oranges = s.split(\"oranges and \")\n        val mangos = s.split(\"mango\
    \ and \")\n        val apples_count = apples.map(_.toInt).sum\n        val oranges_count\
    \ = oranges.map(_.toInt).sum\n        val mangos_count = mangos.map(_.toInt).sum\n\
    \        val apples_total = apples_count + apples.map(_.toInt).sum\n        val\
    \ oranges_total = oranges_count + oranges.map(_.toInt).sum\n        val mangos_count\
    \ = mangos_count + mangos.map(_.toInt).sum\n        val apples_percent = apples_count\
    \ / apples_total * 100\n        val oranges_percent = oranges_count / oranges_total\
    \ * 100\n        val mangos_percent = mangos_count / mangos_total * 100\n    \
    \    val apples_percent = apples_percent.toInt\n        val oranges_percent =\
    \ oranges_percent.toInt\n        val mangos_percent = mangos_percent.toInt\n \
    \       val apples_count = apples_count - apples.map(_.toInt).sum\n        val\
    \ oranges_count = oranges_count - oranges.map(_.toInt).sum\n        val mangos_count\
    \ = mangos_count - mangos.map(_.toInt).sum\n        val apples_total = apples_total\
    \ - apples.map(_.toInt).sum\n        val oranges_total = oranges_total - oranges.map(_.toInt).sum\n\
    \        val mangos_count = mangos_count - mangos.map(_.toInt).sum\n        val\
    \ apples_percent = apples_percent - apples.map(_.toInt).sum\n        val oranges_percent\
    \ = oranges_percent - oranges.map(_.toInt).sum\n        val mangos_percent = mangos_percent\
    \ - mangos.map(_.toInt).sum\n        val apples_count = apples_count + apples.map(_.toInt).sum\n\
    \        val oranges_count = oranges_count + oranges.map(_.toInt).sum\n      \
    \  val mangos_count = mangos_count + mangos.map(_.toInt).sum\n        val apples_percent\
    \ = apples_count / apples_total * 100\n        val oranges_percent = oranges_count\
    \ / oranges_total * 100\n        val mangos_percent = mangos_count / mangos_total\
    \ * 100\n        val apples_percent = apples_percent.toInt\n        val oranges_percent\
    \ = oranges_percent.toInt\n        val mangos_percent = mangos_percent.toInt\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp902qzdo4.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count\
    \ + mangos.map(_.toInt).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp902qzdo4.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mapples_percent\e[0m = apples_percent.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mapples_percent is already defined as \e[33mvalue\e[0m \e[35mapples_percent\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp902qzdo4.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36moranges_percent\e[0m = oranges_percent.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0moranges_percent is already defined as \e[33mvalue\e[0m \e[35moranges_percent\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp902qzdo4.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmangos_percent\e[0m = mangos_percent.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmangos_percent is already defined as \e[33mvalue\e[0m \e[35mmangos_percent\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp902qzdo4.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - apples"
  stdout: ''
  timestamp: 1659795025
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0).toInt\n  \
    \      val oranges = s.split(\"oranges\")(0).toInt\n        val mangos = s.split(\"\
    mango\")(0).toInt\n        val fruits = apples + oranges + mangos\n        fruits.toLong\
    \ - n - mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpuevq361q.scala:15)\n\
    \tat Problem$.main(tmpuevq361q.scala:22)\n\tat Problem.main(tmpuevq361q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795025
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(1).toLong\n        val mango\
    \ = fruits(2).toLong\n        val total = apples + oranges + mango\n        val\
    \ basket = fruits(3).toLong\n        total - basket\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp_mgtpeec.scala:17)\n\
    \tat Problem$.main(tmp_mgtpeec.scala:24)\n\tat Problem.main(tmp_mgtpeec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val mangos = s.split(\"\
    \ \").map(_.toInt)\n        val fruits = apples ++ oranges ++ mangos\n       \
    \ val apples_count = apples.sum\n        val oranges_count = oranges.sum\n   \
    \     val mangos_count = mangos.sum\n        val apples_total = apples_count +\
    \ apples_count - oranges_count - mangos_count\n        val oranges_total = oranges_count\
    \ + mangos_count\n        val mangos_total = apples_total + oranges_total\n  \
    \      val mangos_count = fruits.filter(_ % 2 == 0).length\n        mangos_count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4wqi933x.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = fruits.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659795024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val mangos = s.split(\"\
    \ \").map(_.toInt)\n        val fruits = apples ++ oranges ++ mangos\n       \
    \ val apples_count = apples.sum\n        val oranges_count = oranges.sum\n   \
    \     val mangos_count = mangos.sum\n        val total_count = apples_count +\
    \ oranges_count + mangos_count\n        val apples_count = apples.sum\n      \
    \  val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n  \
    \      val total_count = apples_count + oranges_count + mangos_count\n       \
    \ val apples_count = apples.sum\n        val oranges_count = oranges.sum\n   \
    \     val mangos_count = mangos.sum\n        val total_count = apples_count +\
    \ oranges_count + mangos_count\n        val apples_count = apples.sum\n      \
    \  val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n  \
    \      val total_count = apples_count + oranges_count + mangos_count\n       \
    \ val apples_count = apples.sum\n        val oranges_count = oranges.sum\n   \
    \     val mangos_count = mangos.sum\n        val total_count = apples_count +\
    \ oranges_count + mangos_count\n        val apples_count = apples.sum\n      \
    \  val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n  \
    \      val total_count = apples_count + oranges_count + mangos_count\n       \
    \ val apples_count = apples.sum\n        val oranges_count = oranges.sum\n   \
    \     val mangos_count = mangos.sum\n        val total_count = apples_count +\
    \ oranges_count + mangos_count\n        val apples_count = apples.sum\n      \
    \  val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n  \
    \      val total_count = apples_count + oranges_count + mangos_count\n       \
    \ val apples_count = apples.sum\n        val oranges_count = oranges.sum\n   \
    \     val mangos_count = mangos.sum\n        val total_count = apples_count +\
    \ oranges_count + mangos_count\n        val apples_count = apples.sum\n      \
    \  val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n  \
    \      val total_count = apples_count + oranges_count + mangos_count\n       \
    \ val apples_count = apples.sum\n        val oranges_count = oranges.sum\n   \
    \     val mangos_count = mangos.sum\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8etwjon_.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8etwjon_.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges.sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0moranges_count\
    \ is already defined as \e[33mvalue\e[0m \e[35moranges_count\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8etwjon_.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmangos_count\e[0m = mangos.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8etwjon_.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mtotal_count\e[0m = apples_count + oranges_count\
    \ + mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotal_count is already defined as \e[33mvalue\e[0m \e[35mtotal_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8etwjon_.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples.sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mapples_count\
    \ is"
  stdout: ''
  timestamp: 1659795000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(1).trim\n   \
    \     val oranges = s.split(\"oranges\")(1).trim\n        val mangos = s.split(\"\
    mango\")(1).trim\n        val apples_count = apples.toLong\n        val oranges_count\
    \ = oranges.toLong\n        val mangos_count = mangos.toLong\n        val basket_count\
    \ = n - apples_count - oranges_count - mangos_count\n        val apples_count\
    \ = apples.toLong\n        val oranges_count = oranges.toLong\n        val mangos_count\
    \ = mangos.toLong\n        val basket_count = n - apples_count - oranges_count\
    \ - mangos_count\n        val apples_count = apples.toLong\n        val oranges_count\
    \ = oranges.toLong\n        val mangos_count = mangos.toLong\n        val basket_count\
    \ = n - apples_count - oranges_count - mangos_count\n        val apples_count\
    \ = apples.toLong\n        val oranges_count = oranges.toLong\n        val mangos_count\
    \ = mangos.toLong\n        val basket_count = n - apples_count - oranges_count\
    \ - mangos_count\n        val apples_count = apples.toLong\n        val oranges_count\
    \ = oranges.toLong\n        val mangos_count = mangos.toLong\n        val basket_count\
    \ = n - apples_count - oranges_count - mangos_count\n        val apples_count\
    \ = apples.toLong\n        val oranges_count = oranges.toLong\n        val mangos_count\
    \ = mangos.toLong\n        val basket_count = n - apples_count - oranges_count\
    \ - mangos_count\n        val apples_count = apples.toLong\n        val oranges_count\
    \ = oranges.toLong\n        val mangos_count = mangos.toLong\n        val basket_count\
    \ = n - apples_count - oranges_count - mangos_count\n        val apples_count\
    \ = apples.toLong\n        val oranges_count = oranges.toLong\n        val mangos_count\
    \ = mangos.toLong\n        val basket_count = n - apples_count - oranges_count\
    \ - mangos_count\n        val apples_count = apples.toLong\n        val oranges_count\
    \ = oranges.toLong\n        val mangos_count = mangos.toLong\n        val basket_count\
    \ = n - apples_count - oranges_count - mangos_count\n        val apples_count\
    \ = apples.toLong\n        val oranges_count = oranges.toLong\n        val mangos_count\
    \ = mangos.toLong\n        val basket_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeiemcb48.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeiemcb48.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mapples_count\e[0m = apples.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpeiemcb48.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpeiemcb48.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos.toLong\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeiemcb48.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mbasket_count\e[0m = n - apples_count - oranges_count\
    \ - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbasket_count is already defined as \e[33mvalue\e[0m \e[35mbasket_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /"
  stdout: ''
  timestamp: 1659795025
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = s.toInt\n        val mangos = n - apples - oranges - fruits\n\
    \        mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpwnws4dtl.scala:15)\n\
    \tat Problem$.main(tmpwnws4dtl.scala:22)\n\tat Problem.main(tmpwnws4dtl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \")(0)\n        val oranges\
    \ = s.split(\" \")(1)\n        val mangos = s.split(\" \")(2)\n        val apples_count\
    \ = apples.toInt\n        val oranges_count = oranges.toInt\n        val mangos_count\
    \ = mangos.toInt\n        val apples_sum = apples_count + oranges_count + mangos_count\n\
    \        val oranges_sum = oranges_count + mangos_count\n        val mangos_sum\
    \ = mangos_count\n        val apples_percentage = apples_sum / apples_count *\
    \ 100\n        val oranges_percentage = oranges_sum / oranges_count * 100\n  \
    \      val mangos_percentage = mangos_sum / mangos_count * 100\n        val apples_percentage_rounded\
    \ = math.round(apples_percentage)\n        val oranges_percentage_rounded = math.round(oranges_percentage)\n\
    \        val mangos_percentage_rounded = math.round(mangos_percentage)\n     \
    \   val apples_percentage_rounded_rounded = math.round(apples_percentage_rounded)\n\
    \        val oranges_percentage_rounded_rounded = math.round(oranges_percentage_rounded)\n\
    \        val mangos_percentage_rounded_rounded = math.round(mangos_percentage_rounded)\n\
    \        val apples_percentage_rounded_rounded_rounded = math.round(apples_percentage_rounded_rounded)\n\
    \        val oranges_percentage_rounded_rounded_rounded = math.round(oranges_percentage_rounded_rounded)\n\
    \        val mangos_percentage_rounded_rounded_rounded = math.round(mangos_percentage_rounded_rounded)\n\
    \        val apples_percentage_rounded_rounded_rounded_rounded = math.round(apples_percentage_rounded_rounded_rounded)\n\
    \        val oranges_percentage_rounded_rounded_rounded_rounded = math.round(oranges_percentage_rounded_rounded_rounded)\n\
    \        val mangos_percentage_rounded_rounded_rounded_rounded = math.round(mangos_percentage_rounded_rounded_rounded)\n\
    \        val apples_percentage_rounded_rounded_rounded_rounded_rounded = math.round(apples_percentage_rounded_rounded_rounded_rounded)\n\
    \        val oranges_percentage_rounded_rounded_rounded_rounded_rounded = math.round(oranges_percentage_rounded_rounded_rounded)\n\
    \        val mangos_percentage_rounded_rounded_rounded_rounded_rounded = math.round(mangos_percentage_rounded_rounded_rounded_rounded)\n\
    \        val apples_percentage_rounded_rounded_rounded_rounded_rounded_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprkfmcx1x.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprkfmcx1x.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795025
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = s.toInt\n        val mangos = n - apples - oranges - fruits\n\
    \        mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpwnws4dtl.scala:15)\n\
    \tat Problem$.main(tmpwnws4dtl.scala:22)\n\tat Problem.main(tmpwnws4dtl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val mangos = s.split(\"\
    \ \").map(_.toInt)\n        val basket = new mutable.HashMap[String, Int]()\n\
    \        basket.put(\"apples\", apples.sum)\n        basket.put(\"oranges\", oranges.sum)\n\
    \        basket.put(\"mangos\", mangos.sum)\n        val totalFruits = apples.sum\
    \ + oranges.sum + mangos.sum\n        val totalApples = apples.sum\n        val\
    \ totalOranges = oranges.sum\n        val totalMangos = mangos.sum\n        val\
    \ totalBasket = basket.size\n        val totalFruitsInBasket = basket.get(\"apples\"\
    ).get + basket.get(\"oranges\").get + basket.get(\"mangos\").get \n        val\
    \ totalApplesInBasket = basket.get(\"apples\").get \n        val totalOrangesInBasket\
    \ = basket.get(\"oranges\").get \n        val totalMangosInBasket = basket.get(\"\
    mangos\").get \n        val totalFruitsWithApples = totalFruits - totalApples\
    \ - totalOranges - totalMangos\n        val totalFruitsWithOranges = totalFruits\
    \ - totalApples - totalOranges + totalMangos\n        val totalFruitsWithMangos\
    \ = totalFruits - totalApples + totalOranges - totalMangos\n        val totalFruitsWithApplesAndOranges\
    \ = totalFruits - totalApples - totalOranges + totalMangos\n        val totalFruitsWithApplesAndMangos\
    \ = totalFruits - totalApples + totalOranges - totalMangos\n        val totalFruitsWithApplesAndOrangesAndMangos\
    \ = totalFruits - totalApples - totalOranges + totalMangos\n        val totalFruitsWithApplesAndOrangesAndMangosInBasket\
    \ = totalFruitsInBasket - totalApplesInBasket - totalOrangesInBasket - totalMangosInBasket\n\
    \        val totalFruitsWithApplesAndOrangesAndMangosInBasket = totalFruitsWithApplesAndOrangesAndMangos\
    \ - totalFruitsWithApplesAndOrangesAndM\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5qtpc3d_.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mtotalFruitsWithApplesAndOrangesAndMangosInBasket\e\
    [0m = totalFruitsWithApplesAndOrangesAndMangos - totalFruitsWithApplesAndOrangesAndM\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalFruitsWithApplesAndOrangesAndMangosInBasket is already\
    \ defined as \e[33mvalue\e[0m \e[35mtotalFruitsWithApplesAndOrangesAndMangosInBasket\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp5qtpc3d_.scala:18:25 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5qtpc3d_.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = n - apples - oranges\n        val fruits = apples + oranges\
    \ + mangos\n        fruits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpryliqr34.scala:15)\n\
    \tat Problem$.main(tmpryliqr34.scala:22)\n\tat Problem.main(tmpryliqr34.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val fruits = apples ++\
    \ oranges\n        val totalFruits = fruits.sum\n        val mangoFruits = totalFruits\
    \ - fruits.filter(_ > 0).sum\n        mangoFruits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpheswqnz_.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpheswqnz_.scala:15)\n\
    \tat Problem$.main(tmpheswqnz_.scala:23)\n\tat Problem.main(tmpheswqnz_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangoes = n - fruits\n   \
    \     fruits - mangoes\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpfzpzwl37.scala:15)\n\
    \tat Problem$.main(tmpfzpzwl37.scala:22)\n\tat Problem.main(tmpfzpzwl37.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(1).toLong\n        val mangoes\
    \ = n - apples - oranges\n        fruits(2).toLong - fruits(0).toLong - fruits(1).toLong\
    \ - fruits(2).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpgf38cwgs.scala:17)\n\
    \tat Problem$.main(tmpgf38cwgs.scala:22)\n\tat Problem.main(tmpgf38cwgs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795028
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = n - apples - oranges\n        val apples_count = apples.toInt\n\
    \        val oranges_count = oranges.toInt\n        val mangos_count = n - apples_count\
    \ - oranges_count\n        val apples_count = apples_count.toInt\n        val\
    \ oranges_count = oranges_count.toInt\n        val mangos_count = mangos_count.toInt\n\
    \        val apples_count = apples_count.toInt\n        val oranges_count = oranges_count.toInt\n\
    \        val mangos_count = mangos_count.toInt\n        val apples_count = apples_count.toInt\n\
    \        val oranges_count = oranges_count.toInt\n        val mangos_count = mangos_count.toInt\n\
    \        val apples_count = apples_count.toInt\n        val oranges_count = oranges_count.toInt\n\
    \        val mangos_count = mangos_count.toInt\n        val apples_count = apples_count.toInt\n\
    \        val oranges_count = oranges_count.toInt\n        val mangos_count = mangos_count.toInt\n\
    \        val apples_count = apples_count.toInt\n        val oranges_count = oranges_count.toInt\n\
    \        val mangos_count = mangos_count.toInt\n        val apples_count = apples_count.toInt\n\
    \        val oranges_count = oranges_count.toInt\n        val mangos_count = mangos_count.toInt\n\
    \        val apples_count = apples_count.toInt\n        val oranges_count = oranges_count.toInt\n\
    \        val mangos_count = mangos_count.toInt\n        val apples_count = apples_count.toInt\n\
    \        val oranges_count = oranges_count.toInt\n        val mangos_count = mangos_count.toInt\n\
    \        val apples_count = apples_count.toInt\n        val oranges_count = oranges_count.toInt\n\
    \        val mangos_count = mangos_count.toInt\n        val apples_count = apples_count.toInt\n\
    \        val oranges_count = oranges_count.toInt\n        val mangos_count = mangos_count.toInt\n\
    \        val apples_count = apples_count.toInt\n        val oranges_count = oranges_count.toInt\n\
    \        val mangos_count = mangos_count.toInt\n        val apples_count = apples_count.toInt\n\
    \        val oranges_count = oranges_count.toInt\n        val mangos_count = mangos_count.toInt\n\
    \        val apples_count = apples_count.toInt\n        val oranges_count = oranges_count.toInt\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpqlegq4ce.scala:62:11 ---------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpqlegq4ce.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqlegq4ce.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_count.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqlegq4ce.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqlegq4ce.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ define"
  stdout: ''
  timestamp: 1659794991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val basket = new mutable.HashMap[String,\
    \ Int]()\n        basket.put(\"apples\", apples)\n        basket.put(\"oranges\"\
    , oranges)\n        basket.put(\"mangos\", mangos)\n        val totalFruits =\
    \ apples + oranges + mangos\n        val fruitsInBasket = basket.filter(_._2 >\
    \ 0).map(_._1).sum\n        val mangoFruits = fruitsInBasket - mangos\n      \
    \  fruitsInBasket - mangoFruits\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu4fvne3f.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val basket = new mutable.HashMap[String,\
    \ Int]()\n        basket.put(\"apples\", apples)\n        basket.put(\"oranges\"\
    , oranges)\n        basket.put(\"mangos\", mangos)\n        val totalFruits =\
    \ apples + oranges + mangos\n        val fruitsInBasket = basket.filter(_._2 >\
    \ 0).map(_._1).sum\n        fruitsInBasket - mangos\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeks_n1p1.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val fruits = apples ++\
    \ oranges\n        val mangos = fruits.filter(x => x % 2 == 0)\n        fruits.size\
    \ - mangos.size\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp8iqu_cso.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp8iqu_cso.scala:15)\n\
    \tat Problem$.main(tmp8iqu_cso.scala:22)\n\tat Problem.main(tmp8iqu_cso.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795032
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \")(0).toLong\n      \
    \  val oranges = s.split(\" \")(1).toLong\n        val fruits = s.split(\" \"\
    )(2).toLong\n        val mangos = n - apples - oranges - fruits\n        mangos\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp179o75mb.scala:16)\n\
    \tat Problem$.main(tmp179o75mb.scala:22)\n\tat Problem.main(tmp179o75mb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795014
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \")(0).toLong\n      \
    \  val oranges = s.split(\" \")(1).toLong\n        val fruits = s.split(\" \"\
    )(2).toLong\n        val mangos = n - apples - oranges - fruits\n        mangos\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp179o75mb.scala:16)\n\
    \tat Problem$.main(tmp179o75mb.scala:22)\n\tat Problem.main(tmp179o75mb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0)\n        val\
    \ oranges = s.split(\"oranges\")(0)\n        val mangos = s.split(\"mango\")(0)\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_count = apples_count\
    \ - oranges_count - mangos_count\n        val oranges_count = oranges_count -\
    \ apples_count\n        val mangos_count = mangos_count - apples_count\n     \
    \   val apples_count = apples_count + oranges_count + mangos_count\n        apples_count\
    \ - mangos_count\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp800mo5me.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count\
    \ - oranges_count - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp800mo5me.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_count -\
    \ apples_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp800mo5me.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count - apples_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp800mo5me.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count + oranges_count\
    \ + mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1659795028
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples and \")\n      \
    \  val oranges = s.split(\"oranges and \")\n        val mangos = s.split(\"mango\
    \ and \")\n        val apples_count = apples(0).split(\" \").map(_.toInt)\n  \
    \      val oranges_count = oranges(0).split(\" \").map(_.toInt)\n        val mangos_count\
    \ = mangos(0).split(\" \").map(_.toInt)\n        val apples_total = apples(1).split(\"\
    \ \").map(_.toInt)\n        val oranges_total = oranges(1).split(\" \").map(_.toInt)\n\
    \        val mangos_total = mangos(1).split(\" \").map(_.toInt)\n        val apples_count\
    \ = apples_count.sum\n        val oranges_count = oranges_count.sum\n        val\
    \ mangos_count = mangos_count.sum\n        val apples_total = apples_total.sum\n\
    \        val oranges_total = oranges_total.sum\n        val mangos_total = mangos_total.sum\n\
    \        val apples_total = apples_total - apples_count\n        val oranges_total\
    \ = oranges_total - oranges_count\n        val mangos_total = mangos_total - mangos_count\n\
    \        val apples_total = apples_total - apples_count.sum\n        val oranges_total\
    \ = oranges_total - oranges_count.sum\n        val mangos_total = mangos_total\
    \ - mangos_count.sum\n        val apples_total = apples_total - apples_total.sum\n\
    \        val oranges_total = oranges_total - oranges_total.sum\n        val mangos_total\
    \ = mangos_total - mangos_total.sum\n        val apples_total = apples_total -\
    \ apples_total.sum\n        val oranges_total = oranges_total - oranges_total.sum\n\
    \        val mangos_total = mangos_total - mangos_total.sum\n        val apples_total\
    \ = apples_total - apples_total.sum\n        val oranges_total = oranges_total\
    \ - oranges_total.sum\n        val mangos_total = mangos_total - mangos_total.sum\n\
    \        val apples_total = apples_total - apples_total.sum\n        val oranges_total\
    \ = oranges_total - oranges_total.sum\n        val mangos_total = mangos_total\
    \ - mangos_total.sum\n        val apples_total = apples_total - apples_total.sum\n\
    \        val oranges_total = oranges_total - oranges_total.sum\n        val mangos_total\
    \ = mangos_total - mangos_total.sum\n        val apple\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp07033sc.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp07033sc.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mapples_count\e[0m = apples_count.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp07033sc.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_count.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp07033sc.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp07033sc.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mapples_total\e[0m = apples_total.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mapples_total is already defined as \e[33mvalue\e[0m \e[35mapples_total\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp07033sc.scala:28:12 ----------------"
  stdout: ''
  timestamp: 1659795032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val basket = new mutable.HashMap[String,\
    \ Int]()\n        basket.put(\"apples\", apples)\n        basket.put(\"oranges\"\
    , oranges)\n        basket.put(\"mangos\", mangos)\n        val total = apples\
    \ + oranges + mangos\n        val count = basket.filter(_._2 > 0).map(_._2).sum\n\
    \        val mangos = total - count\n        val apples = total - mangos\n   \
    \     apples + mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoiyg88p6.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmangos\e[0m = total - count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmangos\
    \ is already defined as \e[33mvalue\e[0m \e[35mmangos\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoiyg88p6.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mapples\e[0m = total - mangos\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples is already defined as \e[33mvalue\e[0m \e[35mapples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpoiyg88p6.scala:18:25 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples and \")\n      \
    \  val oranges = s.split(\"oranges and \")\n        val fruits = s.split(\"fruits\
    \ and \")\n        val apples_count = apples.map(_.toInt).sum\n        val oranges_count\
    \ = oranges.map(_.toInt).sum\n        val fruits_count = fruits.map(_.toInt).sum\n\
    \        val mangos = n - apples_count - oranges_count - fruits_count\n      \
    \  mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmphwq0i0dg.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmphwq0i0dg.scala:18)\n\
    \tat Problem$.main(tmphwq0i0dg.scala:25)\n\tat Problem.main(tmphwq0i0dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795036
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = s.toInt\n        val mangos = n - apples - oranges - fruits\n\
    \        mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpwnws4dtl.scala:15)\n\
    \tat Problem$.main(tmpwnws4dtl.scala:22)\n\tat Problem.main(tmpwnws4dtl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val basket = new mutable.ListBuffer[String]()\n\
    \        var count = 0\n        var apples_count = 0\n        var oranges_count\
    \ = 0\n        var mangos_count = 0\n        for(i <- 0 until n){\n          \
    \  val fruit = s.substring(i, i+1)\n            if(fruit == \"apples\"){\n   \
    \             apples_count += 1\n                basket += fruit\n           \
    \ }else if(fruit == \"oranges\"){\n                oranges_count += 1\n      \
    \          basket += fruit\n            }else if(fruit == \"mangos\"){\n     \
    \           mangos_count += 1\n                basket += fruit\n            }\n\
    \        }\n        apples_count = apples - apples_count\n        oranges_count\
    \ = oranges - oranges_count\n        mangos_count = mangos - mangos_count\n  \
    \      count = apples_count + oranges_count + mangos_count\n        count - mangos\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpef29jg2j.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpef29jg2j.scala:23:25\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0)\n        val\
    \ oranges = s.split(\"oranges\")(0)\n        val mangos = s.split(\"mango\")(0)\n\
    \        val fruits = s.split(\"fruits\")(0)\n        val apples_count = apples.toInt\n\
    \        val oranges_count = oranges.toInt\n        val mangos_count = mangos.toInt\n\
    \        val fruits_count = fruits.toInt\n        val apples_sum = apples_count\
    \ * apples_count * apples_count\n        val oranges_sum = oranges_count * oranges_count\
    \ * oranges_count\n        val mangos_count = mangos_count * mangos_count\n  \
    \      val fruits_count = fruits_count * fruits_count\n        val total_sum =\
    \ apples_sum + oranges_sum + mangos_count + fruits_count\n        val apples_percent\
    \ = apples_count / total_sum * 100\n        val oranges_percent = oranges_count\
    \ / total_sum * 100\n        val mangos_percent = mangos_count / total_sum * 100\n\
    \        val fruits_percent = fruits_count / total_sum * 100\n        val total_percent\
    \ = apples_percent + oranges_percent + mangos_percent + fruits_percent\n     \
    \   val total_count = apples_count + oranges_count + mangos_count + fruits_count\n\
    \        val total_percent = total_percent / total_count * 100\n        val total_sum\
    \ = total_sum * total_count\n        val total_percent = total_percent / total_sum\
    \ * 100\n        val total_count = total_count * total_sum\n        val total_percent\
    \ = total_percent / total_count * 100\n        val total_count = total_count *\
    \ total_sum\n        val total_percent = total_percent / total_count * 100\n \
    \       val total_count = total_count * total_sum\n        val total_percent =\
    \ total_percent / total_count * 100\n        val total_count = total_count * total_sum\n\
    \        val total_percent = total_percent / total_count * 100\n        val total_count\
    \ = total_count * total_sum\n        val total_percent = total_percent / total_count\
    \ * 100\n        val total_count = total_count * total_sum\n        val total_percent\
    \ = total_percent / total_count * 100\n        val total_count = total_count *\
    \ total_sum\n        val total_percent = total_percent / total_count * 100\n \
    \       val total_count = total_count * total_sum\n        val total_percent =\
    \ total_percent / total_count * 100\n        val total_count = total_count * total_sum\n\
    \        val total_percent = total_percent / total_count * 100\n        val total_count\
    \ = total_count * total_sum\n        val total_percent = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplp1ix_ej.scala:56:27 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mtotal_percent\e[0m = \n\e\
    [31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m        \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplp1ix_ej.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_count\
    \ * mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplp1ix_ej.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mfruits_count\e[0m = fruits_count * fruits_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfruits_count is already defined as \e[33mvalue\e[0m \e[35mfruits_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplp1ix_ej.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mtotal_percent\e[0m = total_percent /\
    \ total_count * \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotal_percent is already defined as \e[33mvalue\e[0m \e[35mtotal_percent\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplp1ix_ej.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mtotal_sum\e[0m = total_sum * total_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m"
  stdout: ''
  timestamp: 1659795033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val fruits = apples + oranges + mangos\n\
    \        val totalFruits = fruits.toLong\n        val applesAndOranges = apples\
    \ + oranges\n        val mangoFruits = mangos - applesAndOranges\n        val\
    \ applesAndOrangesAndMangoFruits = applesAndOranges + mangoFruits\n        val\
    \ applesAndOrangesAndMangoFruitsPerAppleAndOrange = mangoFruits / applesAndOranges\n\
    \        val applesAndOrangesAndMangoFruitsPerOrange = applesAndOranges / mangos\n\
    \        val applesAndOrangesAndMangoFruitsPerMango = applesAndOranges / fruits\n\
    \        val applesAndOrangesAndMangoFruitsPerAppleAndOrangeAndMango = applesAndOrangesAndMangoFruitsPerAppleAndOrange\
    \ * applesAndOrangesAndMangoFruitsPerOrange * applesAndOrangesAndMangoFruitsPerMango\n\
    \        val applesAndOrangesAndMangoFruitsPerAppleAndOrangeAndMangoPerAppleAndOrangeAndMango\
    \ = applesAndOrangesAndMangoFruitsPerAppleAndOrange * applesAndOrangesAndMangoFruitsPerOrange\
    \ * applesAndOrangesAndMangoFruitsPerMango\n        val applesAndOrangesAndMangoFruitsPerAppleAndOrangeAndMangoPerAppleAndOrangeAndMangoPerAppleAndOrangeAndMango\
    \ = applesAndOrangesAndMangoFruitsPerAppleAndOrange * applesAndOrangesAndMangoFruitsPerOrange\
    \ * applesAndOrangesAndMangoFruitsPerMango\n        val applesAndOrangesAndMangoFruitsPerAppleAndOrangeAndMangoPerAppleAndOrangeAndMangoPerAppleAndOrangeAndMangoPerAppleAndOrangeAndMango\
    \ = applesAndOrangesAndMangoFruitsPerAppleAndOrange * applesAndOrangesAndMangoFruitsPerOrange\
    \ * applesAndOrangesAndMangoFruitsPerMang\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoh3wkcdl.scala:29:237 -----------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesAndMangoFruitsPerAppleAndOrangeAndMangoPerAppleAndOrangeAndMangoPerAppleAndOrangeAndMangoPerAppleAndOrangeAndMango\e\
    [0m = applesAndOrangesAndMangoFruitsPerAppleAndOrange * applesAndOrangesAndMangoFruitsPerOrange\
    \ * applesAndOrangesAndMangoFruitsPerMang\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \                                                                            \
    \                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: applesAndOrangesAndMangoFruitsPerMang\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoh3wkcdl.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795033
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val fruits = apples ++\
    \ oranges\n        val totalFruits = fruits.sum\n        val mangoFruits = fruits.filter(_\
    \ % 2 == 1).sum\n        mangoFruits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpnz72mt0u.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpnz72mt0u.scala:15)\n\
    \tat Problem$.main(tmpnz72mt0u.scala:23)\n\tat Problem.main(tmpnz72mt0u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val fruits = apples + oranges + mangos\n\
    \        val basket = fruits.toLong\n        val total = fruits.toLong\n     \
    \   val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_count = apples.toLong\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpixujym3v.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpixujym3v.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0moranges_count\
    \ is already defined as \e[33mvalue\e[0m \e[35moranges_count\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpixujym3v.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmangos_count\e[0m = mangos.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpixujym3v.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples.toLong\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpixujym3v.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0moranges_count\
    \ is already defined as \e[33mva"
  stdout: ''
  timestamp: 1659795034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val arr = s.split(\" \")\n        val apples =\
    \ arr.map(_.toInt)\n        val oranges = arr.filter(_.toInt % 2 == 0).map(_.toInt)\n\
    \        val mangoes = arr.filter(_.toInt % 2 == 1).map(_.toInt)\n        val\
    \ apples_count = apples.sum\n        val oranges_count = oranges.sum\n       \
    \ val mangoes_count = mangoes.sum\n        val apples_sum = apples.sum\n     \
    \   val oranges_sum = oranges.sum\n        val mangoes_sum = mangoes.sum\n   \
    \     val apples_prod = apples.product\n        val oranges_prod = oranges.product\n\
    \        val mangoes_prod = mangoes.product\n        val apples_prod_sum = apples_prod.sum\n\
    \        val oranges_prod_sum = oranges_prod.sum\n        val mangoes_prod_sum\
    \ = mangoes_prod.sum\n        val apples_prod_prod = apples_prod.product\n   \
    \     val oranges_prod_prod = oranges_prod.product\n        val mangoes_prod_prod\
    \ = mangoes_prod.product\n        val apples_prod_prod_sum = apples_prod_prod.sum\n\
    \        val oranges_prod_prod_sum = oranges_prod_prod.sum\n        val mangoes_prod_prod_sum\
    \ = mangoes_prod_prod.sum\n        val apples_prod_prod_prod = apples_prod_prod.product\n\
    \        val oranges_prod_prod_prod = oranges_prod_prod.product\n        val mangoes_prod_prod_prod\
    \ = mangoes_prod_prod.product\n        val apples_prod_prod_prod_sum = apples_prod_prod_prod.sum\n\
    \        val oranges_prod_prod_prod_sum = oranges_prod_prod_prod.sum\n       \
    \ val mangoes_prod_prod_prod_sum = mangoes_prod_prod_prod.sum\n        val apples_prod_prod_prod_prod\
    \ = apples_prod_prod_prod.product\n        val oranges_prod_prod_prod_prod = oranges_prod_prod_prod.product\n\
    \        val mangoes_prod_prod_prod_prod = mangoes_prod_prod_prod.product\n  \
    \      val apples_prod_prod_prod_prod_sum = apples_prod_prod_prod_prod.sum\n \
    \       val oranges_prod_prod_prod_prod_sum = oranges_prod_prod_prod_prod.sum\n\
    \        val mangoes_prod_prod_prod_prod_sum = mangoes_prod_prod_prod_prod.sum\n\
    \        val apples_prod_prod_prod_prod_prod = apples_prod_prod_prod_prod.product\n\
    \        val oranges_prod_prod_prod_prod_prod = oranges_prod_prod_prod_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr7d5zjb_.scala:28:42 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mapples_prod_sum\e[0m = apples_prod.sum\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              value sum is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpr7d5zjb_.scala:29:44 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36moranges_prod_sum\e[0m =\
    \ oranges_prod.sum\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value sum is not a member of\
    \ Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr7d5zjb_.scala:30:44 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmangoes_prod_sum\e[0m =\
    \ mangoes_prod.sum\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value sum is not a member of\
    \ Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr7d5zjb_.scala:31:43 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mapples_prod_prod\e[0m =\
    \ apples_prod.product\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value product is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr7d5zjb_.scala:32:45\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36moranges_prod_prod\e[0m = oranges_prod.product\n\e[31m\e[31m   |\e[0m     \
    \                           ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                         value product is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpr7d5zjb_.scala:33:45 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmangoes_prod_prod\e[0m =\
    \ mangoes_prod.product\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value product is not a member\
    \ of Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr7d5zjb_.scala:50:"
  stdout: ''
  timestamp: 1659795037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val basket = new mutable.HashMap[String,\
    \ Int]()\n        basket.put(\"apples\", apples)\n        basket.put(\"oranges\"\
    , oranges)\n        basket.put(\"mangos\", mangos)\n        val totalFruits =\
    \ apples + oranges + mangos\n        val fruits = basket.filter(_._2 > 0)\n  \
    \      val fruitCount = fruits.map(_._2).sum\n        fruitCount - mangos\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuy1ivn51.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795032
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = n.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = fruits - apples -\
    \ oranges\n        mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpns97ohth.scala:16)\n\
    \tat Problem$.main(tmpns97ohth.scala:22)\n\tat Problem.main(tmpns97ohth.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val mangos = s.split(\"\
    \ \").map(_.toInt)\n        val basket = new mutable.ListBuffer[String]()\n  \
    \      basket += apples.mkString(\" \")\n        basket += oranges.mkString(\"\
    \ \")\n        basket += mangos.mkString(\" \")\n        val totalApples = apples.sum\n\
    \        val totalOranges = oranges.sum\n        val totalMangos = mangos.sum\n\
    \        val totalFruits = totalApples + totalOranges + totalMangos\n        val\
    \ appleFruits = apples.sum\n        val orangeFruits = oranges.sum\n        val\
    \ mangoFruits = mangos.sum\n        val fruits = appleFruits + orangeFruits +\
    \ mangoFruits\n        val totalFruits = appleFruits + orangeFruits + mangoFruits\n\
    \        val appleFruits = apples.sum\n        val orangeFruits = oranges.sum\n\
    \        val mangoFruits = mangos.sum\n        val fruits = appleFruits + orangeFruits\
    \ + mangoFruits\n        val totalFruits = appleFruits + orangeFruits + mangoFruits\n\
    \        val appleFruits = apples.sum\n        val orangeFruits = oranges.sum\n\
    \        val mangoFruits = mangos.sum\n        val fruits = appleFruits + orangeFruits\
    \ + mangoFruits\n        val totalFruits = appleFruits + orangeFruits + mangoFruits\n\
    \        val appleFruits = apples.sum\n        val orangeFruits = oranges.sum\n\
    \        val mangoFruits = mangos.sum\n        val fruits = appleFruits + orangeFruits\
    \ + mangoFruits\n        val totalFruits = appleFruits + orangeFruits + mangoFruits\n\
    \        val appleFruits = apples.sum\n        val orangeFruits = oranges.sum\n\
    \        val mangoFruits = mangos.sum\n        val fruits = appleFruits + orangeFruits\
    \ + mangoFruits\n        val totalFruits = appleFruits + \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpts_64tm5.scala:50:39 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mtotalFruits\e[0m = appleFruits\
    \ + \n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpts_64tm5.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtotalFruits\e[0m = appleFruits + orangeFruits + mangoFruits\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalFruits is already defined as \e[33mvalue\e[0m \e[35mtotalFruits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpts_64tm5.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mappleFruits\e[0m = apples.sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mappleFruits\
    \ is already defined as \e[33mvalue\e[0m \e[35mappleFruits\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpts_64tm5.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36morangeFruits\e[0m = oranges.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0morangeFruits is already defined as \e[33mvalue\e[0m \e[35morangeFruits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpts_64tm5.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mmangoFruits\e[0m = mangos.sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmangoFruits\
    \ is already defined as \e[33mvalue\e"
  stdout: ''
  timestamp: 1659795036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt).sum\n\
    \        val oranges = s.split(\" \").map(_.toInt).sum\n        val mangos = s.split(\"\
    \ \").map(_.toInt).sum\n        val apples_oranges = apples + oranges\n      \
    \  val apples_mangos = apples - mangos\n        val oranges_mangos = oranges -\
    \ mangos\n        val apples_oranges_mangos = apples_oranges + oranges_mangos\n\
    \        val apples_oranges_mangos_sum = apples_oranges_mangos + mangos\n    \
    \    val apples_oranges_mangos_sum_minus_apples = apples_oranges_mangos_sum -\
    \ apples\n        val apples_oranges_mangos_sum_minus_oranges = apples_oranges_mangos_sum_minus_apples\
    \ - oranges\n        val apples_oranges_mangos_sum_minus_mangos = apples_oranges_mangos_sum_minus_oranges\
    \ - mangos\n        val apples_oranges_mangos_sum_minus_apples_oranges_mangos\
    \ = apples_oranges_mangos_sum_minus_mangos - apples_oranges_mangos\n        val\
    \ apples_oranges_mangos_sum_minus_apples_oranges_mangos_sum = apples_oranges_mangos_sum_minus_apples_oranges_mangos\
    \ - apples_oranges_mangos_sum\n        val apples_oranges_mangos_sum_minus_apples_oranges_mangos_sum_minus_apples\
    \ = apples_oranges_mangos_sum_minus_apples_oranges_mangos_sum - apples_oranges_mangos_sum_minus_apples\n\
    \        val apples_oranges_mangos_sum_minus_apples_oranges_mangos_sum_minus_oranges\
    \ = apples_oranges_mangos_sum_minus_apples_oranges_mangos_sum_minus_oranges -\
    \ apples_oranges_mangos_sum_minus_oranges\n        val apples_oranges_mangos_sum_minus_apples_oranges_mangos_sum_minus_mangos\
    \ = apples_oranges_mangos_sum_minus_apples_oranges_mangos_sum_minus_mangos - apples_oranges_mangos_sum_minus_mangos\n\
    \        val apples_oranges_mangos_sum_minus_apples_oranges_mangos_sum_minus_apples_oranges_mangos\
    \ = apples_oranges_mangos_sum_minus_apples_oranges_mangos_sum_minus_apples_oranges_mangos\
    \ - apples_oranges_mangos_sum_minus_apples_oranges_mangos\n        val apples_oranges_mangos_sum_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5a7x5033.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5a7x5033.scala:29:86\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mapples_oranges_mangos_sum_minus_apples_oranges_mangos_sum_minus_oranges\e\
    [0m = apples_oranges_mangos_sum_minus_apples_oranges_mangos_sum_minus_oranges\
    \ - apples_oranges_mangos_sum_minus_oranges\n\e[31m\e[31m   |\e[0m           \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mapples_oranges_mangos_sum_minus_apples_oranges_mangos_sum_minus_oranges\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5a7x5033.scala:30:85\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mapples_oranges_mangos_sum_minus_apples_oranges_mangos_sum_minus_mangos\e\
    [0m = apples_oranges_mangos_sum_minus_apples_oranges_mangos_sum_minus_mangos -\
    \ apples_oranges_mangos_sum_minus_mangos\n\e[31m\e[31m   |\e[0m              \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mapples_oranges_mangos_sum_minus_apples_oranges_mangos_sum_minus_mangos\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5a7x5033.scala:31:100\
    \ --------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mapples_oranges_mangos_sum_minus_apples_oranges_mangos_sum_minus_apples_oranges_mangos\e\
    [0m = apples_oranges_mangos_sum_minus_apples_oranges_mangos_sum_minus_apples_oranges_mangos\
    \ - apples_oranges_mangos_sum_minus_apples_oranges_mangos\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35m\n\e[31m "
  stdout: ''
  timestamp: 1659795036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0).trim().toInt\n\
    \        val oranges = s.split(\"oranges\")(0).trim().toInt\n        val mangos\
    \ = s.split(\"mangos\")(0).trim().toInt\n        val fruits = apples + oranges\
    \ + mangos\n        val apples_count = apples.toLong\n        val oranges_count\
    \ = oranges.toLong\n        val mangos_count = mangos.toLong\n        val apples_sum\
    \ = apples_count.toLong\n        val oranges_sum = oranges_count.toLong\n    \
    \    val mangos_sum = mangos_count.toLong\n        val apples_percentage = apples_sum.toDouble\
    \ / fruits.toDouble\n        val oranges_percentage = oranges_sum.toDouble / fruits.toDouble\n\
    \        val mangos_percentage = mangos_sum.toDouble / fruits.toDouble\n     \
    \   val apples_percentage_rounded = math.round(apples_percentage*100).toInt\n\
    \        val oranges_percentage_rounded = math.round(oranges_percentage*100).toInt\n\
    \        val mangos_percentage_rounded = math.round(mangos_percentage*100).toInt\n\
    \        val apples_percentage_rounded_rounded = math.round(apples_percentage_rounded*100).toInt\n\
    \        val oranges_percentage_rounded_rounded = math.round(oranges_percentage_rounded*100).toInt\n\
    \        val mangos_percentage_rounded_rounded = math.round(mangos_percentage_rounded*100).toInt\n\
    \        val apples_percentage_rounded_rounded_rounded = math.round(apples_percentage_rounded_rounded*100).toInt\n\
    \        val oranges_percentage_rounded_rounded_rounded = math.round(oranges_percentage_rounded_rounded*100).toInt\n\
    \        val mangos_percentage_rounded_rounded_rounded = math.round(mangos_percentage_rounded_rounded*100).toInt\n\
    \        val apples_percentage_rounded_rounded_rounded_rounded = math.round(apples_percentage_rounded_rounded_rounded*100).toInt\n\
    \        val oranges_percentage_rounded_rounded_rounded_rounded = math.round(oranges_percentage_rounded_rounded_rounded*100).toInt\n\
    \        val mangos_percentage_rounded_rounded_rounded_rounded = math.round(mangos_percentage_rounded_rounded_rounded*100).toInt\n\
    \        val apples_percentage_rounded_rounded_rounded_rounded_rounded = math.round(apples_percentage_rounded_rounded_rounded_rounded*100).toInt\n\
    \        val oranges_percentage_rounded_roun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt11w52wv.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpt11w52wv.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val mangos = s.split(\"\
    \ \").map(_.toInt)\n        val fruits = apples ++ oranges ++ mangos\n       \
    \ val basket = fruits.toSet\n        val totalFruits = fruits.toSet.size\n   \
    \     val totalApples = apples.toSet.size\n        val totalOranges = oranges.toSet.size\n\
    \        val totalMangos = mangos.toSet.size\n        val totalBasket = basket.size\n\
    \        val totalFruitsPerBasket = fruits.toSet.size / basket.size\n        val\
    \ totalApplesPerBasket = apples.toSet.size / basket.size\n        val totalOrangesPerBasket\
    \ = oranges.toSet.size / basket.size\n        val totalMangosPerBasket = mangos.toSet.size\
    \ / basket.size\n        val totalBasketPerFruit = fruits.toSet.size / fruits.size\n\
    \        val totalApplesPerFruit = apples.toSet.size / fruits.size\n        val\
    \ totalOrangesPerFruit = oranges.toSet.size / fruits.size\n        val totalMangosPerFruit\
    \ = mangos.toSet.size / fruits.size\n        val totalFruitsPerFruit = fruits.toSet.size\
    \ / fruits.size\n        val totalApplesPerFruitPerBasket = apples.toSet.size\
    \ / fruits.size / basket.size\n        val totalOrangesPerFruitPerBasket = oranges.toSet.size\
    \ / fruits.size / basket.size\n        val totalMangosPerFruitPerBasket = mangos.toSet.size\
    \ / fruits.size / basket.size\n        val totalBasketPerFruitPerFruit = fruits.toSet.size\
    \ / fruits.size / fruits.size\n        val totalApplesPerFruitPerFruit = apples.toSet.size\
    \ / fruits.size / fruits.size\n        val totalOrangesPerFruitPerFruit = oranges.toSet.size\
    \ / fruits.size / fruits.size\n        val totalMangosPerFruitPerFruit = mangos.toSet.size\
    \ / fruits.size / fruits.size\n        val totalBasketPerFruitPerFruitPerBasket\
    \ = fruits.toSet.size / fruits.size / fruits.size / basket.size\n        val totalApplesPerFruitPerFru\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj64xj7o1.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpj64xj7o1.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795037
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = n - apples - oranges\n        val fruits = apples + oranges\
    \ + mangos\n        fruits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpryliqr34.scala:15)\n\
    \tat Problem$.main(tmpryliqr34.scala:22)\n\tat Problem.main(tmpryliqr34.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = n - fruits\n    \
    \    fruits + mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpp9010woi.scala:15)\n\
    \tat Problem$.main(tmpp9010woi.scala:22)\n\tat Problem.main(tmpp9010woi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \")\n        val oranges\
    \ = s.split(\" \")\n        val fruits = s.split(\" \")\n        val apples_count\
    \ = apples.map(_.toInt).sum\n        val oranges_count = oranges.map(_.toInt).sum\n\
    \        val fruits_count = fruits.map(_.toInt).sum\n        val mangos = n -\
    \ apples_count - oranges_count - fruits_count\n        mangos\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp5j0njgxc.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp5j0njgxc.scala:18)\n\
    \tat Problem$.main(tmp5j0njgxc.scala:25)\n\tat Problem.main(tmp5j0njgxc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \")(0).toLong\n      \
    \  val oranges = s.split(\" \")(1).toLong\n        val mangos = s.split(\" \"\
    )(2).toLong\n        val total = apples + oranges + mangos\n        val apples_count\
    \ = apples.toLong\n        val oranges_count = oranges.toLong\n        val mangos_count\
    \ = mangos.toLong\n        val apples_count = apples_count - oranges_count - mangos_count\n\
    \        val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val apples_count = apples_count - oranges_count\n        val apples_count\
    \ = apples_count - mangos_count\n        val apples_count = apples_count - oranges_count\n\
    \        val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val apples_count = apples_count - oranges_count\n        val apples_count\
    \ = apples_count - mangos_count\n        val apples_count = apples_count - oranges_count\n\
    \        val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val apples_count = apples_count - oranges_count\n        val apples_count\
    \ = apples_count - mangos_count\n        val apples_count = apples_count - oranges_count\n\
    \        val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val apples_count = apples_count - oranges_count\n        val apples_count\
    \ = apples_count - mangos_count\n        val apples_count = apples_count - oranges_count\n\
    \        val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val apples_count = apples_count - oranges_count\n        val apples_count\
    \ = apples_count - mangos_count\n        val apples_count = apples_count - oranges_count\n\
    \        val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val apples_count = apples_count - oranges_count\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjhd1bs1g.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count\
    \ - oranges_count - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjhd1bs1g.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - mangos_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjhd1bs1g.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - oranges_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjhd1bs1g.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - mangos_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjhd1bs1g.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m"
  stdout: ''
  timestamp: 1659795036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0).toInt\n  \
    \      val oranges = s.split(\"oranges\")(0).toInt\n        val mangos = s.split(\"\
    mango\")(0).toInt\n        val total = apples + oranges + mangos\n        val\
    \ apples_count = apples / total\n        val oranges_count = oranges / total\n\
    \        val mangos_count = mangos / total\n        val apples_remain = apples\
    \ % total\n        val oranges_remain = oranges % total\n        val mangos_remain\
    \ = mangos % total\n        val apples_count = apples_remain + apples_count\n\
    \        val oranges_count = oranges_remain + oranges_count\n        val mangos_count\
    \ = mangos_remain + mangos_count\n        apples_count * oranges_count * mangos_count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy_h05595.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_remain\
    \ + apples_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy_h05595.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges_remain\
    \ + oranges_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_count is already defined as \e[33mvalue\e[0m \e[35moranges_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy_h05595.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmangos_count\e[0m = mangos_remain +\
    \ mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1659795033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \")(0)\n        val oranges\
    \ = s.split(\" \")(1)\n        val mangos = s.split(\" \")(2)\n        val apples_count\
    \ = apples.toLong\n        val oranges_count = oranges.toLong\n        val mangos_count\
    \ = mangos.toLong\n        val apples_total = apples_count + oranges_count + mangos_count\n\
    \        val oranges_total = apples_count - mangos_count\n        val mangos_total\
    \ = oranges_count - apples_count\n        val apples_percentage = apples_count\
    \ / apples_total\n        val oranges_percentage = oranges_count / oranges_total\n\
    \        val mangos_percentage = mangos_count / mangos_total\n        val apples_percentage_rounded\
    \ = math.round(apples_percentage * 100).toInt\n        val oranges_percentage_rounded\
    \ = math.round(oranges_percentage * 100).toInt\n        val mangos_percentage_rounded\
    \ = math.round(mangos_percentage * 100).toInt\n        val apples_percentage_rounded_rounded\
    \ = math.round(apples_percentage_rounded * 100).toInt\n        val oranges_percentage_rounded_rounded\
    \ = math.round(oranges_percentage_rounded * 100).toInt\n        val mangos_percentage_rounded_rounded\
    \ = math.round(mangos_percentage_rounded * 100).toInt\n        val apples_percentage_rounded_rounded_rounded\
    \ = math.round(apples_percentage_rounded_rounded * 100).toInt\n        val oranges_percentage_rounded_rounded_rounded\
    \ = math.round(oranges_percentage_rounded_rounded * 100).toInt\n        val mangos_percentage_rounded_rounded_rounded\
    \ = math.round(mangos_percentage_rounded_rounded * 100).toInt\n        val apples_percentage_rounded_rounded_rounded_rounded\
    \ = math.round(apples_percentage_rounded_rounded_rounded * 100).toInt\n      \
    \  val oranges_percentage_rounded_rounded_rounded_rounded = math.round(oranges_percentage_rounded_rounded_rounded\
    \ * 100).toInt\n        val mangos_percentage_rounded_rounded_rounded_rounded\
    \ = math.round(mangos_percentage_rounded_rounded_rounded * 100).toInt\n      \
    \  val apples_percentage_rounded_rounded_rounded_rounded_rounded = math.round(apples_percentage_rounded_rounded_rounded_rounded\
    \ * 100).toInt\n        val oranges_percentage_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(oranges_percentage_rounded_rounded_rounded_rounded * 100).toInt\n\
    \        val mangos_percentage_rounded_rounded_rounded_rounded_rounded = math.round(mang\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcac4pl9r.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcac4pl9r.scala:41:83\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e\
    [36mmangos_percentage_rounded_rounded_rounded_rounded_rounded\e[0m = math.round(mang\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                           ^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                                  Not found: mang\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpcac4pl9r.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val basket = new mutable.HashMap[String,\
    \ Int]()\n        basket.put(\"apples\", apples)\n        basket.put(\"oranges\"\
    , oranges)\n        basket.put(\"mangos\", mangos)\n        val totalFruits =\
    \ apples + oranges + mangos\n        val totalFruitsCount = apples + oranges +\
    \ mangos\n        val fruitsInBasket = basket.filter(_._2 > 0).map(_._1).sum\n\
    \        val mangoFruits = fruitsInBasket - fruitsInBasket.filter(_._2 == 1).map(_._1).sum\n\
    \        mangoFruits\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7kevljcs.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0)\n        val\
    \ oranges = s.split(\"oranges\")(0)\n        val mangos = s.split(\"mango\")(0)\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val total_count = apples_count\
    \ + oranges_count + mangos_count\n        val apples_count = apples.toLong\n \
    \       val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val total_count = apples_count + oranges_count + mangos_count\n     \
    \   val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val total_count = apples_count\
    \ + oranges_count + mangos_count\n        val apples_count = apples.toLong\n \
    \       val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val total_count = apples_count + oranges_count + mangos_count\n     \
    \   val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val total_count = apples_count\
    \ + oranges_count + mangos_count\n        val apples_count = apples.toLong\n \
    \       val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val total_count = apples_count + oranges_count + mangos_count\n     \
    \   val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val total_count = apples_count\
    \ + oranges_count + mangos_count\n        val apples_count = apples.toLong\n \
    \       val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val total_count = apples_count + oranges_count + mangos_count\n     \
    \   val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val total_count = apples_count\
    \ + oranges_count + mangos_count\n        val apples_count = apples.toLong\n \
    \       val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val total_count = apples_count + oranges_count + mangos_count\n     \
    \   val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpgndligss.scala:60:11 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpgndligss.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgndligss.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36moranges_count\e[0m = oranges.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0moranges_count\
    \ is already defined as \e[33mvalue\e[0m \e[35moranges_count\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgndligss.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmangos_count\e[0m = mangos.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_count is already defined as \e[33mvalue\e[0m \e[35mmangos_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgndligss.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mtotal_count\e[0m = apples_count + oranges_count\
    \ + mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotal_count is already defined as \e[33mvalue\e[0m \e[35mtotal_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods mu"
  stdout: ''
  timestamp: 1659795038
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = n - fruits\n    \
    \    fruits + mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpp9010woi.scala:15)\n\
    \tat Problem$.main(tmpp9010woi.scala:22)\n\tat Problem.main(tmpp9010woi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = n - fruits\n    \
    \    mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpp_z9_vif.scala:15)\n\
    \tat Problem$.main(tmpp_z9_vif.scala:22)\n\tat Problem.main(tmpp_z9_vif.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795003
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = n.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = fruits - apples -\
    \ oranges\n        mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpns97ohth.scala:16)\n\
    \tat Problem$.main(tmpns97ohth.scala:22)\n\tat Problem.main(tmpns97ohth.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val mangos = s.split(\"\
    \ \").map(_.toInt)\n        val basket = new mutable.HashMap[String, Int]()\n\
    \        basket.put(\"apples\", apples.sum)\n        basket.put(\"oranges\", oranges.sum)\n\
    \        basket.put(\"mangos\", mangos.sum)\n        val totalFruits = apples.sum\
    \ + oranges.sum + mangos.sum\n        val totalFruitsCount = apples.sum + oranges.sum\
    \ + mangos.sum\n        val mangoFruits = totalFruits - totalFruitsCount\n   \
    \     val mangoFruitsCount = totalFruitsCount - apples.sum - oranges.sum\n   \
    \     val mangoFruitsCount2 = totalFruitsCount - apples.sum - oranges.sum - mangos.sum\n\
    \        val mangoFruitsCount3 = totalFruitsCount - apples.sum - oranges.sum -\
    \ mangos.sum - basket.get(\"mangos\")\n        val mangoFruitsCount4 = totalFruitsCount\
    \ - apples.sum - oranges.sum - mangos.sum - basket.get(\"mangos\") - basket.get(\"\
    apples\")\n        val mangoFruitsCount5 = totalFruitsCount - apples.sum - oranges.sum\
    \ - mangos.sum - basket.get(\"mangos\") - basket.get(\"oranges\")\n        val\
    \ mangoFruitsCount6 = totalFruitsCount - apples.sum - oranges.sum - mangos.sum\
    \ - basket.get(\"mangos\") - basket.get(\"oranges\") - basket.get(\"apples\")\n\
    \        val mangoFruitsCount7 = totalFruitsCount - apples.sum - oranges.sum -\
    \ mangos.sum - basket.get(\"mangos\") - basket.get(\"oranges\") - basket.get(\"\
    apples\") - basket.get(\"mangos\")\n        val mangoFruitsCount8 = totalFruitsCount\
    \ - apples.sum - oranges.sum - mangos.sum - basket.get(\"mangos\") - basket.get(\"\
    oranges\") - basket.get(\"apples\") - basket.get(\"mangos\") - basket.get(\"oranges\"\
    )\n        val mangoFruitsCount9 = totalFruitsCount - apples.sum - oranges.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpepnp54uc.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpepnp54uc.scala:18:25 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpepnp54uc.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795039
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0).toLong\n \
    \       val oranges = s.split(\"oranges\")(0).toLong\n        val mangos = s.split(\"\
    mango\")(0).toLong\n        val fruits = apples + oranges + mangos\n        fruits.toLong\
    \ - n - mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp4es2t70z.scala:15)\n\
    \tat Problem$.main(tmp4es2t70z.scala:22)\n\tat Problem.main(tmp4es2t70z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(1).trim\n   \
    \     val oranges = s.split(\"oranges\")(1).trim\n        val mangos = s.split(\"\
    mango\")(1).trim\n        val apples_count = apples.toInt\n        val oranges_count\
    \ = oranges.toInt\n        val mangos_count = mangos.toInt\n        val apples_total\
    \ = apples_count + oranges_count + mangos_count\n        val oranges_total = apples_count\
    \ - mangos_count\n        val mangos_total = apples_total - oranges_count\n  \
    \      val apples_percentage = apples_total / apples_count * 100\n        val\
    \ oranges_percentage = oranges_total / oranges_count * 100\n        val mangos_percentage\
    \ = mangos_total / mangos_count * 100\n        val apples_percentage_rounded =\
    \ math.round(apples_percentage)\n        val oranges_percentage_rounded = math.round(oranges_percentage)\n\
    \        val mangos_percentage_rounded = math.round(mangos_percentage)\n     \
    \   val apples_percentage_rounded_rounded = math.round(apples_percentage_rounded)\n\
    \        val oranges_percentage_rounded_rounded = math.round(oranges_percentage_rounded)\n\
    \        val mangos_percentage_rounded_rounded = math.round(mangos_percentage_rounded)\n\
    \        val apples_percentage_rounded_rounded_rounded = math.round(apples_percentage_rounded_rounded)\n\
    \        val oranges_percentage_rounded_rounded_rounded = math.round(oranges_percentage_rounded_rounded)\n\
    \        val mangos_percentage_rounded_rounded_rounded = math.round(mangos_percentage_rounded_rounded)\n\
    \        val apples_percentage_rounded_rounded_rounded_rounded = math.round(apples_percentage_rounded_rounded_rounded)\n\
    \        val oranges_percentage_rounded_rounded_rounded_rounded = math.round(oranges_percentage_rounded_rounded_rounded)\n\
    \        val mangos_percentage_rounded_rounded_rounded_rounded = math.round(mangos_percentage_rounded_rounded_rounded)\n\
    \        val apples_percentage_rounded_rounded_rounded_rounded_rounded = math.round(apples_percentage_rounded_rounded_rounded_rounded)\n\
    \        val oranges_percentage_rounded_rounded_rounded_rounded_rounded = math.round(oranges_percentage_rounded_rounded_rounded_rounded)\n\
    \        val mangos_percentage_rounded_rounded_rounded_rounded_rounded = math.round(mangos_percentage_rounded_rounded_rounded_rounded)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8lg1_uab.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795038
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val arr = s.split(\" \")\n        val apples =\
    \ arr.map(_.toInt)\n        val oranges = arr.filter(_.toString.contains(\"oranges\"\
    )).map(_.toInt)\n        val mangoes = arr.filter(_.toString.contains(\"mango\"\
    )).map(_.toInt)\n        val totalApples = apples.sum\n        val totalOranges\
    \ = oranges.sum\n        val totalMangoes = mangoes.sum\n        val totalFruits\
    \ = totalApples + totalOranges + totalMangoes\n        val appleFruits = apples.sum\n\
    \        val orangeFruits = oranges.sum\n        val mangoFruits = mangoes.sum\n\
    \        val fruits = appleFruits + orangeFruits + mangoFruits\n        val appleFruitsPerApple\
    \ = appleFruits / totalApples\n        val orangeFruitsPerOrange = orangeFruits\
    \ / totalOranges\n        val mangoFruitsPerMango = mangoFruits / totalMangoes\n\
    \        val fruitPerApple = appleFruitsPerApple * n\n        val fruitPerOrange\
    \ = orangeFruitsPerOrange * n\n        val fruitPerMango = mangoFruitsPerMango\
    \ * n\n        fruitPerApple + fruitPerOrange + fruitPerMango\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp82bvxr64.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp82bvxr64.scala:16)\n\
    \tat Problem$.main(tmp82bvxr64.scala:36)\n\tat Problem.main(tmp82bvxr64.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val fruits = apples + oranges + mangos\n\
    \        val apples_count = apples.toInt\n        val oranges_count = oranges.toInt\n\
    \        val mangos_count = mangos.toInt\n        val apples_count = apples_count\
    \ - oranges_count - mangos_count\n        val apples_count = apples_count - mangos_count\n\
    \        val apples_count = apples_count - oranges_count\n        val apples_count\
    \ = apples_count - mangos_count\n        val apples_count = apples_count - oranges_count\
    \ - mangos_count\n        val apples_count = apples_count - mangos_count\n   \
    \     val apples_count = apples_count - oranges_count\n        val apples_count\
    \ = apples_count - mangos_count\n        val apples_count = apples_count - oranges_count\
    \ - mangos_count\n        val apples_count = apples_count - mangos_count\n   \
    \     val apples_count = apples_count - oranges_count\n        val apples_count\
    \ = apples_count - mangos_count\n        val apples_count = apples_count - oranges_count\
    \ - mangos_count\n        val apples_count = apples_count - mangos_count\n   \
    \     val apples_count = apples_count - oranges_count\n        val apples_count\
    \ = apples_count - mangos_count\n        val apples_count = apples_count - oranges_count\
    \ - mangos_count\n        val apples_count = apples_count - mangos_count\n   \
    \     val apples_count = apples_count - oranges_count\n        val apples_count\
    \ = apples_count - mangos_count\n        val apples_count = apples_count - oranges_count\
    \ - mangos_count\n        val apples_count = apples_count - mangos_count\n   \
    \     val apples_count = apples_count - oranges_count\n        val apples_count\
    \ = apples_count - mangos_count\n        val apples_count = apples_count - oranges_count\
    \ - mangos_count\n        val apples_count = apples_count - mangos_count\n   \
    \     val apples_count = apples_count - oranges_count\n        val apples_count\
    \ = apples_count - mangos_count\n        val apples_count = apples_count - oranges_count\
    \ - mangos_count\n        val apples_count = apples_count - mangos_count\n   \
    \     val apples_count = apples_count - oranges_count\n        val apples_count\
    \ = apples_count - mangos_count\n        val apples_count = apples_count \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmj1cqg38.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count\
    \ - oranges_count - mangos_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmj1cqg38.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - mangos_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmj1cqg38.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - oranges_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmj1cqg38.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m = apples_count - mangos_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_count is already defined as \e[33mvalue\e[0m \e[35mapples_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmj1cqg38.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mapples_count\e[0m"
  stdout: ''
  timestamp: 1659795040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val fruits = apples ++\
    \ oranges\n        val mangoes = fruits.filter(_ % 2 == 0)\n        fruits.size\
    \ - mangoes.size\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpbnn7hyhm.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpbnn7hyhm.scala:15)\n\
    \tat Problem$.main(tmpbnn7hyhm.scala:22)\n\tat Problem.main(tmpbnn7hyhm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt)\n   \
    \     val oranges = s.split(\" \").map(_.toInt)\n        val mangos = s.split(\"\
    \ \").map(_.toInt)\n        val apples_count = apples.sum\n        val oranges_count\
    \ = oranges.sum\n        val mangos_count = mangos.sum\n        val apples_total\
    \ = apples_count + apples_count - 1\n        val oranges_total = oranges_count\
    \ + oranges_count - 1\n        val mangos_total = mangos_count + mangos_count\
    \ - 1\n        val apples_distribution = apples.map(x => (x/apples_total).toInt)\n\
    \        val oranges_distribution = oranges.map(x => (x/oranges_total).toInt)\n\
    \        val mangos_distribution = mangos.map(x => (x/mangos_total).toInt)\n \
    \       val apples_distribution_sum = apples_distribution.sum\n        val oranges_distribution_sum\
    \ = oranges_distribution.sum\n        val mangos_distribution_sum = mangos_distribution.sum\n\
    \        val apples_distribution_sum_2 = apples_distribution_sum * apples_distribution_sum\n\
    \        val oranges_distribution_sum_2 = oranges_distribution_sum * oranges_distribution_sum\n\
    \        val mangos_distribution_sum_2 = mangos_distribution_sum * mangos_distribution_sum\n\
    \        val apples_distribution_sum_3 = apples_distribution_sum * apples_distribution_sum\
    \ * apples_distribution_sum\n        val oranges_distribution_sum_3 = oranges_distribution_sum\
    \ * oranges_distribution_sum * oranges_distribution_sum\n        val mangos_distribution_sum_3\
    \ = mangos_distribution_sum * mangos_distribution_sum * mangos_distribution_sum\n\
    \        val apples_distribution_sum_4 = apples_distribution_sum * apples_distribution_sum\
    \ * apples_distribution_sum * apples_distribution_sum\n        val oranges_distribution_sum_4\
    \ = oranges_distribution_sum * oranges_distribution_sum * oranges_distribution_sum\
    \ * oranges_distribution_sum\n        val mangos_distribution_sum_4 = mangos_distribution_sum\
    \ * mangos_distribution_sum * mangos_distribution_sum * mangos_distribution_sum\n\
    \        val apples_distribution_sum_5 = apples_distribution_sum * apples_distribution_sum\
    \ * apples_distribution_sum * apples_distribution_sum * apples_distribution_sum\n\
    \        val oranges_distribution_sum_5 = oranges_distribution_sum * oranges_distribution_sum\
    \ * oranges_distribution_sum * oranges_distribution_sum * oranges_distribution\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpd4t0yhid.scala:40:147 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36moranges_distribution_sum_5\e\
    [0m = oranges_distribution_sum * oranges_distribution_sum * oranges_distribution_sum\
    \ * oranges_distribution_sum * oranges_distribution\n\e[31m\e[31m   |\e[0m   \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m\
    \ \e[35m*\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m\
    \  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x:\
    \ Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\
    \e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e\
    [0m match arguments ((oranges_distribution : Array[Int]))\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpd4t0yhid.scala:41:5 ---------------------\e[0m\e\
    [0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795041
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val fruits = apples + oranges\n        val mangos = n - fruits\n    \
    \    fruits + mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpp9010woi.scala:15)\n\
    \tat Problem$.main(tmpp9010woi.scala:22)\n\tat Problem.main(tmpp9010woi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples and \")\n      \
    \  val oranges = s.split(\"oranges and \")\n        val fruits = s.split(\"fruits\
    \ in basket \")\n        val apples_count = apples(0).split(\" \").map(_.toInt)\n\
    \        val oranges_count = oranges(0).split(\" \").map(_.toInt)\n        val\
    \ fruits_count = fruits(0).split(\" \").map(_.toInt)\n        val apples_sum =\
    \ apples_count.sum\n        val oranges_sum = oranges_count.sum\n        val fruits_sum\
    \ = fruits_count.sum\n        val mango_count = fruits_sum - apples_sum - oranges_sum\n\
    \        fruits_sum - apples_sum - oranges_sum - mango_count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$2(tmplydwzj62.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmplydwzj62.scala:19)\n\
    \tat Problem$.main(tmplydwzj62.scala:28)\n\tat Problem.main(tmplydwzj62.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = n - apples - oranges\n        val apples_count = apples.toInt\n\
    \        val oranges_count = oranges.toInt\n        val mangos_count = mangos.toInt\n\
    \        val apples_sum = apples_count.toInt\n        val oranges_sum = oranges_count.toInt\n\
    \        val mangos_sum = mangos_count.toInt\n        val apples_percent = apples_sum.toDouble\
    \ / apples_count.toDouble\n        val oranges_percent = oranges_sum.toDouble\
    \ / oranges_count.toDouble\n        val mangos_percent = mangos_sum.toDouble /\
    \ mangos_count.toDouble\n        val apples_percent = apples_sum.toDouble / apples_count.toDouble\n\
    \        val oranges_percent = oranges_sum.toDouble / oranges_count.toDouble\n\
    \        val mangos_percent = mangos_sum.toDouble / mangos_count.toDouble\n  \
    \      val apples_percent = apples_sum.toDouble / apples_count.toDouble\n    \
    \    val oranges_percent = oranges_sum.toDouble / oranges_count.toDouble\n   \
    \     val mangos_percent = mangos_sum.toDouble / mangos_count.toDouble\n     \
    \   val apples_percent = apples_sum.toDouble / apples_count.toDouble\n       \
    \ val oranges_percent = oranges_sum.toDouble / oranges_count.toDouble\n      \
    \  val mangos_percent = mangos_sum.toDouble / mangos_count.toDouble\n        val\
    \ apples_percent = apples_sum.toDouble / apples_count.toDouble\n        val oranges_percent\
    \ = oranges_sum.toDouble / oranges_count.toDouble\n        val mangos_percent\
    \ = mangos_sum.toDouble / mangos_count.toDouble\n        val apples_percent =\
    \ apples_sum.toDouble / apples_count.toDouble\n        val oranges_percent = oranges_sum.toDouble\
    \ / oranges_count.toDouble\n        val mangos_percent = mangos_sum.toDouble /\
    \ mangos_count.toDouble\n        val apples_percent = apples_sum.toDouble / apples_count.toDouble\n\
    \        val oranges_percent = oranges_sum.toDouble / oranges_count.toDouble\n\
    \        val mangos_percent = mangos_sum.toDouble / mangos_count.toDouble\n  \
    \      val apples_percent = apples_sum.toDouble / apples_count.toDouble\n    \
    \    val oranges_\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiw3nmn19.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiw3nmn19.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mapples_percent\e[0m = apples_sum.toDouble / apples_count.toDouble\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_percent is already defined as \e[33mvalue\e[0m \e[35mapples_percent\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiw3nmn19.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36moranges_percent\e[0m = oranges_sum.toDouble\
    \ / oranges_count.toDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moranges_percent is already defined as \e[33mvalue\e[0m \e\
    [35moranges_percent\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiw3nmn19.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmangos_percent\e[0m = mangos_sum.toDouble\
    \ / mangos_count.toDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangos_percent is already defined as \e[33mvalue\e[0m \e[35mmangos_percent\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiw3nmn19.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mapples_percent\e[0m = apples_sum.toDouble\
    \ / apples_count.toDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapples_percent is alrea"
  stdout: ''
  timestamp: 1659795041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples and \")\n      \
    \  val oranges = s.split(\"oranges and \")\n        val fruits = s.split(\"fruits\
    \ and \")\n        val apples_count = apples(0).split(\"and\").length\n      \
    \  val oranges_count = oranges(0).split(\"and\").length\n        val fruits_count\
    \ = fruits(0).split(\"and\").length\n        val apples_total = apples(1).split(\"\
    and\").length\n        val oranges_total = oranges(1).split(\"and\").length\n\
    \        val fruits_total = fruits(1).split(\"and\").length\n        val apples_remain\
    \ = n - apples_count - apples_total - apples_remain\n        val oranges_remain\
    \ = n - oranges_count - oranges_total - oranges_remain\n        val fruits_remain\
    \ = n - fruits_count - fruits_total - fruits_remain\n        fruits_remain - fruits_count\
    \ - fruits_total\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnuke5jqx.scala:24:62 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mapples_remain\e[0m = n -\
    \ apples_count - apples_total - apples_remain\n\e[31m\e[31m   |\e[0m         \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                Recursive \e[33mvalue\e[0m \e[35mapples_remain\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnuke5jqx.scala:25:65\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36moranges_remain\e[0m = n - oranges_count - oranges_total - oranges_remain\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^\e[0m\n\e[31m   |\e[0m                               Recursive \e[33mvalue\e\
    [0m \e[35moranges_remain\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpnuke5jqx.scala:26:62 ---------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mfruits_remain\e[0m = n - fruits_count\
    \ - fruits_total - fruits_remain\n\e[31m\e[31m   |\e[0m                      \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                   Recursive \e[33mvalue\e[0m \e[35mfruits_remain\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795039
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(1).toLong\n        val mangoes\
    \ = n - apples - oranges\n        fruits.last.toLong - fruits(0).toLong - fruits(1).toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpxfxw86j6.scala:17)\n\
    \tat Problem$.main(tmpxfxw86j6.scala:22)\n\tat Problem.main(tmpxfxw86j6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0).toInt\n  \
    \      val oranges = s.split(\"oranges\")(0).toInt\n        val mangos = s.split(\"\
    mango\")(0).toInt\n        val basket = new mutable.HashMap[String, Int]()\n \
    \       basket.put(\"apples\", apples)\n        basket.put(\"oranges\", oranges)\n\
    \        basket.put(\"mango\", mangos)\n        val totalFruits = apples + oranges\
    \ + mangos\n        val fruitsInBasket = basket.filter(_._2 > 0).map(_._1).sum\n\
    \        fruitsInBasket - mangos\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3reqamet.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val apples = s.split(\"apples\")(0).trim\n   \
    \     val oranges = s.split(\"oranges\")(0).trim\n        val mangos = s.split(\"\
    mangos\")(0).trim\n        val apples_count = apples.toInt\n        val oranges_count\
    \ = oranges.toInt\n        val mangos_count = mangos.toInt\n        val apples_total\
    \ = apples_count + oranges_count + mangos_count\n        val oranges_total = apples_count\
    \ - mangos_count\n        val mangos_total = apples_count - oranges_count\n  \
    \      val apples_percentage = apples_count / apples_total\n        val oranges_percentage\
    \ = oranges_count / oranges_total\n        val mangos_percentage = mangos_count\
    \ / mangos_total\n        val apples_percentage_of_total = apples_percentage *\
    \ apples_total\n        val oranges_percentage_of_total = oranges_percentage *\
    \ oranges_total\n        val mangos_percentage_of_total = mangos_percentage *\
    \ mangos_total\n        val apples_percentage_of_total_with_mangos = apples_percentage_of_total\
    \ + mangos_percentage_of_total\n        val oranges_percentage_of_total_with_mangos\
    \ = oranges_percentage_of_total + mangos_percentage_of_total\n        val mangos_percentage_of_total_with_mangos\
    \ = mangos_percentage_of_total + mangos_percentage_of_total\n        val apples_percentage_of_total_with_mangos_with_mangos\
    \ = apples_percentage_of_total_with_mangos + mangos_percentage_of_total_with_mangos\n\
    \        val oranges_percentage_of_total_with_mangos_with_mangos = oranges_percentage_of_total_with_mangos\
    \ + mangos_percentage_of_total_with_mangos\n        val mangos_percentage_of_total_with_mangos_with_mangos\
    \ = mangos_percentage_of_total_with_mangos + mangos_percentage_of_total_with_mangos\n\
    \        val apples_percentage_of_total_with_mangos_with_mangos_with_mangos =\
    \ apples_percentage_of_total_with_mangos_with_mangos + mangos_percentage_of_total_with_mangos_with_mangos\n\
    \        val oranges_percentage_of_total_with_mangos_with_mangos_with_mangos =\
    \ oranges_percentage_of_total_with_mangos_with_mangos + mangos_percentage_of_total_with_mangos_with_mangos\n\
    \        val mangos_percentage_of_total_with_mangos_with_mangos_with_mangos =\
    \ mangos_percentage_of_total_with_mangos_with_mangos + mangos_percentage_of_total_with_mangos_with_mangos\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo8_t5dmx.scala:40:5\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0\
    \ apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples\
    \ and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
    \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
    \ n : Long) : Long = {\n        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(1).toLong\n        val mangos\
    \ = n - apples - oranges\n        fruits match {\n            case Array(a,b,c)\
    \ =>\n                if(a>b) fruitDistribution(s.replaceAll(\"apples\", \"oranges\"\
    ), n)\n                else fruitDistribution(s.replaceAll(\"oranges\", \"apples\"\
    ), n)\n            case Array(a,b,c,d) =>\n                if(a>b) fruitDistribution(s.replaceAll(\"\
    apples\", \"mangoes\"), n)\n                else fruitDistribution(s.replaceAll(\"\
    mangoes\", \"apples\"), n)\n            case Array(a,b,c,d,e) =>\n           \
    \     if(a>b) fruitDistribution(s.replaceAll(\"apples\", \"mangoes\"), n)\n  \
    \              else fruitDistribution(s.replaceAll(\"mangoes\", \"apples\"), n)\n\
    \            case Array(a,b,c,d,e,f) =>\n                if(a>b) fruitDistribution(s.replaceAll(\"\
    apples\", \"mangoes\"), n)\n                else fruitDistribution(s.replaceAll(\"\
    mangoes\", \"apples\"), n)\n            case Array(a,b,c,d,e,f,g) =>\n       \
    \         if(a>b) fruitDistribution(s.replaceAll(\"apples\", \"mangoes\"), n)\n\
    \                else fruitDistribution(s.replaceAll(\"mangoes\", \"apples\"),\
    \ n)\n            case Array(a,b,c,d,e,f,g,h) =>\n                if(a>b) fruitDistribution(s.replaceAll(\"\
    apples\", \"mangoes\"), n)\n                else fruitDistribution(s.replaceAll(\"\
    mangoes\", \"apples\"), n)\n            case Array(a,b,c,d,e,f,g,h,i) =>\n   \
    \             if(a>b) fruitDistribution(s.replaceAll(\"apples\", \"mangoes\"),\
    \ n)\n                else fruitDistribution(s.replaceAll(\"mangoes\", \"apples\"\
    ), n)\n            case Array(a,b,c,d,e,f,g,h,i,j) =>\n                if(a>b)\
    \ fruitDistribution(s.replaceAll(\"apples\", \"mangoes\"), n)\n              \
    \  else fruitDistribution(s.replaceAll(\"mangoes\", \"apples\"), n)\n        \
    \    case Array(a,b,c,d,e,f,g,h,i,j,k) =>\n                if(a>b) fruitDistribution(s.replaceAll(\"\
    apples\", \"mangoes\"), n)\n                else fruitDistribution(s.replaceAll(\"\
    mangoes\", \"apples\"), n)\n            case Array(a,b,c,d,e,f,g,h,i,j,k,l) \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgufv9zi_.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=>' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgufv9zi_.scala:60:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m60 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpgufv9zi_.scala:59:1 ---------------------\e[0m\e[0m\n\
    \e[31m59 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpgufv9zi_.scala:49:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m49 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659795041
