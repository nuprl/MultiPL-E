name: HumanEval_161_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a string s.\n    // if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    //\
  \ If the string contains no letters, reverse the string.\n    // The function should\
  \ return the resulted string.\n    // Examples\n    // solve(\"1234\") = \"4321\"\
  \n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    def solve(s\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
  aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
  ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n \
  \   assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
  #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n\
  \    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
completions: ["        val chars = s.toCharArray\n        val reversed = chars.reverse\n\
    \        val result = reversed.mkString.reverse\n        if(chars.isEmpty) result\n\
    \        else result", "        val result = new StringBuilder(s)\n        val\
    \ reversed = new mutable.ListBuffer[String]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i).toUpper != s.charAt(i).toLower)\n               \
    \ reversed.append(s.charAt(i))\n            else\n                reversed.append(s.charAt(i).toUpper)\n\
    \        reversed.reverse()\n        result.setCharAt(s.length - 1, reversed.head)\n\
    \        result.toString", "        val chars = mutable.HashSet[Char]()\n    \
    \    for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toUpper\n        chars.toList.foldLeft(\"\")(_ + _)",
  "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                chars\
    \ += s.charAt(i)\n            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z'){\n                chars += s.charAt(i).swapCase\n            }\n   \
    \     }\n        if(chars.isEmpty){\n            return s.reverse\n        }\n\
    \        else{\n            val reversed = chars.reverse\n            val result\
    \ = reversed.mkString.reverse\n            return result\n        }", "      \
    \  val result = s.toUpperCase\n        val reversed = result.map(c => if (c.isLetter)\
    \ c.toUpperCase(c) else c)\n        val noLetters = reversed.filter(_.isLetter).mkString\n\
    \        if (noLetters.isEmpty) result\n        else noLetters.reverse", "   \
    \     val result = s.reverse\n        val letters = result.filter(_.isLetter)\n\
    \        if(letters.isEmpty) result.reverse\n        else letters.foldLeft(result){\n\
    \            case (acc, c) => acc.replaceFirst(c.toUpperCase, c.toLowerCase)\n\
    \        }", "        val chars = mutable.ListBuffer[Char]()\n        for (i <-\
    \ 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else\n                chars\
    \ += s.charAt(i).toUpper\n        chars.reverse", "        val chars = mutable.Set[Char]()\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) != '#')\n    \
    \            chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).foldLeft(\"\
    \")(_ + _.toUpperCase)", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else chars += s.charAt(i).toUpper\n\
    \n        chars.reverse", "        val chars = mutable.HashSet[Char]()\n     \
    \   for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toUpper\n        chars.toList.sortWith(_ < _).mkString.reverse",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length)\n  \
    \      {\n            val c = s.charAt(i)\n            if(c == c.toUpperCase)\n\
    \                result.append(c.toUpperCase)\n            else\n            \
    \    result.append(c)\n        }\n        return result.toString", "        val\
    \ chars = mutable.Set[Char]()\n        for (c <- s) {\n            if (c.isLetter)\
    \ chars += c\n            else chars += c.toUpperCase\n        }\n        if (chars.isEmpty)\
    \ s\n        else chars.toSeq.reverse.mkString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n        {\n            val c = s.charAt(i)\n\
    \            if(c == '#')\n            {\n                val newChar = s.charAt(i-1)\n\
    \                val newChar2 = s.charAt(i+1)\n                if(newChar == '@')\n\
    \                {\n                    result.append(newChar2)\n            \
    \        result.append(newChar)\n                }\n                else\n   \
    \             {\n                    result.append(newChar)\n                \
    \    result.append(newChar2)\n                }\n            }\n            else\n\
    \            {\n                result.append(c)\n            }\n        }\n \
    \       return result.toString", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else if (s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z')\n                chars += s.charAt(i).swapCase\n\
    \            else\n                chars += s.charAt(i)\n        chars.reverse",
  "        val result = s.toUpperCase\n        val chars = result.toCharArray\n  \
    \      chars.foreach(c => {\n            if (c.isLetter) c.toUpperCase\n     \
    \       else c.toLowerCase\n        })\n        result", "        val chars =\
    \ s.toCharArray\n        val charsReversed = chars.reverse\n        val charsReversedString\
    \ = charsReversed.mkString.reverse\n        charsReversedString.toUpperCase",
  "        val result = s.toUpperCase\n        val chars = result.toCharArray\n  \
    \      chars.foreach { c =>\n            val index = chars.indexOf(c)\n      \
    \      if (index != -1) {\n                chars(index) = chars(index).swap\n\
    \            }\n        }\n        result.toString", "        val result = new\
    \ StringBuilder\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        result.toString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length)\n  \
    \          if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append(s.charAt(i).toUpper)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString",
  "        val chars = mutable.Set[Char]()\n        for(i <- 0 until s.length)\n \
    \           if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \n        val result = chars.toSeq.reverse.mkString\n        if(chars.isEmpty)\n\
    \            result\n        else\n            solve(result) + s.substring(chars.size)",
  "        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until s.length)\
    \ chars += s.charAt(i)\n        chars.toList.reverse.foldLeft(\"\")(_ + _)", " \
    \       val chars = mutable.Set[Char]()\n        for (c <- s) {\n            chars\
    \ += c\n        }\n        chars.toList.sortWith(_ < _).reverse.mkString", " \
    \       val result = s.toUpperCase\n        val reversed = result.map(c => if\
    \ (c.isLetter) c.toUpperCase(c) else c)\n        if (result.isEmpty) result\n\
    \        else reversed.mkString", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.reverse.foldLeft(\"\
    \")(_ + _)", "        val chars = mutable.HashSet[Char]()\n        for(i <- 0\
    \ until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else\n                chars\
    \ += s.charAt(i).toUpper\n\n        val result = chars.toSeq.reverse.mkString\n\
    \        if(chars.size == 0)\n            result\n        else\n            solve(result)\
    \ + s.charAt(0)", "        val result = new StringBuilder\n        for(i <- 0\
    \ until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                result.append(s.charAt(i).toUpper)\n            else\n      \
    \          result.append(s.charAt(i))\n        return result.toString", "    \
    \    val chars = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until s.length)\n\
    \            chars += s.charAt(i)\n        chars.toList.reverse.foldLeft(\"\"\
    )(_ + _)", "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0\
    \ until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else\n                chars\
    \ += s.charAt(i).toUpper\n        chars.reverse", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else if (s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z')\n                chars += s.charAt(i).swapCase\n\
    \            else\n                chars += s.charAt(i)\n        chars.reverse.mkString",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c.isLetter){\n              \
    \  result.append((c.toUpperCase).reverse)\n            }else{\n              \
    \  result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = s.toCharArray\n        val reversed = new mutable.ListBuffer[Char]()\n\
    \        val upperCase = new mutable.ListBuffer[Char]()\n        val lowerCase\
    \ = new mutable.ListBuffer[Char]()\n        val noLetters = new mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length) {\n            val c = chars(i)\n   \
    \         if (c.isLetter) {\n                if (c.toUpperCase == c) upperCase\
    \ += c\n                else lowerCase += c\n            } else {\n          \
    \      noLetters += c\n            }\n        }\n        if (upperCase.isEmpty\
    \ && lowerCase.isEmpty && noLetters.isEmpty) {\n            return s\n       \
    \ }\n        if (upperCase.isEmpty) {\n            upperCase.clear()\n       \
    \     lowerCase.clear()\n            noLetters.clear()\n            reversed.clear()\n\
    \            for (i <- 0 until chars.length) {\n                val c = chars(i)\n\
    \                if (c.isLetter) {\n                    upperCase += c\n     \
    \           } else {\n                    lowerCase += c\n                }\n\
    \            }\n        }\n        if (lowerCase.isEmpty) {\n            lowerCase.clear()\n\
    \            noLetters.clear()\n            reversed.clear()\n            for\
    \ (i <- 0 until chars.length) {\n                val c = chars(i)\n          \
    \      if (c.isLetter) {\n                    lowerCase += c\n               \
    \ } else {\n                    noLetters += c\n                }\n          \
    \  }\n        }\n        if (noLetters.isEmpty) {\n            noLetters.clear()\n\
    \            reversed.clear()\n            for (i <- 0 until chars.length) {\n\
    \                val c = chars(i)\n                reversed += c\n           \
    \ }\n        }\n        if (reversed.isEmpty) {\n            reversed.clear()\n\
    \            for (i <- 0 until chars.length) {\n                val c = chars(i)\n\
    \                reversed += c\n            }\n        }\n        val result =\
    \ reversed.mkString.reverse\n        if (result.length == 0) result\n        else\
    \ result", "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append(s.toUpperCase)\n            }else if(c == 'b' || c\
    \ == 'B'){\n                result.append(s.toLowerCase)\n            }else{\n\
    \                result.append(c)\n            }\n        }\n        return result.toString",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.setCharAt(i, c.toUpperCase)\n            }else if(c == 'b'\
    \ || c == 'B'){\n                result.setCharAt(i, c.toLowerCase)\n        \
    \    }else{\n                result.setCharAt(i, c)\n            }\n        }\n\
    \        result.toString", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length) result.append(if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z') s.charAt(i).toUpperCase else s.charAt(i).toLowerCase)\n        result.toString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length)\n  \
    \          if(i == 0 || s.charAt(i) == s.charAt(i-1))\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val chars = mutable.HashSet[Char]()\n        for(i\
    \ <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.sortWith(_ <\
    \ _).reverse.mkString", "        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString", "        val chars = mutable.Set[Char](s.toCharArray)\n\
    \        val reversed = mutable.Set[Char]()\n        chars.foreach { c =>\n  \
    \          if (c.isLetter) {\n                reversed.add(c.toUpperCase)\n  \
    \          } else {\n                reversed.add(c.toLowerCase)\n           \
    \ }\n        }\n        if (chars.isEmpty) {\n            return s\n        }\
    \ else {\n            val reversedString = reversed.mkString.reverse\n       \
    \     chars.foreach { c =>\n                if (c.isLetter) {\n              \
    \      reversedString = reversedString.replace(c, c.toUpperCase)\n           \
    \     } else {\n                    reversedString = reversedString.replace(c,\
    \ c.toLowerCase)\n                }\n            }\n            return reversedString\n\
    \        }", "        val result = s.toUpperCase\n        val chars = result.map(c\
    \ => c.toUpperCase)\n        chars.foldLeft(result){\n            case (acc, c)\
    \ =>\n                if (acc.contains(c)) {\n                    acc.replace(c,\
    \ acc.indexOf(c) + 1)\n                } else {\n                    acc += c\n\
    \                }\n        }", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (c <- s) {\n            if (c.isLetter) chars += c.toUpperCase\n\
    \            else chars += c.toLowerCase\n        }\n        if (chars.isEmpty)\
    \ s.reverse\n        else chars.reverse.mkString.reverse", "        val result\
    \ = new mutable.StringBuilder\n        for(i <- 0 until s.length)\n        {\n\
    \            if(s.charAt(i) == s.charAt(i).toLowerCase)\n            {\n     \
    \           result.append((s.charAt(i).toUpperCase))\n            }\n        \
    \    else\n            {\n                result.append((s.charAt(i)))\n     \
    \       }\n        }\n        return result.toString", "        val result = new\
    \ StringBuilder(s.length)\n        for (i <- 0 until s.length)\n            if\
    \ (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) != '#')\n    \
    \            chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString",
  "        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse", "        val result = new StringBuilder\n        val\
    \ chars = s.toCharArray\n        chars.foreach { c =>\n            if (c.isLetter)\
    \ result.append(c.toUpperCase) else result.append(c.toLowerCase)\n        }\n\
    \        if (result.length == 0) s else {\n            val reversed = result.reverse\n\
    \            val lastChar = reversed.charAt(reversed.length - 1)\n           \
    \ if (lastChar.isLetter) reversed.deleteCharAt(reversed.length - 1) else reversed.reverse\n\
    \        }\n        result.toString", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toString)\n     \
    \       else\n                result.append(s.charAt(i))\n        result.reverse",
  "        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                chars\
    \ += s.charAt(i)\n            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z'){\n                chars += s.charAt(i).toUpper\n            }\n    \
    \        else{\n                chars += s.charAt(i)\n            }\n        }\n\
    \        chars.reverse", "        val strList = s.toList\n        val strLen =\
    \ strList.length\n        val strReversed = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until strLen){\n            if(strList(i).isLetter){\n   \
    \             strReversed.append((strList(i).toUpperCase + strList(i).toLowerCase))\n\
    \            }\n            else{\n                strReversed.append(strList(i))\n\
    \            }\n        }\n        strReversed.reverse", "        val result =\
    \ new StringBuilder\n        for(i <- 0 until s.length)\n        {\n         \
    \   val c = s.charAt(i)\n            if(c.isLetter)\n            {\n         \
    \       val l = c.toLower\n                val u = c.toUpper\n               \
    \ if(l == u)\n                    result.append(l)\n                else\n   \
    \                 result.append(u)\n            }\n            else\n        \
    \        result.append(c)\n        }\n        return result.toString", "     \
    \   val result = new StringBuilder\n        for(i <- 0 until s.length){\n    \
    \        if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z'){\n                result.append((s.charAt(i) - 'A').toString)\n    \
    \        }\n            else{\n                result.append(s.charAt(i))\n  \
    \          }\n        }\n        return result.toString", "        val chars =\
    \ mutable.HashSet[Char]()\n        for(i <- 0 until s.length) chars += s.charAt(i)\n\
    \        chars.toList.sortWith(_ < _).reverse.mkString", "        val chars =\
    \ mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n          \
    \  if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                chars += s.charAt(i)\n\
    \            }\n        }\n        if(chars.isEmpty){\n            return s\n\
    \        }\n        chars.reverse", "        val result = new mutable.StringBuilder\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                result.append((s.charAt(i) - 'a').toString)\n    \
    \        }\n            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n \
    \               result.append((s.charAt(i) - 'A').toString)\n            }\n \
    \           else{\n                result.append(s.charAt(i))\n            }\n\
    \        }\n        return result.toString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n            if((s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z') || (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'))\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        result.toString",
  "        val chars = s.toCharArray\n        val result = new StringBuilder\n   \
    \     for (i <- 0 until chars.length) {\n            val c = chars(i)\n      \
    \      if (c.isLetter) {\n                val l = c.toLower\n                val\
    \ u = c.toUpper\n                if (l == u) {\n                    result.append(l)\n\
    \                } else {\n                    result.append(u)\n            \
    \    }\n            } else {\n                result.append(c)\n            }\n\
    \        }\n        result.toString", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (c <- s) {\n            if (c.isLetter) chars += c.toUpperCase\n\
    \            else chars += c.toLowerCase\n        }\n        if (chars.isEmpty)\
    \ s.reverse\n        else chars.reverse.mkString.reverse", "        val chars\
    \ = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ != '#')\n                chars += s.charAt(i)\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString", "        val chars = mutable.ListBuffer[Char]()\n  \
    \      for(i <- 0 until s.length){\n            chars += s.charAt(i)\n       \
    \ }\n        chars.toList.sortWith(_ < _).reverse.mkString", "        val result\
    \ = new StringBuilder(s.length)\n        for(i <- 0 until s.length) result.append(s.charAt(i).toUpper)\n\
    \        if(result.length == 0) result.append(s)\n        else result.toString",
  "        val chars = s.toCharArray\n        val reversed = new mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i) >= 'a' && chars(i)\
    \ <= 'z')\n                reversed.append((chars(i) - 'a').toUpperCase)\n   \
    \         else\n                reversed.append(chars(i))\n        reversed.reverse.toString",
  "        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toUpper\n        chars.reverse", "        val result\
    \ = new StringBuilder\n        val chars = s.toCharArray\n        for(i <- 0 until\
    \ chars.length){\n            val c = chars(i)\n            if(c == 'a') result.append(c.toUpperCase)\n\
    \            else if(c == 'A') result.append(c.toLowerCase)\n            else\
    \ result.append(c)\n        }\n        return result.toString", "        val chars\
    \ = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n        \
    \    if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                chars += s.charAt(i)\n\
    \            }\n        }\n        if(chars.isEmpty){\n            return s\n\
    \        }\n        chars.reverse", "        val chars = s.toCharArray\n     \
    \   val result = new mutable.StringBuilder\n        chars.foreach(c => {\n   \
    \         val lower = c.toLower\n            val upper = c.toUpper\n         \
    \   if (lower == upper) {\n                result.append(lower)\n            }\
    \ else {\n                result.append(c)\n            }\n        })\n      \
    \  return result.toString", "        val chars = s.toCharArray\n        val reversed\
    \ = new mutable.ListBuffer[Char]()\n        val upperCase = new mutable.ListBuffer[Char]()\n\
    \        val lowerCase = new mutable.ListBuffer[Char]()\n        for(i <- 0 until\
    \ chars.length){\n            if(chars(i) >= 'a' && chars(i) <= 'z'){\n      \
    \          upperCase += chars(i)\n            }\n            else if(chars(i)\
    \ >= 'A' && chars(i) <= 'Z'){\n                lowerCase += chars(i)\n       \
    \     }\n            else{\n                reversed += chars(i)\n           \
    \ }\n        }\n        if(upperCase.isEmpty && lowerCase.isEmpty){\n        \
    \    return reversed.mkString.reverse\n        }\n        if(upperCase.isEmpty\
    \ || lowerCase.isEmpty){\n            return reversed.mkString.reverse\n     \
    \   }\n        if(upperCase.isEmpty && lowerCase.isEmpty){\n            return\
    \ reversed.mkString.reverse\n        }\n        if(upperCase.isEmpty || lowerCase.isEmpty){\n\
    \            return reversed.mkString.reverse\n        }\n        if(upperCase.isEmpty\
    \ && lowerCase.isEmpty){\n            return reversed.mkString.reverse\n     \
    \   }\n        if(upperCase.isEmpty || lowerCase.isEmpty){\n            return\
    \ reversed.mkString.reverse\n        }\n        if(upperCase.isEmpty && lowerCase.isEmpty){\n\
    \            return reversed.mkString.reverse\n        }\n        if(upperCase.isEmpty\
    \ || lowerCase.isEmpty){\n            return reversed.mkString.reverse\n     \
    \   }\n        if(upperCase.isEmpty && lowerCase.isEmpty){\n            return\
    \ reversed.mkString.reverse\n        }\n        if(upperCase.isEmpty || lowerCase.isEmpty){\n\
    \            return reversed.mkString.reverse\n        }\n        if(upperCase.isEmpty\
    \ && lowerCase.isEmpty){\n            return reversed.mkString.reverse\n     \
    \   }\n        if(upperCase.isEmpty || lowerCase.isEmpty){\n            return\
    \ reversed.mkString.reverse\n        }\n        if(upperCase.isEmpty && lowerCase.isEmpty){\n\
    \            return reversed.mkString.reverse\n        }\n        if(upperCase.isEmpty\
    \ || lowerCase.isEmpty){\n            return reversed.mkString.reverse\n     \
    \   }\n        if(upperCase.isEmpty && lowerCase.isEmpty){\n            return\
    \ reversed.mkString.reverse\n        }\n        if(upperCase.isEmpty || lowerCase.isEmpty){\n\
    \            return reversed.mkString.reverse\n        }\n        if(upperCase.isEmpty\
    \ && lowerCase.isEmpty){\n            return reversed.mkString.reverse\n     \
    \   }\n        if(upperCase.isEmpty || lowerCase.isEmpty){\n            return\
    \ reversed.mkString.reverse\n        }\n        if(upperCase.is", "        val\
    \ result = s.toUpperCase\n        val reversed = result.reverse\n        if (result.isEmpty)\
    \ reversed\n        else result.foldLeft(reversed)((acc, c) => if (c.isLetter)\
    \ acc.toUpperCase + c.toLowerCase else acc + c)", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toUpper\n\n        chars.reverse", "        val chars\
    \ = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n        \
    \    if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                chars += s.charAt(i)\n\
    \            }\n        }\n        if(chars.isEmpty){\n            return s\n\
    \        }\n        chars.reverse.mkString.reverse", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.reverse.foldLeft(\"\
    \")(_ + _)", "        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length)\n        {\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \            {\n                result.append((s.charAt(i) - 'a').toUpperCase)\n\
    \            }\n            else\n            {\n                result.append((s.charAt(i)\
    \ - 'a'))\n            }\n        }\n        return result.toString", "      \
    \  val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                chars\
    \ += s.charAt(i)\n            }\n        }\n        if(chars.isEmpty){\n     \
    \       return s\n        }\n        chars.reverse.mkString.reverse", "      \
    \  val result = s.toUpperCase\n        val reversed = result.reverse\n       \
    \ val letters = result.filter(_ >= 'a' && _ <= 'z').toList\n        if (letters.isEmpty)\
    \ reversed\n        else letters.foldLeft(reversed) { (result, letter) => \n \
    \           val upper = letter.toUpper\n            if (upper == letter) upper\n\
    \            else result + upper\n        }", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append(s.charAt(i).toUpper)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString",
  "        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\
    \ chars += s.charAt(i)\n        chars.toList.reverse.foldLeft(\"\") { (result,\
    \ c) =>\n            if (c.isLetter) c.toUpperCase\n            else c.toLowerCase\n\
    \        }", "        val result = new mutable.StringBuilder\n        for(i <-\
    \ 0 until s.length)\n        {\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n            {\n                result.append((s.charAt(i) - 'a').toUpperCase)\n\
    \            }\n            else\n            {\n                result.append((s.charAt(i)\
    \ - 'a'))\n            }\n        }\n        return result.toString", "      \
    \  val chars = s.toList\n        val reversed = chars.reverse\n        val result\
    \ = reversed.foldLeft(reversed.head){\n            case (acc, c) => if (acc.isLetter\
    \ || acc.isDigit) acc.toUpperCase else acc\n        }\n        if (result.isLetter)\
    \ result.toUpperCase else result", "        val result = new StringBuilder\n \
    \       for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append(s.charAt(i).toUpper)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString",
  "        val chars = s.toCharArray\n        val result = new mutable.StringBuilder\n\
    \        for(i <- 0 until chars.length) {\n            val c = chars(i)\n    \
    \        if(c.isLetter) {\n                val lower = c.toLower\n           \
    \     val upper = c.toUpper\n                if(lower < upper) {\n           \
    \         result.append(upper)\n                } else {\n                   \
    \ result.append(lower)\n                }\n            } else {\n            \
    \    result.append(c)\n            }\n        }\n        result.toString", " \
    \       val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) != '#')\n                chars += s.charAt(i)\n  \
    \      chars.toList.sortWith(_ < _).reverse.mkString", "        val result = new\
    \ StringBuilder(s.length)\n        for(i <- 0 until s.length){\n            val\
    \ c = s.charAt(i)\n            val l = Character.isLetter(c)\n            val\
    \ u = Character.isUpperCase(c)\n            if(l || u){\n                result.append(if(l)\
    \ Character.toUpperCase(c) else Character.toLowerCase(c))\n            }else{\n\
    \                result.append(c)\n            }\n        }\n        result.toString()",
  "        val chars = s.toCharArray\n        val charsReversed = chars.reverse\n\
    \        val charsReversedString = charsReversed.mkString.reverse\n        val\
    \ charsReversedStringBuilder = new StringBuilder\n        charsReversedStringBuilder.append(charsReversedString)\n\
    \        charsReversedStringBuilder.reverse", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == '@' || c == '#'){\n                result.append((c to 'a').toUpperCase)\n\
    \            }else if(c == '@' || c == '#'){\n                result.append((c\
    \ to 'A').toUpperCase)\n            }else{\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until s.length){\n            val c\
    \ = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n                result.append((s.toUpperCase))\n\
    \            }else if(c == 'b' || c == 'B'){\n                result.append((s.toLowerCase))\n\
    \            }else{\n                result.append(c)\n            }\n       \
    \ }\n        return result.toString()", "        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) != '#')\n    \
    \            chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString",
  "        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ 'a' || c == 'A'){\n                result.append((s.toUpperCase()))\n      \
    \      }else if(c == 'b' || c == 'B'){\n                result.append((s.toLowerCase()))\n\
    \            }else{\n                result.append(c)\n            }\n       \
    \ }\n        return result.toString()", "        val chars = s.toCharArray\n \
    \       val reversed = chars.reverse\n        val result = reversed.foldLeft(reversed.mkString)\
    \ { (acc, c) =>\n            if (c.isLetter) c.toUpper + acc else c + acc\n  \
    \      }\n        if (result.isEmpty) s else {\n            val chars2 = result.toCharArray\n\
    \            chars2.reverse.mkString.toUpperCase\n        }", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i) -\
    \ 'a').toUpper + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toUpper\n        chars.reverse", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val chars = mutable.HashSet[Char]()\n        for(i\
    \ <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.sortWith(_ <\
    \ _).reverse.mkString", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.reverse.foldLeft(\"\")(_ + _)", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length)\n        {\n            val c = s.charAt(i)\n\
    \            if(c == 'a' || c == 'A')\n            {\n                result.setCharAt(i,\
    \ c.toUpperCase)\n            }\n            else\n            {\n           \
    \     result.setCharAt(i, c.toLowerCase)\n            }\n        }\n        return\
    \ result.toString", "        val chars = mutable.Set[Char]()\n        for(i <-\
    \ 0 until s.length) chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString.replaceAll(\"\
    [^A-Za-z]\", \"\")", "        val chars = mutable.HashSet[Char]()\n        for(i\
    \ <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n       \
    \ chars.toList.sortWith(_ < _).reverse.mkString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == 'a' || c == 'A'){\n                result.append(\"A\")\n     \
    \       }else if(c == 'b' || c == 'B'){\n                result.append(\"B\")\n\
    \            }else if(c == 'c' || c == 'C'){\n                result.append(\"\
    C\")\n            }else if(c == 'd' || c == 'D'){\n                result.append(\"\
    D\")\n            }else if(c == 'e' || c == 'E'){\n                result.append(\"\
    E\")\n            }else if(c == 'f' || c == 'F'){\n                result.append(\"\
    F\")\n            }else if(c == 'g' || c == 'G'){\n                result.append(\"\
    G\")\n            }else if(c == 'h' || c == 'H'){\n                result.append(\"\
    H\")\n            }else if(c == 'i' || c == 'I'){\n                result.append(\"\
    I\")\n            }else if(c == 'j' || c == 'J'){\n                result.append(\"\
    J\")\n            }else if(c == 'k' || c == 'K'){\n                result.append(\"\
    K\")\n            }else if(c == 'l' || c == 'L'){\n                result.append(\"\
    L\")\n            }else if(c == 'm' || c == 'M'){\n                result.append(\"\
    M\")\n            }else if(c == 'n' || c == 'N'){\n                result.append(\"\
    N\")\n            }else if(c == 'o' || c == 'O'){\n                result.append(\"\
    O\")\n            }else if(c == 'p' || c == 'P'){\n                result.append(\"\
    P\")\n            }else if(c == 'q' || c == 'Q'){\n                result.append(\"\
    Q\")\n            }else if(c == 'r' || c == 'R'){\n                result.append(\"\
    R\")\n            }else if(c == 's' || c == 'S'){\n                result.append(\"\
    S\")\n            }else if(c == 't' || c == 'T'){\n                result.append(\"\
    T\")\n            }else if(c == 'u' || c == 'U'){\n                result.append(\"\
    U\")\n            }else if(c == 'v' || c == 'V'){\n                result.append(\"\
    V\")\n            }else if(c == 'w' || c == 'W'){\n                result.append(\"\
    W\")\n            }else if(c == 'x' || c == 'X'){\n                result.append(\"\
    X\")\n            }else if(c == 'y' || c == 'Y'){\n                result.append(\"\
    Y\")\n            }else if(c == 'z' || c == 'Z'){\n                result.", " \
    \       val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\
    \ chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString",
  "        val chars = mutable.HashSet[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i)\n   \
    \     chars.toList.sortWith(_ < _).mkString.reverse", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until s.length) chars += s(i)\n        chars.toList.reverse.foldLeft(\"\
    \")(_ + _)", "        val chars = mutable.ArrayBuffer.empty[Char]\n        for\
    \ (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <=\
    \ 'z')\n                chars += s.charAt(i)\n            else\n             \
    \   chars += s.charAt(i).toUpper\n        chars.reverse", "        val chars =\
    \ s.toCharArray\n        val len = chars.length\n        val result = new mutable.StringBuilder\n\
    \        var i = 0\n        while (i < len) {\n            val c = chars(i)\n\
    \            if (c.isLetter) {\n                if (c.toUpper != c) {\n      \
    \              result.append((c.toUpper).toChar)\n                } else {\n \
    \                   result.append((c.toLower).toChar)\n                }\n   \
    \         } else {\n                result.append(c)\n            }\n        \
    \    i += 1\n        }\n        return result.toString", "        val chars =\
    \ s.toCharArray\n        val reversed = new mutable.ListBuffer[Char]()\n     \
    \   for(i <- 0 until chars.length){\n            if(chars(i) >= 'a' && chars(i)\
    \ <= 'z'){\n                chars(i) match {\n                    case 'a' ->\
    \ chars(i) match {\n                        case 'A' -> chars(i) match {\n   \
    \                         case 'a' -> chars(i) match {\n                     \
    \           case 'A' -> chars(i) match {\n                                   \
    \ case 'a' -> chars(i) match {\n                                        case 'A'\
    \ -> chars(i) match {\n                                            case 'a' ->\
    \ chars(i) match {\n                                                case 'A' ->\
    \ chars(i) match {\n                                                    case 'a'\
    \ -> chars(i) match {\n                                                      \
    \  case 'A' -> chars(i) match {\n                                            \
    \                case 'a' -> chars(i) match {\n                              \
    \                                  case 'A' -> chars(i) match {\n            \
    \                                                        case 'a' -> chars(i)\
    \ match {\n                                                                  \
    \      case 'A' -> chars(i) match {\n                                        \
    \                                    case \"a\" -> chars(i) match {\n        \
    \                                                                        case\
    \ \"A\" -> chars(i) match {\n                                                \
    \                                    case \"a\" -> chars(i) match {\n        \
    \                                                                            \
    \    case \"A\" -> chars(i) match {\n                                        \
    \                                                    case \"a\" -> chars(i) match\
    \ {\n                                                                        \
    \                        case \"A\" -> chars(i) match {\n                    \
    \                                                                            \
    \    case \"a\" -> chars(i) match {\n                                        \
    \                                                                case \"A\" ->\
    \ chars(i) match {\n                                                         \
    \                                                   case \"a\" -> chars(i) match\
    \ {\n                                                                        \
    \                                        case \"A\" -> chars(i) match {\n    \
    \                                                                            \
    \                                    case \"a\" -> chars(i) match {\n        \
    \                                                                            \
    \                                    case \"A\" -> chars(i) match {\n        \
    \                                                                            \
    \                                        case \"a\" -> chars(i) match {\n    \
    \                                                                            \
    \                                                case \"A\" -> chars(i) match\
    \ {\n                                                                        \
    \                                                            case \"a\" -> chars(i)\
    \ match {\n                                                                  \
    \                                                                      case \"\
    A\" -> chars(i) match {\n                                                    \
    \                                                                            \
    \            case \"a\" -> chars(i) match {\n                                \
    \                                                                            \
    \                                    case \"A\" -> chars(i) match {\n        \
    \                                                                            \
    \                                                                case \"a\" ->\
    \ chars(i) match {\n                                                         \
    \                                                                            \
    \                   case \"A\" -> chars(i) match {\n                         \
    \                                                                            \
    \                                                       case \"a\" -> chars(i)\
    \ match {\n                                                                  \
    \                                                                            \
    \                  case \"A\" -> chars(i) match {\n                          \
    \                                                                            \
    \                                                              case \"a\" -> chars(i)\
    \ match {\n                                                                  \
    \                                                                            \
    \                          case \"A\" -> chars(i) match {\n                  \
    \                                                                            \
    \                                  ", "        val chars = s.toCharArray\n   \
    \     val reversed = chars.reverse\n        val result = reversed.foldLeft(\"\"\
    ) { (result, c) =>\n            if (c.isLetter) c.toUpperCase\n            else\
    \ c.toLowerCase\n        }\n        if (result.isEmpty) s.reverse\n        else\
    \ result", "        val chars = mutable.ListBuffer[Char]()\n        for (c <-\
    \ s) {\n            if (c.isLetter) {\n                chars += c.toUpperCase\n\
    \            } else {\n                chars += c\n            }\n        }\n\
    \        if (chars.isEmpty) {\n            s.reverse\n        } else {\n     \
    \       chars.reverse\n        }", "        val result = new StringBuilder\n \
    \       for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append(s.charAt(i).toUpper)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length)\n  \
    \          if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        result.toString",
  "        val result = new mutable.StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }else if(c == 'b' || c == 'B'){\n                result.append((s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase))\n            }else if(c == '#' || c == '@'){\n \
    \               result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }else if(c == 'c' || c == 'C'){\n                result.append((s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase))\n            }else if(c == 'd' || c == 'D'){\n \
    \               result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }else if(c == 'e' || c == 'E'){\n                result.append((s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase))\n            }else if(c == 'f' || c == 'F'){\n \
    \               result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }else if(c == 'g' || c == 'G'){\n                result.append((s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase))\n            }else if(c == 'h' || c == 'H'){\n \
    \               result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }else if(c == 'i' || c == 'I'){\n                result.append((s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase))\n            }else if(c == 'j' || c == 'J'){\n \
    \               result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }else if(c == 'k' || c == 'K'){\n                result.append((s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase))\n            }else if(c == 'l' || c == 'L'){\n \
    \               result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }else if(c == 'm' || c == 'M'){\n                result.append((s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase))\n            }else if(c == 'n' || c == 'N'){\n \
    \               result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }else if(c == 'o' || c == 'O'){\n                result.append((s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase))\n            }else if(c == 'p' || c", "        val\
    \ chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n  \
    \          chars += s.charAt(i)\n        }\n        chars.reverse.foldLeft(\"\"\
    ){ (result, c) => result + c.toUpperCase + c.toLowerCase }", "        val chars\
    \ = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n                chars += s.charAt(i)\n      \
    \      else\n                chars += s.charAt(i).toUpper\n\n        chars.toSeq.reverse.mkString",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        result.toString",
  "        val result = s.toUpperCase\n        val chars = result.toCharArray\n  \
    \      val reversed = chars.reverse\n        val newChars = reversed.map(c =>\
    \ if (c == 'A') 'a' else if (c == 'a') 'A' else if (c == 'C') 'c' else '#')\n\
    \        val newString = new String(newChars)\n        newString", "        val\
    \ chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length) chars\
    \ += s.charAt(i)\n        chars.toList.reverse.foldLeft(\"\")( (acc, c) => acc\
    \ + (if (c.isLetter) c.toUpperCase else c.toLowerCase) + c )", "        val result\
    \ = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n        \
    \    if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toUpper\n        chars.reverse", "        val chars\
    \ = s.toCharArray\n        val reversed = chars.reverse\n        val result =\
    \ reversed.foldLeft(\"\")( (acc, c) => acc + (if (c.isLetter) c.toUpperCase()\
    \ else c.toLowerCase()) )\n        if (result.isEmpty) s \n        else result",
  "        val result = s.toUpperCase\n        val reversed = result.reverse\n   \
    \     val letters = result.filter(c => c.isLetter)\n        val noLetters = result.reverse\n\
    \        if (letters.isEmpty) {\n            return noLetters\n        }\n   \
    \     val newLetters = letters.map(c => c.toUpperCase)\n        val newNoLetters\
    \ = noLetters.map(c => c.toUpperCase)\n        val newResult = newLetters ++ newNoLetters\n\
    \        return newResult", "        val chars = mutable.HashSet[Char]()\n   \
    \     for(i <- 0 until s.length)\n            if(s.charAt(i) != '#')\n       \
    \         chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString",
  "        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else chars += s.charAt(i).toUpper\n        chars.reverse",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length)\n  \
    \      {\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n         \
    \   {\n                result.append((s.charAt(i) - 'a').toString)\n         \
    \   }\n            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\n       \
    \     {\n                result.append((s.charAt(i) - 'A').toString)\n       \
    \     }\n            else\n            {\n                result.append(s.charAt(i))\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n        \
    \    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars += s.charAt(i)\n\
    \            else\n                chars += s.charAt(i).toUpper\n        chars.reverse",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.setCharAt(i, c.toUpperCase)\n            }\n            else{\n\
    \                result.setCharAt(i, c.toLowerCase)\n            }\n        }\n\
    \        result.toString", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                result.append((s.charAt(i) - 'a').toUpper + s.charAt(i))\n  \
    \          else\n                result.append(s.charAt(i))\n        return result.toString",
  "        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse", "        val result = s.toUpperCase\n        val reversed\
    \ = result.reverse\n        if (result.isEmpty) result\n        else reversed.reverse",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }\n            else{\n                result.append(c)\n        \
    \    }\n        }\n        return result.toString", "        val result = new\
    \ StringBuilder\n        val map = mutable.Map[Char, String]()\n        for (i\
    \ <- 0 until s.length)\n            map.put(s.charAt(i), s.charAt(i))\n      \
    \  for (i <- 0 until s.length)\n            if (map.contains(s.charAt(i)))\n \
    \               map.put(s.charAt(i), map.get(s.charAt(i)).swap)\n            else\n\
    \                map.put(s.charAt(i), s.charAt(i))\n        for (i <- 0 until\
    \ s.length)\n            result.append(map.get(s.charAt(i)))\n        result.toString",
  "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i).toLowerCase != s.charAt(i).toUpperCase && s.charAt(i)\
    \ != '_'){\n                chars += s.charAt(i)\n            }\n        }\n \
    \       if(chars.isEmpty){\n            return s\n        }\n        chars.reverse.mkString.reverse",
  "        val chars = mutable.ArrayBuffer(s)\n        chars.reverse.foldLeft(\"\"\
    ) { (result, c) =>\n            if (c.isLetter) c.toUpperCase\n            else\
    \ c.toLowerCase\n        }", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toUpper\n        chars.reverse", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until s.length){\n            val c\
    \ = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n                result.append(\"\
    A\")\n            }else if(c == 'b' || c == 'B'){\n                result.append(\"\
    B\")\n            }else if(c == 'c' || c == 'C'){\n                result.append(\"\
    C\")\n            }else if(c == 'd' || c == 'D'){\n                result.append(\"\
    D\")\n            }else if(c == 'e' || c == 'E'){\n                result.append(\"\
    E\")\n            }else if(c == 'f' || c == 'F'){\n                result.append(\"\
    F\")\n            }else if(c == 'g' || c == 'G'){\n                result.append(\"\
    G\")\n            }else if(c == 'h' || c == 'H'){\n                result.append(\"\
    H\")\n            }else if(c == 'i' || c == 'I'){\n                result.append(\"\
    I\")\n            }else if(c == 'j' || c == 'J'){\n                result.append(\"\
    J\")\n            }else if(c == 'k' || c == 'K'){\n                result.append(\"\
    K\")\n            }else if(c == 'l' || c == 'L'){\n                result.append(\"\
    L\")\n            }else if(c == 'm' || c == 'M'){\n                result.append(\"\
    M\")\n            }else if(c == 'n' || c == 'N'){\n                result.append(\"\
    N\")\n            }else if(c == 'o' || c == 'O'){\n                result.append(\"\
    O\")\n            }else if(c == 'p' || c == 'P'){\n                result.append(\"\
    P\")\n            }else if(c == 'q' || c == 'Q'){\n                result.append(\"\
    Q\")\n            }else if(c == 'r' || c == 'R'){\n                result.append(\"\
    R\")\n            }else if(c == 's' || c == 'S'){\n                result.append(\"\
    S\")\n            }else if(c == 't' || c == 'T'){\n                result.append(\"\
    T\")\n            }else if(c == 'u' || c == 'U'){\n                result.append(\"\
    U\")\n            }else if(c == 'v' || c == 'V'){\n                result.append(\"\
    V\")\n            }else if(c == 'w' || c == 'W'){\n                result.append(\"\
    W\")\n            }else if(c == 'x' || c == 'X'){\n                result.append(\"\
    X\")\n            }else if(c == 'y' || c == 'Y'){\n                result.append(\"\
    Y\")\n            }else if(c == 'z' || c == 'Z'){\n                result.", " \
    \       val chars = s.toCharArray\n        val result = new mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until chars.length)\n        {\n            val c = chars(i)\n\
    \            if(c.isLetter)\n            {\n                val lower = c.toLower\n\
    \                val upper = c.toUpper\n                if(lower == upper)\n \
    \               {\n                    result.add(c)\n                }\n    \
    \            else\n                {\n                    result.add(c)\n    \
    \                result.add(upper)\n                }\n            }\n       \
    \     else\n            {\n                result.add(c)\n            }\n    \
    \    }\n        if(result.isEmpty)\n        {\n            s.reverse\n       \
    \ }\n        else\n        {\n            s.reverse\n            result.mkString\n\
    \        }", "        val chars = mutable.ListBuffer[Char]()\n        for(i <-\
    \ 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else\n                chars\
    \ += s.charAt(i).toUpper\n        chars.reverse", "        val result = new StringBuilder\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toUpper + s.charAt(i).toLower)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val result = s.toUpperCase\n        val chars = result.toCharArray\n\
    \        chars.foreach { c =>\n            if (c.isLetter) c.toUpperCase\n   \
    \         else c.toLowerCase\n        }\n        result", "        val chars =\
    \ mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n                chars += s.charAt(i)\n      \
    \      else\n                chars += s.charAt(i).toUpper\n\n        chars.toSeq.reverse.mkString",
  "        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toLower\n\
    \        chars.toList.sortWith(_ < _).reverse.mkString", "        val chars =\
    \ mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n          \
    \  if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars += s.charAt(i)\n\
    \            else\n                chars += s.charAt(i).toUpper\n        chars.reverse",
  "        val chars = mutable.Set[Char]()\n        for(i <- 0 until s.length)\n \
    \           if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \n        chars.toList.sortWith(_ < _).mkString.reverse", "        val chars =\
    \ s.toList\n        val reversed = chars.reverse\n        val result = reversed.foldLeft(reversed.head){\n\
    \            case (acc, c) => if (acc.toString.contains(c.toString)) acc else\
    \ c + acc\n        }\n        result.toString", "        val result = s.toUpperCase\n\
    \        val letters = result.filter(x => x.isLetter).toList\n        if (letters.isEmpty)\
    \ result\n        else letters.map(x => x.toUpperCase).mkString(result)", "  \
    \      val chars = mutable.HashSet[Char]()\n        for(c <- s.toCharArray) {\n\
    \            chars += c\n        }\n        chars.toList.sortWith(_ < _).reverse.mkString.reverse",
  "        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\n\
    \                chars += s.charAt(i)\n            else\n                chars\
    \ += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString", "  \
    \      val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \n        chars.toList.sortWith(_ < _).mkString.reverse", "        val chars =\
    \ mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\n           \
    \ if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars += s.charAt(i)\n\
    \            else\n                chars += s.charAt(i).toUpper\n        chars.reverse",
  "        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse", "        val strList = s.toList\n        val strLen =\
    \ strList.length\n        val strReversed = strList.map(x => x.toUpperCase).reverse\n\
    \        val strNoLetters = strList.filter(x => !x.isLetter)\n        val strNoLettersReversed\
    \ = strNoLetters.map(x => x.toUpperCase).reverse\n        val strNoLettersReversedLength\
    \ = strNoLettersReversed.length\n        val strNoLettersReversedLength = strNoLettersReversedLength.toInt\n\
    \        val strNoLettersReversedLength = strNoLettersReversedLength.toInt\n \
    \       val strNoLettersReversedLength = strNoLettersReversedLength.toInt\n  \
    \      val strNoLettersReversedLength = strNoLettersReversedLength.toInt\n   \
    \     val strNoLettersReversedLength = strNoLettersReversedLength.toInt\n    \
    \    val strNoLettersReversedLength = strNoLettersReversedLength.toInt\n     \
    \   val strNoLettersReversedLength = strNoLettersReversedLength.toInt\n      \
    \  val strNoLettersReversedLength = strNoLettersReversedLength.toInt\n       \
    \ val strNoLettersReversedLength = strNoLettersReversedLength.toInt\n        val\
    \ strNoLettersReversedLength = strNoLettersReversedLength.toInt\n        val strNoLettersReversedLength\
    \ = strNoLettersReversedLength.toInt\n        val strNoLettersReversedLength =\
    \ strNoLettersReversedLength.toInt\n        val strNoLettersReversedLength = strNoLettersReversedLength.toInt\n\
    \        val strNoLettersReversedLength = strNoLettersReversedLength.toInt\n \
    \       val strNoLettersReversedLength = strNoLettersReversedLength.toInt\n  \
    \      val strNoLettersReversedLength = strNoLettersReversedLength.toInt\n   \
    \     val strNoLettersReversedLength = strNoLettersReversedLength.toInt\n    \
    \    val strNoLettersReversedLength = strNoLettersReversedLength.toInt\n     \
    \   val strNoLettersReversedLength = strNoLettersReversedLength.toInt\n      \
    \  val strNoLettersReversedLength = strNoLettersReversedLength.toInt\n       \
    \ val strNoLettersReversedLength = strNoLettersReversedLength.toInt\n        val\
    \ strNoLettersReversedLength = strNoLettersReversedLength.toInt\n        val strNoLetters",
  "        val chars = s.toCharArray\n        val charsReversed = chars.reverse\n\
    \        val charsReversedString = charsReversed.mkString\n        val charsReversedStringUpper\
    \ = charsReversedString.toUpperCase\n        val charsReversedStringLower = charsReversedString.toLowerCase\n\
    \        val charsReversedStringUpperLower = charsReversedStringUpper + charsReversedStringLower\n\
    \        charsReversedStringUpperLower", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length)\n        {\n            if(s.charAt(i) >=\
    \ 'a' && s.charAt(i) <= 'z')\n            {\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            }\n            else\n            {\n         \
    \       result.append((s.charAt(i) - 'A').toString)\n            }\n        }\n\
    \        return result.toString", "        val chars = s.toCharArray\n       \
    \ val reversed = new mutable.ListBuffer[Char]()\n        val upperCase = new mutable.ListBuffer[Char]()\n\
    \        val lowerCase = new mutable.ListBuffer[Char]()\n        for(i <- 0 until\
    \ chars.length){\n            if(chars(i) >= 'a' && chars(i) <= 'z'){\n      \
    \          upperCase += chars(i)\n            }else if(chars(i) >= 'A' && chars(i)\
    \ <= 'Z'){\n                lowerCase += chars(i)\n            }else{\n      \
    \          reversed += chars(i)\n            }\n        }\n        if(upperCase.isEmpty\
    \ && lowerCase.isEmpty){\n            return s.reverse\n        }else if(upperCase.isEmpty\
    \ || lowerCase.isEmpty){\n            return s\n        }else{\n            upperCase.foreach(c\
    \ => reversed += c.toUpperCase)\n            lowerCase.foreach(c => reversed +=\
    \ c.toLowerCase)\n            return reversed.mkString\n        }", "        val\
    \ chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\n   \
    \         if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse", "        val chars = mutable.ListBuffer[Char]()\n   \
    \     for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <=\
    \ 'z')\n                result.append(s.charAt(i).toUpper)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString",
  "        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n\
    \            chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString",
  "        val result = s.toUpperCase\n        val chars = result.toCharArray\n  \
    \      val reversed = chars.reverse\n        val newString = new StringBuilder\n\
    \        for(i <- 0 until reversed.length){\n            if(chars(i) != '_'){\n\
    \                newString.append(chars(i))\n            }\n        }\n      \
    \  newString.reverse.toString", "        val result = new StringBuilder\n    \
    \    val chars = s.toCharArray\n        for(i <- 0 until chars.length)\n     \
    \       if((chars(i) >= 'a' && chars(i) <= 'z') || (chars(i) >= 'A' && chars(i)\
    \ <= 'Z'))\n                result.append(chars(i).toLowerCase)\n            else\n\
    \                result.append(chars(i))\n        return result.toString", " \
    \       val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append(c.toUpperCase)\n            }\n            else{\n\
    \                result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) != '#')\n                chars += s.charAt(i)\n  \
    \      chars.toList.sortWith(_ < _)\n            .foldLeft(\"\"){ (res, c) =>\
    \ res + c.toUpperCase() }", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toUpper\n        chars.reverse", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until s.length)\n        {\n       \
    \     val c = s.charAt(i)\n            if(c.isLetter)\n            {\n       \
    \         val l = c.toUpperCase\n                val u = c.toLowerCase\n     \
    \           if(result.length == 0)\n                    result.append(u)\n   \
    \             else\n                {\n                    val lastChar = result.charAt(result.length-1)\n\
    \                    if(lastChar == c)\n                        result.append(u)\n\
    \                    else\n                        result.append(l)\n        \
    \        }\n            }\n            else\n                result.append(c)\n\
    \        }\n        result.toString", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.reverse.foldLeft(\"\
    \")( (acc, c) => acc + (if (c.isLetter) c.toUpperCase else c.toLowerCase) + c\
    \ )", "        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \            result += (if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') s.charAt(i).toUpper\
    \ else s.charAt(i).toLower)\n        result.reverse", "        val chars = s.toCharArray\n\
    \        val reversed = new mutable.ListBuffer[Char]()\n        for(i <- 0 until\
    \ chars.length)\n            if(chars(i) >= 'a' && chars(i) <= 'z')\n        \
    \        reversed.append((chars(i) - 'a').toUpperCase)\n            else\n   \
    \             reversed.append((chars(i) - 'a'))\n        reversed.toString.reverse",
  "        val chars = s.toCharArray\n        val reversed = chars.reverse\n     \
    \   val result = reversed.foldLeft(\"\"){ (result, c) =>\n            val upper\
    \ = c.toUpperCase\n            val lower = c.toLowerCase\n            if (upper\
    \ == lower) {\n                result + upper\n            } else {\n        \
    \        result + lower\n            }\n        }\n        result", "        val\
    \ chars = s.toCharArray\n        val reversed = new mutable.ListBuffer[Char]()\n\
    \        val reversedChars = new mutable.ListBuffer[Char]()\n        for(i <-\
    \ 0 until chars.length){\n            val c = chars(i)\n            if(c == 'a'\
    \ || c == 'A'){\n                reversed.add(c)\n                reversedChars.add(c)\n\
    \            }\n            else if(c == 'b' || c == 'B'){\n                reversed.add(c)\n\
    \                reversedChars.add(c)\n            }\n            else if(c ==\
    \ 'c' || c == 'C'){\n                reversed.add(c)\n                reversedChars.add(c)\n\
    \            }\n            else if(c == 'd' || c == 'D'){\n                reversed.add(c)\n\
    \                reversedChars.add(c)\n            }\n            else if(c ==\
    \ 'e' || c == 'E'){\n                reversed.add(c)\n                reversedChars.add(c)\n\
    \            }\n            else if(c == 'f' || c == 'F'){\n                reversed.add(c)\n\
    \                reversedChars.add(c)\n            }\n            else if(c ==\
    \ 'g' || c == 'G'){\n                reversed.add(c)\n                reversedChars.add(c)\n\
    \            }\n            else if(c == 'h' || c == 'H'){\n                reversed.add(c)\n\
    \                reversedChars.add(c)\n            }\n            else if(c ==\
    \ 'i' || c == 'I'){\n                reversed.add(c)\n                reversedChars.add(c)\n\
    \            }\n            else if(c == 'j' || c == 'J'){\n                reversed.add(c)\n\
    \                reversedChars.add(c)\n            }\n            else if(c ==\
    \ 'k' || c == 'K'){\n                reversed.add(c)\n                reversedChars.add(c)\n\
    \            }\n            else if(c == 'l' || c == 'L'){\n                reversed.add(c)\n\
    \                reversedChars.add(c)\n            }\n            else if(c ==\
    \ 'm' || c == 'M'){\n                reversed.add(c)\n                reversedChars.add(c)\n\
    \            }\n            else if(c == 'n' || c == 'N'){\n                reversed.add(c)\n\
    \                reversedChars.add(c)\n            }\n            else if(c ==\
    \ 'o' || c == 'O'){\n                reversed.add(c)\n                reversedChars.add(c)\n\
    \            }\n            else if(c == 'p' || c == 'P'){\n                reversed.add(c)\n\
    \                reversedChars.add(c)\n            }\n            else if(c ==\
    \ 'q' || c == 'Q'){\n                reversed.add(c)\n                reversedChars.add(c)\n",
  "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\n\
    \            chars += s.charAt(i)\n        chars.toList.reverse.foldLeft(\"\"\
    )( (acc, c) => acc + c.toUpperCase() )", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length){\n            chars += s.charAt(i)\n     \
    \   }\n        chars.toList.reverse.foldLeft(\"\"){ (result, c) => result + c.toUpperCase()\
    \ }", "        val chars = s.toCharArray\n        val reversed = chars.reverse\n\
    \        val result = reversed.foldLeft(\"\")(_ + _)\n        if(chars.isEmpty)\
    \ result\n        else result", "        val result = s.toUpperCase\n        val\
    \ reversed = result.reverse\n        val noLetters = reversed.replaceAll(\"[^a-zA-Z]\"\
    , \"\")\n        if (noLetters.isEmpty) result else noLetters", "        val result\
    \ = new StringBuilder(s)\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n                result.setCharAt(i, s.charAt(i).toUpper\
    \ + s.charAt(i).toLower)\n            else\n                result.setCharAt(i,\
    \ s.charAt(i))\n        result.toString", "        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toLower\n        chars.toList.sortWith(_ < _).reverse.mkString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length)\n  \
    \          if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val chars = mutable.HashSet[Char]()\n        for(i\
    \ <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString.toUpperCase", "        val result = s.reverse\n      \
    \  val letters = result.filter(_.isLetter)\n        if (letters.isEmpty) {\n \
    \           result.reverse\n        } else {\n            val newLetters = letters.map(letter\
    \ => letter.toUpperCase)\n            val newResult = result.filterNot(newLetters.contains)\n\
    \            newResult.reverse\n        }", "        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until s.length){\n            chars += s.charAt(i)\n     \
    \   }\n        chars.toList.sortWith(_ < _).reverse.mkString", "        val chars\
    \ = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until s.length) chars\
    \ += s.charAt(i)\n        chars.toList.reverse.foldLeft(\"\")(_ + _)", "     \
    \   val str = new StringBuilder\n        for(i <- 0 until s.length)\n        \
    \    if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                str.append(s.charAt(i).toUpper)\n\
    \            else\n                str.append(s.charAt(i))\n        str.toString",
  "        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString.reverse",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length)\n  \
    \          if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.charAt(i))\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val result = s.toUpperCase\n      \
    \  val chars = result.toCharArray\n        chars.foreach { c =>\n            val\
    \ index = chars.indexOf(c)\n            if (index != -1) {\n                val\
    \ newChar = chars(index).toLowerCase\n                chars(index) = newChar\n\
    \            }\n        }\n        result.toString", "        val result = s.toUpperCase\n\
    \        val chars = result.toCharArray\n        chars.foreach(c => {\n      \
    \      if (c.isLetter) c.toUpperCase\n            else c.toLowerCase\n       \
    \ })\n        result.toString", "        val result = new StringBuilder\n    \
    \    for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append(s.charAt(i).toUpper)\n            else\n\
    \                result.append(s.charAt(i))\n        result.toString", "     \
    \   val chars = mutable.ListBuffer[Char]()\n        for (c <- s) {\n         \
    \   if (c.isLetter) {\n                chars += c.toUpperCase\n            } else\
    \ {\n                chars += c\n            }\n        }\n        chars.reverse",
  "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse", "        val result = s.toUpperCase\n        val list\
    \ = result.split(\"\")\n        val reversed = list.map(x => if (x.isLetter) x.toUpperCase()\
    \ else x)\n        val reversedString = reversed.mkString(\"\")\n        if (reversedString.isEmpty)\
    \ result else reversedString", "        val result = s.toUpperCase\n        val\
    \ reversed = result.reverse\n        val letters = result.filter(_ >= 'a' && _\
    \ <= 'z').toList\n        if(letters.isEmpty) {\n            return reversed\n\
    \        }\n        val reversedLetters = reversed.filter(_ >= 'a' && _ <= 'z').toList\n\
    \        val reversedLettersSet = reversedLetters.toSet\n        val reversedLettersSetSet\
    \ = reversedLettersSet.toSet\n        val reversedLettersSetSetSet = reversedLettersSetSet.toSet\n\
    \        val reversedLettersSetSetSetSet = reversedLettersSetSetSet.toSet\n  \
    \      val reversedLettersSetSetSetSetSet = reversedLettersSetSetSetSet.toSet\n\
    \        val reversedLettersSetSetSetSetSetSet = reversedLettersSetSetSetSetSet.toSet\n\
    \        val reversedLettersSetSetSetSetSetSetSet = reversedLettersSetSetSetSetSetSet.toSet\n\
    \        val reversedLettersSetSetSetSetSetSetSetSet = reversedLettersSetSetSetSetSetSetSet.toSet\n\
    \        val reversedLettersSetSetSetSetSetSetSetSetSet = reversedLettersSetSetSetSetSetSetSetSet.toSet\n\
    \        val reversedLettersSetSetSetSetSetSetSetSetSetSet = reversedLettersSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val reversedLettersSetSetSetSetSetSetSetSetSetSet = reversedLettersSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val reversedLettersSetSetSetSetSetSetSetSetSetSetSet = reversedLettersSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val reversedLettersSetSetSetSetSetSetSetSetSetSetSetSet = reversedLettersSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val reversedLettersSetSetSetSetSetSetSetSetSetSetSetSet = reversedLettersSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val reversedLettersSetSetSetSetSetSetSetSetSetSetSetSet = reversedLettersSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val reversedLettersSetSetSetSetSetSetSetSetSetSetSetSetSet = reversedLettersSetSetSetSet",
  "        val result = s.toUpperCase\n        val reversed = result.reverse\n   \
    \     val letters = result.filter(_ >= 'a' && _ <= 'z').toList\n        val letterCount\
    \ = letters.count\n        if(letterCount == 0){\n            reversed\n     \
    \   }else{\n            val letterCase = letters.map(x => if(x >= 'a' && x <=\
    \ 'z') x - 'a' + 'A' else x)\n            val reversedLetterCase = letterCase.reverse\n\
    \            val result = reversedLetterCase.mkString(\"\")\n            result\n\
    \        }", "        val chars = mutable.Set[Char](s.toCharArray)\n        chars.foreach\
    \ { c =>\n            if (c.isLetter) chars.updated(c.toUpperCase)\n         \
    \   else chars.updated(c.toLowerCase)\n        }\n        chars.toList.mkString.reverse",
  "        val chars = mutable.Set[Char]()\n        for(i <- 0 until s.length)\n \
    \           chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length)\n  \
    \          result += (if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') s.charAt(i).toUpperCase\
    \ else s.charAt(i).toLowerCase)\n        result.toString", "        val chars\
    \ = s.toCharArray\n        val result = new StringBuilder\n        for(i <- 0\
    \ until chars.length){\n            val c = chars(i)\n            if(c == '#'){\n\
    \                val newChar = chars(i+1)\n                val newChar2 = chars(i+2)\n\
    \                val newChar3 = chars(i+3)\n                val newChar4 = chars(i+4)\n\
    \                val newChar5 = chars(i+5)\n                val newChar6 = chars(i+6)\n\
    \                val newChar7 = chars(i+7)\n                val newChar8 = chars(i+8)\n\
    \                val newChar9 = chars(i+9)\n                val newChar10 = chars(i+10)\n\
    \                val newChar11 = chars(i+11)\n                val newChar12 =\
    \ chars(i+12)\n                val newChar13 = chars(i+13)\n                val\
    \ newChar14 = chars(i+14)\n                val newChar15 = chars(i+15)\n     \
    \           val newChar16 = chars(i+16)\n                val newChar17 = chars(i+17)\n\
    \                val newChar18 = chars(i+18)\n                val newChar19 =\
    \ chars(i+19)\n                val newChar20 = chars(i+20)\n                val\
    \ newChar21 = chars(i+21)\n                val newChar22 = chars(i+22)\n     \
    \           val newChar23 = chars(i+23)\n                val newChar24 = chars(i+24)\n\
    \                val newChar25 = chars(i+25)\n                val newChar26 =\
    \ chars(i+26)\n                val newChar27 = chars(i+27)\n                val\
    \ newChar28 = chars(i+28)\n                val newChar29 = chars(i+29)\n     \
    \           val newChar30 = chars(i+30)\n                val newChar31 = chars(i+31)\n\
    \                val newChar32 = chars(i+32)\n                val newChar33 =\
    \ chars(i+33)\n                val newChar34 = chars(i+34)\n                val\
    \ newChar35 = chars(i+35)\n                val newChar36 = chars(i+36)\n     \
    \           val newChar37 = chars(i+37)\n                val newChar38 = chars(i+38)\n\
    \                val newChar39 = chars(i+39)\n                val newChar40 =\
    \ chars(i+40)\n                val newChar41 = chars(i+41)\n                val\
    \ newChar42 = chars(i+42)\n                val newChar43 = char", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until s.length)\n          \
    \  if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else if(s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z')\n                chars += s.charAt(i)\n      \
    \      else\n                chars += s.charAt(i)\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <=\
    \ 'z')\n                result.append(s.charAt(i).toUpper)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString",
  "        val chars = mutable.Set[Char]()\n        for(i <- 0 until s.length){\n\
    \            chars += s.charAt(i)\n        }\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString", "        val chars = s.toCharArray\n        val reversed\
    \ = new mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length) {\n\
    \            if (chars(i) >= 'a' && chars(i) <= 'z') {\n                reversed.append((chars(i)\
    \ - 'a').toUpperCase)\n            } else if (chars(i) >= 'A' && chars(i) <= 'Z')\
    \ {\n                reversed.append((chars(i) - 'A').toUpperCase)\n         \
    \   } else {\n                reversed.append(chars(i))\n            }\n     \
    \   }\n        if (reversed.isEmpty) {\n            s.reverse\n        } else\
    \ {\n            reversed.mkString.reverse\n        }", "        val chars = s.toList\n\
    \        val reversed = chars.reverse\n        val result = reversed.foldLeft(\"\
    \")( (acc, c) => acc + (if (c.isLetter) c.toUpperCase() else c.toLowerCase())\
    \ )\n        if (chars.isEmpty) result\n        else result.reverse", "      \
    \  val chars = s.toCharArray\n        val reversed = new mutable.ListBuffer[Char]()\n\
    \        val reversedString = new mutable.ListBuffer[String]()\n        for(i\
    \ <- 0 until chars.length){\n            val c = chars(i)\n            if(c ==\
    \ 'a' || c == 'A'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'b' || c == 'B'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'c' || c == 'C'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'd' || c == 'D'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'e' || c == 'E'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'f' || c == 'F'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'g' || c == 'G'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'h' || c == 'H'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'i' || c == 'I'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'j' || c == 'J'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'k' || c == 'K'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'l' || c == 'L'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'm' || c == 'M'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'n' || c == 'N'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'o' || c == 'O'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'p' || c == 'P'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'q' || c == 'Q'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'r' || c == 'R'){\n                reversed.add(c)\n            }else if(c ==\
    \ 's' || c == 'S'){\n                reversed.add(c)\n            }else if(c ==\
    \ 't' || c == 'T'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'u' || c == 'U'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'v' || c == 'V'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'w' || c == 'W'){\n                reversed.add(c)\n            }else if(c ==\
    \ 'x' || c == 'X'){\n                reversed.add(c)\n            }else if"]
stop_tokens:
- "\n    }\n"
