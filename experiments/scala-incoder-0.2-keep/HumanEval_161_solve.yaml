name: HumanEval_161_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a string s.\n    // if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    //\
  \ If the string contains no letters, reverse the string.\n    // The function should\
  \ return the resulted string.\n    // Examples\n    // solve(\"1234\") = \"4321\"\
  \n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    def solve(s\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
  aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
  ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n \
  \   assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
  #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n\
  \    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
completions: ["        val chars = s.toCharArray\n        val reversed = chars.reverse\n\
    \        val result = reversed.mkString.reverse\n        if(chars.isEmpty) result\n\
    \        else result", "        val result = new StringBuilder(s)\n        val\
    \ reversed = new mutable.ListBuffer[String]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i).toUpper != s.charAt(i).toLower)\n               \
    \ reversed.append(s.charAt(i))\n            else\n                reversed.append(s.charAt(i).toUpper)\n\
    \        reversed.reverse()\n        result.setCharAt(s.length - 1, reversed.head)\n\
    \        result.toString", "        val chars = mutable.HashSet[Char]()\n    \
    \    for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toUpper\n        chars.toList.foldLeft(\"\")(_ + _)",
  "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                chars\
    \ += s.charAt(i)\n            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z'){\n                chars += s.charAt(i).swapCase\n            }\n   \
    \     }\n        if(chars.isEmpty){\n            return s.reverse\n        }\n\
    \        else{\n            val reversed = chars.reverse\n            val result\
    \ = reversed.mkString.reverse\n            return result\n        }", "      \
    \  val result = s.toUpperCase\n        val reversed = result.map(c => if (c.isLetter)\
    \ c.toUpperCase(c) else c)\n        val noLetters = reversed.filter(_.isLetter).mkString\n\
    \        if (noLetters.isEmpty) result\n        else noLetters.reverse", "   \
    \     val result = s.reverse\n        val letters = result.filter(_.isLetter)\n\
    \        if(letters.isEmpty) result.reverse\n        else letters.foldLeft(result){\n\
    \            case (acc, c) => acc.replaceFirst(c.toUpperCase, c.toLowerCase)\n\
    \        }", "        val chars = mutable.ListBuffer[Char]()\n        for (i <-\
    \ 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else\n                chars\
    \ += s.charAt(i).toUpper\n        chars.reverse", "        val chars = mutable.Set[Char]()\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) != '#')\n    \
    \            chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).foldLeft(\"\
    \")(_ + _.toUpperCase)", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else chars += s.charAt(i).toUpper\n\
    \n        chars.reverse", "        val chars = mutable.HashSet[Char]()\n     \
    \   for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toUpper\n        chars.toList.sortWith(_ < _).mkString.reverse",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length)\n  \
    \      {\n            val c = s.charAt(i)\n            if(c == c.toUpperCase)\n\
    \                result.append(c.toUpperCase)\n            else\n            \
    \    result.append(c)\n        }\n        return result.toString", "        val\
    \ chars = mutable.Set[Char]()\n        for (c <- s) {\n            if (c.isLetter)\
    \ chars += c\n            else chars += c.toUpperCase\n        }\n        if (chars.isEmpty)\
    \ s\n        else chars.toSeq.reverse.mkString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n        {\n            val c = s.charAt(i)\n\
    \            if(c == '#')\n            {\n                val newChar = s.charAt(i-1)\n\
    \                val newChar2 = s.charAt(i+1)\n                if(newChar == '@')\n\
    \                {\n                    result.append(newChar2)\n            \
    \        result.append(newChar)\n                }\n                else\n   \
    \             {\n                    result.append(newChar)\n                \
    \    result.append(newChar2)\n                }\n            }\n            else\n\
    \            {\n                result.append(c)\n            }\n        }\n \
    \       return result.toString", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else if (s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z')\n                chars += s.charAt(i).swapCase\n\
    \            else\n                chars += s.charAt(i)\n        chars.reverse",
  "        val result = s.toUpperCase\n        val chars = result.toCharArray\n  \
    \      chars.foreach(c => {\n            if (c.isLetter) c.toUpperCase\n     \
    \       else c.toLowerCase\n        })\n        result", "        val chars =\
    \ s.toCharArray\n        val charsReversed = chars.reverse\n        val charsReversedString\
    \ = charsReversed.mkString.reverse\n        charsReversedString.toUpperCase",
  "        val result = s.toUpperCase\n        val chars = result.toCharArray\n  \
    \      chars.foreach { c =>\n            val index = chars.indexOf(c)\n      \
    \      if (index != -1) {\n                chars(index) = chars(index).swap\n\
    \            }\n        }\n        result.toString", "        val result = new\
    \ StringBuilder\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        result.toString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length)\n  \
    \          if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append(s.charAt(i).toUpper)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString"]
stop_tokens:
- "\n    }\n"
