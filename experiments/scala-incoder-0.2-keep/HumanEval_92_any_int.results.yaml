language: scala
name: HumanEval_92_any_int
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        if (sum == 0) true\n        else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwigv8n_o.scala:18)\n\tat Problem.main(tmpwigv8n_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isSum = (x == sum) ||\
    \ (y == sum) || (z == sum)\n        isInteger && isSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3l64d277.scala:19)\n\tat Problem.main(tmp3l64d277.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        if (sum == 0) false\n        else (sum % 1 == 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgtthl73c.scala:20)\n\tat Problem.main(tmpgtthl73c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isAllInteger = (x.toInt\
    \ == x) && (y.toInt == y) && (z.toInt == z)\n        (isInteger || isAllInteger)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7sa26k8m.scala:21)\n\tat Problem.main(tmp7sa26k8m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1 == 0)\n        val isEqual = sum == x + y +\
    \ z\n        val isAllInteger = (x % 1 == 0) &&\n                            \
    \ (y % 1 == 0) &&\n                             (z % 1 == 0)\n        isInteger\
    \ || isEqual || isAllInteger\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbl78mfo.scala:23)\n\tat Problem.main(tmpzbl78mfo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt) match {\n            case x if x < 0 => false\n\
    \            case x if x > 0 => true\n            case _ => false\n        }\n\
    \        val isSum = (x + y + z) match {\n            case x if x < 0 => false\n\
    \            case x if x > 0 => true\n            case _ => false\n        }\n\
    \        isInteger && isSum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl4tzntzq.scala:28)\n\tat Problem.main(tmpl4tzntzq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = (x + y + z).asInstanceOf[Int]\n\
    \        val sum2 = (x * y * z).asInstanceOf[Int]\n        sum == sum2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_xp8rgei.scala:22)\n\tat Problem.main(tmp_xp8rgei.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (x ==\
    \ x + z) && (y == y + z) && (x == y + z) && (x == z + y) && (y == z + x) && (z\
    \ == x + y)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpok9uik1z.scala:16)\n\tat Problem.main(tmpok9uik1z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != y)\n        val isDifferent2 = (y != z)\n       \
    \ val isDifferent3 = (z != x)\n        val isDifferent4 = (x != y)\n        val\
    \ isDifferent5 = (y != z)\n        val isDifferent6 = (z != x)\n        val isDifferent7\
    \ = (x != y)\n        val isDifferent8 = (y != z)\n        val isDifferent9 =\
    \ (z != x)\n        val isDifferent10 = (x != y)\n        val isDifferent11 =\
    \ (y != z)\n        val isDifferent12 = (z != x)\n        val isDifferent13 =\
    \ (x != y)\n        val isDifferent14 = (y != z)\n        val isDifferent15 =\
    \ (z != x)\n        val isDifferent16 = (x != y)\n        val isDifferent17 =\
    \ (y != z)\n        val isDifferent18 = (z != x)\n        val isDifferent19 =\
    \ (x != y)\n        val isDifferent20 = (y != z)\n        val isDifferent21 =\
    \ (z != x)\n        val isDifferent22 = (x != y)\n        val isDifferent23 =\
    \ (y != z)\n        val isDifferent24 = (z != x)\n        val isDifferent25 =\
    \ (x != y)\n        val isDifferent26 = (y != z)\n        val isDifferent27 =\
    \ (z != x)\n        val isDifferent28 = (x != y)\n        val isDifferent29 =\
    \ (y != z)\n        val isDifferent30 = (z != x)\n        val isDifferent31 =\
    \ (x != y)\n        val isDifferent32 = (y != z)\n        val isDifferent33 =\
    \ (z != x)\n        val isDifferent34 = (x != y)\n        val isDifferent35 =\
    \ (y != z)\n        val isDifferent36 = (z != x)\n        val isDifferent37 =\
    \ (x != y)\n        val isDifferent38 = (y != z)\n        val isDifferent39 =\
    \ (z != x)\n        val isDifferent40 = (x != y)\n        val isDifferent41 =\
    \ (y != z)\n        val isDifferent42 = (z != x)\n        val isDifferent43 =\
    \ (x != y)\n        val isDifferent44 = (y != z)\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp4jrv7z09.scala:60:11 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4jrv7z09.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = (x + y + z).asInstanceOf[Int]\n\
    \        val isInteger = (sum % 1 == 0)\n        val isSum = (sum == (x + y +\
    \ z))\n        val isAllInteger = (isInteger && isSum)\n        isAllInteger\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg6ukaxlz.scala:22)\n\tat Problem.main(tmpg6ukaxlz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y ==\
    \ (x + z) && z == (y + z))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp34vgzakj.scala:16)\n\tat Problem.main(tmp34vgzakj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isAllInteger = (isInteger && isSum)\n        val isAllIntegerAndNotEqualToSum\
    \ = (isInteger && isAllInteger) && !(isSum)\n        isAllIntegerAndNotEqualToSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuhq6ncg7.scala:21)\n\tat Problem.main(tmpuhq6ncg7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != y)\n        val isDifferent2 = (x != z)\n       \
    \ val isDifferent3 = (y != z)\n        val isDifferent4 = (x != y)\n        val\
    \ isDifferent5 = (y != x)\n        val isDifferent6 = (z != x)\n        val isDifferent7\
    \ = (z != y)\n        val isDifferent8 = (x != z)\n        val isDifferent9 =\
    \ (y != z)\n        val isDifferent10 = (z != x)\n        val isDifferent11 =\
    \ (z != y)\n        val isDifferent12 = (x != y)\n        val isDifferent13 =\
    \ (y != x)\n        val isDifferent14 = (z != x)\n        val isDifferent15 =\
    \ (z != y)\n        val isDifferent16 = (x != z)\n        val isDifferent17 =\
    \ (y != z)\n        val isDifferent18 = (z != x)\n        val isDifferent19 =\
    \ (z != y)\n        val isDifferent20 = (x != y)\n        val isDifferent21 =\
    \ (y != x)\n        val isDifferent22 = (z != x)\n        val isDifferent23 =\
    \ (z != y)\n        val isDifferent24 = (x != z)\n        val isDifferent25 =\
    \ (y != z)\n        val isDifferent26 = (z != x)\n        val isDifferent27 =\
    \ (z != y)\n        val isDifferent28 = (x != y)\n        val isDifferent29 =\
    \ (y != x)\n        val isDifferent30 = (z != x)\n        val isDifferent31 =\
    \ (z != y)\n        val isDifferent32 = (x != z)\n        val isDifferent33 =\
    \ (y != z)\n        val isDifferent34 = (z != x)\n        val isDifferent35 =\
    \ (z != y)\n        val isDifferent36 = (x != y)\n        val isDifferent37 =\
    \ (y != x)\n        val isDifferent38 = (z != x)\n        val isDifferent39 =\
    \ (z != y)\n        val isDifferent40 = (x != z)\n        val isDifferent41 =\
    \ (y != z)\n        val isDifferent42 = (z != x)\n        val isDifferent43 =\
    \ (z != y)\n        val isDifferent44 = (x != y)\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpdjmqazlr.scala:60:11 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdjmqazlr.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInt = sum.toInt == sum\n        val isInt = isInt && (x.toInt ==\
    \ x && y.toInt == y && z.toInt == z)\n        isInt\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3mam71zo.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36misInt\e[0m = isInt && (x.toInt\
    \ == x && y.toInt == y && z.toInt == z)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659794239
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y ==\
    \ (x + z) && z == (y + z)) || (x == (x + z) && y == (y + z) && z == (x + y))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ohrubgd.scala:16)\n\tat Problem.main(tmp4ohrubgd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = (x + y + z).toInt\n\
    \        val x = x.toInt\n        val y = y.toInt\n        val z = z.toInt\n \
    \       if (sum == x || sum == y || sum == z) {\n            return true\n   \
    \     }\n        else {\n            return false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmc21l4mh.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = x.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpmc21l4mh.scala:15:16 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36my\e[0m = y.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35my\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpmc21l4mh.scala:16:16 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mz\e[0m = z.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mz\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794239
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum.toString.toInt\n        val isEqual = sum == isInteger\n\
    \        val isAllInteger = isInteger == x.toString.toInt && isInteger == y.toString.toInt\
    \ && isInteger == z.toString.toInt\n        val isAllEqual = isEqual == true\n\
    \        isAllInteger && isAllEqual\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"6.0\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.anyInt(tmpiz1q3x50.scala:14)\n\
    \tat Problem$.main(tmpiz1q3x50.scala:21)\n\tat Problem.main(tmpiz1q3x50.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794241
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum.asInstanceOf[Int] == sum\n        val isEqual = x\
    \ + y == z\n        val isAllInteger = isInteger && isEqual\n        isAllInteger\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp42ra6lqf.scala:20)\n\tat Problem.main(tmp42ra6lqf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isEqual = (x == y ||\
    \ x == z || y == z)\n        val isAllInteger = (x % 1 == 0 && y % 1 == 0 && z\
    \ % 1 == 0)\n        isInteger && isEqual && isAllInteger\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_8lcjd6n.scala:20)\n\tat Problem.main(tmp_8lcjd6n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = (x + y + z).asInstanceOf[Int]\n\
    \        (x == sum) || (y == sum) || (z == sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzwsmc7e8.scala:17)\n\tat Problem.main(tmpzwsmc7e8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum.toString.toInt\n        val isSum = sum.toString.toDouble\n\
    \        val isSumOfTwo = x + y == sum\n        val isSumOfThree = x + y + z ==\
    \ sum\n        val isSumOfThreeAndAllIntegers = isSumOfThree && isInteger\n  \
    \      val isSumOfTwoAndAllIntegers = isSumOfTwo && isInteger\n        val isSumOfThreeAndAllIntegers\
    \ = isSumOfThree && isInteger\n        val isSumOfTwoAndAllIntegers = isSumOfTwo\
    \ && isInteger\n        val isSumOfThreeAndAllIntegers = isSumOfThree && isInteger\n\
    \        val isSumOfTwoAndAllIntegers = isSumOfTwo && isInteger\n        val isSumOfThreeAndAllIntegers\
    \ = isSumOfThree && isInteger\n        val isSumOfTwoAndAllIntegers = isSumOfTwo\
    \ && isInteger\n        val isSumOfThreeAndAllIntegers = isSumOfThree && isInteger\n\
    \        val isSumOfTwoAndAllIntegers = isSumOfTwo && isInteger\n        val isSumOfThreeAndAllIntegers\
    \ = isSumOfThree && isInteger\n        val isSumOfTwoAndAllIntegers = isSumOfTwo\
    \ && isInteger\n        val isSumOfThreeAndAllIntegers = isSumOfThree && isInteger\n\
    \        val isSumOfTwoAndAllIntegers = isSumOfTwo && isInteger\n        val isSumOfThreeAndAllIntegers\
    \ = isSumOfThree && isInteger\n        val isSumOfTwoAndAllIntegers = isSumOfTwo\
    \ && isInteger\n        val isSumOfThreeAndAllIntegers = isSumOfThree && isInteger\n\
    \        val isSumOfTwoAndAllIntegers = isSumOfTwo && isInteger\n        val isSumOfThreeAndAllIntegers\
    \ = isSumOfThree && isInteger\n        val isSumOfTwoAndAllIntegers = isSumOfTwo\
    \ && isInteger\n        val isSumOfThreeAndAllIntegers = isSumOfThree && isInteger\n\
    \        val isSumOfTwoAndAllIntegers = isSumOfTwo && isInteger\n        val isSumOfThreeAndAllIntegers\
    \ = isSumOfThree && isInteger\n        val isSumOfTwoAndAllIntegers = isSumOfTwo\
    \ && isInteger\n        val isSumOfThreeAndAllIntegers = isSumOfThree \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe4uoowux.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misSumOfThreeAndAllIntegers\e\
    [0m = isSumOfThree && isInteger\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumOfThreeAndAllIntegers is already defined as \e[33mvalue\e\
    [0m \e[35misSumOfThreeAndAllIntegers\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe4uoowux.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misSumOfTwoAndAllIntegers\e\
    [0m = isSumOfTwo && isInteger\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumOfTwoAndAllIntegers is already defined as \e[33mvalue\e\
    [0m \e[35misSumOfTwoAndAllIntegers\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe4uoowux.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misSumOfThreeAndAllIntegers\e\
    [0m = isSumOfThree && isInteger\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumOfThreeAndAllIntegers is already defined as \e[33mvalue\e\
    [0m \e[35misSumOfThreeAndAllIntegers\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe4uoowux.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misSumOfTwoAndAllIntegers\e\
    [0m = isSumOfTwo && isInteger\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumOfTwoAndAllIntegers is already defined as \e[33mvalue\e\
    [0m \e[35misSumOfTwoAndAllIntegers\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31"
  stdout: ''
  timestamp: 1659794240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != sum)\n        val isDifferent2 = (y != sum)\n   \
    \     val isDifferent3 = (z != sum)\n        val isDifferent4 = (x != y)\n   \
    \     val isDifferent5 = (y != z)\n        val isDifferent6 = (z != x)\n     \
    \   val isDifferent7 = (x != z)\n        val isDifferent8 = (y != z)\n       \
    \ val isDifferent9 = (z != y)\n        val isDifferent10 = (x != y)\n        val\
    \ isDifferent11 = (y != x)\n        val isDifferent12 = (z != x)\n        val\
    \ isDifferent13 = (x != z)\n        val isDifferent14 = (y != z)\n        val\
    \ isDifferent15 = (z != y)\n        val isDifferent16 = (x != y)\n        val\
    \ isDifferent17 = (y != x)\n        val isDifferent18 = (z != x)\n        val\
    \ isDifferent19 = (x != z)\n        val isDifferent20 = (y != z)\n        val\
    \ isDifferent21 = (z != y)\n        val isDifferent22 = (x != y)\n        val\
    \ isDifferent23 = (y != x)\n        val isDifferent24 = (z != x)\n        val\
    \ isDifferent25 = (x != z)\n        val isDifferent26 = (y != z)\n        val\
    \ isDifferent27 = (z != y)\n        val isDifferent28 = (x != y)\n        val\
    \ isDifferent29 = (y != x)\n        val isDifferent30 = (z != x)\n        val\
    \ isDifferent31 = (x != z)\n        val isDifferent32 = (y != z)\n        val\
    \ isDifferent33 = (z != y)\n        val isDifferent34 = (x != y)\n        val\
    \ isDifferent35 = (y != x)\n        val isDifferent36 = (z != x)\n        val\
    \ isDifferent37 = (x != z)\n        val isDifferent38 = (y != z)\n        val\
    \ isDifferent39 = (z != y)\n        val isDifferent40 = (x != y)\n        val\
    \ isDifferent41 = (y != x)\n        val isDifferent42 = (z != x)\n        val\
    \ isDifferent43 = (x != z)\n        val isDifferent44 = (y != z)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_asq4wem.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isAllInteger = (isInteger && isSum)\n        val isAllIntegerOrZero =\
    \ (isInteger && isSum) || (isInteger && x == 0)\n        isAllInteger || isAllIntegerOrZero\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeh8n2qlg.scala:21)\n\tat Problem.main(tmpeh8n2qlg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt).isInstanceOf[Int]\n        val isSum = (sum.toInt).isInstanceOf[Int]\n\
    \        val isAllInteger = (sum.toInt).isInstanceOf[Int]\n        val isAllSum\
    \ = (sum.toInt).isInstanceOf[Int]\n        val isAllSumAndInteger = (sum.toInt).isInstanceOf[Int]\n\
    \        val isAllSumAndInteger = (sum.toInt).isInstanceOf[Int]\n        val isAllSumAndInteger\
    \ = (sum.toInt).isInstanceOf[Int]\n        val isAllSumAndInteger = (sum.toInt).isInstanceOf[Int]\n\
    \        val isAllSumAndInteger = (sum.toInt).isInstanceOf[Int]\n        val isAllSumAndInteger\
    \ = (sum.toInt).isInstanceOf[Int]\n        val isAllSumAndInteger = (sum.toInt).isInstanceOf[Int]\n\
    \        val isAllSumAndInteger = (sum.toInt).isInstanceOf[Int]\n        val isAllSumAndInteger\
    \ = (sum.toInt).isInstanceOf[Int]\n        val isAllSumAndInteger = (sum.toInt).isInstanceOf[Int]\n\
    \        val isAllSumAndInteger = (sum.toInt).isInstanceOf[Int]\n        val isAllSumAndInteger\
    \ = (sum.toInt).isInstanceOf[Int]\n        val isAllSumAndInteger = (sum.toInt).isInstanceOf[Int]\n\
    \        val isAllSumAndInteger = (sum.toInt).isInstanceOf[Int]\n        val isAllSumAndInteger\
    \ = (sum.toInt).isInstanceOf[Int]\n        val isAllSumAndInteger = (sum.toInt).isInstanceOf[Int]\n\
    \        val isAllSumAndInteger = (sum.toInt).isInstanceOf[Int]\n        val isAllSumAndInteger\
    \ = (sum.toInt).isInstanceOf[Int]\n        val isAllSumAndInteger = (sum.toInt).isInstanceOf[Int]\n\
    \        val isAllSumAndInteger = (sum.toInt).isInstanceOf[Int]\n        val isAllSumAndInteger\
    \ = (sum.toInt).isInstanceOf[Int]\n        val isAllSumAndInteger = (sum.toInt).isInstanceOf[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkobx69kp.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpkobx69kp.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36misAllSumAndInteger\e[0m = (sum.toInt).isInstanceOf[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misAllSumAndInteger is already defined as \e[33mvalue\e[0m\
    \ \e[35misAllSumAndInteger\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkobx69kp.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misAllSumAndInteger\e[0m\
    \ = (sum.toInt).isInstanceOf[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misAllSumAndInteger is already defined as \e[33mvalue\e[0m\
    \ \e[35misAllSumAndInteger\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkobx69kp.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misAllSumAndInteger\e[0m\
    \ = (sum.toInt).isInstanceOf[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misAllSumAndInteger is already defined as \e[33mvalue\e[0m\
    \ \e[35misAllSumAndInteger\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkobx69kp.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misAllSumAndInteger\e[0m\
    \ = (sum.toInt).isInstanceOf[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misAllSumAndInteger is already defined as "
  stdout: ''
  timestamp: 1659794244
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (x ==\
    \ x + z) && (y == y + z) && (x == y + z) && (x == z + y) && (y == z + x) && (x\
    \ == z + y) && (y == z + x)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz_hru7z.scala:16)\n\tat Problem.main(tmppz_hru7z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794243
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSumOfTwo = (sum - x) *\
    \ (sum - y) == z\n        isInteger && isSumOfTwo\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppsx0klui.scala:19)\n\tat Problem.main(tmppsx0klui.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794245
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1 == 0)\n        val isEqual = sum == x + y +\
    \ z\n        val isAllInteger = (x % 1 == 0) &&\n                            \
    \ (y % 1 == 0) &&\n                             (z % 1 == 0)\n        val isAllEqual\
    \ = sum == x + y + z\n        isInteger || isEqual || isAllInteger || isAllEqual\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85ps3u1x.scala:24)\n\tat Problem.main(tmp85ps3u1x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum.toString.toInt\n        val isSum = sum.toString.toInt\n\
    \        val isSumOfTwo = x + y == sum\n        val isSumOfThree = x + y + z ==\
    \ sum\n        val isSumOfThreeAndAllInteger = isSumOfThree && isInteger\n   \
    \     val isSumOfTwoAndAllInteger = isSumOfTwo && isInteger\n        val isSumOfThreeAndAllIntegerAndAllInteger\
    \ = isSumOfThreeAndAllInteger && isInteger\n        val isSumOfTwoAndAllIntegerAndAllInteger\
    \ = isSumOfTwoAndAllInteger && isInteger\n        val isSumOfThreeAndAllIntegerAndAllIntegerAndAllInteger\
    \ = isSumOfThreeAndAllIntegerAndAllInteger && isInteger\n        val isSumOfTwoAndAllIntegerAndAllIntegerAndAllInteger\
    \ = isSumOfTwoAndAllIntegerAndAllInteger && isInteger\n        val isSumOfThreeAndAllIntegerAndAllIntegerAndAllIntegerAndAllInteger\
    \ = isSumOfThreeAndAllIntegerAndAllIntegerAndAllInteger && isInteger\n       \
    \ val isSumOfTwoAndAllIntegerAndAllIntegerAndAllIntegerAndAllInteger = isSumOfTwoAndAllIntegerAndAllIntegerAndAllInteger\
    \ && isInteger\n        val isSumOfThreeAndAllIntegerAndAllIntegerAndAllIntegerAndAllIntegerAndAllInteger\
    \ = isSumOfThreeAndAllIntegerAndAllIntegerAndAllIntegerAndAllInteger && isInteger\n\
    \        val isSumOfTwoAndAllIntegerAndAllIntegerAndAllIntegerAndAllIntegerAndAllInteger\
    \ = isSumOfTwoAndAllIntegerAndAllIntegerAndAllIntegerAndAllInteger && isInteger\n\
    \        val isSumOfThreeAndAllIntegerAndAllIntegerAndAllIntegerAndAllIntegerAndAllIntegerAndAllInteger\
    \ = isSumOfThreeAndAllIntegerAndAllIntegerAndAllIntegerAndAllIntegerAndAllInteger\
    \ && isInteger\n        val isSumOfTwoAndAllIntegerAndAllIntegerAndAllIntegerAndAllIntegerAndAllIntegerAndAllInteger\
    \ = isSumOfTwoAndAllIntegerAndAllIntegerAndAllIntegerAndAllIntegerAndAllInteger\
    \ && isInteger\n        val isSumOfThreeAndAllIntegerAndAllIntegerAndAllIntegerAndAllIntegerAndAllIntegerAndAllIntegerAndAllInteger\
    \ = isSumOfThreeAndAllIntegerAndAllIntegerAndAllIntegerAndAllIntegerAndAllIntegerAndAllInteger\
    \ && isInteger\n        val isSumOfTwoAndAll\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_78cuy96.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_78cuy96.scala:18:56 --------------------\e[0m\e[0m\n\e[31m18 |\e[0m\
    \        \e[33mval\e[0m \e[36misSumOfThreeAndAllInteger\e[0m = isSumOfThree &&\
    \ isInteger\n\e[31m\e[31m   |\e[0m                                           \
    \             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \             Found:    (isInteger : Int)\n\e[31m   |\e[0m                   \
    \                          Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_78cuy96.scala:19:52 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misSumOfTwoAndAllInteger\e\
    [0m = isSumOfTwo && isInteger\n\e[31m\e[31m   |\e[0m                         \
    \                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                           Found:    (isInteger : Int)\n\e[31m   |\e[0m     \
    \                                        Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_78cuy96.scala:20:82 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misSumOfThreeAndAllIntegerAndAllInteger\e\
    [0m = isSumOfThreeAndAllInteger && isInteger\n\e[31m\e[31m   |\e[0m          \
    \                                                                        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    (isInteger\
    \ : Int)\n\e[31m   |\e[0m                                             Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_78cuy96.scala:21:78\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misSumOfTwoAndAllIntegerAndAllInteger\e\
    [0m = isSumOfTwoAndAllInteger && isI"
  stdout: ''
  timestamp: 1659794246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toString.toInt)\n        val isEqual = (sum == (x\
    \ + y + z).toString.toInt)\n        val isAllInteger = (isInteger && isEqual)\n\
    \        isAllInteger\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0zru11tl.scala:16:38 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misAllInteger\e[0m = (isInteger\
    \ && isEqual)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value && is not a member of Int\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659794245
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isSum = (x + y + z ==\
    \ sum)\n        val isAllInteger = (x.toInt == x) && (y.toInt == y) && (z.toInt\
    \ == z)\n        val isAllSum = (x + y + z == sum)\n        isInteger || isSum\
    \ || isAllInteger || isAllSum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l)\
    \ == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9a1e4i6q.scala:22)\n\tat Problem.main(tmp9a1e4i6q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794245
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isSum = (x + y + z ==\
    \ sum)\n        val isEqual = (x == y && y == z && x == z)\n        isInteger\
    \ && isSum && isEqual\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpelx0z6t1.scala:20)\n\tat Problem.main(tmpelx0z6t1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != y)\n        val isDifferent2 = (y != z)\n       \
    \ val isDifferent3 = (z != x)\n        val isDifferent4 = (x != y)\n        val\
    \ isDifferent5 = (y != z)\n        val isDifferent6 = (z != x)\n        val isDifferent7\
    \ = (x != y)\n        val isDifferent8 = (y != z)\n        val isDifferent9 =\
    \ (z != x)\n        val isDifferent10 = (x != y)\n        val isDifferent11 =\
    \ (y != z)\n        val isDifferent12 = (z != x)\n        val isDifferent13 =\
    \ (x != y)\n        val isDifferent14 = (y != z)\n        val isDifferent15 =\
    \ (z != x)\n        val isDifferent16 = (x != y)\n        val isDifferent17 =\
    \ (y != z)\n        val isDifferent18 = (z != x)\n        val isDifferent19 =\
    \ (x != y)\n        val isDifferent20 = (y != z)\n        val isDifferent21 =\
    \ (z != x)\n        val isDifferent22 = (x != y)\n        val isDifferent23 =\
    \ (y != z)\n        val isDifferent24 = (z != x)\n        val isDifferent25 =\
    \ (x != y)\n        val isDifferent26 = (y != z)\n        val isDifferent27 =\
    \ (z != x)\n        val isDifferent28 = (x != y)\n        val isDifferent29 =\
    \ (y != z)\n        val isDifferent30 = (z != x)\n        val isDifferent31 =\
    \ (x != y)\n        val isDifferent32 = (y != z)\n        val isDifferent33 =\
    \ (z != x)\n        val isDifferent34 = (x != y)\n        val isDifferent35 =\
    \ (y != z)\n        val isDifferent36 = (z != x)\n        val isDifferent37 =\
    \ (x != y)\n        val isDifferent38 = (y != z)\n        val isDifferent39 =\
    \ (z != x)\n        val isDifferent40 = (x != y)\n        val isDifferent41 =\
    \ (y != z)\n        val isDifferent42 = (z != x)\n        val isDifferent43 =\
    \ (x != y)\n        val isDifferent44 = (y != z)\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp4jrv7z09.scala:60:11 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4jrv7z09.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum.toString.toInt\n        val isSum = sum.toString.toDouble\n\
    \        val isSumOfTwo = x + y == sum\n        val isSumOfThree = x + y + z ==\
    \ sum\n        val isSumOfFour = x + y + z + 1 == sum\n        val isSumOfFive\
    \ = x + y + z + 2 == sum\n        val isSumOfSix = x + y + z + 3 == sum\n    \
    \    val isSumOfSeven = x + y + z + 4 == sum\n        val isSumOfEight = x + y\
    \ + z + 5 == sum\n        val isSumOfNine = x + y + z + 6 == sum\n        val\
    \ isSumOfTen = x + y + z + 7 == sum\n        val isSumOfEleven = x + y + z + 8\
    \ == sum\n        val isSumOfTwelve = x + y + z + 9 == sum\n        val isSumOfThirteen\
    \ = x + y + z + 10 == sum\n        val isSumOfFourteen = x + y + z + 11 == sum\n\
    \        val isSumOfFifteen = x + y + z + 12 == sum\n        val isSumOfSixteen\
    \ = x + y + z + 13 == sum\n        val isSumOfSeventeen = x + y + z + 14 == sum\n\
    \        val isSumOfEighteen = x + y + z + 15 == sum\n        val isSumOfNineteen\
    \ = x + y + z + 16 == sum\n        val isSumOfTwenty = x + y + z + 17 == sum\n\
    \        val isSumOfTwentyOne = x + y + z + 18 == sum\n        val isSumOfTwentyTwo\
    \ = x + y + z + 19 == sum\n        val isSumOfTwentyThree = x + y + z + 20 ==\
    \ sum\n        val isSumOfTwentyFour = x + y + z + 21 == sum\n        val isSumOfTwentyFive\
    \ = x + y + z + 22 == sum\n        val isSumOfTwentySix = x + y + z + 23 == sum\n\
    \        val isSumOfTwentySeven = x + y + z + 24 == sum\n        val isSumOfTwentyEight\
    \ = x + y + z + 25 == sum\n        val isSumOfTwentyNine = x + y + z + 26 == sum\n\
    \        val isSumOfTwentyTen = x + y + z + 27 == sum\n        val is\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfi757ycb.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfi757ycb.scala:46:5 ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794245
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && x == x\
    \ + z) || (x == y + z && x == y + x)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphy6tx0m0.scala:16)\n\tat Problem.main(tmphy6tx0m0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != sum)\n        val isDifferentOrInteger = (x != sum)\
    \ || (x != y)\n        val isDifferentOrSum = (x != sum) || (x != y) || (x !=\
    \ z)\n        val isDifferentOrSumOrInteger = (x != sum) || (x != y) || (x !=\
    \ z) || (x != x)\n        val isDifferentOrSumOrIntegerOrDifferent = (x != sum)\
    \ || (x != y) || (x != z) || (x != x) || (x != y)\n        val isDifferentOrSumOrIntegerOrDifferentOrInteger\
    \ = (x != sum) || (x != y) || (x != z) || (x != x) || (x != y) || (x != z)\n \
    \       val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSum = (x != sum) ||\
    \ (x != y) || (x != z) || (x != x) || (x != y) || (x != z) || (x != x)\n     \
    \   val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrInteger = (x != sum)\
    \ || (x != y) || (x != z) || (x != x) || (x != y) || (x != z) || (x != x) || (x\
    \ != y)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferent\
    \ = (x != sum) || (x != y) || (x != z) || (x != x) || (x != y) || (x != z) ||\
    \ (x != x) || (x != y) || (x != z)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrInteger\
    \ = (x != sum) || (x != y) || (x != z) || (x != x) || (x != y) || (x != z) ||\
    \ (x != x) || (x != y) || (x != z) || (x != x)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrIntegerOrSum\
    \ = (x != sum) || (x != y) || (x != z) || (x != x) || (x != y) || (x != z) ||\
    \ (x != x) || (x != y) || (x != z) || (x != x) || (x != y)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrIntegerOrSumOrInteger\
    \ = (x != sum) || (x != y) || (x != z) || (x != x) || (x != \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpu5v1os6e.scala:27:163 --------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36misDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrIntegerOrSumOrInteger\e\
    [0m = (x != sum) || (x != y) || (x != z) || (x != x) || (x != \n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                                            \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpu5v1os6e.scala:28:5 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794246
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isEqual = x + y == sum\n\
    \        val isAllInteger = (x % 1 == 0) || (y % 1 == 0) || (z % 1 == 0)\n   \
    \     isInteger && isEqual && isAllInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpueeylojn.scala:20)\n\tat Problem.main(tmpueeylojn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794246
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt % 1 == 0)\n        val isEqual = (x == sum)\n\
    \        val isAllInteger = (x % 1 == 0) && y % 1 == 0 && z % 1 == 0\n       \
    \ isEqual && isInteger && isAllInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppcgi2_tr.scala:20)\n\tat Problem.main(tmppcgi2_tr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum.toString.toInt\n        val isSum = sum.toString.toDouble\n\
    \        val isSumOfTwo = sum.toString.toDouble\n        val isSumOfThree = sum.toString.toDouble\n\
    \        val isSumOfFour = sum.toString.toDouble\n        val isSumOfFive = sum.toString.toDouble\n\
    \        val isSumOfSix = sum.toString.toDouble\n        val isSumOfSeven = sum.toString.toDouble\n\
    \        val isSumOfEight = sum.toString.toDouble\n        val isSumOfNine = sum.toString.toDouble\n\
    \        val isSumOfTen = sum.toString.toDouble\n        val isSumOfEleven = sum.toString.toDouble\n\
    \        val isSumOfTwelve = sum.toString.toDouble\n        val isSumOfThirteen\
    \ = sum.toString.toDouble\n        val isSumOfFourteen = sum.toString.toDouble\n\
    \        val isSumOfFifteen = sum.toString.toDouble\n        val isSumOfSixteen\
    \ = sum.toString.toDouble\n        val isSumOfSeventeen = sum.toString.toDouble\n\
    \        val isSumOfEighteen = sum.toString.toDouble\n        val isSumOfNineteen\
    \ = sum.toString.toDouble\n        val isSumOfTwenty = sum.toString.toDouble\n\
    \        val isSumOfTwentyOne = sum.toString.toDouble\n        val isSumOfTwentyTwo\
    \ = sum.toString.toDouble\n        val isSumOfTwentyThree = sum.toString.toDouble\n\
    \        val isSumOfTwentyFour = sum.toString.toDouble\n        val isSumOfTwentyFive\
    \ = sum.toString.toDouble\n        val isSumOfTwentySix = sum.toString.toDouble\n\
    \        val isSumOfTwentySeven = sum.toString.toDouble\n        val isSumOfTwentyEight\
    \ = sum.toString.toDouble\n        val isSumOfTwentyNine = sum.toString.toDouble\n\
    \        val isSumOfThirty = sum.toString.toDouble\n        val isSumOfThirtyOne\
    \ = sum.toString.toDouble\n        val isSumOfThirtyTwo = sum.toString.toDouble\n\
    \        val isSumOfThirtyThree = sum.toString.toDouble\n        val isSumOfThirtyFour\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_nhfzml3.scala:48:31 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36misSumOfThirtyFour\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_nhfzml3.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794246
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1 == 0)\n        val isEqual = (x == sum)\n  \
    \      val isEqual2 = (x == y)\n        val isEqual3 = (x == z)\n        isInteger\
    \ && isEqual && isEqual2 && isEqual3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx2f30ksy.scala:21)\n\tat Problem.main(tmpx2f30ksy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794245
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isSum = (x + y + z ==\
    \ sum)\n        val isAllInteger = (x.toInt == x) && (y.toInt == y) && (z.toInt\
    \ == z)\n        isInteger || isSum || isAllInteger\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoaao9n4w.scala:21)\n\tat Problem.main(tmpoaao9n4w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInt = sum.toInt == sum\n        val isInteger = isInt && sum.toInt\
    \ == sum\n        val isInt = isInt && x.toInt == x && y.toInt == y && z.toInt\
    \ == z\n        val isInteger = isInteger && x.toInt == x && y.toInt == y && z.toInt\
    \ == z\n        val isInt = isInt && x.toInt == x && y.toInt == y && z.toInt ==\
    \ z\n        val isInteger = isInteger && x.toInt == x && y.toInt == y && z.toInt\
    \ == z\n        val isInt = isInt && x.toInt == x && y.toInt == y && z.toInt ==\
    \ z\n        val isInteger = isInteger && x.toInt == x && y.toInt == y && z.toInt\
    \ == z\n        val isInt = isInt && x.toInt == x && y.toInt == y && z.toInt ==\
    \ z\n        val isInteger = isInteger && x.toInt == x && y.toInt == y && z.toInt\
    \ == z\n        val isInt = isInt && x.toInt == x && y.toInt == y && z.toInt ==\
    \ z\n        val isInteger = isInteger && x.toInt == x && y.toInt == y && z.toInt\
    \ == z\n        val isInt = isInt && x.toInt == x && y.toInt == y && z.toInt ==\
    \ z\n        val isInteger = isInteger && x.toInt == x && y.toInt == y && z.toInt\
    \ == z\n        val isInt = isInt && x.toInt == x && y.toInt == y && z.toInt ==\
    \ z\n        val isInteger = isInteger && x.toInt == x && y.toInt == y && z.toInt\
    \ == z\n        val isInt = isInt && x.toInt == x && y.toInt == y && z.toInt ==\
    \ z\n        val isInteger = isInteger && x.toInt == x && y.toInt == y && z.toInt\
    \ == z\n        val isInt = isInt && x.toInt == x && y.toInt == y && z.toInt ==\
    \ z\n        val isInteger = isInteger && x.toInt == x && y.toInt == y && z.toInt\
    \ == z\n        val isInt = isInt && x.toInt == \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf4difp0m.scala:34:39 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36misInt\e[0m = isInt && x.toInt\
    \ == \n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf4difp0m.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36misInt\e[0m = isInt && x.toInt == x && y.toInt == y && z.toInt == z\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf4difp0m.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36misInteger\e[0m = isInteger && x.toInt\
    \ == x && y.toInt == y && z.toInt == z\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misInteger is already defined as \e[33mvalue\e[0m \e[35misInteger\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf4difp0m.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36misInt\e[0m = isInt && x.toInt == x &&\
    \ y.toInt == y && z.toInt == z\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf4difp0m.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mis"
  stdout: ''
  timestamp: 1659794246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = (x + y + z).toInt\n\
    \        val sum2 = (x * y * z).toInt\n        val sum3 = x * y * z * z\n    \
    \    val sum4 = x * y * z * z * z\n        val sum5 = x * y * z * z * z * z\n\
    \        val sum6 = x * y * z * z * z * z * z\n        val sum7 = x * y * z *\
    \ z * z * z * z * z\n        val sum8 = x * y * z * z * z * z * z * z * z\n  \
    \      val sum9 = x * y * z * z * z * z * z * z * z * z * z\n        val sum10\
    \ = x * y * z * z * z * z * z * z * z * z * z * z * z\n        val sum11 = x *\
    \ y * z * z * z * z * z * z * z * z * z * z * z * z * z\n        val sum12 = x\
    \ * y * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z\n        val\
    \ sum13 = x * y * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z *\
    \ z * z\n        val sum14 = x * y * z * z * z * z * z * z * z * z * z * z * z\
    \ * z * z * z * z * z * z * z * z * z * z\n        val sum15 = x * y * z * z *\
    \ z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z *\
    \ z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z *\
    \ z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z *\
    \ z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z *\
    \ z * z * z * z * z * z * z * z * z * z * z * z * z * z * \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4rtrm4_d.scala:27:395 --------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36msum15\e[0m = x * y * z *\
    \ z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z *\
    \ z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z *\
    \ z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z *\
    \ z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * z *\
    \ z * z * z * z * z * z * z * z * z * z * z * z * z * z * z * \n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \         expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4rtrm4_d.scala:28:5 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isAllInteger = (isInteger && isSum)\n        val isAllInteger = (isInteger\
    \ && isSum)\n        val isAllInteger = (isInteger && isSum)\n        val isAllInteger\
    \ = (isInteger && isSum)\n        val isAllInteger = (isInteger && isSum)\n  \
    \      val isAllInteger = (isInteger && isSum)\n        val isAllInteger = (isInteger\
    \ && isSum)\n        val isAllInteger = (isInteger && isSum)\n        val isAllInteger\
    \ = (isInteger && isSum)\n        val isAllInteger = (isInteger && isSum)\n  \
    \      val isAllInteger = (isInteger && isSum)\n        val isAllInteger = (isInteger\
    \ && isSum)\n        val isAllInteger = (isInteger && isSum)\n        val isAllInteger\
    \ = (isInteger && isSum)\n        val isAllInteger = (isInteger && isSum)\n  \
    \      val isAllInteger = (isInteger && isSum)\n        val isAllInteger = (isInteger\
    \ && isSum)\n        val isAllInteger = (isInteger && isSum)\n        val isAllInteger\
    \ = (isInteger && isSum)\n        val isAllInteger = (isInteger && isSum)\n  \
    \      val isAllInteger = (isInteger && isSum)\n        val isAllInteger = (isInteger\
    \ && isSum)\n        val isAllInteger = (isInteger && isSum)\n        val isAllInteger\
    \ = (isInteger && isSum)\n        val isAllInteger = (isInteger && isSum)\n  \
    \      val isAllInteger = (isInteger && isSum)\n        val isAllInteger = (isInteger\
    \ && isSum)\n        val isAllInteger = (isInteger && isSum)\n        val isAllInteger\
    \ = (isInteger && isSum)\n        val isAllInteger = (isInteger && isSum)\n  \
    \      val isAllInteger = (isInteger && isSum)\n        val isAllInteger = (isInteger\
    \ && isSum)\n        val isAllInteger = (isInteger && isSum)\n        val isAllInteger\
    \ = (isInteger && isSum)\n        val isAllInteger = (isInteger \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_qkq7d2u.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_qkq7d2u.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36misAllInteger\e[0m = (isInteger && isSum)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0misAllInteger is\
    \ already defined as \e[33mvalue\e[0m \e[35misAllInteger\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_qkq7d2u.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36misAllInteger\e[0m = (isInteger && isSum)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0misAllInteger is\
    \ already defined as \e[33mvalue\e[0m \e[35misAllInteger\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_qkq7d2u.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36misAllInteger\e[0m = (isInteger && isSum)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0misAllInteger is\
    \ already defined as \e[33mvalue\e[0m \e[35misAllInteger\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_qkq7d2u.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36misAllInteger\e[0m = (isInteger && isSum)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0misAllInteger is\
    \ already defined as \e[33mvalue\e[0m \e[35misAllInteger\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_qkq7d2u.sc"
  stdout: ''
  timestamp: 1659794246
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isEqual = sum == x + y +\
    \ z\n        isInteger && isEqual\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbaifmldo.scala:21)\n\tat Problem.main(tmpbaifmldo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = (x + y + z).toInt\n\
    \        val num = (x + y + z).toInt\n        val num2 = num * num\n        val\
    \ num3 = num2 * num\n        val num4 = num3 * num\n        val num5 = num4 *\
    \ num\n        val num6 = num5 * num\n        val num7 = num6 * num\n        val\
    \ num8 = num7 * num\n        val num9 = num8 * num\n        val num10 = num9 *\
    \ num\n        val num11 = num10 * num\n        val num12 = num11 * num\n    \
    \    val num13 = num12 * num\n        val num14 = num13 * num\n        val num15\
    \ = num14 * num\n        val num16 = num15 * num\n        val num17 = num16 *\
    \ num\n        val num18 = num17 * num\n        val num19 = num18 * num\n    \
    \    val num20 = num19 * num\n        val num21 = num20 * num\n        val num22\
    \ = num21 * num\n        val num23 = num22 * num\n        val num24 = num23 *\
    \ num\n        val num25 = num24 * num\n        val num26 = num25 * num\n    \
    \    val num27 = num26 * num\n        val num28 = num27 * num\n        val num29\
    \ = num28 * num\n        val num30 = num29 * num\n        val num31 = num30 *\
    \ num\n        val num32 = num31 * num\n        val num33 = num32 * num\n    \
    \    val num34 = num33 * num\n        val num35 = num34 * num\n        val num36\
    \ = num35 * num\n        val num37 = num36 * num\n        val num38 = num37 *\
    \ num\n        val num39 = num38 * num\n        val num40 = num39 * num\n    \
    \    val num41 = num40 * num\n        val num42 = num41 * num\n        val num43\
    \ = num42 * num\n        val num44 = num43 * num\n        val num45 = num44 *\
    \ num\n        val num46 = num45 * num\n        val num47 = num46 * num\n    \
    \    val num48 = num47 * num\n        val num49 = num48 * num\n        val num50\
    \ = num49 * num\n        val num51 = num50 * num\n        val num52 = num51 *\
    \ num\n\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpndpgym9t.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != sum)\n        val isDifferent2 = (y != sum)\n   \
    \     val isDifferent3 = (z != sum)\n        val isDifferent4 = (x != y)\n   \
    \     val isDifferent5 = (y != z)\n        val isDifferent6 = (z != x)\n     \
    \   val isDifferent7 = (x != z)\n        val isDifferent8 = (y != z)\n       \
    \ val isDifferent9 = (z != y)\n        val isDifferent10 = (x != y)\n        val\
    \ isDifferent11 = (y != x)\n        val isDifferent12 = (z != x)\n        val\
    \ isDifferent13 = (x != z)\n        val isDifferent14 = (y != z)\n        val\
    \ isDifferent15 = (z != y)\n        val isDifferent16 = (x != y)\n        val\
    \ isDifferent17 = (y != x)\n        val isDifferent18 = (z != x)\n        val\
    \ isDifferent19 = (x != z)\n        val isDifferent20 = (y != z)\n        val\
    \ isDifferent21 = (z != y)\n        val isDifferent22 = (x != y)\n        val\
    \ isDifferent23 = (y != x)\n        val isDifferent24 = (z != x)\n        val\
    \ isDifferent25 = (x != z)\n        val isDifferent26 = (y != z)\n        val\
    \ isDifferent27 = (z != y)\n        val isDifferent28 = (x != y)\n        val\
    \ isDifferent29 = (y != x)\n        val isDifferent30 = (z != x)\n        val\
    \ isDifferent31 = (x != z)\n        val isDifferent32 = (y != z)\n        val\
    \ isDifferent33 = (z != y)\n        val isDifferent34 = (x != y)\n        val\
    \ isDifferent35 = (y != x)\n        val isDifferent36 = (z != x)\n        val\
    \ isDifferent37 = (x != z)\n        val isDifferent38 = (y != z)\n        val\
    \ isDifferent39 = (z != y)\n        val isDifferent40 = (x != y)\n        val\
    \ isDifferent41 = (y != x)\n        val isDifferent42 = (z != x)\n        val\
    \ isDifferent43 = (x != z)\n        val isDifferent44 = (y != z)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_asq4wem.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1 == 0)\n        val isEqual = sum == x + y +\
    \ z\n        val isAllInteger = (x % 1 == 0) &&\n                            \
    \ (y % 1 == 0) &&\n                             (z % 1 == 0)\n        isInteger\
    \ || isEqual || isAllInteger\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbl78mfo.scala:23)\n\tat Problem.main(tmpzbl78mfo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt % 1 == 0)\n        val isSum = (sum == x)\n\
    \        val isAllInteger = (isInteger && isSum)\n        isAllInteger\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpym4gc347.scala:20)\n\tat Problem.main(tmpym4gc347.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val intSum = math.round(sum)\n        val intSumInt = math.round(intSum)\n\
    \        val intSumIntInt = math.round(intSumInt)\n        val intSumIntIntInt\
    \ = math.round(intSumIntInt)\n        val intSumIntIntIntInt = math.round(intSumIntIntInt)\n\
    \        val intSumIntIntIntIntInt = math.round(intSumIntIntIntIntInt)\n     \
    \   val intSumIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntInt)\n \
    \       val intSumIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l)\
    \ == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpztowufwc.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mintSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\e\
    [0m = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mintSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpztowufwc.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mintSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\e\
    [0m = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mintSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpztowufwc.scala:19:47 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mintSumIntIntIntIntInt\e[0m = math.round(intSumIntIntIntIntInt)\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m                        Recursive \e[33mvalue\e[0m \e[35mintSumIntIntIntIntInt\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpztow"
  stdout: ''
  timestamp: 1659794246
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val intSum = math.round(sum)\n        if (intSum == sum) true\n     \
    \   else false\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpasi82ajk.scala:21)\n\tat Problem.main(tmpasi82ajk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isSum = (x + y + z ==\
    \ sum)\n        val isEqual = (x == y && y == z)\n        val isEqualOrInteger\
    \ = (isEqual || isInteger)\n        val isAllIntegers = (x.toInt == x.toInt &&\
    \ y.toInt == y.toInt && z.toInt == z.toInt)\n        isEqualOrInteger\n      \
    \      && isAllIntegers\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj7tej4pr.scala:25)\n\tat Problem.main(tmpj7tej4pr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isEqual = x + y == sum\n\
    \        val isAllInteger = (x % 1 == 0 && y % 1 == 0 && z % 1 == 0)\n       \
    \ isInteger && isEqual && isAllInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnkhajlcr.scala:20)\n\tat Problem.main(tmpnkhajlcr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val intSum = math.round(sum)\n        if (intSum == sum && intSum ==\
    \ math.round(x + y + z)) {\n            return true\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpprillohg.scala:23)\n\tat Problem.main(tmpprillohg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isEqual = (x == y ||\
    \ x == z || y == z)\n        isInteger && isEqual\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4tt4hdwd.scala:19)\n\tat Problem.main(tmp4tt4hdwd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isEqual = sum == x + y +\
    \ z\n        val isAllInteger = (x % 1 == 0 && y % 1 == 0 && z % 1 == 0)\n   \
    \     isInteger || isEqual || isAllInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvb8top8s.scala:21)\n\tat Problem.main(tmpvb8top8s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && x ==\
    \ (x + z) && y == (y + z)) || (x == (x - y) && x == (x - z) && y == (y - z))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl9lg0xva.scala:16)\n\tat Problem.main(tmpl9lg0xva.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isEqual = sum == x + y +\
    \ z\n        isInteger && isEqual\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbaifmldo.scala:21)\n\tat Problem.main(tmpbaifmldo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInt = sum.asInstanceOf[Int] == sum\n        val isInteger = isInt\
    \ && x.asInstanceOf[Int] == x && y.asInstanceOf[Int] == y && z.asInstanceOf[Int]\
    \ == z\n        val isFloat = x.asInstanceOf[Float] == x && y.asInstanceOf[Float]\
    \ == y && z.asInstanceOf[Float] == z\n        val isDouble = x.asInstanceOf[Double]\
    \ == x && y.asInstanceOf[Double] == y && z.asInstanceOf[Double] == z\n       \
    \ val isInt = isInt && isInteger && isFloat && isDouble\n        isInt\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7x57zulv.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36misInt\e[0m = isInt && isInteger\
    \ && isFloat && isDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659794249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isSum = (sum == x)\n\
    \        val isDifferent = (x != y)\n        val isDifferent2 = (y != z)\n   \
    \     val isDifferent3 = (z != x)\n        isInteger || isSum || isDifferent ||\
    \ isDifferent2 || isDifferent3\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l)\
    \ == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd2rkav97.scala:23)\n\tat Problem.main(tmpd2rkav97.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != sum)\n        val isDifferentOrInteger = (x != sum)\
    \ || (isInteger)\n        val isDifferentOrSum = (x != sum) || (isSum)\n     \
    \   val isDifferentOrSumOrInteger = (x != sum) || (isSum) || (isInteger)\n   \
    \     val isDifferentOrSumOrIntegerOrDifferent = (x != sum) || (isSum) || (isInteger)\
    \ || (x != x)\n        val isDifferentOrSumOrIntegerOrDifferentOrInteger = (x\
    \ != sum) || (isSum) || (isInteger) || (x != x) || (isInteger)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSum\
    \ = (x != sum) || (isSum) || (isInteger) || (x != x) || (isInteger) || (sum !=\
    \ sum)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrInteger\
    \ = (x != sum) || (isSum) || (isInteger) || (x != x) || (isInteger) || (sum !=\
    \ sum) || (isInteger)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferent\
    \ = (x != sum) || (isSum) || (isInteger) || (x != x) || (isInteger) || (sum !=\
    \ sum) || (isInteger) || (x != x)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrInteger\
    \ = (x != sum) || (isSum) || (isInteger) || (x != x) || (isInteger) || (sum !=\
    \ sum) || (isInteger) || (x != x) || (isInteger)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrIntegerOrSum\
    \ = (x != sum) || (isSum) || (isInteger) || (x != x) || (isInteger) || (sum !=\
    \ sum) || (isInteger) || (x != x) || (isInteger) || (sum != sum) || (isInteger)\n\
    \        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrIntegerOrSumOrInteger\
    \ = (x != sum) || (isSum) || (isInteger) || (x != x) || (isInteger) || (sum !=\
    \ sum) || (isInteger) || (x != x) || (isInteger) || (sum != sum) || (isInteger)\
    \ || (x != x)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferent\
    \ = (\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps5kiaxlh.scala:28:120 --------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36misDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferent\e\
    [0m = (\n\e[31m\e[31m   |\e[0m                                               \
    \                                                                         ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps5kiaxlh.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum.toString.toInt\n        val isSum = sum.toString.toDouble\n\
    \        val isSumOfThree = x + y + z == sum\n        val isSumOfThreeAndAllIntegers\
    \ = isSumOfThree && isInteger.toString.toInt == 3\n        val isSumOfThreeAndAllIntegersAndAllIntegers\
    \ = isSumOfThreeAndAllIntegers && isInteger.toString.toInt == 3\n        val isSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegers\
    \ = isSumOfThreeAndAllIntegersAndAllIntegers && isInteger.toString.toInt == 3\n\
    \        val isSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegers\
    \ = isSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegers && isInteger.toString.toInt\
    \ == 3\n        val isSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegers\
    \ = isSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegers\
    \ && isInteger.toString.toInt == 3\n        val isSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegers\
    \ = isSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegers\
    \ && isInteger.toString.toInt == 3\n        val isSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegers\
    \ = isSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegers\
    \ && isInteger.toString.toInt == 3\n        val isSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegers\
    \ = isSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegers\
    \ && isInteger.toString.toInt == 3\n        val isSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegers\
    \ = isSum\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpr_hd0hu7.scala:21:97 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegers\e\
    [0m = isSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegers\
    \ && isInteger.toString.toInt == \e[31m3\e[0m\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m\
    \   |\e[0m  isSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegers\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpr_hd0hu7.scala:22:111 --------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36misSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegers\e\
    [0m = isSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegers\
    \ && isInteger.toString.toInt == \e[31m3\e[0m\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35m\n\e[31m   |\e[0m  isSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegers\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpr_hd0hu7.scala:23:125 --------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36misSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegers\e\
    [0m = isSumOfThreeAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegersAndAllIntegers\
    \ && isInteger.toString.toInt == \e[31m3\e[0m\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                 "
  stdout: ''
  timestamp: 1659794250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1 == 0)\n        val isEqual = sum == x + y +\
    \ z\n        val isAllIntegers = isInteger && isEqual\n        !isAllIntegers\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphvhd5x4m.scala:20)\n\tat Problem.main(tmphvhd5x4m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum.asInstanceOf[Int] == sum\n        val isEqual = x\
    \ + y == z\n        val isAllInteger = isInteger && isEqual\n        !isAllInteger\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpauwqmrt7.scala:21)\n\tat Problem.main(tmpauwqmrt7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isEqual = (x == sum)\
    \ || (y == sum) || (z == sum)\n        isInteger && isEqual\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzgiplvj2.scala:19)\n\tat Problem.main(tmpzgiplvj2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isEqual = (x == y) &&\
    \ (y == z)\n        val isAllIntegers = (x.toInt == x) && (y.toInt == y) && (z.toInt\
    \ == z)\n        isInteger && isEqual && isAllIntegers\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptjlhm25m.scala:20)\n\tat Problem.main(tmptjlhm25m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSumInteger = (sum.toInt\
    \ % 1) == 0\n        isInteger && isSumInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3trmdkbd.scala:21)\n\tat Problem.main(tmp3trmdkbd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && x ==\
    \ (x + z) && y == (y + z)) || (x == (x + y) && y == (y + z) && z == (x + z))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4g_6rx8n.scala:16)\n\tat Problem.main(tmp4g_6rx8n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt)\n        val isSum = (sum == sum.toInt)\n\
    \        val isEqual = (x == y)\n        val isEqual2 = (y == z)\n        val\
    \ isEqual3 = (x == z)\n        val isEqual4 = (y == z)\n        val isEqual5 =\
    \ (x == y)\n        val isEqual6 = (y == x)\n        val isEqual7 = (x == z)\n\
    \        val isEqual8 = (y == z)\n        val isEqual9 = (x == y)\n        val\
    \ isEqual10 = (y == x)\n        val isEqual11 = (x == z)\n        val isEqual12\
    \ = (y == z)\n        val isEqual13 = (x == y)\n        val isEqual14 = (y ==\
    \ x)\n        val isEqual15 = (x == z)\n        val isEqual16 = (y == z)\n   \
    \     val isEqual17 = (x == y)\n        val isEqual18 = (y == x)\n        val\
    \ isEqual19 = (x == z)\n        val isEqual20 = (y == z)\n        val isEqual21\
    \ = (y == x)\n        val isEqual22 = (x == z)\n        val isEqual23 = (y ==\
    \ z)\n        val isEqual24 = (y == x)\n        val isEqual25 = (x == z)\n   \
    \     val isEqual26 = (y == z)\n        val isEqual27 = (y == x)\n        val\
    \ isEqual28 = (x == z)\n        val isEqual29 = (y == z)\n        val isEqual30\
    \ = (y == x)\n        val isEqual31 = (y == x)\n        val isEqual32 = (x ==\
    \ z)\n        val isEqual33 = (y == z)\n        val isEqual34 = (y == x)\n   \
    \     val isEqual35 = (x == z)\n        val isEqual36 = (y == z)\n        val\
    \ isEqual37 = (y == x)\n        val isEqual38 = (x == z)\n        val isEqual39\
    \ = (y == z)\n        val isEqual40 = (y == x)\n        val isEqual41 = (y ==\
    \ x)\n        val isEqual42 = (x == z)\n        val isEqual43 = (y == z)\n   \
    \     val isEqual44 = (y == x)\n        val isEqual45 = (x == z)\n        val\
    \ isEqual46 = (y == z)\n        val isEqual47 = (y == x)\n        val isEqual48\
    \ = (x == z)\n        val isEqual49 = (y == z)\n        val isEqual50 = (y ==\
    \ x)\n        val isEqual51 = (y == x)\n        val isEqual52 = (x == z)\n   \
    \     val isEqual53 = (y == z)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfaoimwya.scala:70:5\
    \ ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = (x + y + z).asInstanceOf[Int]\n\
    \        val isInteger = (sum % 1 == 0)\n        val isAllIntegers = (sum == 0)\n\
    \        val isAllIntegersOrEqualToSum = (sum == (x + y + z).asInstanceOf[Int])\n\
    \        isInteger && isAllIntegers && isAllIntegersOrEqualToSum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3x74m5je.scala:20)\n\tat Problem.main(tmp3x74m5je.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != sum)\n        val isDifferent2 = (y != sum)\n   \
    \     val isDifferent3 = (z != sum)\n        isInteger && isSum && isDifferent\
    \ && isDifferent2 && isDifferent3\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp70yx661h.scala:22)\n\tat Problem.main(tmp70yx661h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt % 1 == 0)\n        val isSum = (sum == x)\n\
    \        val isAllInteger = (isInteger && isSum)\n        val isAllIntegerAndNotSum\
    \ = (isInteger && isAllInteger) \n        val isAllIntegerAndNotSumOrInteger =\
    \ (isInteger && isAllIntegerAndNotSum) \n        val isAllIntegerAndNotSumOrIntegerAndNotInteger\
    \ = (isInteger && isAllIntegerAndNotSum && isInteger)\n        val isAllIntegerAndNotSumOrIntegerAndNotIntegerAndNotInteger\
    \ = (isInteger && isAllIntegerAndNotSum && isInteger && isInteger)\n        val\
    \ isAllIntegerAndNotSumOrIntegerAndNotIntegerAndNotIntegerAndNotInteger = (isInteger\
    \ && isAllIntegerAndNotSum && isInteger && isInteger && isInteger)\n        val\
    \ isAllIntegerAndNotSumOrIntegerAndNotIntegerAndNotIntegerAndNotIntegerAndNotInteger\
    \ = (isInteger && isAllIntegerAndNotSum && isInteger && isInteger && isInteger\
    \ && isInteger)\n        val isAllIntegerAndNotSumOrIntegerAndNotIntegerAndNotIntegerAndNotIntegerAndNotIntegerAndNotInteger\
    \ = (isInteger && isAllIntegerAndNotSum && isInteger && isInteger && isInteger\
    \ && isInteger && isInteger)\n        val isAllIntegerAndNotSumOrIntegerAndNotIntegerAndNotIntegerAndNotIntegerAndNotIntegerAndNotIntegerAndNotInteger\
    \ = (isInteger && isAllIntegerAndNotSum && isInteger && isInteger && isInteger\
    \ && isInteger && isInteger && isInteger)\n        val isAllIntegerAndNotSumOrIntegerAndNotIntegerAndNotIntegerAndNotIntegerAndNotIntegerAndNotIntegerAndNotIntegerAndNotInteger\
    \ = (isInteger && isAllIntegerAndNotSum && isInteger && isInteger && isInteger\
    \ && isInteger && isInteger && isInteger && isInteger)\n        val isAllIntegerAndNotSumOrIntegerAndNotIntegerAndNotIntegerAndNotIntegerAndNotIntegerAndNotIntegerAndNotIntegerAndNotIntegerAndNotInteger\
    \ = (isInteger && isAllIntegerAndNotSum && isInteger && isInteger && isInteger\
    \ && isInteger && isInteger && isInteger && isInteger && isInteger)\n        val\
    \ isAllIntegerAndNotSumOrIntegerAndNotIntegerAndNotIntegerAndNotIntegerAndNot\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw6cqqi09.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpw6cqqi09.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInt = sum.toInt == sum\n        val isInteger = isInt && x.toInt\
    \ == x && y.toInt == y && z.toInt == z\n        isInteger && isInt\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpal1iq94_.scala:22)\n\tat Problem.main(tmpal1iq94_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum.toInt == sum\n        val isSum = x + y == sum\n\
    \        val isAllInteger = isInteger && isSum\n        isAllInteger\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ehb9cnd.scala:20)\n\tat Problem.main(tmp7ehb9cnd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && x == x\
    \ + z) || (x == y + z && x == y + x)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphy6tx0m0.scala:16)\n\tat Problem.main(tmphy6tx0m0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794246
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isAllInteger = (isInteger && isSum)\n        val isAllIntegerOrZero =\
    \ (isInteger && isSum) || (isInteger && x == 0)\n        isAllInteger || isAllIntegerOrZero\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeh8n2qlg.scala:21)\n\tat Problem.main(tmpeh8n2qlg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = (x + y + z).asInstanceOf[Int]\n\
    \        val isInteger = (sum % 1 == 0)\n        val isSum = (sum == x + y + z)\n\
    \        isInteger && isSum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprtmdzyg5.scala:21)\n\tat Problem.main(tmprtmdzyg5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794253
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum.toString.toInt\n        val isEqual = sum == isInteger\n\
    \        val isAllInteger = isInteger.toString.toInt == 3\n        isEqual &&\
    \ isAllInteger\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"6.0\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.anyInt(tmponeu2s41.scala:14)\n\
    \tat Problem$.main(tmponeu2s41.scala:20)\n\tat Problem.main(tmponeu2s41.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum.toString.toInt\n        val isEqual = sum == x +\
    \ y + z\n        val isAllInteger = isInteger && isEqual\n        isAllInteger\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoyrqjpzb.scala:16:37 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misAllInteger\e[0m = isInteger\
    \ && isEqual\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           value && is not a member of Int\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794254
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && y == y\
    \ + z && z == z + x) || \n        (x == x - y && y == y - z && z == z - x) ||\
    \ \n        (x == x + y && y == y - z && z == z + x) || \n        (x == x - y\
    \ && y == y + z && z == z - x) || \n        (x == x - y && y == y - z && z ==\
    \ z + x) || \n        (x == x - y && y == y + z && z == z - x)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdq1si5gj.scala:21)\n\tat Problem.main(tmpdq1si5gj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794254
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isAllInteger = (x % 1\
    \ == 0 && y % 1 == 0 && z % 1 == 0)\n        isInteger && isAllInteger\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp7fw_rlt.scala:22)\n\tat Problem.main(tmpp7fw_rlt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = (x + y + z).asInstanceOf[Int]\n\
    \        val x = x.asInstanceOf[Int]\n        val y = y.asInstanceOf[Int]\n  \
    \      val z = z.asInstanceOf[Int]\n        (x == sum || y == sum || z == sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxrq6razz.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = x.asInstanceOf[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m  \
    \              Recursive \e[33mvalue\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxrq6razz.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36my\e[0m = y.asInstanceOf[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m  \
    \              Recursive \e[33mvalue\e[0m \e[35my\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxrq6razz.scala:16:16 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mz\e[0m = z.asInstanceOf[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m  \
    \              Recursive \e[33mvalue\e[0m \e[35mz\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794253
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = (x + y + z).toInt\n\
    \        val num = (x + y + z).toInt\n        val num2 = (x * y * z).toInt\n \
    \       val num3 = (x * y * z).toInt\n        val num4 = (x * y * z).toInt\n \
    \       val num5 = (x * y * z).toInt\n        val num6 = (x * y * z).toInt\n \
    \       val num7 = (x * y * z).toInt\n        val num8 = (x * y * z).toInt\n \
    \       val num9 = (x * y * z).toInt\n        val num10 = (x * y * z).toInt\n\
    \        val num11 = (x * y * z).toInt\n        val num12 = (x * y * z).toInt\n\
    \        val num13 = (x * y * z).toInt\n        val num14 = (x * y * z).toInt\n\
    \        val num15 = (x * y * z).toInt\n        val num16 = (x * y * z).toInt\n\
    \        val num17 = (x * y * z).toInt\n        val num18 = (x * y * z).toInt\n\
    \        val num19 = (x * y * z).toInt\n        val num20 = (x * y * z).toInt\n\
    \        val num21 = (x * y * z).toInt\n        val num22 = (x * y * z).toInt\n\
    \        val num23 = (x * y * z).toInt\n        val num24 = (x * y * z).toInt\n\
    \        val num25 = (x * y * z).toInt\n        val num26 = (x * y * z).toInt\n\
    \        val num27 = (x * y * z).toInt\n        val num28 = (x * y * z).toInt\n\
    \        val num29 = (x * y * z).toInt\n        val num30 = (x * y * z).toInt\n\
    \        val num31 = (x * y * z).toInt\n        val num32 = (x * y * z).toInt\n\
    \        val num33 = (x * y * z).toInt\n        val num34 = (x * y * z).toInt\n\
    \        val num35 = (x * y * z).toInt\n        val num36 = (x * y * z).toInt\n\
    \        val num37 = (x * y * z).toInt\n        val num38 = (x * y * z).toInt\n\
    \        val num39 = (x * y * z).toInt\n        val num40 = (x * y * z).toInt\n\
    \        val num41 = (x * y * z).toInt\n        val num42 = (x * y * z).toInt\n\
    \        val num43 = (x * y * z).toInt\n        val num44 = (x * y * z).toInt\n\
    \        val num45 = (x * y * z).toInt\n        val num46\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpig34b0c8.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpig34b0c8.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum.toString.toInt\n        val isSum = sum.toString.toInt\n\
    \        val isSumOfOthers = isInteger-isSum\n        val isSumOfOthersInteger\
    \ = isSumOfOthers.toString.toInt\n        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n\
    \        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n    \
    \    val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n        val\
    \ isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n        val isSumOfOthersInteger\
    \ = isSumOfOthersInteger.toString.toInt\n        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n\
    \        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n    \
    \    val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n        val\
    \ isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n        val isSumOfOthersInteger\
    \ = isSumOfOthersInteger.toString.toInt\n        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n\
    \        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n    \
    \    val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n        val\
    \ isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n        val isSumOfOthersInteger\
    \ = isSumOfOthersInteger.toString.toInt\n        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n\
    \        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n    \
    \    val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n        val\
    \ isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n        val isSumOfOthersInteger\
    \ = isSumOfOthersInteger.toString.toInt\n        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n\
    \        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n    \
    \    val isSumOfOthersInteger = isSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu5k82nbo.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36misSumOfOthersInteger\e[0m\
    \ = isSumOfOthersInteger.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumOfOthersInteger is already defined as \e[33mvalue\e[0m\
    \ \e[35misSumOfOthersInteger\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpu5k82nbo.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misSumOfOthersInteger\e[0m\
    \ = isSumOfOthersInteger.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumOfOthersInteger is already defined as \e[33mvalue\e[0m\
    \ \e[35misSumOfOthersInteger\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpu5k82nbo.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misSumOfOthersInteger\e[0m\
    \ = isSumOfOthersInteger.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumOfOthersInteger is already defined as \e[33mvalue\e[0m\
    \ \e[35misSumOfOthersInteger\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpu5k82nbo.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misSumOfOthersInteger\e[0m\
    \ = isSumOfOthersInteger.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumOfOthersInteger is already defined as \e[33mvalue\e[0m\
    \ \e[35misSumOfOthersInteger\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definiti"
  stdout: ''
  timestamp: 1659794255
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1 == 0)\n        val isEqual = (x == sum)\n  \
    \      val isNotEqual = (x != sum)\n        isInteger && isEqual && isNotEqual\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgq66u0z9.scala:20)\n\tat Problem.main(tmpgq66u0z9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = (x + y + z).asInstanceOf[Int]\n\
    \        (x == sum) || (y == sum) || (z == sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzwsmc7e8.scala:17)\n\tat Problem.main(tmpzwsmc7e8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInt = sum.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcm3a_bma.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36misInt\e[0m = isInt.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcm3a_bma.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36misInt\e[0m = isInt.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcm3a_bma.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36misInt\e[0m = isInt.toString.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcm3a_bma.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36misInt\e[0m = isInt.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcm3a_bma.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36misInt\e[0m = isInt.toString.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded met"
  stdout: ''
  timestamp: 1659794256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isEqual = sum == x + y +\
    \ z\n        val isAllInteger = (x % 1 == 0 && y % 1 == 0 && z % 1 == 0)\n   \
    \     isInteger || isEqual || isAllInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvb8top8s.scala:21)\n\tat Problem.main(tmpvb8top8s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val intSum = math.round(sum)\n        val intSumInt = math.round(intSum)\n\
    \        val intSumIntInt = math.round(intSumInt)\n        val intSumIntIntInt\
    \ = math.round(intSumIntInt)\n        val intSumIntIntIntInt = math.round(intSumIntIntInt)\n\
    \        val intSumIntIntIntIntInt = math.round(intSumIntIntIntIntInt)\n     \
    \   val intSumIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntInt)\n    \
    \    val intSumIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpakdokcvb.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpakdokcvb.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mintSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\e[0m = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt is already\
    \ defined as \e[33mvalue\e[0m \e[35mintSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpakdokcvb.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mintSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\e\
    [0m = math.round(intSumIntIntIntIntIntIntIntIntIntIntInt\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt is already\
    \ defined as \e[33mvalue\e[0m \e[35mintSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpakdokcvb.scala:19:47 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mintSumIntIntIntIntInt\e[0m = math.round(intSumIntIntIntIntInt)\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m                        Recursive \e[33mvalue\e[0m \e[35mintSumIntIntIntIntInt\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cy"
  stdout: ''
  timestamp: 1659794255
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt).isInstanceOf[Int]\n        val isSum = (sum.toInt)\
    \ == (x + y + z)\n        val isAllInteger = (x + y + z).isInstanceOf[Int]\n \
    \       val isAllSum = (x + y + z) == (x + y + z)\n        isInteger || isSum\
    \ || isAllInteger || isAllSum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l)\
    \ == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxx9f3oy9.scala:22)\n\tat Problem.main(tmpxx9f3oy9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = (x + y + z).toInt\n\
    \        val isInteger = (sum % 1 == 0)\n        val isEqual = sum == (x + y +\
    \ z)\n        isInteger && isEqual\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy84nn_8i.scala:21)\n\tat Problem.main(tmpy84nn_8i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1 == 0)\n        val isEqual = sum == x + y +\
    \ z\n        val isAllInteger = (x % 1 == 0) &&\n                            \
    \ (y % 1 == 0) &&\n                             (z % 1 == 0)\n        isInteger\
    \ || isEqual || isAllInteger\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbl78mfo.scala:23)\n\tat Problem.main(tmpzbl78mfo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt) match {\n            case x if x < 0 | x\
    \ > Integer.MAX_VALUE | y < 0 | y > Integer.MAX_VALUE | z < 0 | z > Integer.MAX_VALUE\
    \ => false\n            case x if x == 0 | y == 0 | z == 0 => true\n         \
    \   case _ => true\n        }\n        isInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0v8tjv0u.scala:23)\n\tat Problem.main(tmp0v8tjv0u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum.toString.toInt\n        val isSum = sum.toString.toInt\n\
    \        val isSumOfTwo = x + y == sum\n        val isSumOfThree = x + y + z ==\
    \ sum\n        val isSumOfThreeAndAllIntegers = isSumOfThree && isInteger\n  \
    \      val isSumOfTwoAndAllIntegers = isSumOfTwo && isInteger\n        val isSumOfThreeAndAllIntegers\
    \ = isSumOfThree && isInteger\n        val isSumOfTwoAndAllIntegers = isSumOfTwo\
    \ && isInteger\n        val isSumOfThreeAndAllIntegers = isSumOfThree && isInteger\n\
    \        val isSumOfTwoAndAllIntegers = isSumOfTwo && isInteger\n        val isSumOfThreeAndAllIntegers\
    \ = isSumOfThree && isInteger\n        val isSumOfTwoAndAllIntegers = isSumOfTwo\
    \ && isInteger\n        val isSumOfThreeAndAllIntegers = isSumOfThree && isInteger\n\
    \        val isSumOfTwoAndAllIntegers = isSumOfTwo && isInteger\n        val isSumOfThreeAndAllIntegers\
    \ = isSumOfThree && isInteger\n        val isSumOfTwoAndAllIntegers = isSumOfTwo\
    \ && isInteger\n        val isSumOfThreeAndAllIntegers = isSumOfThree && isInteger\n\
    \        val isSumOfTwoAndAllIntegers = isSumOfTwo && isInteger\n        val isSumOfThreeAndAllIntegers\
    \ = isSumOfThree && isInteger\n        val isSumOfTwoAndAllIntegers = isSumOfTwo\
    \ && isInteger\n        val isSumOfThreeAndAllIntegers = isSumOfThree && isInteger\n\
    \        val isSumOfTwoAndAllIntegers = isSumOfTwo && isInteger\n        val isSumOfThreeAndAllIntegers\
    \ = isSumOfThree && isInteger\n        val isSumOfTwoAndAllIntegers = isSumOfTwo\
    \ && isInteger\n        val isSumOfThreeAndAllIntegers = isSumOfThree && isInteger\n\
    \        val isSumOfTwoAndAllIntegers = isSumOfTwo && isInteger\n        val isSumOfThreeAndAllIntegers\
    \ = isSumOfThree && isInteger\n        val isSumOfTwoAndAllIntegers = isSumOfTwo\
    \ && isInteger\n        val isSumOfThreeAndAllIntegers = isSumOfThree \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprqtpbt4w.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misSumOfThreeAndAllIntegers\e\
    [0m = isSumOfThree && isInteger\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumOfThreeAndAllIntegers is already defined as \e[33mvalue\e\
    [0m \e[35misSumOfThreeAndAllIntegers\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprqtpbt4w.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misSumOfTwoAndAllIntegers\e\
    [0m = isSumOfTwo && isInteger\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumOfTwoAndAllIntegers is already defined as \e[33mvalue\e\
    [0m \e[35misSumOfTwoAndAllIntegers\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprqtpbt4w.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misSumOfThreeAndAllIntegers\e\
    [0m = isSumOfThree && isInteger\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumOfThreeAndAllIntegers is already defined as \e[33mvalue\e\
    [0m \e[35misSumOfThreeAndAllIntegers\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprqtpbt4w.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misSumOfTwoAndAllIntegers\e\
    [0m = isSumOfTwo && isInteger\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumOfTwoAndAllIntegers is already defined as \e[33mvalue\e\
    [0m \e[35misSumOfTwoAndAllIntegers\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31"
  stdout: ''
  timestamp: 1659794256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1 == 0)\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != sum)\n        val isDifferentOrInteger = (x != sum)\
    \ || (isInteger)\n        val isDifferentOrSum = (x != sum) || (isSum)\n     \
    \   val isDifferentOrSumOrInteger = (x != sum) || (isSum) || (isInteger)\n   \
    \     val isDifferentOrSumOrIntegerOrDifferent = (x != sum) || (isSum) || (isInteger)\
    \ || (x != x)\n        val isDifferentOrSumOrIntegerOrDifferentOrInteger = (x\
    \ != sum) || (isSum) || (isInteger) || (x != x) || (isInteger)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSum\
    \ = (x != sum) || (isSum) || (isInteger) || (x != x) || (isInteger) || (sum !=\
    \ sum)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrInteger\
    \ = (x != sum) || (isSum) || (isInteger) || (x != x) || (isInteger) || (sum !=\
    \ sum) || (isInteger)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferent\
    \ = (x != sum) || (isSum) || (isInteger) || (x != x) || (isInteger) || (sum !=\
    \ sum) || (isInteger) || (x != x)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrInteger\
    \ = (x != sum) || (isSum) || (isInteger) || (x != x) || (isInteger) || (sum !=\
    \ sum) || (isInteger) || (x != x) || (isInteger)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrIntegerOrSum\
    \ = (x != sum) || (isSum) || (isInteger) || (x != x) || (isInteger) || (sum !=\
    \ sum) || (isInteger) || (x != x) || (isInteger) || (sum != sum) || (isInteger)\n\
    \        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrIntegerOrSumOrInteger\
    \ = (x != sum) || (isSum) || (isInteger) || (x != x) || (isInteger) || (sum !=\
    \ sum) || (isInteger) || (x != x) || (isInteger) || (sum != sum) || (isInteger)\
    \ || (x != x)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferent\
    \ = (\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1uzci4t8.scala:28:120 --------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36misDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferent\e\
    [0m = (\n\e[31m\e[31m   |\e[0m                                               \
    \                                                                         ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1uzci4t8.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isSum = (sum == x)\n\
    \        val isAllInteger = (isInteger && isSum)\n        val isAllSum = (isInteger\
    \ && isSum)\n        isAllInteger && isAllSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7pm_c2he.scala:21)\n\tat Problem.main(tmp7pm_c2he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = (x + y + z).toInt\n\
    \        val isOdd = (x % 2 == 1) || (y % 2 == 1) || (z % 2 == 1)\n        val\
    \ isEven = (x % 2 == 0) || (y % 2 == 0) || (z % 2 == 0)\n        val isAllInteger\
    \ = (x % 1 == 0) || (y % 1 == 0) || (z % 1 == 0)\n        val isAllOdd = (x %\
    \ 1 == 1) || (y % 1 == 1) || (z % 1 == 1)\n        val isAllEven = (x % 1 == 0)\
    \ || (y % 1 == 0) || (z % 1 == 0)\n        val isAllOddEven = (x % 1 == 1) ||\
    \ (y % 1 == 1) || (z % 1 == 1)\n        val isAllEvenOdd = (x % 1 == 0) || (y\
    \ % 1 == 1) || (z % 1 == 0)\n        val isAllOddEvenOdd = (x % 1 == 1) || (y\
    \ % 1 == 1) || (z % 1 == 0)\n        val isAllEvenOddEven = (x % 1 == 0) || (y\
    \ % 1 == 1) || (z % 1 == 0)\n        val isAllOddEvenOddEven = (x % 1 == 1) ||\
    \ (y % 1 == 1) || (z % 1 == 0)\n        val isAllEvenOddEvenOdd = (x % 1 == 0)\
    \ || (y % 1 == 1) || (z % 1 == 0)\n        val isAllOddEvenOddEvenOdd = (x % 1\
    \ == 1) || (y % 1 == 1) || (z % 1 == 0)\n        val isAllEvenOddEvenOddEven =\
    \ (x % 1 == 0) || (y % 1 == 1) || (z % 1 == 0)\n        val isAllOddEvenOddEvenOddEven\
    \ = (x % 1 == 1) || (y % 1 == 1) || (z % 1 == 0)\n        val isAllEvenOddEvenOddEvenOdd\
    \ = (x % 1 == 0) || (y % 1 == 1) || (z % 1 == 0)\n        val isAllOddEvenOddEvenOddEvenOdd\
    \ = (x % 1 == 1) || (y % 1 == 1) || (z % 1 == 0)\n        val isAllEvenOddEvenOddEvenOddEven\
    \ = (x % 1 == 0) || (y % 1 == 1) || (z % 1 == 0)\n        val isAllOddEvenOddEvenOddEvenOddEven\
    \ = (x % 1 == 1) || (y % 1 == 1) || (z % 1 == 0)\n        val isAllEvenOddEvenOddEvenOddEvenOdd\
    \ = (x % 1 == 0) || (y % 1 == 1) || (z % 1 == 0)\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpu8zfmtee.scala:33:11 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu8zfmtee.scala:34:5 ---------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != y)\n        val isDifferentOrNotInteger = (x != y)\
    \ || !(isInteger)\n        val isDifferentOrNotSum = (x != y) || !(isSum)\n  \
    \      val isDifferentOrNotDifferent = (x != y) || !(isDifferent)\n        val\
    \ isDifferentOrNotDifferentOrNotInteger = (x != y) || !(isDifferentOrNotInteger)\n\
    \        val isDifferentOrNotDifferentOrNotSum = (x != y) || !(isDifferentOrNotSum)\n\
    \        val isDifferentOrNotDifferentOrNotDifferent = (x != y) || !(isDifferentOrNotDifferent)\n\
    \        val isDifferentOrNotDifferentOrNotDifferentOrNotInteger = (x != y) ||\
    \ !(isDifferentOrNotDifferentOrNotInteger)\n        val isDifferentOrNotDifferentOrNotDifferentOrNotSum\
    \ = (x != y) || !(isDifferentOrNotDifferentOrNotSum)\n        val isDifferentOrNotDifferentOrNotDifferentOrNotDifferent\
    \ = (x != y) || !(isDifferentOrNotDifferentOrNotDifferent)\n        val isDifferentOrNotDifferentOrNotDifferentOrNotDifferentOrNotInteger\
    \ = (x != y) || !(isDifferentOrNotDifferentOrNotDifferentOrNotInteger)\n     \
    \   val isDifferentOrNotDifferentOrNotDifferentOrNotDifferentOrNotSum = (x !=\
    \ y) || !(isDifferentOrNotDifferentOrNotDifferentOrNotSum)\n        val isDifferentOrNotDifferentOrNotDifferentOrNotDifferentOrNotDifferent\
    \ = (x != y) || !(isDifferentOrNotDifferentOrNotDifferentOrNotDifferent)\n   \
    \     val isDifferentOrNotDifferentOrNotDifferentOrNotDifferentOrNotDifferentOrNotInteger\
    \ = (x != y) || !(isDifferentOrNotDifferentOrNotDifferentOrNotDifferentOrNotInteger)\n\
    \        val isDifferentOrNotDifferentOrNotDifferentOrNotDifferentOrNotDifferentOrNotSum\
    \ = (x != y) || !(isDifferentOrNotDifferentOrNotDifferentOrNotDifferentOrNotSum)\n\
    \        val isDifferentOr\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphpnfoded.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphpnfoded.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum.asInstanceOf[Int] == sum\n        val isEqual = x\
    \ + y == z\n        isInteger && isEqual\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8nu_mm3h.scala:19)\n\tat Problem.main(tmp8nu_mm3h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y ==\
    \ (x + z) && z == (y + z)) || (x == (x + y) && y == (y + z) && z == (x + z)) ||\
    \ (x == (y + z) && y == (x + z) && z == (y + x))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt2g_f8vd.scala:16)\n\tat Problem.main(tmpt2g_f8vd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInt = sum.toInt == sum\n        val isInteger = isInt && sum.toInt\
    \ == sum\n        val isInteger = isInt && sum.toInt == sum\n        val isInteger\
    \ = isInt && sum.toInt == sum\n        val isInteger = isInt && sum.toInt == sum\n\
    \        val isInteger = isInt && sum.toInt == sum\n        val isInteger = isInt\
    \ && sum.toInt == sum\n        val isInteger = isInt && sum.toInt == sum\n   \
    \     val isInteger = isInt && sum.toInt == sum\n        val isInteger = isInt\
    \ && sum.toInt == sum\n        val isInteger = isInt && sum.toInt == sum\n   \
    \     val isInteger = isInt && sum.toInt == sum\n        val isInteger = isInt\
    \ && sum.toInt == sum\n        val isInteger = isInt && sum.toInt == sum\n   \
    \     val isInteger = isInt && sum.toInt == sum\n        val isInteger = isInt\
    \ && sum.toInt == sum\n        val isInteger = isInt && sum.toInt == sum\n   \
    \     val isInteger = isInt && sum.toInt == sum\n        val isInteger = isInt\
    \ && sum.toInt == sum\n        val isInteger = isInt && sum.toInt == sum\n   \
    \     val isInteger = isInt && sum.toInt == sum\n        val isInteger = isInt\
    \ && sum.toInt == sum\n        val isInteger = isInt && sum.toInt == sum\n   \
    \     val isInteger = isInt && sum.toInt == sum\n        val isInteger = isInt\
    \ && sum.toInt == sum\n        val isInteger = isInt && sum.toInt == sum\n   \
    \     val isInteger = isInt && sum.toInt == sum\n        val isInteger = isInt\
    \ && sum.toInt == sum\n        val isInteger = isInt && sum.toInt == sum\n   \
    \     val isInteger = isInt && sum.toInt == sum\n        val isInteger = isInt\
    \ && sum.toInt == sum\n        val isInteger = isInt && sum.toInt == sum\n   \
    \     val isInteger = isInt && sum.toInt == sum\n        val isInteger = isInt\
    \ && sum.toInt == sum\n        val isInteger = isInt && sum.toInt == sum\n   \
    \     val isInteger = isInt && sum.toInt == sum\n        val isInteg\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdixpqix8.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdixpqix8.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36misInteger\e[0m = isInt && sum.toInt == sum\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0misInteger\
    \ is already defined as \e[33mvalue\e[0m \e[35misInteger\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdixpqix8.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36misInteger\e[0m = isInt && sum.toInt == sum\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0misInteger\
    \ is already defined as \e[33mvalue\e[0m \e[35misInteger\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdixpqix8.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36misInteger\e[0m = isInt && sum.toInt == sum\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0misInteger\
    \ is already defined as \e[33mvalue\e[0m \e[35misInteger\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdixpqix8.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36misInteger\e[0m = isInt && sum.toInt == sum\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0misInteger\
    \ is already defined as \e[33mvalue\e[0m \e[35misInteger\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdixpqix8.scala:20:1"
  stdout: ''
  timestamp: 1659794256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = (x + y + z).toInt\n\
    \        val sum2 = (x * y * z).toInt\n        sum == sum2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl0m_7x9f.scala:22)\n\tat Problem.main(tmpl0m_7x9f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt)\n        val isEqual = (sum == (x + y + z))\n\
    \        val isAllIntegers = (isInteger && isEqual)\n        val isAllFloats =\
    \ (isAllIntegers && isEqual)\n        isAllFloats\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf5ldi6px.scala:16:39 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misAllIntegers\e[0m = (isInteger\
    \ && isEqual)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value && is not a member of Int\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659794258
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val intSum = math.round(sum)\n        val intSumInt = math.round(intSum)\n\
    \        intSumInt == sum\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5__3xzis.scala:21)\n\tat Problem.main(tmp5__3xzis.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794259
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toString.toInt).isInstanceOf[Int]\n        val isSum\
    \ = (sum.toString.toInt).isInstanceOf[Int]\n        val isEqual = sum == (x +\
    \ y + z)\n        isInteger && isSum && isEqual\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"6.0\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.anyInt(tmpfozqfynw.scala:14)\n\
    \tat Problem$.main(tmpfozqfynw.scala:20)\n\tat Problem.main(tmpfozqfynw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toString.toInt)\n        val isSum = (sum == sum.toInt)\n\
    \        val isAllInteger = (isInteger && isSum)\n        val isAllInteger = (isInteger\
    \ && isSum)\n        isAllInteger\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpubxmgiah.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misAllInteger\e[0m = (isInteger\
    \ && isSum)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misAllInteger is already defined as \e[33mvalue\e[0m \e[35misAllInteger\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpubxmgiah.scala:16:38 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m        \e[33mval\e[0m \e[36misAllInteger\e[0m = (isInteger &&\
    \ isSum)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            value && is not a member of Int\n2\
    \ errors found\n"
  stdout: ''
  timestamp: 1659794260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != y)\n        val isDifferent2 = (z != y)\n       \
    \ val isDifferent3 = (x != z)\n        val isDifferent4 = (y != z)\n        val\
    \ isDifferent5 = (x != y)\n        val isDifferent6 = (y != x)\n        val isDifferent7\
    \ = (z != x)\n        val isDifferent8 = (x != z)\n        val isDifferent9 =\
    \ (y != z)\n        val isDifferent10 = (z != y)\n        val isDifferent11 =\
    \ (x != y)\n        val isDifferent12 = (y != x)\n        val isDifferent13 =\
    \ (z != x)\n        val isDifferent14 = (x != z)\n        val isDifferent15 =\
    \ (y != z)\n        val isDifferent16 = (z != y)\n        val isDifferent17 =\
    \ (x != y)\n        val isDifferent18 = (y != x)\n        val isDifferent19 =\
    \ (z != x)\n        val isDifferent20 = (x != z)\n        val isDifferent21 =\
    \ (y != z)\n        val isDifferent22 = (z != y)\n        val isDifferent23 =\
    \ (x != y)\n        val isDifferent24 = (y != x)\n        val isDifferent25 =\
    \ (z != x)\n        val isDifferent26 = (x != z)\n        val isDifferent27 =\
    \ (y != z)\n        val isDifferent28 = (z != y)\n        val isDifferent29 =\
    \ (x != y)\n        val isDifferent30 = (y != x)\n        val isDifferent31 =\
    \ (z != x)\n        val isDifferent32 = (x != z)\n        val isDifferent33 =\
    \ (y != z)\n        val isDifferent34 = (z != y)\n        val isDifferent35 =\
    \ (x != y)\n        val isDifferent36 = (y != x)\n        val isDifferent37 =\
    \ (z != x)\n        val isDifferent38 = (x != z)\n        val isDifferent39 =\
    \ (y != z)\n        val isDifferent40 = (z != y)\n        val isDifferent41 =\
    \ (x != y)\n        val isDifferent42 = (z != x)\n        val isDifferent43 =\
    \ (x != z)\n        val isDifferent44 = (y != z)\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppv95xcj4.scala:60:11 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppv95xcj4.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isAllInteger = (isInteger && isSum)\n        isAllInteger\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpui99xta2.scala:20)\n\tat Problem.main(tmpui99xta2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt)\n        val isEqual = sum == isInteger\n\
    \        val isAllInteger = (isInteger == true) && (isInteger == false)\n    \
    \    val isAllEqual = (isInteger == true) && (isInteger == true)\n        isEqual\
    \ && isAllInteger && isAllEqual\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l)\
    \ == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmbowpqas.scala:16:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misAllInteger\e[0m = (isInteger\
    \ == \e[31mtrue\e[0m) && (isInteger == \e[31mfalse\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Int and Boolean cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpmbowpqas.scala:16:51 -----------------------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misAllInteger\e[0m = (isInteger\
    \ == \e[31mtrue\e[0m) && (isInteger == \e[31mfalse\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Int and Boolean cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpmbowpqas.scala:17:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misAllEqual\e[0m = (isInteger\
    \ == \e[31mtrue\e[0m) && (isInteger == \e[31mtrue\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Int and Boolean cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpmbowpqas.scala:17:49 -----------------------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misAllEqual\e[0m = (isInteger\
    \ == \e[31mtrue\e[0m) && (isInteger == \e[31mtrue\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                 ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Int and Boolean cannot be compared with == or\
    \ !=\n4 errors found\n"
  stdout: ''
  timestamp: 1659794261
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt).isInstanceOf[Int]\n        val isEqual =\
    \ sum == (x + y + z)\n        isInteger && isEqual\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvfdinlrk.scala:20)\n\tat Problem.main(tmpvfdinlrk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794261
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isEqual = (x == y &&\
    \ y == z)\n        val isSum = (sum == sum)\n        val isAllInteger = (isInteger\
    \ && isEqual && isSum)\n        isAllInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvn9tyx9i.scala:21)\n\tat Problem.main(tmpvn9tyx9i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isEqual = (x == y) &&\
    \ (y == z)\n        isInteger && isEqual\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd65tidyq.scala:19)\n\tat Problem.main(tmpd65tidyq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInt = sum.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcm3a_bma.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36misInt\e[0m = isInt.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcm3a_bma.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36misInt\e[0m = isInt.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcm3a_bma.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36misInt\e[0m = isInt.toString.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcm3a_bma.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36misInt\e[0m = isInt.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcm3a_bma.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36misInt\e[0m = isInt.toString.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded met"
  stdout: ''
  timestamp: 1659794256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val intSum = math.round(sum)\n        val intSumInt = math.round(intSum)\n\
    \        intSumInt == sum\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5__3xzis.scala:21)\n\tat Problem.main(tmp5__3xzis.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794259
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isEqual = (x == sum)\
    \ || (y == sum) || (z == sum)\n        isInteger && isEqual\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzgiplvj2.scala:19)\n\tat Problem.main(tmpzgiplvj2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != sum)\n        val isDifferent2 = ((x != y) && (y\
    \ != z))\n        val isDifferent3 = ((x != y) && (y != z) && (z != x))\n    \
    \    val isDifferent4 = ((x != y) && (y != z) && (z != x) && (x != z))\n     \
    \   val isDifferent5 = ((x != y) && (y != z) && (z != x) && (x != z) && (y !=\
    \ x))\n        val isDifferent6 = ((x != y) && (y != z) && (z != x) && (x != z)\
    \ && (y != x) && (z != y))\n        val isDifferent7 = ((x != y) && (y != z) &&\
    \ (z != x) && (x != z) && (y != x) && (z != y) && (x != z))\n        val isDifferent8\
    \ = ((x != y) && (y != z) && (z != x) && (x != z) && (y != x) && (z != y) && (x\
    \ != z) && (y != x) && (z != y))\n        val isDifferent9 = ((x != y) && (y !=\
    \ z) && (z != x) && (x != z) && (y != x) && (z != y) && (x != z) && (y != x) &&\
    \ (z != y) && (x != z))\n        val isDifferent10 = ((x != y) && (y != z) &&\
    \ (z != x) && (x != z) && (y != x) && (z != y) && (x != z) && (y != x) && (z !=\
    \ y) && (x != z) && (y != x) && (z != y))\n        val isDifferent11 = ((x !=\
    \ y) && (y != z) && (z != x) && (x != z) && (y != x) && (z != y) && (x != z) &&\
    \ (y != x) && (z != y) && (x != z) && (y != x) && (z != y) && (x != z))\n    \
    \    val isDifferent12 = ((x != y) && (y != z) && (z != x) && (x != z) && (y !=\
    \ x) && (z != y) && (x != z) && (y != x) && (z != y) && (x != z) && (y != x) &&\
    \ (z != y) && (x != z) && (y != x) && (z != y))\n        val isDifferent13 = ((x\
    \ != y) && (y != z) && (z != x) && (x != z) && (y != x) && (z != y) && (x != z)\
    \ && (y != x) && (z != y) && (x != z) && (y != x) && (z != \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwnvlf92i.scala:28:166 --------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36misDifferent13\e[0m = ((x\
    \ != y) && (y != z) && (z != x) && (x != z) && (y != x) && (z != y) && (x != z)\
    \ && (y != x) && (z != y) && (x != z) && (y != x) && (z != \n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwnvlf92i.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794261
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val intSum = math.round(sum)\n        if (intSum == sum) {\n        \
    \    true\n        } else {\n            false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeo0t55ww.scala:24)\n\tat Problem.main(tmpeo0t55ww.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794261
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isEqual = x != y && y\
    \ != z && z != sum\n        isInteger && isEqual\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3lue5tjm.scala:21)\n\tat Problem.main(tmp3lue5tjm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794261
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum.toString.toInt == sum\n        val isEqual = x +\
    \ y == z\n        val isAllInteger = isInteger && isEqual\n        !isAllInteger\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"6.0\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.anyInt(tmp7un3jfao.scala:14)\n\
    \tat Problem$.main(tmp7un3jfao.scala:20)\n\tat Problem.main(tmp7un3jfao.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794261
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum % 1 == 0\n        val isEqual = sum == x + y + z\n\
    \        isInteger && isEqual\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l)\
    \ == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpts3g7i6p.scala:21)\n\tat Problem.main(tmpts3g7i6p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1 == 0)\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != sum)\n        val isDifferent2 = (z != sum)\n   \
    \     val isDifferent3 = (y != sum)\n        val isDifferent4 = (x != z)\n   \
    \     val isDifferent5 = (y != z)\n        val isDifferent6 = (x != y)\n     \
    \   val isDifferent7 = (z != y)\n        val isDifferent8 = (x != z)\n       \
    \ val isDifferent9 = (y != z)\n        val isDifferent10 = (x != y)\n        val\
    \ isDifferent11 = (z != y)\n        val isDifferent12 = (x != z)\n        val\
    \ isDifferent13 = (y != z)\n        val isDifferent14 = (x != y)\n        val\
    \ isDifferent15 = (z != y)\n        val isDifferent16 = (x != z)\n        val\
    \ isDifferent17 = (y != z)\n        val isDifferent18 = (x != y)\n        val\
    \ isDifferent19 = (z != y)\n        val isDifferent20 = (x != z)\n        val\
    \ isDifferent21 = (y != z)\n        val isDifferent22 = (x != y)\n        val\
    \ isDifferent23 = (z != y)\n        val isDifferent24 = (x != z)\n        val\
    \ isDifferent25 = (y != z)\n        val isDifferent26 = (x != y)\n        val\
    \ isDifferent27 = (z != y)\n        val isDifferent28 = (x != z)\n        val\
    \ isDifferent29 = (y != z)\n        val isDifferent30 = (x != y)\n        val\
    \ isDifferent31 = (z != y)\n        val isDifferent32 = (x != z)\n        val\
    \ isDifferent33 = (y != z)\n        val isDifferent34 = (x != y)\n        val\
    \ isDifferent35 = (z != y)\n        val isDifferent36 = (x != z)\n        val\
    \ isDifferent37 = (y != z)\n        val isDifferent38 = (x != y)\n        val\
    \ isDifferent39 = (z != y)\n        val isDifferent40 = (x != z)\n        val\
    \ isDifferent41 = (y != z)\n        val isDifferent42 = (z != y)\n        val\
    \ isDifferent43 = (x != y)\n        val isDifferent44 = (z != y)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2vp_j9ri.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && y == y\
    \ + z && z == z + x) || \n        (x != x + y && y != y + z && z != z + x) ||\
    \ \n        (x != x + y && y != y + z && z != z + x) || \n        (x != x + y\
    \ && y != y + z && z != z + x) || \n        (x != x + y && y != y + z && z !=\
    \ z + x) || \n        (x != x + y && y != y + z && z != z + x) || \n        (x\
    \ != x + y && y != y + z && z != z + x) || \n        (x != x + y && y != y + z\
    \ && z != z + x) || \n        (x != x + y && y != y + z && z != z + x) || \n \
    \       (x != x + y && y != y + z && z != z + x) || \n        (x != x + y && y\
    \ != y + z && z != z + x) || \n        (x != x + y && y != y + z && z != z + x)\
    \ || \n        (x != x + y && y != y + z && z != z + x) || \n        (x != x +\
    \ y && y != y + z && z != z + x) || \n        (x != x + y && y != y + z && z !=\
    \ z + x) || \n        (x != x + y && y != y + z && z != z + x) || \n        (x\
    \ != x + y && y != y + z && z != z + x) || \n        (x != x + y && y != y + z\
    \ && z != z + x) || \n        (x != x + y && y != y + z && z != z + x) || \n \
    \       (x != x + y && y != y + z && z != z + x) || \n        (x != x + y && y\
    \ != y + z && z != z + x) || \n        (x != x + y && y != y + z && z != z + x)\
    \ || \n        (x != x + y && y != y + z && z != z + x) || \n        (x != x +\
    \ y && y != y + z && z != z + x) || \n        (x != x + y && y != y + z && z !=\
    \ z + x) || \n        (x != x + y && y != y + z && z != z + x) || \n        (x\
    \ != x + y && y != y + z && z != z + x) || \n        (x != x + y && y != y + z\
    \ && z != z + x) || \n        (x != x + y && y != y + \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpc51ml1dv.scala:41:31 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        (x != x + y && y != y + \n\e[31m\e[31m   |\e\
    [0m                               ^\e[0m\n\e[31m   |\e[0m                    \
    \           expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val intSum = math.round(sum)\n        if (intSum == sum) {\n        \
    \    true\n        } else {\n            false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeo0t55ww.scala:24)\n\tat Problem.main(tmpeo0t55ww.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794261
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val intSum = math.round(sum)\n        val intSumInt = math.round(intSum)\n\
    \        intSumInt == sum\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5__3xzis.scala:21)\n\tat Problem.main(tmp5__3xzis.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794259
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != sum)\n        val isDifferent2 = (y != sum)\n   \
    \     val isDifferent3 = (z != sum)\n        isInteger && isSum && isDifferent\
    \ && isDifferent2 && isDifferent3\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp70yx661h.scala:22)\n\tat Problem.main(tmp70yx661h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isAllInteger = (isInteger && isSum)\n        val isAllInteger = (isAllInteger\
    \ && isInteger)\n        isAllInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9x9y5hr5.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misAllInteger\e[0m = (isAllInteger\
    \ && isInteger)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misAllInteger is already defined as \e[33mvalue\e[0m \e[35misAllInteger\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659794260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != y)\n        val isDifferent2 = (z != y)\n       \
    \ val isDifferent3 = (x != z)\n        val isDifferent4 = (y != z)\n        val\
    \ isDifferent5 = (x != y)\n        val isDifferent6 = (y != x)\n        val isDifferent7\
    \ = (z != x)\n        val isDifferent8 = (x != z)\n        val isDifferent9 =\
    \ (y != z)\n        val isDifferent10 = (z != y)\n        val isDifferent11 =\
    \ (x != y)\n        val isDifferent12 = (y != x)\n        val isDifferent13 =\
    \ (z != x)\n        val isDifferent14 = (x != z)\n        val isDifferent15 =\
    \ (y != z)\n        val isDifferent16 = (z != y)\n        val isDifferent17 =\
    \ (x != y)\n        val isDifferent18 = (y != x)\n        val isDifferent19 =\
    \ (z != x)\n        val isDifferent20 = (x != z)\n        val isDifferent21 =\
    \ (y != z)\n        val isDifferent22 = (z != y)\n        val isDifferent23 =\
    \ (x != y)\n        val isDifferent24 = (y != x)\n        val isDifferent25 =\
    \ (z != x)\n        val isDifferent26 = (x != z)\n        val isDifferent27 =\
    \ (y != z)\n        val isDifferent28 = (z != y)\n        val isDifferent29 =\
    \ (x != y)\n        val isDifferent30 = (y != x)\n        val isDifferent31 =\
    \ (z != x)\n        val isDifferent32 = (x != z)\n        val isDifferent33 =\
    \ (y != z)\n        val isDifferent34 = (z != y)\n        val isDifferent35 =\
    \ (x != y)\n        val isDifferent36 = (y != x)\n        val isDifferent37 =\
    \ (z != x)\n        val isDifferent38 = (x != z)\n        val isDifferent39 =\
    \ (y != z)\n        val isDifferent40 = (z != y)\n        val isDifferent41 =\
    \ (x != y)\n        val isDifferent42 = (z != x)\n        val isDifferent43 =\
    \ (x != z)\n        val isDifferent44 = (y != z)\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppv95xcj4.scala:60:11 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppv95xcj4.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isEqual = x.toInt ==\
    \ y || y.toInt == z || x.toInt == z\n        isInteger && isEqual\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcqbnwb8c.scala:19)\n\tat Problem.main(tmpcqbnwb8c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794261
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isSum2 = (sum == y)\n        val isSum3 = (sum == z)\n        isInteger\
    \ || isSum || isSum2 || isSum3\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l)\
    \ == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeescqd16.scala:23)\n\tat Problem.main(tmpeescqd16.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt).isInstanceOf[Int]\n        val isSum = (sum.toInt).isInstanceOf[Int]\n\
    \        val isSumOfTwo = (sum.toInt).isInstanceOf[Int]\n        val isSumOfThree\
    \ = (sum.toInt).isInstanceOf[Int]\n        val isSumOfFour = (sum.toInt).isInstanceOf[Int]\n\
    \        val isSumOfFive = (sum.toInt).isInstanceOf[Int]\n        val isSumOfSix\
    \ = (sum.toInt).isInstanceOf[Int]\n        val isSumOfSeven = (sum.toInt).isInstanceOf[Int]\n\
    \        val isSumOfEight = (sum.toInt).isInstanceOf[Int]\n        val isSumOfNine\
    \ = (sum.toInt).isInstanceOf[Int]\n        val isSumOfTen = (sum.toInt).isInstanceOf[Int]\n\
    \        val isSumOfEleven = (sum.toInt).isInstanceOf[Int]\n        val isSumOfTwelve\
    \ = (sum.toInt).isInstanceOf[Int]\n        val isSumOfThirteen = (sum.toInt).isInstanceOf[Int]\n\
    \        val isSumOfFourteen = (sum.toInt).isInstanceOf[Int]\n        val isSumOfFifteen\
    \ = (sum.toInt).isInstanceOf[Int]\n        val isSumOfSixteen = (sum.toInt).isInstanceOf[Int]\n\
    \        val isSumOfSeventeen = (sum.toInt).isInstanceOf[Int]\n        val isSumOfEighteen\
    \ = (sum.toInt).isInstanceOf[Int]\n        val isSumOfNineteen = (sum.toInt).isInstanceOf[Int]\n\
    \        val isSumOfTwenty = (sum.toInt).isInstanceOf[Int]\n        val isSumOfTwentyOne\
    \ = (sum.toInt).isInstanceOf[Int]\n        val isSumOfTwentyTwo = (sum.toInt).isInstanceOf[Int]\n\
    \        val isSumOfTwentyThree = (sum.toInt).isInstanceOf[Int]\n        val isSumOfTwentyFour\
    \ = (sum.toInt).isInstanceOf[Int]\n        val isSumOfTwentyFive = (sum.toInt).isInstanceOf[Int]\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpl_d5y8d2.scala:40:11 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl_d5y8d2.scala:41:5 ---------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794261
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isEqual = sum == x + y +\
    \ z\n        isInteger && isEqual\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbaifmldo.scala:21)\n\tat Problem.main(tmpbaifmldo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794246
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && x == x\
    \ + z) || (x == y + z && x == y + x)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphy6tx0m0.scala:16)\n\tat Problem.main(tmphy6tx0m0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794246
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInt = sum.asInstanceOf[Int] == sum\n        val isInteger = isInt\
    \ && x.asInstanceOf[Int] == x && y.asInstanceOf[Int] == y && z.asInstanceOf[Int]\
    \ == z\n        isInteger && isInt\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl6psgyv0.scala:22)\n\tat Problem.main(tmpl6psgyv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794261
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (y ==\
    \ y + z) && (z == z + x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkm0b0xuu.scala:16)\n\tat Problem.main(tmpkm0b0xuu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794262
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isEqual = x.toInt ==\
    \ y || x.toInt == z || y.toInt == z\n        isInteger && isEqual\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfj80bf8t.scala:19)\n\tat Problem.main(tmpfj80bf8t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794263
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = (x + y + z).toInt\n\
    \        val sum2 = (x * y * z).toInt\n        sum == sum2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl0m_7x9f.scala:22)\n\tat Problem.main(tmpl0m_7x9f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInt = sum.toInt == sum\n        val isInteger = isInt && x.toInt\
    \ == x && y.toInt == y && z.toInt == z\n        val isSum = sum.toInt == sum\n\
    \        val isSumInteger = isSum && x.toInt == x && y.toInt == y && z.toInt ==\
    \ z\n        val isSumSum = sum.toInt == sum\n        val isSumSumInteger = isSumSum\
    \ && x.toInt == x && y.toInt == y && z.toInt == z\n        val isSumSumSum = sum.toInt\
    \ == sum\n        val isSumSumSumInteger = isSumSumSum && x.toInt == x && y.toInt\
    \ == y && z.toInt == z\n        val isSumSumSumSum = sum.toInt == sum\n      \
    \  val isSumSumSumSumInteger = isSumSumSumSum && x.toInt == x && y.toInt == y\
    \ && z.toInt == z\n        val isSumSumSumSumSum = sum.toInt == sum\n        val\
    \ isSumSumSumSumSumInteger = isSumSumSumSumSum && x.toInt == x && y.toInt == y\
    \ && z.toInt == z\n        val isSumSumSumSumSumSum = sum.toInt == sum\n     \
    \   val isSumSumSumSumSumSumInteger = isSumSumSumSumSumSum && x.toInt == x &&\
    \ y.toInt == y && z.toInt == z\n        val isSumSumSumSumSumSumSum = sum.toInt\
    \ == sum\n        val isSumSumSumSumSumSumSumInteger = isSumSumSumSumSumSumSum\
    \ && x.toInt == x && y.toInt == y && z.toInt == z\n        val isSumSumSumSumSumSumSumSum\
    \ = sum.toInt == sum\n        val isSumSumSumSumSumSumSumSumInteger = isSumSumSumSumSumSumSumSum\
    \ && x.toInt == x && y.toInt == y && z.toInt == z\n        val isSumSumSumSumSumSumSumSumSum\
    \ = sum.toInt == sum\n        val isSumSumSumSumSumSumSumSumInteger = isSumSumSumSumSumSumSumSumSum\
    \ && x.toInt == x && y.toInt == y && z.toInt == z\n        val isSumSumSumSumSumSumSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk2nwml_8.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk2nwml_8.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36misSumSumSumSumSumSumSumSumInteger\e[0m = isSumSumSumSumSumSumSumSumSum\
    \ && x.toInt == x && y.toInt == y && z.toInt == z\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumSumSumSumSumSumSumSumInteger is already defined as \e\
    [33mvalue\e[0m \e[35misSumSumSumSumSumSumSumSumInteger\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk2nwml_8.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794264
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt) match {\n            case x if x < 0 => false\n\
    \            case x if x > 0 => true\n            case _ => false\n        }\n\
    \        val isSum = (x + y + z) match {\n            case x if x < 0 => false\n\
    \            case x if x > 0 => true\n            case _ => false\n        }\n\
    \        isInteger && isSum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl4tzntzq.scala:28)\n\tat Problem.main(tmpl4tzntzq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != y)\n        val isDifferent2 = (z != y)\n       \
    \ val isDifferent3 = (x != z)\n        val isDifferent4 = (y != z)\n        isInteger\
    \ || isSum || isDifferent || isDifferent2 || isDifferent3 || isDifferent4\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiyaakih8.scala:24)\n\tat Problem.main(tmpiyaakih8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInt = sum.toInt == sum\n        val isInt = isInt && x.toInt ==\
    \ x && y.toInt == y && z.toInt == z\n        isInt\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1fjgoy7e.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36misInt\e[0m = isInt && x.toInt\
    \ == x && y.toInt == y && z.toInt == z\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659794263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt % 1 == 0)\n        val isSum = (sum == x)\n\
    \        val isDifferent = (x != sum)\n        val isDifferentOrInteger = (x !=\
    \ sum) || (isInteger)\n        val isDifferentOrSum = (x != sum) || (isSum)\n\
    \        val isDifferentOrSumOrInteger = (x != sum) || (isSum) || (isInteger)\n\
    \        val isDifferentOrSumOrIntegerOrDifferent = (x != sum) || (isSum) || (isInteger)\
    \ || (x != x)\n        val isDifferentOrSumOrIntegerOrDifferentOrInteger = (x\
    \ != sum) || (isSum) || (isInteger) || (x != x) || (isInteger)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSum\
    \ = (x != sum) || (isSum) || (isInteger) || (x != x) || (isInteger) || (sum !=\
    \ sum)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrInteger\
    \ = (x != sum) || (isSum) || (isInteger) || (x != x) || (isInteger) || (sum !=\
    \ sum) || (isInteger)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferent\
    \ = (x != sum) || (isSum) || (isInteger) || (x != x) || (isInteger) || (sum !=\
    \ sum) || (isInteger) || (x != x)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrInteger\
    \ = (x != sum) || (isSum) || (isInteger) || (x != x) || (isInteger) || (sum !=\
    \ sum) || (isInteger) || (x != x) || (isInteger)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrIntegerOrSum\
    \ = (x != sum) || (isSum) || (isInteger) || (x != x) || (isInteger) || (sum !=\
    \ sum) || (isInteger) || (x != x) || (isInteger) || (sum != sum) || (isInteger)\n\
    \        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrIntegerOrSumOrInteger\
    \ = (x != sum) || (isSum) || (isInteger) || (x != x) || (isInteger) || (sum !=\
    \ sum) || (isInteger) || (x != x) || (isInteger) || (sum != sum) || (isInteger)\
    \ || (x != x)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwdhn1ll2.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwdhn1ll2.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794265
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y ==\
    \ (x + z) && z == (x + y)) || (x == (x + z) && y == (x + y) && z == (x + z))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw6i63dj4.scala:16)\n\tat Problem.main(tmpw6i63dj4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1 == 0)\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != sum)\n        val isDifferentOrInteger = (x != sum)\
    \ || (x != y)\n        val isDifferentOrSum = (x != sum) || (x != y) || (x !=\
    \ z)\n        val isDifferentOrSumOrInteger = (x != sum) || (x != y) || (x !=\
    \ z) || (x != x)\n        val isDifferentOrSumOrIntegerOrDifferent = (x != sum)\
    \ || (x != y) || (x != z) || (x != x) || (x != y)\n        val isDifferentOrSumOrIntegerOrDifferentOrInteger\
    \ = (x != sum) || (x != y) || (x != z) || (x != x) || (x != y) || (x != z)\n \
    \       val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSum = (x != sum) ||\
    \ (x != y) || (x != z) || (x != x) || (x != y) || (x != z) || (x != x)\n     \
    \   val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrInteger = (x != sum)\
    \ || (x != y) || (x != z) || (x != x) || (x != y) || (x != z) || (x != x) || (x\
    \ != y)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferent\
    \ = (x != sum) || (x != y) || (x != z) || (x != x) || (x != y) || (x != z) ||\
    \ (x != x) || (x != y) || (x != z)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrInteger\
    \ = (x != sum) || (x != y) || (x != z) || (x != x) || (x != y) || (x != z) ||\
    \ (x != x) || (x != y) || (x != z) || (x != x)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrIntegerOrSum\
    \ = (x != sum) || (x != y) || (x != z) || (x != x) || (x != y) || (x != z) ||\
    \ (x != x) || (x != y) || (x != z) || (x != x) || (x != y)\n        val isDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrIntegerOrSumOrInteger\
    \ = (x != sum) || (x != y) || (x != z) || (x != x) || (x != \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8_rmijkd.scala:27:163 --------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36misDifferentOrSumOrIntegerOrDifferentOrIntegerOrSumOrIntegerOrDifferentOrIntegerOrSumOrInteger\e\
    [0m = (x != sum) || (x != y) || (x != z) || (x != x) || (x != \n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                                            \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp8_rmijkd.scala:28:5 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794265
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = (x + y + z).toInt\n\
    \        val num1 = x.toInt\n        val num2 = y.toInt\n        val num3 = z.toInt\n\
    \        if (num1 == sum && num2 == sum && num3 == sum)\n            return true\n\
    \        else\n            return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyw4kzfbd.scala:23)\n\tat Problem.main(tmpyw4kzfbd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isAllIntegers = (isInteger && isSum)\n        val isAllIntegersAndSum\
    \ = (isInteger && isSum)\n        val isAllIntegersAndSumAndNotEqual = (isInteger\
    \ && !isSum)\n        val isAllIntegersAndSumAndNotEqualAndNotIntegers = (!isInteger\
    \ && !isSum)\n        val isAllIntegersAndSumAndNotEqualAndNotIntegersAndNotIntegers\
    \ = (!isInteger && !isSum && !isInteger)\n        val isAllIntegersAndSumAndNotEqualAndNotIntegersAndNotIntegersAndNotIntegers\
    \ = (!isInteger && !isSum && !isInteger && !isInteger)\n        val isAllIntegersAndSumAndNotEqualAndNotIntegersAndNotIntegersAndNotIntegers\
    \ = (!isInteger && !isSum && !isInteger && !isInteger && !isInteger)\n       \
    \ val isAllIntegersAndSumAndNotEqualAndNotIntegersAndNotIntegersAndNotIntegers\
    \ = (!isInteger && !isSum && !isInteger && !isInteger && !isInteger && !isInteger)\n\
    \        val isAllIntegersAndSumAndNotEqualAndNotIntegersAndNotIntegersAndNotIntegers\
    \ = (!isInteger && !isSum && !isInteger && !isInteger && !isInteger && !isInteger\
    \ && !isInteger)\n        val isAllIntegersAndSumAndNotEqualAndNotIntegersAndNotIntegersAndNotIntegers\
    \ = (!isInteger && !isSum && !isInteger && !isInteger && !isInteger && !isInteger\
    \ && !isInteger && !isInteger)\n        val isAllIntegersAndSumAndNotEqualAndNotIntegersAndNotIntegersAndNotIntegers\
    \ = (!isInteger && !isSum && !isInteger && !isInteger && !isInteger && !isInteger\
    \ && !isInteger && !isInteger && !isInteger)\n        val isAllIntegersAndSumAndNotEqualAndNotIntegersAndNotIntegersAndNotIntegers\
    \ = (!isInteger && !isSum && !isInteger && !isInteger && !isInteger && !isInteger\
    \ && !isInteger && !isInteger && !isInteger)\n        val isAllIntegersAndSumAndNotEqualAndNotIntegersAndNotIntegersAndNotIntegers\
    \ = (!isInteger && !isSum && !isInteger && !isInteger && !isInteger && !isInteger\
    \ && !isInteger && !isInteger && !isInteger && !isInteger)\n        val isAllIntegersAndSumAndNotEqualAndNotIntegersAndNotIntegersAndNotIntegers\
    \ = (!isInteger && !isSum && !isInteger \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg8e8srow.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg8e8srow.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36misAllIntegersAndSumAndNotEqualAndNotIntegersAndNotIntegersAndNotIntegers\e\
    [0m = (!isInteger && !isSum && !isInteger && !isInteger && !isInteger)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misAllIntegersAndSumAndNotEqualAndNotIntegersAndNotIntegersAndNotIntegers\
    \ is already defined as \e[33mvalue\e[0m \e[35misAllIntegersAndSumAndNotEqualAndNotIntegersAndNotIntegersAndNotIntegers\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg8e8srow.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36misAllIntegersAndSumAndNotEqualAndNotIntegersAndNotIntegersAndNotIntegers\e\
    [0m = (!isInteger && !isSum && !isInteger && !isInteger && !isInteger && !isInteger)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misAllIntegersAndSumAndNotEqualAndNotIntegersAndNotIntegersAndNotIntegers\
    \ is already defined as \e[33mvalue\e[0m \e[35misAllIntegersAndSumAndNotEqualAndNotIntegersAndNotIntegersAndNotIntegers\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg8e8srow.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36misAllIntegersAndSumAndNotEqualAndNotIntegersAndNotIntegersAndNotIntegers\e\
    [0m = (!isInteger && !isSum && !isInteger && !isInteger && !"
  stdout: ''
  timestamp: 1659794265
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt % 1 == 0)\n        val isEqual = sum == x\
    \ + y + z\n        val isAllInteger = (x % 1 == 0) &&\n                      \
    \      (y % 1 == 0) &&\n                            (z % 1 == 0)\n        isInteger\
    \ || isEqual || isAllInteger\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr1u0o42i.scala:23)\n\tat Problem.main(tmpr1u0o42i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toString.toInt).forall(_.isDigit)\n        val isSum\
    \ = (sum == x.toFloat + y.toFloat + z.toFloat)\n        val isAllDigits = x.toString.toInt\
    \ == y.toString.toInt == z.toString.toInt\n        isInteger && isSum && isAllDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa9g4o3ib.scala:14:45 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36misInteger\e[0m = (sum.toString.toInt).forall(_.isDigit)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        value forall is not a member of Int\n\e\
    [31m\e[31m-- Error: /tmp/tmpa9g4o3ib.scala:16:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misAllDigits\e[0m = x.toString.toInt\
    \ == y.toString.toInt == z.toString.toInt\n\e[31m\e[31m   |\e[0m             \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Boolean and Int cannot be compared with ==\
    \ or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659794267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1 == 0)\n        val isSum = (sum == x)\n    \
    \    val isAll = (x == y) && (y == z)\n        isInteger && isSum && isAll\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpogti1wkg.scala:20)\n\tat Problem.main(tmpogti1wkg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isEqual = (x == y) &&\
    \ (y == z)\n        val isSum = (sum == sum)\n        val isEqualOrSum = (x ==\
    \ y) || (y == z) || (x == z)\n        val isEqualOrSumOrInteger = (isEqual ||\
    \ isSum)\n        val isEqualOrSumOrIntegerOrFloat = (isEqualOrSum || isInteger)\n\
    \        val isEqualOrSumOrIntegerOrFloatOrBool = (isEqualOrSumOrInteger || isFloat)\n\
    \        val isEqualOrSumOrIntegerOrFloatOrBoolOrNull = (isEqualOrSumOrIntegerOrFloat\
    \ || isBool)\n        val isEqualOrSumOrIntegerOrFloatOrBoolOrNullOrUnit = (isEqualOrSumOrIntegerOrFloatOrBoolOrNull\
    \ || x == y)\n        val isEqualOrSumOrIntegerOrFloatOrBoolOrNullOrUnitOrNull\
    \ = (isEqualOrSumOrIntegerOrFloatOrBoolOrNullOrUnit || x == y)\n        val isEqualOrSumOrIntegerOrFloatOrBoolOrNullOrUnitOrNullOrUnit\
    \ = (isEqualOrSumOrIntegerOrFloatOrBoolOrNullOrUnitOrNull || x == y)\n       \
    \ val isEqualOrSumOrIntegerOrFloatOrBoolOrNullOrUnitOrNullOrUnitOrNull = (isEqualOrSumOrIntegerOrFloatOrBoolOrNullOrUnitOrNullOrNull\
    \ || x == y)\n        val isEqualOrSumOrIntegerOrFloatOrBoolOrNullOrUnitOrNullOrUnitOrNull\
    \ = (isEqualOrSumOrIntegerOrFloatOrBoolOrNullOrUnitOrNullOrUnitOrNull || x ==\
    \ y)\n        val isEqualOrSumOrIntegerOrFloatOrBoolOrNullOrUnitOrNullOrUnitOrNullOrUnit\
    \ = (isEqualOrSumOrIntegerOrFloatOrBoolOrNullOrUnitOrNullOrUnitOrNullOrNull ||\
    \ x == y)\n        val isEqualOrSumOrIntegerOrFloatOrBoolOrNullOrUnitOrNullOrUnitOrNullOrUnitOrNull\
    \ = (isEqualOrSumOrIntegerOrFloatOrBoolOrNullOrUnitOrNullOrUnitOrNullOrUnitOrNull\
    \ || x == y)\n        val isEqualOrSumOrIntegerOrFloatOrBoolOrNullOrUnitOrNullOrUnitOrNullOrUnitOrNullOrUnit\
    \ = (isEqualOrSumOrIntegerOrFloatOrBoolOrNullOrUnitOrNullOrUnitOrNullOrUnitOr\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp49e75ln6.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp49e75ln6.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36misEqualOrSumOrIntegerOrFloatOrBoolOrNullOrUnitOrNullOrUnitOrNull\e[0m\
    \ = (isEqualOrSumOrIntegerOrFloatOrBoolOrNullOrUnitOrNullOrUnitOrNull || x ==\
    \ y)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misEqualOrSumOrIntegerOrFloatOrBoolOrNullOrUnitOrNullOrUnitOrNull\
    \ is already defined as \e[33mvalue\e[0m \e[35misEqualOrSumOrIntegerOrFloatOrBoolOrNullOrUnitOrNullOrUnitOrNull\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp49e75ln6.scala:20:75 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36misEqualOrSumOrIntegerOrFloatOrBool\e\
    [0m = (isEqualOrSumOrInteger || isFloat)\n\e[31m\e[31m   |\e[0m              \
    \                                                             ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                      Not found:\
    \ isFloat\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp49e75ln6.scala:21:88\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36misEqualOrSumOrIntegerOrFloatOrBoolOrNull\e[0m = (isEqualOrSumOrIntegerOrFloat\
    \ || isBool)\n\e[31m\e[31m   |\e[0m                                          \
    \                                              ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                                     Not found: isBool\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp49e75ln6.scala:25:80 ----------"
  stdout: ''
  timestamp: 1659794266
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isEqual = (x == y) &&\
    \ (y == z) && (z == sum)\n        isInteger && isEqual\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpozudvmh6.scala:19)\n\tat Problem.main(tmpozudvmh6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794266
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isEqual = (x == y &&\
    \ y == z)\n        isInteger && isEqual\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgs0sb4ms.scala:19)\n\tat Problem.main(tmpgs0sb4ms.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && y == y\
    \ + z && z == z + x) || \n        (x != x + y && y != y + z && z != z + x) ||\
    \ \n        (x != x + y && y != y + z && z != z + x) || \n        (x != x + y\
    \ && y != y + z && z != z + x) || \n        (x != x + y && y != y + z && z !=\
    \ z + x) || \n        (x != x + y && y != y + z && z != z + x) || \n        (x\
    \ != x + y && y != y + z && z != z + x) || \n        (x != x + y && y != y + z\
    \ && z != z + x) || \n        (x != x + y && y != y + z && z != z + x) || \n \
    \       (x != x + y && y != y + z && z != z + x) || \n        (x != x + y && y\
    \ != y + z && z != z + x) || \n        (x != x + y && y != y + z && z != z + x)\
    \ || \n        (x != x + y && y != y + z && z != z + x) || \n        (x != x +\
    \ y && y != y + z && z != z + x) || \n        (x != x + y && y != y + z && z !=\
    \ z + x) || \n        (x != x + y && y != y + z && z != z + x) || \n        (x\
    \ != x + y && y != y + z && z != z + x) || \n        (x != x + y && y != y + z\
    \ && z != z + x) || \n        (x != x + y && y != y + z && z != z + x) || \n \
    \       (x != x + y && y != y + z && z != z + x) || \n        (x != x + y && y\
    \ != y + z && z != z + x) || \n        (x != x + y && y != y + z && z != z + x)\
    \ || \n        (x != x + y && y != y + z && z != z + x) || \n        (x != x +\
    \ y && y != y + z && z != z + x) || \n        (x != x + y && y != y + z && z !=\
    \ z + x) || \n        (x != x + y && y != y + z && z != z + x) || \n        (x\
    \ != x + y && y != y + z && z != z + x) || \n        (x != x + y && y != y + z\
    \ && z != z + x) || \n        (x != x + y && y != y + \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpc51ml1dv.scala:41:31 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        (x != x + y && y != y + \n\e[31m\e[31m   |\e\
    [0m                               ^\e[0m\n\e[31m   |\e[0m                    \
    \           expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = (x + y + z).toInt\n\
    \        (x == sum) || (y == sum) || (z == sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbnlfn8ps.scala:17)\n\tat Problem.main(tmpbnlfn8ps.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794266
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1 == 0)\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != sum)\n        val isDifferent2 = (z != sum)\n   \
    \     val isDifferent3 = (y != sum)\n        isInteger || isSum || isDifferent\
    \ || isDifferent2 || isDifferent3\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp73fua0hp.scala:23)\n\tat Problem.main(tmp73fua0hp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val intSum = math.round(sum)\n        val intSumInt = math.round(intSum)\n\
    \        val intSumIntInt = math.round(intSumInt)\n        val intSumIntIntInt\
    \ = math.round(intSumIntInt)\n        val intSumIntIntIntInt = math.round(intSumIntIntInt)\n\
    \        val intSumIntIntIntIntInt = math.round(intSumIntIntIntIntInt)\n     \
    \   val intSumIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntInt)\n \
    \       val intSumIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsexxpo5e.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsexxpo5e.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mintSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\e[0m = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt is\
    \ already defined as \e[33mvalue\e[0m \e[35mintSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsexxpo5e.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mintSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\e\
    [0m = math.round(intSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mintSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpsexxpo5e.scala:19:47 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mintSumIntIntIntIntInt\e[0m = math.round(intSumIntIntIntIntInt)\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m                        Recursive \e[33mvalue\e[0m \e[35mintSumIntIntIntIntInt\e\
    [0m needs type\n\e[31m "
  stdout: ''
  timestamp: 1659794266
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isEqual = sum == x + y +\
    \ z\n        val isAllInteger = (x % 1 == 0 && y % 1 == 0 && z % 1 == 0)\n   \
    \     val isAllEqual = sum == x + y + z\n        isInteger || isEqual || isAllInteger\
    \ || isAllEqual\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqywpkxdq.scala:22)\n\tat Problem.main(tmpqywpkxdq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isSum = (x == sum) ||\
    \ (y == sum) || (z == sum)\n        isInteger && isSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3l64d277.scala:19)\n\tat Problem.main(tmp3l64d277.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum.asInstanceOf[Int] == sum\n        val isEqual = x.asInstanceOf[Int]\
    \ == y || y.asInstanceOf[Int] == z || z.asInstanceOf[Int] == x\n        isInteger\
    \ && isEqual\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpseoelfyi.scala:19)\n\tat Problem.main(tmpseoelfyi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794266
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isEqual = sum == x + y +\
    \ z\n        val isAllInteger = (x % 1 == 0) &&\n                            \
    \ (y % 1 == 0) &&\n                             (z % 1 == 0)\n        isInteger\
    \ || isEqual || isAllInteger\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd_7j_c1z.scala:23)\n\tat Problem.main(tmpd_7j_c1z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == x+y && x == x+z\
    \ && x == y+z) || (x == y-z && x == y-x && x == z-x)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8wlya_xx.scala:16)\n\tat Problem.main(tmp8wlya_xx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt)\n        val isEqual = sum == isInteger\n\
    \        val isAllInteger = (x % 1 == 0) && (y % 1 == 0) && (z % 1 == 0)\n   \
    \     isEqual && isAllInteger && isInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf83c6h3w.scala:17:35\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        isEqual && isAllInteger\
    \ && isInteger\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    (isInteger :\
    \ Int)\n\e[31m   |\e[0m                                   Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && y == y\
    \ + z && z == z + x) || \n        (x == x + y && y == y - z && z == z - x) ||\
    \ \n        (x == x - y && y == y - z && z == z - x) || \n        (x == x - y\
    \ && y == y + z && z == z + x) || \n        (x == x - y && y == y - z && z ==\
    \ z + x) || \n        (x == x + y && y == y - z && z == z - x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x - y && y == y + z\
    \ && z == z + x) || \n        (x == x - y && y == y - z && z == z - x)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnmz_dqrd.scala:24)\n\tat Problem.main(tmpnmz_dqrd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != y)\n        val isDifferent2 = (y != z)\n       \
    \ val isDifferent3 = (z != x)\n        val isDifferent4 = (x != z)\n        val\
    \ isDifferent5 = (y != x)\n        val isDifferent6 = (z != y)\n        val isDifferent7\
    \ = (x != z)\n        val isDifferent8 = (y != z)\n        val isDifferent9 =\
    \ (z != x)\n        val isDifferent10 = (x != y)\n        val isDifferent11 =\
    \ (y != z)\n        val isDifferent12 = (z != x)\n        val isDifferent13 =\
    \ (x != y)\n        val isDifferent14 = (y != z)\n        val isDifferent15 =\
    \ (z != x)\n        val isDifferent16 = (x != y)\n        val isDifferent17 =\
    \ (y != z)\n        val isDifferent18 = (z != x)\n        val isDifferent19 =\
    \ (x != y)\n        val isDifferent20 = (y != z)\n        val isDifferent21 =\
    \ (z != x)\n        val isDifferent22 = (x != y)\n        val isDifferent23 =\
    \ (y != z)\n        val isDifferent24 = (z != x)\n        val isDifferent25 =\
    \ (x != y)\n        val isDifferent26 = (y != z)\n        val isDifferent27 =\
    \ (z != x)\n        val isDifferent28 = (x != y)\n        val isDifferent29 =\
    \ (y != z)\n        val isDifferent30 = (z != x)\n        val isDifferent31 =\
    \ (x != y)\n        val isDifferent32 = (y != z)\n        val isDifferent33 =\
    \ (z != x)\n        val isDifferent34 = (x != y)\n        val isDifferent35 =\
    \ (y != z)\n        val isDifferent36 = (z != x)\n        val isDifferent37 =\
    \ (x != y)\n        val isDifferent38 = (y != z)\n        val isDifferent39 =\
    \ (z != x)\n        val isDifferent40 = (x != y)\n        val isDifferent41 =\
    \ (y != z)\n        val isDifferent42 = (z != x)\n        val isDifferent43 =\
    \ (x != y)\n        val isDifferent44 = (y != z)\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp235xhqb1.scala:60:11 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp235xhqb1.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794268
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isEqual = sum == x + y +\
    \ z\n        isInteger && isEqual\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbaifmldo.scala:21)\n\tat Problem.main(tmpbaifmldo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794246
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == y + z) || (x ==\
    \ y - z) || (x == z + y)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzd4c_g02.scala:18)\n\tat Problem.main(tmpzd4c_g02.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794269
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isSum = (x == sum) ||\
    \ (y == sum) || (z == sum)\n        isInteger && isSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3l64d277.scala:19)\n\tat Problem.main(tmp3l64d277.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && x == x\
    \ + z) || (x == y + z && x == y + x) || (y == z && y == x + x) || (y == z && y\
    \ == y + x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprtf3tkw3.scala:16)\n\tat Problem.main(tmprtf3tkw3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSumInteger = (sum.toInt\
    \ % 1) == 0\n        isInteger && isSumInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3trmdkbd.scala:21)\n\tat Problem.main(tmp3trmdkbd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum.toString.toInt\n        val isSum = sum.toString.toDouble\n\
    \        val isSumOfOthers = isSum - x + y - z\n        val isSumOfOthersInteger\
    \ = isSumOfOthers.toString.toInt\n        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n\
    \        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n    \
    \    val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n        val\
    \ isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n        val isSumOfOthersInteger\
    \ = isSumOfOthersInteger.toString.toInt\n        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n\
    \        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n    \
    \    val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n        val\
    \ isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n        val isSumOfOthersInteger\
    \ = isSumOfOthersInteger.toString.toInt\n        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n\
    \        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n    \
    \    val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n        val\
    \ isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n        val isSumOfOthersInteger\
    \ = isSumOfOthersInteger.toString.toInt\n        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n\
    \        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n    \
    \    val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n        val\
    \ isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n        val isSumOfOthersInteger\
    \ = isSumOfOthersInteger.toString.toInt\n        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n\
    \        val isSumOfOthersInteger = isSumOfOthersInteger.toString.toInt\n    \
    \    val isSumOfOthersInteger = is\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptgj54m5s.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36misSumOfOthersInteger\e[0m\
    \ = isSumOfOthersInteger.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumOfOthersInteger is already defined as \e[33mvalue\e[0m\
    \ \e[35misSumOfOthersInteger\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptgj54m5s.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misSumOfOthersInteger\e[0m\
    \ = isSumOfOthersInteger.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumOfOthersInteger is already defined as \e[33mvalue\e[0m\
    \ \e[35misSumOfOthersInteger\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptgj54m5s.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misSumOfOthersInteger\e[0m\
    \ = isSumOfOthersInteger.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumOfOthersInteger is already defined as \e[33mvalue\e[0m\
    \ \e[35misSumOfOthersInteger\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptgj54m5s.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misSumOfOthersInteger\e[0m\
    \ = isSumOfOthersInteger.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumOfOthersInteger is already defined as \e[33mvalue\e[0m\
    \ \e[35misSumOfOthersInteger\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definiti"
  stdout: ''
  timestamp: 1659794270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInt = sum.toString.toInt == sum\n        val isInteger = isInt\
    \ && sum.toString.toInt == sum\n        val isInt = isInt && x.toString.toInt\
    \ == x && y.toString.toInt == y && z.toString.toInt == z\n        val isInteger\
    \ = isInteger && x.toString.toInt == x && y.toString.toInt == y && z.toString.toInt\
    \ == z\n        val isInteger = isInteger && x.toString.toInt == x && y.toString.toInt\
    \ == y && z.toString.toInt == z\n        val isInteger = isInteger && x.toString.toInt\
    \ == x && y.toString.toInt == y && z.toString.toInt == z\n        val isInteger\
    \ = isInteger && x.toString.toInt == x && y.toString.toInt == y && z.toString.toInt\
    \ == z\n        val isInteger = isInteger && x.toString.toInt == x && y.toString.toInt\
    \ == y && z.toString.toInt == z\n        val isInteger = isInteger && x.toString.toInt\
    \ == x && y.toString.toInt == y && z.toString.toInt == z\n        val isInteger\
    \ = isInteger && x.toString.toInt == x && y.toString.toInt == y && z.toString.toInt\
    \ == z\n        val isInteger = isInteger && x.toString.toInt == x && y.toString.toInt\
    \ == y && z.toString.toInt == z\n        val isInteger = isInteger && x.toString.toInt\
    \ == x && y.toString.toInt == y && z.toString.toInt == z\n        val isInteger\
    \ = isInteger && x.toString.toInt == x && y.toString.toInt == y && z.toString.toInt\
    \ == z\n        val isInteger = isInteger && x.toString.toInt == x && y.toString.toInt\
    \ == y && z.toString.toInt == z\n        val isInteger = isInteger && x.toString.toInt\
    \ == x && y.toString.toInt == y && z.toString.toInt == z\n        val isInteger\
    \ = isInteger && x.toString.toInt == x && y.toString.toInt == y && z.toString.toInt\
    \ == z\n        val isInteger = isInteger && x.toString.toInt == x && y.toString.toInt\
    \ == y && z.toString.to\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm61acl5s.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misInt\e[0m = isInt && x.toString.toInt\
    \ == x && y.toString.toInt == y && z.toString.toInt == z\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpm61acl5s.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36misInteger\e[0m = isInteger && x.toString.toInt\
    \ == x && y.toString.toInt == y && z.toString.toInt == z\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misInteger is already defined as \e[33mvalue\e[0m \e[35misInteger\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpm61acl5s.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36misInteger\e[0m = isInteger && x.toString.toInt\
    \ == x && y.toString.toInt == y && z.toString.toInt == z\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misInteger is already defined as \e[33mvalue\e[0m \e[35misInteger\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpm61acl5s.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36misInteger\e[0m = isInteger && x.toString.toInt\
    \ == x && y.toString.toInt == y && z.toString.toInt == z\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e"
  stdout: ''
  timestamp: 1659794271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val intSum = math.round(sum)\n        val intSum2 = math.round(sum *\
    \ 2)\n        val intSum3 = math.round(sum * 3)\n        val intSum4 = math.round(sum\
    \ * 4)\n        val intSum5 = math.round(sum * 5)\n        val intSum6 = math.round(sum\
    \ * 6)\n        val intSum7 = math.round(sum * 7)\n        val intSum8 = math.round(sum\
    \ * 8)\n        val intSum9 = math.round(sum * 9)\n        val intSum10 = math.round(sum\
    \ * 10)\n        val intSum11 = math.round(sum * 11)\n        val intSum12 = math.round(sum\
    \ * 12)\n        val intSum13 = math.round(sum * 13)\n        val intSum14 = math.round(sum\
    \ * 14)\n        val intSum15 = math.round(sum * 15)\n        val intSum16 = math.round(sum\
    \ * 16)\n        val intSum17 = math.round(sum * 17)\n        val intSum18 = math.round(sum\
    \ * 18)\n        val intSum19 = math.round(sum * 19)\n        val intSum20 = math.round(sum\
    \ * 20)\n        val intSum21 = math.round(sum * 21)\n        val intSum22 = math.round(sum\
    \ * 22)\n        val intSum23 = math.round(sum * 23)\n        val intSum24 = math.round(sum\
    \ * 24)\n        val intSum25 = math.round(sum * 25)\n        val intSum26 = math.round(sum\
    \ * 26)\n        val intSum27 = math.round(sum * 27)\n        val intSum28 = math.round(sum\
    \ * 28)\n        val intSum29 = math.round(sum * 29)\n        val intSum30 = math.round(sum\
    \ * 30)\n        val intSum31 = math.round(sum * 31)\n        val intSum32 = math.round(sum\
    \ * 32)\n        val intSum33 = math.round(sum * 33)\n        val intSum34 = math.round(sum\
    \ * 34)\n        val intSum35 = math.round(sum * 35)\n        val intSum36 = math.round(sum\
    \ * 36)\n        val intSum37 = math.round(sum * 37)\n        val intSum38 = math.round(sum\
    \ * 38)\n        val intSum39 = math.round(sum * 39)\n        val intSum40 = math.round(sum\
    \ * 40)\n        val intSum41 = math.round(sum * 41)\n        val intSum42 = math.round(sum\
    \ * 42)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjud51db5.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = (x + y + z).asInstanceOf[Int]\n\
    \        val xy = x.asInstanceOf[Int] * y.asInstanceOf[Int]\n        val xz =\
    \ x.asInstanceOf[Int] * z.asInstanceOf[Int]\n        val yz = y.asInstanceOf[Int]\
    \ * z.asInstanceOf[Int]\n        (xy == sum) && (xz == sum) && (yz == sum)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcgpjpeuo.scala:20)\n\tat Problem.main(tmpcgpjpeuo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isAllInteger = (isInteger && isSum)\n        isAllInteger\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpui99xta2.scala:20)\n\tat Problem.main(tmpui99xta2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isAllInteger = (isInteger && isSum)\n        val isAllIntegerOrZero =\
    \ (isInteger && isSum) || (isInteger && x == 0)\n        val isAllIntegerOrNegative\
    \ = (isInteger && isSum) || (isInteger && x < 0)\n        val isAllIntegerOrNegativeOrZero\
    \ = (isInteger && isSum) || (isInteger && x < 0) || (isInteger && x == 0)\n  \
    \      val isAllIntegerOrZeroOrNegative = (isInteger && isSum) || (isInteger &&\
    \ x == 0) || (isInteger && x < 0)\n        val isAllIntegerOrZeroOrNegativeOrZero\
    \ = (isInteger && isSum) || (isInteger && x == 0) || (isInteger && x < 0) || (isInteger\
    \ && x == 0)\n        val isAllIntegerOrZeroOrNegativeOrZeroOrNegative = (isInteger\
    \ && isSum) || (isInteger && x == 0) || (isInteger && x < 0) || (isInteger &&\
    \ x == 0) || (isInteger && x < 0)\n        val isAllIntegerOrZeroOrNegativeOrZeroOrNegativeOrZero\
    \ = (isInteger && isSum) || (isInteger && x == 0) || (isInteger && x < 0) || (isInteger\
    \ && x == 0) || (isInteger && x < 0) || (isInteger && x == 0)\n        val isAllIntegerOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegative\
    \ = (isInteger && isSum) || (isInteger && x == 0) || (isInteger && x < 0) || (isInteger\
    \ && x == 0) || (isInteger && x < 0) || (isInteger && x == 0) || (isInteger &&\
    \ x < 0)\n        val isAllIntegerOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero\
    \ = (isInteger && isSum) || (isInteger && x == 0) || (isInteger && x < 0) || (isInteger\
    \ && x == 0) || (isInteger && x < 0) || (isInteger && x == 0) || (isInteger &&\
    \ x < 0) || (isInteger && x == 0)\n        val isAllIntegerOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegative\
    \ = (isInteger && isSum) || (isInteger && x == 0) || (isInteger && x < 0) || (isInteger\
    \ && x == 0) || (isInteger && x < 0) || (isInteger && x == 0) || (isInteger &&\
    \ x < 0) || (isInteger && x == 0) || (isInteger && x < 0)\n        val isAllIntegerOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero\
    \ = (isInteger && isSum) || (isInteger && x == 0) || (isInteger && \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpn_3xpdh8.scala:27:159 --------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36misAllIntegerOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero\e\
    [0m = (isInteger && isSum) || (isInteger && x == \e[31m0\e[0m) || (isInteger &&\
    \ \n\e[31m\e[31m   |\e[0m                                                    \
    \                                                                            \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn_3xpdh8.scala:28:5 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt % 1 == 0)\n        val isEqual = sum == x\
    \ + y + z\n        val isAllInteger = (x % 1 == 0) &&\n                      \
    \     (y % 1 == 0) &&\n                           (z % 1 == 0)\n        isInteger\
    \ || isEqual || isAllInteger\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprgwq50oc.scala:23)\n\tat Problem.main(tmprgwq50oc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != sum)\n        val isDifferent2 = (y != sum)\n   \
    \     val isDifferent3 = (z != sum)\n        isInteger || isSum || isDifferent\
    \ || isDifferent2 || isDifferent3\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbgtnyvk.scala:23)\n\tat Problem.main(tmpzbgtnyvk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt % 1 == 0)\n        val isSum = (sum == x)\n\
    \        val isDifferent = (x != y)\n        val isDifferent2 = (z != y)\n   \
    \     val isDifferent3 = (x != z)\n        val isDifferent4 = (y != z)\n     \
    \   val isDifferent5 = (x != y)\n        val isDifferent6 = (y != x)\n       \
    \ val isDifferent7 = (z != x)\n        val isDifferent8 = (x != z)\n        val\
    \ isDifferent9 = (y != z)\n        val isDifferent10 = (z != y)\n        val isDifferent11\
    \ = (x != y)\n        val isDifferent12 = (y != x)\n        val isDifferent13\
    \ = (z != x)\n        val isDifferent14 = (x != z)\n        val isDifferent15\
    \ = (y != z)\n        val isDifferent16 = (z != y)\n        val isDifferent17\
    \ = (x != y)\n        val isDifferent18 = (y != x)\n        val isDifferent19\
    \ = (z != x)\n        val isDifferent20 = (x != z)\n        val isDifferent21\
    \ = (y != z)\n        val isDifferent22 = (z != y)\n        val isDifferent23\
    \ = (x != y)\n        val isDifferent24 = (y != x)\n        val isDifferent25\
    \ = (z != x)\n        val isDifferent26 = (x != z)\n        val isDifferent27\
    \ = (y != z)\n        val isDifferent28 = (z != y)\n        val isDifferent29\
    \ = (x != y)\n        val isDifferent30 = (y != x)\n        val isDifferent31\
    \ = (z != x)\n        val isDifferent32 = (x != z)\n        val isDifferent33\
    \ = (y != z)\n        val isDifferent34 = (z != y)\n        val isDifferent35\
    \ = (x != y)\n        val isDifferent36 = (y != x)\n        val isDifferent37\
    \ = (z != x)\n        val isDifferent38 = (x != z)\n        val isDifferent39\
    \ = (y != z)\n        val isDifferent40 = (z != y)\n        val isDifferent41\
    \ = (x != y)\n        val isDifferent42 = (z != x)\n        val isDifferent43\
    \ = (x != z)\n        val isDifferent44 = (y != z)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf8ruqalb.scala:61:5\
    \ ---------------------\e[0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum.toString.toInt\n        val isSum = sum.toString.toInt\n\
    \        val isSumOfTwo = sum.toString.toInt\n        val isSumOfThree = sum.toString.toInt\n\
    \        val isSumOfThreeAndTwo = sum.toString.toInt\n        val isSumOfThreeAndTwoAndOne\
    \ = sum.toString.toInt\n        val isSumOfThreeAndTwoAndOneAndZero = sum.toString.toInt\n\
    \        val isSumOfThreeAndTwoAndOneAndZeroAndOne = sum.toString.toInt\n    \
    \    val isSumOfThreeAndTwoAndOneAndZeroAndOneAndTwo = sum.toString.toInt\n  \
    \      val isSumOfThreeAndTwoAndOneAndZeroAndOneAndTwoAndThree = sum.toString.toInt\n\
    \        val isSumOfThreeAndTwoAndOneAndZeroAndOneAndTwoAndThreeAndFour = sum.toString.toInt\n\
    \        val isSumOfThreeAndTwoAndOneAndZeroAndOneAndTwoAndThreeAndFourAndFive\
    \ = sum.toString.toInt\n        val isSumOfThreeAndTwoAndOneAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSix\
    \ = sum.toString.toInt\n        val isSumOfThreeAndTwoAndOneAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven\
    \ = sum.toString.toInt\n        val isSumOfThreeAndTwoAndOneAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEight\
    \ = sum.toString.toInt\n        val isSumOfThreeAndTwoAndOneAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNine\
    \ = sum.toString.toInt\n        val isSumOfThreeAndTwoAndOneAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTen\
    \ = sum.toString.toInt\n        val isSumOfThreeAndTwoAndOneAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTenAndEleven\
    \ = sum.toString.toInt\n        val isSumOfThreeAndTwoAndOneAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTenAndEleven\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvk1t0g2c.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpvk1t0g2c.scala:33:5 ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != y)\n        val isNotDifferent = (x != z)\n     \
    \   val isNotInteger = (y != z)\n        val isNotSum = (y != x)\n        isInteger\
    \ || isDifferent || isNotDifferent || isNotInteger || isSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzf8gobt9.scala:24)\n\tat Problem.main(tmpzf8gobt9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794272
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val intSum = math.round(sum)\n        if (intSum == sum) {\n        \
    \    true\n        } else {\n            false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeo0t55ww.scala:24)\n\tat Problem.main(tmpeo0t55ww.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794261
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isEqual = sum == x + y +\
    \ z\n        val isAllInteger = (x % 1 == 0) && (y % 1 == 0) && (z % 1 == 0)\n\
    \        isInteger || isEqual || isAllInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw71u5neq.scala:21)\n\tat Problem.main(tmpw71u5neq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != y)\n        val isDifferent2 = (z != y)\n       \
    \ val isDifferent3 = (x != z)\n        val isDifferent4 = (y != z)\n        val\
    \ isDifferent5 = (x != y)\n        val isDifferent6 = (y != x)\n        val isDifferent7\
    \ = (z != x)\n        val isDifferent8 = (x != z)\n        val isDifferent9 =\
    \ (y != z)\n        val isDifferent10 = (z != y)\n        val isDifferent11 =\
    \ (x != y)\n        val isDifferent12 = (y != x)\n        val isDifferent13 =\
    \ (z != x)\n        val isDifferent14 = (x != z)\n        val isDifferent15 =\
    \ (y != z)\n        val isDifferent16 = (z != y)\n        val isDifferent17 =\
    \ (x != y)\n        val isDifferent18 = (y != x)\n        val isDifferent19 =\
    \ (z != x)\n        val isDifferent20 = (x != z)\n        val isDifferent21 =\
    \ (y != z)\n        val isDifferent22 = (z != y)\n        val isDifferent23 =\
    \ (x != y)\n        val isDifferent24 = (y != x)\n        val isDifferent25 =\
    \ (z != x)\n        val isDifferent26 = (x != z)\n        val isDifferent27 =\
    \ (y != z)\n        val isDifferent28 = (z != y)\n        val isDifferent29 =\
    \ (x != y)\n        val isDifferent30 = (y != x)\n        val isDifferent31 =\
    \ (z != x)\n        val isDifferent32 = (x != z)\n        val isDifferent33 =\
    \ (y != z)\n        val isDifferent34 = (z != y)\n        val isDifferent35 =\
    \ (x != y)\n        val isDifferent36 = (y != x)\n        val isDifferent37 =\
    \ (z != x)\n        val isDifferent38 = (x != z)\n        val isDifferent39 =\
    \ (y != z)\n        val isDifferent40 = (z != y)\n        val isDifferent41 =\
    \ (x != y)\n        val isDifferent42 = (z != x)\n        val isDifferent43 =\
    \ (x != z)\n        val isDifferent44 = (y != z)\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppv95xcj4.scala:60:11 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppv95xcj4.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isAllInteger = (isInteger && isSum)\n        val isAllInteger = (isInteger\
    \ && isSum)\n        val isAllInteger = (isInteger && isSum)\n        val isAllInteger\
    \ = (isInteger && isSum)\n        val isAllInteger = (isInteger && isSum)\n  \
    \      val isAllInteger = (isInteger && isSum)\n        val isAllInteger = (isInteger\
    \ && isSum)\n        val isAllInteger = (isInteger && isSum)\n        val isAllInteger\
    \ = (isInteger && isSum)\n        val isAllInteger = (isInteger && isSum)\n  \
    \      val isAllInteger = (isInteger && isSum)\n        val isAllInteger = (isInteger\
    \ && isSum)\n        val isAllInteger = (isInteger && isSum)\n        val isAllInteger\
    \ = (isInteger && isSum)\n        val isAllInteger = (isInteger && isSum)\n  \
    \      val isAllInteger = (isInteger && isSum)\n        val isAllInteger = (isInteger\
    \ && isSum)\n        val isAllInteger = (isInteger && isSum)\n        val isAllInteger\
    \ = (isInteger && isSum)\n        val isAllInteger = (isInteger && isSum)\n  \
    \      val isAllInteger = (isInteger && isSum)\n        val isAllInteger = (isInteger\
    \ && isSum)\n        val isAllInteger = (isInteger && isSum)\n        val isAllInteger\
    \ = (isInteger && isSum)\n        val isAllInteger = (isInteger && isSum)\n  \
    \      val isAllInteger = (isInteger && isSum)\n        val isAllInteger = (isInteger\
    \ && isSum)\n        val isAllInteger = (isInteger && isSum)\n        val isAllInteger\
    \ = (isInteger && isSum)\n        val isAllInteger = (isInteger && isSum)\n  \
    \      val isAllInteger = (isInteger && isSum)\n        val isAllInteger = (isInteger\
    \ && isSum)\n        val isAllInteger = (isInteger && isSum)\n        val isAllInteger\
    \ = (isInteger && isSum)\n        val isAllInteger = (isInteger \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_qkq7d2u.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_qkq7d2u.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36misAllInteger\e[0m = (isInteger && isSum)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0misAllInteger is\
    \ already defined as \e[33mvalue\e[0m \e[35misAllInteger\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_qkq7d2u.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36misAllInteger\e[0m = (isInteger && isSum)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0misAllInteger is\
    \ already defined as \e[33mvalue\e[0m \e[35misAllInteger\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_qkq7d2u.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36misAllInteger\e[0m = (isInteger && isSum)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0misAllInteger is\
    \ already defined as \e[33mvalue\e[0m \e[35misAllInteger\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_qkq7d2u.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36misAllInteger\e[0m = (isInteger && isSum)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0misAllInteger is\
    \ already defined as \e[33mvalue\e[0m \e[35misAllInteger\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_qkq7d2u.sc"
  stdout: ''
  timestamp: 1659794246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = sum.toString.toInt\n        val isSum = sum == (x + y\
    \ + z)\n        val isAllInteger = isInteger && isSum\n        val isAllInteger\
    \ = isAllInteger && isInteger.toDouble == sum\n        isAllInteger\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_c5etxgo.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misAllInteger\e[0m = isAllInteger\
    \ && isInteger.toDouble == sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misAllInteger is already defined as \e[33mvalue\e[0m \e[35misAllInteger\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp_c5etxgo.scala:16:37 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m        \e[33mval\e[0m \e[36misAllInteger\e[0m = isInteger && isSum\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           value && is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659794272
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == y || x == z) &&\
    \ x.toInt == y.toInt && x.toInt == z.toInt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp00zz4dh4.scala:16)\n\tat Problem.main(tmp00zz4dh4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794272
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isSum2 = (sum == y)\n        val isSum3 = (sum == z)\n        isInteger\
    \ || isSum || isSum2 || isSum3\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l)\
    \ == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeescqd16.scala:23)\n\tat Problem.main(tmpeescqd16.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794261
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isEqual = (x == sum)\
    \ || (y == sum) || (z == sum)\n        isInteger && isEqual\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzgiplvj2.scala:19)\n\tat Problem.main(tmpzgiplvj2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != sum)\n        val isDifferent2 = (z != sum)\n   \
    \     val isDifferent3 = (y != sum)\n        isInteger || isSum or isDifferent\
    \ || isDifferent2 or isDifferent3\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8_25m_v0.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        isInteger || isSum or isDifferent || isDifferent2\
    \ or isDifferent3\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        value or is not a member of Boolean\n1 error found\n"
  stdout: ''
  timestamp: 1659794271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt % 1 == 0)\n        val isEqual = sum == x\
    \ + y + z\n        val isAllIntegers = (x.toInt == y.toInt == z.toInt)\n     \
    \   isInteger && isEqual && isAllIntegers\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppumok1u9.scala:16:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misAllIntegers\e[0m = (x.toInt\
    \ == y.toInt == z.toInt)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Boolean and Int cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659794272
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val intSum = math.round(sum)\n        intSum == sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9rzrmfoy.scala:20)\n\tat Problem.main(tmp9rzrmfoy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794272
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt % 1 == 0)\n        val isEqual = sum == x\
    \ + y + z\n        isInteger && isEqual\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxpyekh7p.scala:20)\n\tat Problem.main(tmpxpyekh7p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794272
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt % 1 == 0)\n        val isSum = (sum == x)\n\
    \        val isAllInteger = (isInteger && isSum)\n        val isAllFloat = (isInteger\
    \ && isSum)\n        isAllFloat || isAllInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_wn287k5.scala:21)\n\tat Problem.main(tmp_wn287k5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794272
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt) match {\n            case x if x < 0 || x\
    \ > Integer.MAX_VALUE || y < 0 || y > Integer.MAX_VALUE || z < 0 || z > Integer.MAX_VALUE\
    \ => false\n            case x if x == Integer.MIN_VALUE && y == Integer.MIN_VALUE\
    \ && z == Integer.MIN_VALUE => true\n            case x if x == Integer.MIN_VALUE\
    \ && y == Integer.MIN_VALUE && z != Integer.MIN_VALUE => false\n            case\
    \ x if x == Integer.MIN_VALUE && y != Integer.MIN_VALUE && z == Integer.MIN_VALUE\
    \ => false\n            case x if x == Integer.MIN_VALUE && y != Integer.MIN_VALUE\
    \ && z != Integer.MIN_VALUE => true\n            case x if x == Integer.MIN_VALUE\
    \ && y != Integer.MIN_VALUE && z != Integer.MIN_VALUE => false\n            case\
    \ x if x == Integer.MIN_VALUE && y != Integer.MIN_VALUE => true\n            case\
    \ x if x == Integer.MIN_VALUE && y != Integer.MIN_VALUE => false\n           \
    \ case x if x == Integer.MIN_VALUE => true\n            case x if x == Integer.MIN_VALUE\
    \ => false\n            case x if y != Integer.MIN_VALUE => true\n           \
    \ case x if y != Integer.MIN_VALUE => false\n            case x if z != Integer.MIN_VALUE\
    \ => true\n            case x if z != Integer.MIN_VALUE => false\n           \
    \ case x => true\n            case _ => false\n        }\n        isInteger\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuk45uy5u.scala:36)\n\tat Problem.main(tmpuk45uy5u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794272
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt % 1 == 0)\n        val isEqual = sum == x\
    \ + y + z\n        isInteger && isEqual\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxpyekh7p.scala:20)\n\tat Problem.main(tmpxpyekh7p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInt = sum.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n        val isInt = isInt.toString.toInt\n\
    \        val isInt = isInt.toString.toInt\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcm3a_bma.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36misInt\e[0m = isInt.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcm3a_bma.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36misInt\e[0m = isInt.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcm3a_bma.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36misInt\e[0m = isInt.toString.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcm3a_bma.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36misInt\e[0m = isInt.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcm3a_bma.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36misInt\e[0m = isInt.toString.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded met"
  stdout: ''
  timestamp: 1659794256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y ==\
    \ (x + z) && z == (x + y)) || (x == (x + z) && y == (x + y) && z == (x + z))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw6i63dj4.scala:16)\n\tat Problem.main(tmpw6i63dj4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794265
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt == sum)\n        val isEqual = x != y && y\
    \ != z && z != sum\n        isInteger && isEqual\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3lue5tjm.scala:21)\n\tat Problem.main(tmp3lue5tjm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isEqual = sum == x + y +\
    \ z\n        val isAllInteger = (x % 1 == 0) &&\n                            \
    \ (y % 1 == 0) &&\n                             (z % 1 == 0)\n        val isAllEqual\
    \ = sum == x + y + z\n        val isAllIntegerAndEqual = sum == x + y + z && isEqual\n\
    \        val isAllIntegerAndNotEqual = sum == x + y + z && isNotEqual\n      \
    \  val isAllIntegerAndAllEqual = sum == x + y + z && isAllEqual\n        val isAllIntegerAndAllNotEqual\
    \ = sum == x + y + z && isAllNotEqual\n        val isAllIntegerAndAllIntegerAndEqual\
    \ = sum == x + y + z && isAllIntegerAndEqual\n        val isAllIntegerAndAllIntegerAndNotEqual\
    \ = sum == x + y + z && isAllIntegerAndNotEqual\n        val isAllIntegerAndAllIntegerAndAllEqual\
    \ = sum == x + y + z && isAllIntegerAndAllEqual\n        val isAllIntegerAndAllIntegerAndAllNotEqual\
    \ = sum == x + y + z && isAllIntegerAndAllNotEqual\n        val isAllIntegerAndAllIntegerAndAllIntegerAndEqual\
    \ = sum == x + y + z && isAllIntegerAndAllIntegerAndEqual\n        val isAllIntegerAndAllIntegerAndAllIntegerAndNotEqual\
    \ = sum == x + y + z && isAllIntegerAndAllIntegerAndNotEqual\n        val isAllIntegerAndAllIntegerAndAllIntegerAndAllEqual\
    \ = sum == x + y + z && isAllIntegerAndAllIntegerAndAllEqual\n        val isAllIntegerAndAllIntegerAndAllIntegerAndAllNotEqual\
    \ = sum == x + y + z && isAllIntegerAndAllIntegerAndAllNotEqual\n        val isAllIntegerAndAllIntegerAndAllIntegerAndAllIntegerAndEqual\
    \ = sum == x + y + z && isAllIntegerAndAllIntegerAndAllIntegerAndEqual\n     \
    \   val isAllIntegerAndAllIntegerAndAllIntegerAndAllIntegerAndNotEqual = sum ==\
    \ x + y + z && isAllIntegerAndAllIntegerAndAllIntegerAndNotEqual\n        val\
    \ isAllIntegerAndAllIntegerAndAllIntegerAndAllIntegerAndAllEqual = sum == x +\
    \ y + z && isAllIntegerAndAllIntegerAndAllIntegerAndAllEqual\n        val isAllIntegerAndAllIntegerAndAllIntegerAndAllIntegerAndAllNotEqual\
    \ = sum == x + y + z && isAllIntegerAndAllIntegerAndAllInteger\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfo7xfbpn.scala:21:58 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misAllIntegerAndNotEqual\e\
    [0m = sum == x + y + z && isNotEqual\n\e[31m\e[31m   |\e[0m                  \
    \                                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                               Not found: isNotEqual\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfo7xfbpn.scala:23:61 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misAllIntegerAndAllNotEqual\e\
    [0m = sum == x + y + z && isAllNotEqual\n\e[31m\e[31m   |\e[0m               \
    \                                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                Not found: isAllNotEqual\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfo7xfbpn.scala:35:100\
    \ -----------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e\
    [36misAllIntegerAndAllIntegerAndAllIntegerAndAllIntegerAndAllNotEqual\e[0m = sum\
    \ == x + y + z && isAllIntegerAndAllIntegerAndAllInteger\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                       Not found: isAllIntegerAndAllIntegerAndAllInteger\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfo7xfbpn.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794272
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSumInteger = (sum.toInt\
    \ % 1) == 0\n        isInteger && isSumInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3trmdkbd.scala:21)\n\tat Problem.main(tmp3trmdkbd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum.toInt).isInstanceOf[Int]\n        val isSum = (sum.toInt).isInstanceOf[Int]\n\
    \        val isEqual = sum == x + y + z\n        val isEqual2 = sum == x + y +\
    \ z.toInt\n        val isEqual3 = sum == x + y + z.toFloat\n        val isEqual4\
    \ = sum == x + y + z.toDouble\n        val isEqual5 = sum == x + y + z.toLong\n\
    \        val isEqual6 = sum == x + y + z.toShort\n        val isEqual7 = sum ==\
    \ x + y + z.toByte\n        val isEqual8 = sum == x + y + z.toChar\n        val\
    \ isEqual9 = sum == x + y + z.toBoolean\n        val isEqual10 = sum == x + y\
    \ + z.toByte\n        val isEqual11 = sum == x + y + z.toShort\n        val isEqual12\
    \ = sum == x + y + z.toInt\n        val isEqual13 = sum == x + y + z.toLong\n\
    \        val isEqual14 = sum == x + y + z.toFloat\n        val isEqual15 = sum\
    \ == x + y + z.toDouble\n        val isEqual16 = sum == x + y + z.toChar\n   \
    \     val isEqual17 = sum == x + y + z.toBoolean\n        val isEqual18 = sum\
    \ == x + y + z.toByte\n        val isEqual19 = sum == x + y + z.toShort\n    \
    \    val isEqual20 = sum == x + y + z.toInt\n        val isEqual21 = sum == x\
    \ + y + z.toLong\n        val isEqual22 = sum == x + y + z.toFloat\n        val\
    \ isEqual23 = sum == x + y + z.toDouble\n        val isEqual24 = sum == x + y\
    \ + z.toChar\n        val isEqual25 = sum == x + y + z.toBoolean\n        val\
    \ isEqual26 = sum == x + y + z.toByte\n        val isEqual27 = sum == x + y +\
    \ z.toShort\n        val isEqual28 = sum == x + y + z.toInt\n        val isEqual29\
    \ = sum == x + y + z.toLong\n        val isEqual30 = sum == x + y + z.toFloat\n\
    \        val isEqual31 = sum == x + y + z.toDouble\n        val isEqual32 = sum\
    \ == x + y + z.toChar\n        val isEqual33 = sum == x + y + z.toBoolean\n  \
    \      val isEqual34 = sum == x + y + z.toByte\n        val isEqual35 = sum ==\
    \ x + y + \n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjqgpdcgq.scala:50:38 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36misEqual35\e[0m = sum ==\
    \ x + y + \n\e[31m\e[31m   |\e[0m                                      ^\e[0m\n\
    \e[31m   |\e[0m                                      expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjqgpdcgq.scala:24:40\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36misEqual9\e[0m = sum == x + y + z.toBoolean\n\e[31m\e[31m   |\e[0m        \
    \                              ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   value toBoolean is not a member of Float\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpjqgpdcgq.scala:32:41 ------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36misEqual17\e[0m = sum == x + y\
    \ + z.toBoolean\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value toBoolean is not a member\
    \ of Float\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjqgpdcgq.scala:40:41\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e\
    [36misEqual25\e[0m = sum == x + y + z.toBoolean\n\e[31m\e[31m   |\e[0m       \
    \                                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                     value toBoolean is not a member of Float\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpjqgpdcgq.scala:48:41 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36misEqual33\e[0m = sum ==\
    \ x + y + z.toBoolean\n\e[31m\e[31m   |\e[0m                                 \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value\
    \ toBoolean is not a member of Float\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpjqgpdcgq.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available whe"
  stdout: ''
  timestamp: 1659794273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // any_int(5,\
    \ 2, 7) \u279E True\n    // any_int(3, 2, 2) \u279E False\n    // any_int(3, -2,\
    \ 1) \u279E True\n    // any_int(3.6, -2.2, 2) \u279E False\n    def anyInt(x\
    \ : Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n\
    \        val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n    \
    \    val isDifferent = (x != y)\n        val isDifferent2 = (z != y)\n       \
    \ val isDifferent3 = (x != z)\n        val isDifferent4 = (y != z)\n        val\
    \ isDifferent5 = (x != y)\n        val isDifferent6 = (y != x)\n        val isDifferent7\
    \ = (z != x)\n        val isDifferent8 = (x != z)\n        val isDifferent9 =\
    \ (y != z)\n        val isDifferent10 = (z != y)\n        val isDifferent11 =\
    \ (x != y)\n        val isDifferent12 = (y != x)\n        val isDifferent13 =\
    \ (z != x)\n        val isDifferent14 = (x != z)\n        val isDifferent15 =\
    \ (y != z)\n        val isDifferent16 = (z != y)\n        val isDifferent17 =\
    \ (x != y)\n        val isDifferent18 = (y != x)\n        val isDifferent19 =\
    \ (z != x)\n        val isDifferent20 = (x != z)\n        val isDifferent21 =\
    \ (y != z)\n        val isDifferent22 = (z != y)\n        val isDifferent23 =\
    \ (x != y)\n        val isDifferent24 = (y != x)\n        val isDifferent25 =\
    \ (z != x)\n        val isDifferent26 = (x != z)\n        val isDifferent27 =\
    \ (y != z)\n        val isDifferent28 = (z != y)\n        val isDifferent29 =\
    \ (x != y)\n        val isDifferent30 = (y != x)\n        val isDifferent31 =\
    \ (z != x)\n        val isDifferent32 = (x != z)\n        val isDifferent33 =\
    \ (y != z)\n        val isDifferent34 = (z != y)\n        val isDifferent35 =\
    \ (x != y)\n        val isDifferent36 = (y != x)\n        val isDifferent37 =\
    \ (z != x)\n        val isDifferent38 = (x != z)\n        val isDifferent39 =\
    \ (y != z)\n        val isDifferent40 = (z != y)\n        val isDifferent41 =\
    \ (x != y)\n        val isDifferent42 = (z != x)\n        val isDifferent43 =\
    \ (x != z)\n        val isDifferent44 = (y != z)\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppv95xcj4.scala:60:11 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppv95xcj4.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794260
