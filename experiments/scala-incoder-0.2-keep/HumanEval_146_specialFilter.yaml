name: HumanEval_146_specialFilter
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes an array of numbers as input and returns \n\
  \    // the number of elements in the array that are greater than 10 and both \n\
  \    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n\
  \    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33, -2, -3,\
  \ 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
  \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
  \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
  \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n   \
  \ assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
  \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
  \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n   \
  \ assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
  \ == (0l));\n    }\n\n}\n"
completions: ["        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        val numsCopy5 = numsCopy4.filter(_ >\
    \ 10 && _ % 2 == 0)\n        numsCopy5.size", "        var count = 0\n       \
    \ for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 != 0) {\n \
    \               count += 1\n            }\n        }\n        count", "      \
    \  val numsCopy = nums.toList\n        var count = 0\n        var firstOdd = 0\n\
    \        var lastOdd = 0\n        var firstEven = 0\n        var lastEven = 0\n\
    \        for (i <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n\
    \            if (num > 10) {\n                if (num % 2 == 0) {\n          \
    \          firstEven += 1\n                }\n                if (num % 2 != 0)\
    \ {\n                    lastEven += 1\n                }\n            }\n   \
    \         if (num < 10) {\n                if (num % 2 == 0) {\n             \
    \       firstOdd += 1\n                }\n                if (num % 2 != 0) {\n\
    \                    lastOdd += 1\n                }\n            }\n        }\n\
    \        count = firstEven + lastEven + firstOdd + lastOdd\n        count", " \
    \       var count = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums(i) > 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1) {\n                count\
    \ += 1\n            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        var count = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums(i) > 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1) {\n                count\
    \ += 1\n            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        val even = numsCopy.filter(x => x % 2 == 0)\n        val odd = numsCopy.filter(x\
    \ => x % 2 != 0)\n        val firstOdd = odd.head\n        val lastOdd = odd.last\n\
    \        val firstEven = even.head\n        val lastEven = even.last\n       \
    \ val firstOddAndLastOdd = firstOdd * lastOdd\n        val firstEvenAndLastEven\
    \ = firstEven * lastEven\n        val firstOddAndLastEvenAndLastOdd = firstOddAndLastOdd\
    \ * lastEven\n        val firstEvenAndLastOddAndLastEven = firstEvenAndLastEven\
    \ * lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEven = firstOddAndLastEvenAndLastOdd\
    \ * lastEven\n        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEven * lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEven * lastEven\n        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEvenAndLastOddAndLastEven * lastOdd\n        val\
    \ firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven * lastEven\n\
    \        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven *\
    \ lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ * lastEven\n        val firstEvenAndLastOddAndLastEvenAnd", "        val numsCopy\
    \ = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        var count = 0\n        for (i <- 0 until numsSorted.length) {\n\
    \            val num = numsSorted(i)\n            if (num > 10) {\n          \
    \      val firstDigit = num / 10\n                val lastDigit = num % 10\n \
    \               if (firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n           \
    \         count += 1\n                }\n            }\n        }\n        count",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size", "        val numsCopy\
    \ = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        numsCopy4.size", "        val numsCopy = nums.toList\n  \
    \      val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        var count = 0\n        for (i <- nums) {\n            if (i > 10 && i %\
    \ 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n       \
    \ }\n        count", "        var count = 0\n        for(i <- 0 until nums.size)\
    \ {\n            val num = nums(i)\n            val firstDigit = num / 10\n  \
    \          val lastDigit = num % 10\n            val firstOdd = firstDigit % 2\
    \ != 0\n            val lastOdd = lastDigit % 2 != 0\n            if(firstOdd\
    \ && lastOdd) {\n                count += 1\n            }\n        }\n      \
    \  count", "        var count = 0\n        var firstOdd = 0\n        var lastOdd\
    \ = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i) > 10)\
    \ {\n                if (nums(i) % 2 == 0) {\n                    count += 1\n\
    \                }\n                if (nums(i) % 2 != 0) {\n                \
    \    if (nums(i) < 10) {\n                        firstOdd += 1\n            \
    \        }\n                    if (nums(i) > 10) {\n                        lastOdd\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \       count + firstOdd + lastOdd", "        val numsCopy = nums.toList\n   \
    \     val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_ % 2 != 0)\n        numsCopy4.size",
  "        val numsSorted = nums.sortWith(_ < _)\n        val oddNums = numsSorted.filter(_\
    \ % 2 != 0)\n        val firstOddNum = oddNums.head\n        val lastOddNum =\
    \ oddNums.last\n        val firstOddNumOddDigit = firstOddNum.toString.charAt(0)\n\
    \        val lastOddNumOddDigit = lastOddNum.toString.charAt(0)\n        val firstOddNumEvenDigit\
    \ = firstOddNum.toString.charAt(1)\n        val lastOddNumEvenDigit = lastOddNum.toString.charAt(1)\n\
    \        val firstOddNumEvenDigitsOdd = firstOddNumEvenDigit + lastOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEven = firstOddNumEvenDigit + firstOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenOdd = firstOddNumEvenDigit + lastOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenEven = firstOddNumEvenDigit + firstOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenEvenOdd = firstOddNumEvenDigit + lastOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenEvenEven = firstOddNumEvenDigit + firstOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenEvenEvenOdd = firstOddNumEvenDigit + lastOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenEvenEvenEven = firstOddNumEvenDigit + firstOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenEvenEvenEvenOdd = firstOddNumEvenDigit +\
    \ lastOddNumEvenDigit\n        val firstOddNumEvenDigitsEvenEvenEvenEvenEven =\
    \ firstOddNumEvenDigit + firstOddNumEvenDigit\n        val firstOddNumEvenDigitsEvenEvenEvenEvenEvenOdd\
    \ = firstOddNumEvenDigit + lastOddNumEvenDigit\n        val firstOddNumEvenDigitsEvenEvenEvenEvenEvenEven\
    \ = firstOddNumEvenDigit + firstOddNumEvenDigit\n        val firstOddNumEvenDigitsEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = firstOddNumEvenDigit + lastOddNumEvenDigit\n        ", "        val numsCopy\
    \ = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size", "        val numsCopy = nums.toList\n  \
    \      val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        var count = 0\n        var lastNum = nums.last\n        for(i <- nums.indices)\
    \ {\n            if(nums(i) > 10 && lastNum % 2 == 1 && nums(i) < 1000) {\n  \
    \              count += 1\n            }\n            lastNum = nums(i)\n    \
    \    }\n        count"]
stop_tokens:
- "\n    }\n"
