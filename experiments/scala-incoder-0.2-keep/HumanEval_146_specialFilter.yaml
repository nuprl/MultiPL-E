name: HumanEval_146_specialFilter
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes an array of numbers as input and returns \n\
  \    // the number of elements in the array that are greater than 10 and both \n\
  \    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n\
  \    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33, -2, -3,\
  \ 45, 21, 109]) => 2\n    def specialFilter(nums : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
  \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
  \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
  \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n   \
  \ assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
  \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
  \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n   \
  \ assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
  \ == (0l));\n    }\n\n}\n"
completions: ["        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        val numsCopy5 = numsCopy4.filter(_ >\
    \ 10 && _ % 2 == 0)\n        numsCopy5.size", "        var count = 0\n       \
    \ for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 != 0) {\n \
    \               count += 1\n            }\n        }\n        count", "      \
    \  val numsCopy = nums.toList\n        var count = 0\n        var firstOdd = 0\n\
    \        var lastOdd = 0\n        var firstEven = 0\n        var lastEven = 0\n\
    \        for (i <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n\
    \            if (num > 10) {\n                if (num % 2 == 0) {\n          \
    \          firstEven += 1\n                }\n                if (num % 2 != 0)\
    \ {\n                    lastEven += 1\n                }\n            }\n   \
    \         if (num < 10) {\n                if (num % 2 == 0) {\n             \
    \       firstOdd += 1\n                }\n                if (num % 2 != 0) {\n\
    \                    lastOdd += 1\n                }\n            }\n        }\n\
    \        count = firstEven + lastEven + firstOdd + lastOdd\n        count", " \
    \       var count = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums(i) > 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1) {\n                count\
    \ += 1\n            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        var count = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums(i) > 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1) {\n                count\
    \ += 1\n            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        val even = numsCopy.filter(x => x % 2 == 0)\n        val odd = numsCopy.filter(x\
    \ => x % 2 != 0)\n        val firstOdd = odd.head\n        val lastOdd = odd.last\n\
    \        val firstEven = even.head\n        val lastEven = even.last\n       \
    \ val firstOddAndLastOdd = firstOdd * lastOdd\n        val firstEvenAndLastEven\
    \ = firstEven * lastEven\n        val firstOddAndLastEvenAndLastOdd = firstOddAndLastOdd\
    \ * lastEven\n        val firstEvenAndLastOddAndLastEven = firstEvenAndLastEven\
    \ * lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEven = firstOddAndLastEvenAndLastOdd\
    \ * lastEven\n        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEven * lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEven * lastEven\n        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEvenAndLastOddAndLastEven * lastOdd\n        val\
    \ firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven * lastEven\n\
    \        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven *\
    \ lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ * lastEven\n        val firstEvenAndLastOddAndLastEvenAnd", "        val numsCopy\
    \ = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        var count = 0\n        for (i <- 0 until numsSorted.length) {\n\
    \            val num = numsSorted(i)\n            if (num > 10) {\n          \
    \      val firstDigit = num / 10\n                val lastDigit = num % 10\n \
    \               if (firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n           \
    \         count += 1\n                }\n            }\n        }\n        count",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size", "        val numsCopy\
    \ = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        numsCopy4.size", "        val numsCopy = nums.toList\n  \
    \      val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        var count = 0\n        for (i <- nums) {\n            if (i > 10 && i %\
    \ 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n       \
    \ }\n        count", "        var count = 0\n        for(i <- 0 until nums.size)\
    \ {\n            val num = nums(i)\n            val firstDigit = num / 10\n  \
    \          val lastDigit = num % 10\n            val firstOdd = firstDigit % 2\
    \ != 0\n            val lastOdd = lastDigit % 2 != 0\n            if(firstOdd\
    \ && lastOdd) {\n                count += 1\n            }\n        }\n      \
    \  count", "        var count = 0\n        var firstOdd = 0\n        var lastOdd\
    \ = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i) > 10)\
    \ {\n                if (nums(i) % 2 == 0) {\n                    count += 1\n\
    \                }\n                if (nums(i) % 2 != 0) {\n                \
    \    if (nums(i) < 10) {\n                        firstOdd += 1\n            \
    \        }\n                    if (nums(i) > 10) {\n                        lastOdd\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \       count + firstOdd + lastOdd", "        val numsCopy = nums.toList\n   \
    \     val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_ % 2 != 0)\n        numsCopy4.size",
  "        val numsSorted = nums.sortWith(_ < _)\n        val oddNums = numsSorted.filter(_\
    \ % 2 != 0)\n        val firstOddNum = oddNums.head\n        val lastOddNum =\
    \ oddNums.last\n        val firstOddNumOddDigit = firstOddNum.toString.charAt(0)\n\
    \        val lastOddNumOddDigit = lastOddNum.toString.charAt(0)\n        val firstOddNumEvenDigit\
    \ = firstOddNum.toString.charAt(1)\n        val lastOddNumEvenDigit = lastOddNum.toString.charAt(1)\n\
    \        val firstOddNumEvenDigitsOdd = firstOddNumEvenDigit + lastOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEven = firstOddNumEvenDigit + firstOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenOdd = firstOddNumEvenDigit + lastOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenEven = firstOddNumEvenDigit + firstOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenEvenOdd = firstOddNumEvenDigit + lastOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenEvenEven = firstOddNumEvenDigit + firstOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenEvenEvenOdd = firstOddNumEvenDigit + lastOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenEvenEvenEven = firstOddNumEvenDigit + firstOddNumEvenDigit\n\
    \        val firstOddNumEvenDigitsEvenEvenEvenEvenOdd = firstOddNumEvenDigit +\
    \ lastOddNumEvenDigit\n        val firstOddNumEvenDigitsEvenEvenEvenEvenEven =\
    \ firstOddNumEvenDigit + firstOddNumEvenDigit\n        val firstOddNumEvenDigitsEvenEvenEvenEvenEvenOdd\
    \ = firstOddNumEvenDigit + lastOddNumEvenDigit\n        val firstOddNumEvenDigitsEvenEvenEvenEvenEvenEven\
    \ = firstOddNumEvenDigit + firstOddNumEvenDigit\n        val firstOddNumEvenDigitsEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = firstOddNumEvenDigit + lastOddNumEvenDigit\n        ", "        val numsCopy\
    \ = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size", "        val numsCopy = nums.toList\n  \
    \      val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        var count = 0\n        var lastNum = nums.last\n        for(i <- nums.indices)\
    \ {\n            if(nums(i) > 10 && lastNum % 2 == 1 && nums(i) < 1000) {\n  \
    \              count += 1\n            }\n            lastNum = nums(i)\n    \
    \    }\n        count", "        val odds = nums.filter(x => x % 2 == 1).length\n\
    \        val evens = nums.filter(x => x % 2 == 0).length\n        odds + evens",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.length",
  "        val numsCopy = nums.toList\n        numsCopy.foreach(x => {\n         \
    \   if (x > 10 && x % 2 == 1 && x % 2 == 0) {\n                numsCopy.remove(x)\n\
    \            }\n        })\n        numsCopy.size", "        var count = 0\n \
    \       for (i <- nums) {\n            if (i > 10 && i % 2 != 0 && i % 2 != 1)\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \       var count = 0\n        var last = 0\n        var first = 0\n        for\
    \ (i <- nums) {\n            if (i > 10) {\n                count += 1\n     \
    \           if (first % 2 == 1 && last % 2 == 1) {\n                    count\
    \ += 1\n                }\n            }\n            first = i\n            last\
    \ = i\n        }\n        count", "        val numsSorted = nums.sortWith(_ <\
    \ _)\n        val evens = numsSorted.filter(x => x % 2 == 0)\n        val odds\
    \ = numsSorted.filter(x => x % 2 != 0)\n        val firstOdds = evens.takeWhile(x\
    \ => x % 2 != 0)\n        val lastOdds = evens.drop(evens.size - evens.filter(x\
    \ => x % 2 == 0).size)\n        val firstEvens = evens.takeWhile(x => x % 2 ==\
    \ 0)\n        val lastEvens = evens.drop(evens.size - evens.filter(x => x % 2\
    \ == 0).size)\n        val firstOddsAndEvens = firstOdds.zip(lastEvens)\n    \
    \    val lastOddsAndEvens = lastOdds.zip(firstEvens)\n        val firstOddsAndEvensCount\
    \ = firstOddsAndEvens.count(x => x._1 > 10)\n        val lastOddsAndEvensCount\
    \ = lastOddsAndEvens.count(x => x._1 > 10)\n        val firstOddsAndEvensCountAndLastOddsCount\
    \ = firstOddsAndEvensCount + lastOddsAndEvensCount\n        val firstOddsAndEvensCountAndLastOddsCountAndFirstEvensCount\
    \ = firstOddsAndEvensCountAndLastOddsCount + firstEvens.count(x => x._1 > 10)\n\
    \        val firstOddsAndEvensCountAndLastOddsCountAndFirstEvensCountAndLastOddsCount\
    \ = firstOddsAndEvensCountAndLastOddsCountAndFirstEvensCount + lastOddsAndEvens.count(x\
    \ => x._1 > 10)\n        val firstOddsAndEvensCountAndLastOddsCountAndFirstEvensCountAndLastOddsCountAndFirstOddsAndEvensCount\
    \ = firstOddsAndEvensCountAndLastOddsCountAndFirstEvensCountAndLastOddsCount +\
    \ firstOddsAndEvens.count(x => x._1 > 10)\n        val firstOddsAndEvensCountAndLastOddsCountAndFirstEvensCountAndLastOddsCountAndFirstOddsAndEvensCountAndLastOddsCount\
    \ = firstOddsAndEvensCountAndLastOddsCountAndFirstEvensCountAndLastOddsCountAndFirstOddsAndEvensCount\
    \ + lastOddsAndEvens.count(x => x._1 > 10)\n        val firstOddsAnd", "     \
    \   val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n\
    \        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 =\
    \ numsCopy3.filter(_ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2\
    \ != 0)\n        val numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7\
    \ = numsCopy6.filter(_ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ %\
    \ 2 != 0)\n        val numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10\
    \ = numsCopy9.filter(_ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_\
    \ % 2 != 0)\n        val numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val\
    \ numsCopy13 = numsCopy12.filter(_ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_\
    \ % 2 != 0)\n        val numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val\
    \ numsCopy16 = numsCopy15.filter(_ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_\
    \ % 2 != 0)\n        val numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val\
    \ numsCopy19 = numsCopy18.filter(_ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_\
    \ % 2 != 0)\n        val numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val\
    \ numsCopy22 = numsCopy21.filter(_ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_\
    \ % 2 != 0)\n        val numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val\
    \ numsCopy25 = numsCopy24.filter(_ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_\
    \ % 2 != 0)\n        val numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val\
    \ numsCopy28 = numsCopy27.filter(_ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_\
    \ % 2 != 0)\n        val numsCopy30 = numsCopy", "        val numsSorted = nums.sortWith(_.isLessThan(_))\n\
    \        val even = numsSorted.filter(x => x.isEven)\n        val odd = numsSorted.filter(x\
    \ => !x.isEven)\n        val firstOdd = odd.takeWhile(x => x.isOdd).last\n   \
    \     val lastOdd = odd.drop(1).takeWhile(x => x.isOdd).last\n        val firstEven\
    \ = even.takeWhile(x => x.isEven).last\n        val lastEven = even.drop(1).takeWhile(x\
    \ => x.isEven).last\n        val firstOddAndEven = firstOdd + firstEven\n    \
    \    val lastOddAndEven = lastOdd + lastEven\n        val firstOddAndEvenEven\
    \ = firstOddAndEven + lastOddAndEven\n        val firstOddAndEvenEvenEven = firstOddAndEvenEven\
    \ + lastOddAndEvenEven\n        val firstOddAndEvenEvenEvenEven = firstOddAndEvenEvenEven\
    \ + lastOddAndEvenEvenEven\n        val firstOddAndEvenEvenEvenEvenEven = firstOddAndEvenEvenEvenEven\
    \ + lastOddAndEvenEvenEvenEven\n        val firstOddAndEvenEvenEvenEvenEven =\
    \ firstOddAndEvenEvenEvenEven + lastOddAndEvenEvenEvenEven\n        val firstOddAndEvenEvenEvenEvenEvenEven\
    \ = firstOddAndEvenEvenEvenEvenEven + lastOddAndEvenEvenEvenEvenEven\n       \
    \ val firstOddAndEvenEvenEvenEvenEvenEvenEven = firstOddAndEvenEvenEvenEvenEvenEven\
    \ + lastOddAndEvenEvenEvenEvenEvenEven\n        val firstOddAndEvenEvenEvenEvenEvenEvenEven\
    \ = firstOddAndEvenEvenEvenEvenEvenEvenEven + lastOddAndEvenEvenEvenEvenEvenEvenEven\n\
    \        val firstOddAndEvenEvenEvenEvenEvenEvenEvenEven = firstOddAndEvenEvenEvenEvenEvenEvenEvenEven\
    \ + lastOddAndEvenEvenEvenEvenEvenEvenEven\n        val firstOddAndEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = firstOddAndEvenEvenEvenEvenEvenEvenEvenEvenEvenEven + lastOddAndEvenEvenEvenEvenEvenEvenEvenEvenEven\n\
    \        val firstOddAndEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = firstOddAndEvenEvenEvenEven",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.length",
  "        val numsCopy = nums.toList\n        var count = 0\n        for(i <- 0 until\
    \ numsCopy.size) {\n            if(numsCopy(i) > 10 && numsCopy(i).isOdd && numsCopy(i).isOdd\
    \ && numsCopy(i).isOdd) {\n                count += 1\n            }\n       \
    \ }\n        count", "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 ==\
    \ 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ %\
    \ 2 != 0)\n        val numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7\
    \ = numsCopy6.filter(_ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ %\
    \ 2 != 0)\n        val numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10\
    \ = numsCopy9.filter(_ % 2 != 0)\n        numsCopy10.size", "        var count\
    \ = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i) > 10\
    \ && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n                count\
    \ += 1\n            }\n        }\n        count", "        var count = 0\n   \
    \     for (i <- 0 until nums.length) \n            if (nums(i) > 10 && nums(i)\
    \ % 2 != 0 && nums(i) % 2 != 1) \n                count += 1\n        count",
  "        var count = 0\n        var firstOdd = false\n        var lastOdd = false\n\
    \        for (i <- 0 until nums.length) {\n            if (nums(i) > 10) {\n \
    \               if (firstOdd) {\n                    lastOdd = true\n        \
    \        } else {\n                    firstOdd = true\n                }\n  \
    \              count += 1\n            }\n        }\n        if (firstOdd && lastOdd)\
    \ {\n            count += 1\n        }\n        count", "        val numsCopy\
    \ = nums.toList\n        var count = 0\n        for (i <- 0 until numsCopy.size)\
    \ {\n            val num = numsCopy(i)\n            if (num > 10 && numsCopy(i).isOdd\
    \ && numsCopy(i).isOdd) {\n                count += 1\n            }\n       \
    \ }\n        count", "        var count = 0\n        for (i <- nums) {\n     \
    \       if (i > 10 && i % 2 == 1 && i % 2 != 0) {\n                count += 1\n\
    \            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        val numsCopy = nums.toList\n        var count = 0\n        for(i <- 0 until\
    \ numsCopy.size) {\n            val num = numsCopy(i)\n            if(num > 10\
    \ && numsCopy(i).isOdd && numsCopy(i).isOdd && numsCopy(i).isOdd) {\n        \
    \        count += 1\n            }\n        }\n        count", "        var count\
    \ = 0\n        for (i<- 0 until nums.length) {\n            if (nums(i) > 10 &&\
    \ nums(i) % 2 == 1 && nums(i) % 2 != 0) {\n                count += 1\n      \
    \      }\n        }\n        count", "        var count = 0\n        for (i <-\
    \ 0 until nums.length) {\n            if (nums(i) > 10) {\n                if\
    \ (nums(i) % 2 == 1 && nums(i-1) % 2 == 1) {\n                    count += 1\n\
    \                }\n            }\n        }\n        count", "        val odds\
    \ = nums.filter(_ % 2 == 1).length\n        val firstOdd = nums.filter(_ % 2 ==\
    \ 1).head\n        val lastOdd = nums.filter(_ % 2 == 1).last\n        val firstOddAndLastOdd\
    \ = firstOdd * lastOdd\n        nums.filter(_ > 10 && _ % 2 == 1 && _ % 2 == 1\
    \ && _ % 2 == 1).length + odds + firstOddAndLastOdd", "        var count = 0\n\
    \        for (i<- nums) {\n            if (i > 10 && nums(i).isOdd && nums(i).isOdd\
    \ && nums(i).isOdd) {\n                count += 1\n            }\n        }\n\
    \        count", "        val numsCopy = nums.toList\n        val numsCopy2 =\
    \ numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n\
    \        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        val numsCopy = nums.toList\n        numsCopy.foreach(x => {\n         \
    \   if (x > 10 && x % 2 == 1 && x % 2 == 0) {\n                numsCopy.remove(x)\n\
    \            }\n        })\n        numsCopy.size", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        var count = 0\n        for(i <- 0 until nums.length){\n            val\
    \ num = nums(i)\n            if(num > 10 && num % 2 == 1 && num % 2 == 1){\n \
    \               count += 1\n            }\n        }\n        count", "      \
    \  var count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 !=\
    \ 0 && i % 2 != 1) {\n                count += 1\n            }\n        }\n \
    \       count", "        var count = 0\n        for(i <- 0 until nums.size) {\n\
    \            if(nums(i) > 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd)\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \       val numsCopy = nums.toList\n        numsCopy.filter(x => x > 10 && numsCopy.head\
    \ % 2 == 1 && numsCopy.last % 2 == 1).length", "        val numsCopy = nums.toList\n\
    \        var count = 0\n        for ( i <- 0 until numsCopy.length ) {\n     \
    \       val num = numsCopy(i)\n            if ( num > 10 ) {\n               \
    \ val first = num % 10\n                val last = num / 10\n                if\
    \ ( first % 2 == 1 && last % 2 == 1 ) {\n                    count += 1\n    \
    \            }\n            }\n        }\n        count", "        var count =\
    \ 0\n        for(i <- 0 until nums.length){\n            if(nums(i) > 10 && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd){\n                count += 1\n          \
    \  }\n        }\n        count", "        val numsCopy = nums.toList\n       \
    \ val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_ % 2 != 0)\n        val\
    \ numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        val numsCopy6 = numsCopy5.filter(_\
    \ % 2 != 0)\n        val numsCopy7 = numsCopy6.filter(_ % 2 != 0)\n        val\
    \ numsCopy8 = numsCopy7.filter(_ % 2 != 0)\n        val numsCopy9 = numsCopy8.filter(_\
    \ % 2 != 0)\n        numsCopy9.size", "        val numsCopy = nums.toList\n  \
    \      val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        val numsSorted = nums.sortWith(_ < _)\n        var count = 0\n        for\
    \ (i <- 0 until numsSorted.length) {\n            if (numsSorted(i) > 10 && numsSorted(i).isOdd\
    \ && numsSorted(i).isOdd && numsSorted(i).isOdd) {\n                count += 1\n\
    \            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        val evens = numsCopy.filter(x => x % 2 == 0)\n        val odds = numsCopy.filter(x\
    \ => x % 2 != 0)\n        val firstOdds = evens.filter(x => x % 2 == 1)\n    \
    \    val lastOdds = evens.filter(x => x % 2 == 0)\n        val firstEvens = odds.filter(x\
    \ => x % 2 == 0)\n        val lastEvens = odds.filter(x => x % 2 == 1)\n     \
    \   val firstOddsLastEvens = firstOdds.last\n        val lastOddsFirstEvens =\
    \ lastOdds.first\n        val firstEvensLastOdds = firstEvens.last\n        val\
    \ lastEvensFirstOdds = lastEvens.first\n        val firstOddsLastEvensLastOdds\
    \ = firstOddsLastEvens.last\n        val lastOddsFirstEvensLastOdds = lastOddsFirstEvens.first\n\
    \        val firstEvensLastOddsLastEvens = firstEvensLastOdds.last\n        val\
    \ lastEvensFirstOddsLastEvens = lastEvensFirstOdds.first\n        val firstOddsLastEvensLastOddsLastEvens\
    \ = firstOddsLastEvensLastOdds.last\n        val lastOddsFirstEvensLastOddsLastEvens\
    \ = lastOddsFirstEvensLastOdds.first\n        val firstEvensLastOddsLastEvensLastOdds\
    \ = firstEvensLastOddsLastEvens.last\n        val lastEvensFirstOddsLastEvensLastOdds\
    \ = lastEvensFirstOddsLastEvens.first\n        val firstOddsLastEvensLastOddsLastEvensLastOdds\
    \ = firstOddsLastEvensLastOddsLastEvens.last\n        val lastOddsFirstEvensLastOddsLastEvensLastOdds\
    \ = lastOddsFirstEvensLastOddsLastEvens.first\n        val firstEvensLastOddsLastEvensLastOddsLastEvensLastOdds\
    \ = firstEvensLastOddsLastEvensLastOddsLastEvens.last\n        val lastEvensFirstOddsLastEvensLastOddsLastEvensLastOdds\
    \ = lastEvensFirstOddsLastEvensLast", "        val numsSorted = nums.sortWith((x,\
    \ y) => x > y)\n        val even = numsSorted.filter(x => x % 2 == 0)\n      \
    \  val odd = numsSorted.filter(x => x % 2 != 0)\n        val firstOdd = odd.takeWhile(x\
    \ => x % 2 != 0)\n        val lastOdd = odd.drop(odd.length - 1)\n        val\
    \ firstEven = even.takeWhile(x => x % 2 == 0)\n        val lastEven = even.drop(even.length\
    \ - 1)\n        val firstOddAndEven = firstOdd ++ firstEven\n        val lastOddAndEven\
    \ = lastOdd ++ lastEven\n        val firstOddAndEvenCount = firstOddAndEven.count\n\
    \        val lastOddAndEvenCount = lastOddAndEven.count\n        val firstOddAndEvenEvenCount\
    \ = firstOddAndEven.count(x => x % 2 == 0)\n        val lastOddAndEvenEvenCount\
    \ = lastOddAndEven.count(x => x % 2 == 0)\n        val firstOddAndEvenEvenEvenCount\
    \ = firstOddAndEvenEven.count(x => x % 2 != 0)\n        val lastOddAndEvenEvenEvenCount\
    \ = lastOddAndEvenEven.count(x => x % 2 != 0)\n        val firstOddAndEvenEvenEvenCountCount\
    \ = firstOddAndEvenEven.count(x => x % 2 != 0 && x % 2 != 0)\n        val lastOddAndEvenEvenEvenCountCount\
    \ = lastOddAndEvenEven.count(x => x % 2 != 0 && x % 2 != 0)\n        val firstOddAndEvenEvenEvenCountCountCount\
    \ = firstOddAndEvenEven.count(x => x % 2 != 0 && x % 2 != 0 && x % 2 != 0)\n \
    \       val lastOddAndEvenEvenEvenCountCountCount = lastOddAndEvenEven.count(x\
    \ => x % 2 != 0 && x % 2 != 0 && x % 2 != 0)\n        val firstOddAndEvenEvenEvenCountCountCountCount\
    \ = firstOddAndEvenEven.count(x => x % 2 != 0 && x % 2 != 0 && x % 2 != 0 && x\
    \ % 2 != 0)\n        val lastOddAndEvenEvenEvenCountCountCountCount = lastOddAndEvenEven.count(x\
    \ => x % 2 != 0 && x % 2 != 0 && x % 2 != 0 && x % 2 != 0)\n        val firstOddAndEvenEvenEvenCountCount",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ %\
    \ 2 != 0)\n        val numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7\
    \ = numsCopy6.filter(_ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ %\
    \ 2 != 0)\n        val numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10\
    \ = numsCopy9.filter(_ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_\
    \ % 2 != 0)\n        val numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val\
    \ numsCopy13 = numsCopy12.filter(_ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_\
    \ % 2 != 0)\n        val numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val\
    \ numsCopy16 = numsCopy15.filter(_ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_\
    \ % 2 != 0)\n        val numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val\
    \ numsCopy19 = numsCopy18.filter(_ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_\
    \ % 2 != 0)\n        val numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val\
    \ numsCopy22 = numsCopy21.filter(_ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_\
    \ % 2 != 0)\n        val numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val\
    \ numsCopy25 = numsCopy24.filter(_ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_\
    \ % 2 != 0)\n        val numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val\
    \ numsCopy28 = numsCopy27.filter(_ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_\
    \ % 2 != 0)\n        val numsCopy30 = numsCopy", "        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size",
  "        var count = 0\n        for(i <- 0 until nums.length){\n            val\
    \ num = nums(i)\n            if(num > 10 && num % 2 == 1 && num % 2 == 0){\n \
    \               count += 1\n            }\n        }\n        count", "      \
    \  val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n\
    \        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 =\
    \ numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size", "        val numsCopy\
    \ = nums.toList\n        val even = numsCopy.filter(x => x % 2 == 0)\n       \
    \ val odd = numsCopy.filter(x => x % 2 != 0)\n        val evenFirst = even.filter(x\
    \ => x % 2 == 0 && x % 10 == 0)\n        val evenLast = even.filter(x => x % 2\
    \ == 0 && x % 10 != 0)\n        val oddFirst = odd.filter(x => x % 2 != 0 && x\
    \ % 10 == 0)\n        val oddLast = odd.filter(x => x % 2 != 0 && x % 10 != 0)\n\
    \        val firstOddEven = evenFirst.filter(x => x % 2 == 0 && x % 10 != 0)\n\
    \        val firstOddOdd = oddFirst.filter(x => x % 2 != 0 && x % 10 == 0)\n \
    \       val lastOddEven = evenLast.filter(x => x % 2 == 0 && x % 10 != 0)\n  \
    \      val lastOddOdd = oddLast.filter(x => x % 2 != 0 && x % 10 == 0)\n     \
    \   val firstOddEvenOdd = firstOddEven.filter(x => x % 2 != 0 && x % 10 != 0)\n\
    \        val firstOddOddOdd = firstOddOdd.filter(x => x % 2 != 0 && x % 10 ==\
    \ 0)\n        val lastOddEvenOdd = lastOddEven.filter(x => x % 2 != 0 && x % 10\
    \ != 0)\n        val lastOddOddOdd = lastOddOdd.filter(x => x % 2 != 0 && x %\
    \ 10 == 0)\n        val firstOddEvenOddOdd = firstOddEvenOdd.filter(x => x % 2\
    \ != 0 && x % 10 != 0)\n        val firstOddOddEvenOdd = firstOddOddEvenOdd.filter(x\
    \ => x % 2 != 0 && x % 10 == 0)\n        val lastOddEvenOddOdd = lastOddEvenOdd.filter(x\
    \ => x % 2 != 0 && x % 10 != 0)\n        val lastOddOddEvenOdd = lastOddOddEvenOdd.filter(x\
    \ => x % 2 != 0 && x % 10 == 0)\n        val firstOddEvenOddOddOdd = firstOddEvenOddOdd.filter(x\
    \ => x % 2 != 0 && x % 10 != 0)\n        val firstOddO", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val even = numsSorted.filter(_ % 2 == 0)\n \
    \       val odd = numsSorted.filter(_ % 2 != 0)\n        val firstOdd = odd.takeWhile(_\
    \ < 10)\n        val lastOdd = odd.drop(10).reverse\n        val firstEven = even.takeWhile(_\
    \ < 10)\n        val lastEven = even.drop(10).reverse\n        val firstOddAndLastOdd\
    \ = firstOdd ++ lastOdd\n        val firstEvenAndLastEven = firstEven ++ lastEven\n\
    \        val firstOddAndLastEvenAndLastOdd = firstOddAndLastOdd ++ lastEven\n\
    \        val firstEvenAndLastOddAndLastEven = firstEvenAndLastEven ++ lastOdd\n\
    \        val firstOddAndLastEvenAndLastOddAndLastEven = firstOddAndLastEvenAndLastOdd\
    \ ++ lastEven\n        val firstEvenAndLastOddAndLastEvenAndLastOdd = firstEvenAndLastOddAndLastEven\
    \ ++ lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOdd =\
    \ firstOddAndLastEvenAndLastOddAndLastEven ++ lastEven\n        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEvenAndLastOdd ++ lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOdd ++ lastEven\n        val\
    \ firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOdd = firstEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ ++ lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOdd\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven ++ lastEven\n\
    \        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOdd ++ lastOdd\n\
    \        val firstOddAndLastEvenAndLastOdd", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_ % 2 != 0)\n        val\
    \ numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        numsCopy5.length", "     \
    \   var count = 0\n        for(i <- 0 until nums.length){\n            if(nums(i)\
    \ > 10 && (nums(i) % 2 == 1 || (nums(i) % 2 == 0 && nums(i-1) % 2 == 1))){\n \
    \               count += 1\n            }\n        }\n        count", "      \
    \  val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n\
    \        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 =\
    \ numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val odds = numsSorted.filter(x => x % 2 == 1)\n\
    \        val evens = numsSorted.filter(x => x % 2 == 0)\n        val firstOdds\
    \ = evens.takeWhile(x => x % 2 == 1).length\n        val lastOdds = evens.drop(evens.size\
    \ - 1).takeWhile(x => x % 2 == 1).length\n        val firstEvens = odds.length\
    \ - firstOdds\n        val lastEvens = odds.length - lastOdds\n        val firstOddsOdds\
    \ = evens.takeWhile(x => x % 2 == 1 && x % 2 == 1).length\n        val lastOddsOdds\
    \ = evens.drop(evens.size - 1).takeWhile(x => x % 2 == 1 && x % 2 == 1).length\n\
    \        val firstEvensEvens = odds.length - firstOddsOdds\n        val lastEvensEvens\
    \ = odds.length - lastOddsOdds\n        val firstOddsEvens = evens.takeWhile(x\
    \ => x % 2 == 1 && x % 2 == 0).length\n        val lastOddsEvens = evens.drop(evens.size\
    \ - 1).takeWhile(x => x % 2 == 1 && x % 2 == 0).length\n        val firstEvensOdds\
    \ = odds.length - firstOddsEvens\n        val lastEvensOdds = odds.length - lastOddsEvens\n\
    \        val firstOddsEvens = evens.takeWhile(x => x % 2 == 0 && x % 2 == 1).length\n\
    \        val lastOddsEvens = evens.drop(evens.size - 1).takeWhile(x => x % 2 ==\
    \ 0 && x % 2 == 1).length\n        val firstEvensEvens = odds.length - firstOddsOdds\n\
    \        val lastEvensEvens = odds.length - lastOddsOdds\n        val firstOddsOdds\
    \ = evens.takeWhile(x => x % 2 == 0 && x % 2 == 0).length\n        val lastOddsOdds\
    \ = evens.drop(evens.size - 1).takeWhile(x => x % 2 == 0 && x % 2 == 0).length\n\
    \        val firstEvensOdds = odds.length - firstOddsEvens\n        val lastEvensOdds\
    \ = odds.length - lastOddsEvens\n        val firstOddsEvens = evens.takeWhile(x\
    \ => x % 2 == 1 && x % 2 == 0).", "        val numsCopy = nums.toList\n      \
    \  val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.length", "        val numsCopy = nums.toList\n\
    \        var count = 0\n        for(i <- 0 until numsCopy.size) {\n          \
    \  val num = numsCopy(i)\n            val firstDigit = num / 10\n            val\
    \ lastDigit = num % 10\n            if(firstDigit % 2 != 0 && lastDigit % 2 !=\
    \ 0) {\n                count += 1\n            }\n        }\n        count",
  "        var count = 0\n        var last = 0\n        var first = 0\n        for\
    \ (i <- nums) {\n            if (i > 10 && last % 2 == 1 && first % 2 == 1) {\n\
    \                count += 1\n            }\n            last = i\n           \
    \ first = i\n        }\n        count", "        var count = 0\n        var lastNum\
    \ = 0\n        var firstNum = 0\n        var oddFirstNum = 0\n        var oddLastNum\
    \ = 0\n        var evenFirstNum = 0\n        var evenLastNum = 0\n        for\
    \ (i <- nums) {\n            if (i > 10) {\n                count += 1\n     \
    \           if (lastNum % 2 == 1) {\n                    oddLastNum += 1\n   \
    \             }\n                if (firstNum % 2 == 1) {\n                  \
    \  oddFirstNum += 1\n                }\n                if (evenFirstNum % 2 ==\
    \ 1) {\n                    evenFirstNum += 1\n                }\n           \
    \     if (evenLastNum % 2 == 1) {\n                    evenLastNum += 1\n    \
    \            }\n            }\n            lastNum = i\n            firstNum =\
    \ i\n            if (i % 2 == 0) {\n                evenFirstNum += 1\n      \
    \      }\n            if (i % 2 == 1) {\n                evenLastNum += 1\n  \
    \          }\n        }\n        count + oddFirstNum + oddLastNum + evenFirstNum\
    \ + evenLastNum", "        val numsCopy = nums.toList\n        numsCopy.filter(_\
    \ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size", "        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 != 0)\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \       val numsSorted = nums.sortWith(_ < _)\n        var count = 0\n       \
    \ var lastOdd = 0\n        var firstOdd = 0\n        for (i <- 0 until numsSorted.length)\
    \ {\n            if (numsSorted(i) > 10 && lastOdd % 2 == 1 && firstOdd % 2 ==\
    \ 1) {\n                count += 1\n            }\n            lastOdd = numsSorted(i)\n\
    \            firstOdd = numsSorted(i)\n        }\n        count", "        var\
    \ count = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i)\
    \ > 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1) {\n                count += 1\n\
    \            }\n        }\n        count", "        var count = 0\n        for\
    \ (i <- nums) {\n            if (i > 10 && i % 2 != 0 && i % 2 != 1) {\n     \
    \           count += 1\n            }\n        }\n        count", "        var\
    \ count = 0\n        for (i <- 0 until nums.length) \n            if (nums(i)\
    \ > 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1) \n                count += 1\n\
    \        count", "        val numsCopy = nums.toList\n        numsCopy.foreach(x\
    \ => {\n            if (x > 10 && x % 2 == 1 && x % 2 == 0) {\n              \
    \  numsCopy.remove(x)\n            }\n        })\n        numsCopy.size", "  \
    \      val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.length", "        val numsCopy\
    \ = nums.toList\n        numsCopy.filter(_ > 10).count(_ % 2 == 1).count(_ % 2\
    \ == 0) + 1", "        val numsCopy = nums.toList\n        numsCopy.foreach(x\
    \ => if (x > 10 && x % 2 == 1 && x % 2 == 1) numsCopy.remove(x))\n        numsCopy.size",
  "        var count = 0\n        for (i<- nums) {\n            if (i > 10 && i %\
    \ 2 == 1 && i % 2 != 0) {\n                count += 1\n            }\n       \
    \ }\n        count", "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 ==\
    \ 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        var count = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums(i) > 10 && nums(i) % 2 == 1 && nums(i) != nums(i) / 2) {\n           \
    \     count += 1\n            }\n        }\n        count", "        val numsCopy\
    \ = nums.toList\n        numsCopy.filter(_ > 10).filter(_ % 2 != 0).filter(_ %\
    \ 2 != 1).length", "        var count = 0\n        for (i <- 0 until nums.length)\
    \ {\n            if (nums(i) > 10 && nums(i) % 2 == 1 && nums(i) % 2 == 1) {\n\
    \                count += 1\n            }\n        }\n        count", "     \
    \   val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n\
    \        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.size",
  "        var count = 0\n        for (i <- 0 until nums.length) {\n            if\
    \ (nums(i) > 10) {\n                if (nums(i) % 2 == 1 && nums(i-1) % 2 == 1)\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n        count", "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 ==\
    \ 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        var count = 0\n        var last = 0\n        var first = 0\n        for\
    \ (i <- nums) {\n            if (i > 10) {\n                count += 1\n     \
    \           if (i % 2 == 0) {\n                    first += 1\n              \
    \  }\n                if (i % 2 == 1) {\n                    last += 1\n     \
    \           }\n            }\n        }\n        return count", "        val numsCopy\
    \ = nums.toList\n        val even = numsCopy.filter(x => x % 2 == 0)\n       \
    \ val odd = numsCopy.filter(x => x % 2 != 0)\n        val firstOdd = odd.filter(x\
    \ => x % 2 == 1)\n        val lastOdd = odd.filter(x => x % 2 == 0)\n        val\
    \ firstEven = even.filter(x => x % 2 == 1)\n        val lastEven = even.filter(x\
    \ => x % 2 == 0)\n        val firstOddEven = firstOdd.filter(x => x % 2 == 1)\n\
    \        val lastOddEven = lastOdd.filter(x => x % 2 == 0)\n        val firstEvenOdd\
    \ = firstEven.filter(x => x % 2 == 1)\n        val lastEvenOdd = lastEven.filter(x\
    \ => x % 2 == 0)\n        val firstOddEvenLastOdd = firstOddEven.filter(x => x\
    \ % 2 == 1)\n        val lastOddEvenLastOdd = lastOddEven.filter(x => x % 2 ==\
    \ 0)\n        val firstEvenOddLastOdd = firstEvenOdd.filter(x => x % 2 == 1)\n\
    \        val lastEvenOddLastOdd = lastEvenOdd.filter(x => x % 2 == 0)\n      \
    \  val firstOddEvenLastOddLastOdd = firstOddEvenLastOdd.filter(x => x % 2 == 1)\n\
    \        val lastOddEvenLastOddLastOdd = lastOddEvenLastOdd.filter(x => x % 2\
    \ == 0)\n        val firstEvenOddLastOddLastOdd = firstEvenOddLastOdd.filter(x\
    \ => x % 2 == 1)\n        val lastEvenOddLastOddLastOdd = lastEvenOddLastOdd.filter(x\
    \ => x % 2 == 0)\n        val firstOddEvenLastOddLastOddLastOdd = firstOddEvenLastOddLastOdd.filter(x\
    \ => x % 2 == 1)\n        val lastOddEvenLastOddLastOddLastOdd = lastOddEvenLastOddLastOdd.filter(x\
    \ => x % 2 == 0)\n        val firstEvenOddLastOddLastOddLastOdd = firstEvenOddLastOddLastOdd.filter(x\
    \ => x % 2 == 1)\n        val lastEvenOddLastOddLastOddLastOdd = lastEvenO", " \
    \       val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size", "        var count\
    \ = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 && i %\
    \ 2 != 1) {\n                count += 1\n            }\n        }\n        count",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size", "        var count\
    \ = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 && i %\
    \ 2 != 1) {\n                count += 1\n            }\n        }\n        count",
  "        val numsCopy = nums.toList\n        var count = 0\n        for (i <- 0\
    \ until numsCopy.size) {\n            if (numsCopy(i) > 10) {\n              \
    \  if (numsCopy(i) mod 2 != 0) {\n                    if (numsCopy(i) mod 2 !=\
    \ 1) {\n                        count += 1\n                    }\n          \
    \      }\n            }\n        }\n        count", "        var count = 0\n \
    \       for (i<- 0 until nums.length){\n            if (nums(i) > 10){\n     \
    \           if (nums(i) % 2 == 1){\n                    if (nums(i-1) % 2 == 1){\n\
    \                        count += 1\n                    }\n                }\n\
    \            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size",
  "        var count = 0\n        for (i <- nums) {\n            if (i > 10 && i %\
    \ 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n       \
    \ }\n        count", "        val numsMap = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap2 = nums.map(x => (x, 1)).toMap\n        val numsMap3 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap4 = nums.map(x => (x, 1)).toMap\n     \
    \   val numsMap5 = nums.map(x => (x, 1)).toMap\n        val numsMap6 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap7 = nums.map(x => (x, 1)).toMap\n     \
    \   val numsMap8 = nums.map(x => (x, 1)).toMap\n        val numsMap9 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap10 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap11 = nums.map(x => (x, 1)).toMap\n        val numsMap12 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap13 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap14 = nums.map(x => (x, 1)).toMap\n        val numsMap15 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap16 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap17 = nums.map(x => (x, 1)).toMap\n        val numsMap18 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap19 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap20 = nums.map(x => (x, 1)).toMap\n        val numsMap21 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap22 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap23 = nums.map(x => (x, 1)).toMap\n        val numsMap24 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap25 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap26 = nums.map(x => (x, 1)).toMap\n        val numsMap27 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap28 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap29 = nums.map(x => (x, 1)).toMap\n        val numsMap30 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap31 = nums.map(x => (x, 1)).to", "     \
    \   val numsSorted = nums.sortWith(_ < _)\n        val evens = numsSorted.filter(_\
    \ % 2 == 0)\n        val odds = numsSorted.filter(_ % 2 != 0)\n        val firstOdds\
    \ = evens.takeWhile(_ % 2 == 0).reverse\n        val lastOdds = evens.takeWhile(_\
    \ % 2 != 0).reverse\n        val firstEvens = odds.takeWhile(_ % 2 == 0)\n   \
    \     val lastEvens = odds.takeWhile(_ % 2 != 0)\n        val firstOddsEvens =\
    \ firstOdds ++ firstEvens\n        val lastOddsEvens = lastOdds ++ lastEvens\n\
    \        val firstOddsEvensLastOdds = firstOddsEvens ++ lastOdds\n        val\
    \ lastOddsEvensFirstOdds = lastOddsEvens ++ firstOdds\n        val firstOddsEvensLastOddsLastEvens\
    \ = firstOddsEvensLastOdds ++ lastEvens\n        val lastOddsEvensFirstOddsLastEvens\
    \ = lastOddsEvensFirstOdds ++ firstEvens\n        val firstOddsEvensLastOddsLastEvensLastOdds\
    \ = firstOddsEvensLastOddsLastEvens ++ lastOdds\n        val lastOddsEvensFirstOddsLastEvensLastOdds\
    \ = lastOddsEvensFirstOddsLastEvens ++ firstOdds\n        val firstOddsEvensLastOddsLastEvensLastOddsLastEvens\
    \ = firstOddsEvensLastOddsLastEvensLastOdds ++ lastEvens\n        val lastOddsEvensFirstOddsLastEvensLastOddsLastEvens\
    \ = lastOddsEvensFirstOddsLastEvensLastOdds ++ firstOdds\n        val firstOddsEvensLastOddsLastEvensLastOddsLastEvensLastOdds\
    \ = firstOddsEvensLastOddsLastEvensLastOddsLastEvens ++ lastOdds\n        val\
    \ lastOddsEvensFirstOddsLastEvensLastOddsLastEvensLastOdds = lastOddsEvensFirstOddsLastEvensLastOddsLastEvens\
    \ ++ ", "        var count = 0\n        var last = 0\n        var first = 0\n\
    \        for (i <- 0 until nums.size) {\n            val num = nums(i)\n     \
    \       if (num > 10) {\n                count += 1\n                last = num\
    \ % 10\n                first = last % 2\n            }\n        }\n        count",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val even = numsSorted.filter(x => x % 2 == 0)\n\
    \        val odd = numsSorted.filter(x => x % 2 != 0)\n        val firstOdd =\
    \ odd.takeWhile(x => x % 2 == 1).length\n        val lastOdd = odd.takeWhile(x\
    \ => x % 2 != 1).length\n        val firstEven = even.takeWhile(x => x % 2 ==\
    \ 1).length\n        val lastEven = even.takeWhile(x => x % 2 != 1).length\n \
    \       val firstOddAndEven = firstOdd + firstEven\n        val lastOddAndEven\
    \ = lastOdd + lastEven\n        val firstOddAndEvenAndLastOdd = firstOddAndEven\
    \ + lastOdd\n        val lastOddAndEvenAndFirstOdd = lastOddAndEven + firstOdd\n\
    \        val firstOddAndEvenAndLastOddAndFirstEven = firstOddAndEvenAndLastOdd\
    \ + firstEven\n        val lastOddAndEvenAndFirstOddAndLastEven = lastOddAndEvenAndFirstOdd\
    \ + lastEven\n        val firstOddAndEvenAndLastOddAndFirstEvenAndLastOdd = firstOddAndEvenAndLastOddAndFirstEven\n\
    \        val lastOddAndEvenAndFirstOddAndLastEvenAndFirstOdd = lastOddAndEvenAndFirstOddAndLastEven\n\
    \        val firstOddAndEvenAndLastOddAndFirstEvenAndLastOddAndFirstEven = firstOddAndEvenAndLastOddAndFirstEvenAndLastOdd\n\
    \        val lastOddAndEvenAndFirstOddAndLastEvenAndFirstOddAndLastEven = lastOddAndEvenAndFirstOddAndLastEvenAndFirstOdd\n\
    \        val firstOddAndEvenAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOdd\
    \ = firstOddAndEvenAndLastOddAndFirstEvenAndLastOddAndFirstEven\n        val lastOddAndEvenAndFirstOddAndLastEvenAndFirstOddAndLastEvenAndFirstOdd\
    \ = lastOddAndEvenAndFirstOddAndLastEvenAndFirstOddAndLastEven\n        val firstOddAndEvenAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastO",
  "        val numsCopy = nums.toList\n        var count = 0\n        for(i <- 0 until\
    \ numsCopy.size) {\n            val num = numsCopy(i)\n            val firstDigit\
    \ = num / 10\n            val lastDigit = num % 10\n            val firstDigitOdd\
    \ = firstDigit % 2 == 1\n            val lastDigitOdd = lastDigit % 2 == 1\n \
    \           if(firstDigitOdd && lastDigitOdd) {\n                count += 1\n\
    \            }\n        }\n        count", "        var count = 0\n        for\
    \ (ns <- nums) {\n            if (ns > 10 && ns % 2 == 1 && ns % 2 == 0) {\n \
    \               count += 1\n            }\n        }\n        count", "      \
    \  var count = 0\n        for (i<- 0 until nums.length)\n            if (nums(i)\
    \ > 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd)\n                count\
    \ += 1\n        count", "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 !=\
    \ 0)\n        numsCopy3.length", "        val numsMap = nums.toMap\n        val\
    \ numsMapKeys = numsMap.keys\n        val numsMapValues = numsMap.values.toList\n\
    \        val numsMapValuesLength = numsMapValues.length\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toLong\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength", "        val numsSorted = nums.sortWith(_ < _)\n   \
    \     val oddNums = numsSorted.filter(_ % 2 != 0)\n        val evenNums = numsSorted.filter(_\
    \ % 2 == 0)\n        val firstOddNum = oddNums.head\n        val lastOddNum =\
    \ oddNums.last\n        val firstEvenNum = evenNums.head\n        val lastEvenNum\
    \ = evenNums.last\n        val firstNum = nums.head\n        val lastNum = nums.last\n\
    \        val firstNumOdd = firstNum % 2 != 0\n        val lastNumOdd = lastNum\
    \ % 2 != 0\n        val firstNumEven = firstNum % 2 == 0\n        val lastNumEven\
    \ = lastNum % 2 == 0\n        val firstNumOddEven = firstNumOdd && firstNumEven\n\
    \        val lastNumOddEven = lastNumOdd && lastNumEven\n        val firstNumOddOdd\
    \ = firstNumOdd && lastNumOdd\n        val lastNumOddOdd = lastNumOdd && firstNumOdd\n\
    \        val firstNumEvenEven = firstNumEven && lastNumEven\n        val lastNumEvenEven\
    \ = lastNumEven && firstNumEven\n        val firstNumEvenOdd = firstNumEven &&\
    \ lastNumOdd\n        val lastNumEvenOdd = lastNumEven && firstNumOdd\n      \
    \  val firstNumOddEvenOdd = firstNumOdd && lastNumEvenOdd\n        val lastNumOddEvenOdd\
    \ = lastNumOdd && firstNumEvenOdd\n        val firstNumEvenEvenOdd = firstNumEven\
    \ && lastNumOddEvenOdd\n        val lastNumEvenEvenOdd = lastNumEven && firstNumOddEvenOdd\n\
    \        val firstNumOddOddEvenOdd = firstNumOdd && lastNumEvenEvenOdd\n     \
    \   val lastNumOddOddEvenOdd = lastNumOdd && firstNumEvenEvenOdd\n        val\
    \ firstNumEvenEvenEvenOdd = firstNumEven && lastNumOddOddEvenOdd\n        val\
    \ lastNumEvenEvenEvenOdd = lastNumEven && firstNumOddOddEvenOdd\n        val firstNumOddOddEvenEvenOdd\
    \ = firstNumOdd && lastNumEvenEvenEvenOdd\n        val lastNumOddOdd", "     \
    \   val numsCopy = nums.toList\n        var count = 0\n        for(i <- 0 until\
    \ numsCopy.size) {\n            val num = numsCopy(i)\n            if(num > 10\
    \ && numsCopy(i).isOdd && numsCopy(i).isOdd) {\n                count += 1\n \
    \           }\n        }\n        count", "        var count = 0\n        for\
    \ (i <- 0 until nums.length) {\n            if (nums(i) > 10 && nums(i) % 2 ==\
    \ 1 && nums(i) != nums(i)) {\n                count += 1\n            }\n    \
    \    }\n        count", "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 ==\
    \ 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        var count = 0\n        for (i <- nums) {\n            if (i > 10 && i %\
    \ 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n       \
    \ }\n        count", "        val numsCopy = nums.toList\n        var count =\
    \ 0\n        for ( i <- 0 until numsCopy.length ) {\n            if ( numsCopy(i)\
    \ > 10 && numsCopy(i).isOdd && numsCopy(i).isOdd ) {\n                count +=\
    \ 1\n            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        val numsSorted = nums.sort\n        var count = 0\n        for(i <- 0 until\
    \ numsSorted.length){\n            val num = numsSorted(i)\n            if(num\
    \ > 10 && numsSorted(i).isOdd && numsSorted(i).isOdd && numsSorted(i).isOdd){\n\
    \                count += 1\n            }\n        }\n        count", "     \
    \   var count = 0\n        for (i <- 0 until nums.size) {\n            if (nums(i)\
    \ > 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1) {\n                count += 1\n\
    \            }\n        }\n        count", "        var count = 0\n        for(i\
    \ <- nums) {\n            if(i.toString.length == 1 && i.toString.charAt(0).toInt\
    \ == 1) {\n                count += 1\n            }\n            if(i.toString.length\
    \ == 2 && i.toString.charAt(0).toInt == 1 && i.toString.charAt(1).toInt == 1)\
    \ {\n                count += 1\n            }\n            if(i.toString.length\
    \ == 3 && i.toString.charAt(0).toInt == 1 && i.toString.charAt(1).toInt == 1 &&\
    \ i.toString.charAt(2).toInt == 1) {\n                count += 1\n           \
    \ }\n            if(i.toString.length == 4 && i.toString.charAt(0).toInt == 1\
    \ && i.toString.charAt(1).toInt == 1 && i.toString.charAt(2).toInt == 1 && i.toString.charAt(3).toInt\
    \ == 1) {\n                count += 1\n            }\n            if(i.toString.length\
    \ == 5 && i.toString.charAt(0).toInt == 1 && i.toString.charAt(1).toInt == 1 &&\
    \ i.toString.charAt(2).toInt == 1 && i.toString.charAt(3).toInt == 1 && i.toString.charAt(4).toInt\
    \ == 1) {\n                count += 1\n            }\n            if(i.toString.length\
    \ == 6 && i.toString.charAt(0).toInt == 1 && i.toString.charAt(1).toInt == 1 &&\
    \ i.toString.charAt(2).toInt == 1 && i.toString.charAt(3).toInt == 1 && i.toString.charAt(4).toInt\
    \ == 1 && i.toString.charAt(5).toInt == 1) {\n                count += 1\n   \
    \         }\n            if(i.toString.length == 7 && i.toString.charAt(0).toInt\
    \ == 1 && i.toString.charAt(1).toInt == 1 && i.toString.charAt(2).toInt == 1 &&\
    \ i.toString.charAt(3).toInt == 1 && i.toString.charAt(4).toInt == 1 && i.toString.charAt(5).toInt\
    \ == 1 && i.toString.charAt(6).toInt == 1) {\n                count += 1\n   \
    \         }\n            if(i.toString.length == 8 && i.toString.charAt(0).toInt\
    \ == 1 && i.toString.charAt(1).toInt == 1 && i.toString.charAt(2).toInt == 1 &&\
    \ i.toString.charAt(3).toInt == 1 && i.toString.charAt(4).toInt == 1 && i.toString.charAt(5).toInt\
    \ == 1 && i.toString.charAt(6).toInt == 1 && i.toString.charAt(7).toInt == 1)\
    \ {\n                count += 1\n            }\n            if(i.toString.length\
    \ == 9 && i.toString.charAt(0).toInt == 1 && i.toString.charAt(1).toInt == 1 &&\
    \ i.toString.charAt(2).toInt == 1 && i.toString.charAt(3).toInt == 1 && i.toString.charAt(4).toInt\
    \ == 1 && i.toString.charAt(5).toInt == 1 && i.toString.charAt(", "        val\
    \ numsCopy = nums.toList\n        var count = 0\n        for (i <- 0 until numsCopy.size)\
    \ {\n            if (numsCopy(i) > 10 && numsCopy(i) %2 == 1 && numsCopy(i) %2\
    \ == 1) {\n                count += 1\n            }\n        }\n        count",
  "        val numsCopy = nums.toList\n        numsCopy.filter(x => x > 10 && numsCopy.last.mod(2).equals(1))",
  "        val numsCopy = nums.toList\n        numsCopy.foreach(x => {\n         \
    \   if (x > 10 && x % 2 == 1 && x % 2 == 0) {\n                numsCopy.remove(x)\n\
    \            }\n        })\n        numsCopy.size", "        var count = 0\n \
    \       for (i <- 0 until nums.length)\n            if (nums(i) > 10 && nums(i)\
    \ % 2 == 1 && nums(i) != nums(i) / 2)\n                count += 1\n        count",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ %\
    \ 2 != 0)\n        val numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7\
    \ = numsCopy6.filter(_ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ %\
    \ 2 != 0)\n        val numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10\
    \ = numsCopy9.filter(_ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_\
    \ % 2 != 0)\n        val numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val\
    \ numsCopy13 = numsCopy12.filter(_ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_\
    \ % 2 != 0)\n        val numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val\
    \ numsCopy16 = numsCopy15.filter(_ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_\
    \ % 2 != 0)\n        val numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val\
    \ numsCopy19 = numsCopy18.filter(_ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_\
    \ % 2 != 0)\n        val numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val\
    \ numsCopy22 = numsCopy21.filter(_ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_\
    \ % 2 != 0)\n        val numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val\
    \ numsCopy25 = numsCopy24.filter(_ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_\
    \ % 2 != 0)\n        val numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val\
    \ numsCopy28 = numsCopy27.filter(_ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_\
    \ % 2 != 0)\n        val numsCopy30 = numsCopy", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        var count = 0\n        for (i <- 0 until numsSorted.length) {\n\
    \            if (numsSorted(i) > 10 && numsSorted(i).isOdd && numsSorted(i).isOdd\
    \ && numsSorted(i).isOdd) {\n                count += 1\n            }\n     \
    \   }\n        count", "        var count = 0\n        var firstOdd = 0\n    \
    \    var lastOdd = 0\n        for(i <- nums) {\n            val n = i.toInt\n\
    \            val firstDigit = n % 10\n            val lastDigit = n % 100\n  \
    \          val firstOddDigit = firstDigit % 2\n            val lastOddDigit =\
    \ lastDigit % 2\n            if((firstOddDigit == 1) && (lastOddDigit == 1)) {\n\
    \                count += 1\n            }\n        }\n        count", "     \
    \   val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n\
    \        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 =\
    \ numsCopy3.filter(_ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2\
    \ != 0)\n        numsCopy5.size", "        val numsCopy = nums.toList\n      \
    \  val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        numsCopy3.size",
  "        var count = 0\n        for(i <- 0 until nums.size) {\n            val num\
    \ = nums(i)\n            if(num > 10 && num % 2 == 1 && nums(i-1) % 2 == 1) {\n\
    \                count += 1\n            }\n        }\n        count", "     \
    \   var count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2\
    \ == 1 && i % 2 != 0) {\n                count += 1\n            }\n        }\n\
    \        count", "        val numsCopy = nums.toList\n        val numsCopy2 =\
    \ numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n\
    \        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        val numsCopy5 =\
    \ numsCopy4.filter(_ > 10 && _ % 2 == 0)\n        val numsCopy6 = numsCopy5.filter(_\
    \ > 10 && _ % 2 != 0)\n        numsCopy6.size", "        val numsCopy = nums.toList\n\
    \        val even = numsCopy.filter(x => x % 2 == 0)\n        val odd = numsCopy.filter(x\
    \ => x % 2 != 0)\n        val evenFirst = even.filter(x => x % 2 == 0 && x !=\
    \ 0)\n        val evenLast = even.filter(x => x % 2 == 0 && x == 0)\n        val\
    \ oddFirst = odd.filter(x => x % 2 != 0 && x != 0)\n        val oddLast = odd.filter(x\
    \ => x % 2 != 0 && x == 0)\n        val firstOdd = evenFirst.filter(x => x % 2\
    \ == 1)\n        val lastOdd = evenLast.filter(x => x % 2 == 1)\n        val firstEven\
    \ = oddFirst.filter(x => x % 2 != 1)\n        val lastEven = oddLast.filter(x\
    \ => x % 2 != 1)\n        val firstOddAndEven = firstOdd.union(firstEven)\n  \
    \      val lastOddAndEven = lastOdd.union(lastEven)\n        val firstOddAndEvenEven\
    \ = firstOddAndEven.union(lastOddAndEven)\n        val firstOddAndEvenEvenEven\
    \ = firstOddAndEvenEven.filter(x => x % 2 == 1)\n        val lastOddAndEvenEven\
    \ = lastOddAndEven.filter(x => x % 2 == 1)\n        val firstOddAndEvenEvenEven\
    \ = firstOddAndEvenEven.filter(x => x % 2 != 1)\n        val lastOddAndEvenEven\
    \ = lastOddAndEven.filter(x => x % 2 != 1)\n        val firstOddAndEvenEvenEvenEven\
    \ = firstOddAndEvenEvenEven.filter(x => x % 2 == 1)\n        val lastOddAndEvenEvenEven\
    \ = lastOddAndEvenEven.filter(x => x % 2 == 1)\n        val firstOddAndEvenEvenEvenEven\
    \ = firstOddAndEvenEvenEven.filter(x => x % 2 != 1)\n        val lastOddAndEvenEvenEven\
    \ = lastOddAndEvenEven.filter(x => x % 2 != 1)\n        val firstOddAndEvenEvenEvenEven\
    \ = firstOddAndEvenEvenEven.filter(x => x % 2 == 1)\n        val lastOddAndEvenEvenEvenEven\
    \ = lastOddAndEvenEvenEven.filter(x => x % 2 == 1)\n        val firstOddAndEvenEvenEvenEvenEven\
    \ = first", "        val numsCopy = nums.toList\n        var count = 0\n     \
    \   for (i <- 0 until numsCopy.size) {\n            if (numsCopy(i) > 10 && numsCopy(i)\
    \ %2 == 1 && numsCopy(i) %2 != 0) {\n                count += 1\n            }\n\
    \        }\n        count", "        val numsMap = nums.map(x => (x % 10, x)).toMap\n\
    \        numsMap.values.filter(x => x > 10 && x._1 % 2 == 1).length", "      \
    \  val numsCopy = nums.toList\n        numsCopy.filter(x => x > 10 && numsCopy.head\
    \ % 2 == 1 && numsCopy.last % 2 == 1).length", "        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(x => {\n            if (x > 10 && x % 2 != 0 && x %\
    \ 2 != 1) {\n                numsCopy.remove(x)\n            }\n        })\n \
    \       numsCopy.size", "        val numsSorted = nums.sortWith(_ < _)\n     \
    \   val odds = numsSorted.filter(_ % 2 == 1)\n        val evens = numsSorted.filter(_\
    \ % 2 == 0)\n        val firstOdds = evens.takeWhile(_ < 10)\n        val lastOdds\
    \ = evens.drop(evens.size - 10)\n        val firstEvens = odds.takeWhile(_ < 10)\n\
    \        val lastEvens = odds.drop(odds.size - 10)\n        val numsGreaterThan10\
    \ = evens.size + odds.size\n        val firstOddsEvens = firstEvens.size + firstOdds.size\n\
    \        val lastOddsEvens = lastEvens.size + lastOdds.size\n        val firstEvensOdds\
    \ = firstOddsEvens.size + firstEvens.size\n        val lastEvensOdds = lastOddsEvens.size\
    \ + lastEvens.size\n        val firstOddsEvensOdds = firstOddsEvens.size + firstEvensOdds.size\n\
    \        val lastOddsEvensOdds = lastOddsEvens.size + lastEvensOdds.size\n   \
    \     val firstEvensOddsOdds = firstEvensOdds.size + firstOddsEvens.size\n   \
    \     val lastEvensOddsOdds = lastEvensOdds.size + lastOddsEvens.size\n      \
    \  val firstOddsEvensOddsOdds = firstOddsEvensOdds.size + firstEvensOddsOdds.size\n\
    \        val lastOddsEvensOddsOdds = lastOddsEvensOdds.size + lastEvensOddsOdds.size\n\
    \        val firstEvensOddsOddsOdds = firstEvensOddsOdds.size + firstOddsEvensOdds.size\n\
    \        val lastEvensOddsOddsOdds = lastEvensOddsOdds.size + lastOddsEvensOdds.size\n\
    \        val firstOddsEvensOddsOddsOdds = firstOddsEvensOddsOdds.size + firstEvensOddsOddsOdds.size\n\
    \        val lastOddsEvensOddsOddsOdds = lastOddsEvensOddsOdds.size + lastEvensOddsOddsOdds.size\n\
    \        val firstEvens", "        var count = 0\n        for (ns <- nums) {\n\
    \            if (ns > 10 && ns % 2 == 1 && ns % 2 == 0) {\n                count\
    \ += 1\n            }\n        }\n        count", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        val even = numsSorted.filter(_ % 2 == 0)\n        val odd = numsSorted.filter(_\
    \ % 2 != 0)\n        val firstOdd = odd.takeWhile(_ < 10)\n        val lastOdd\
    \ = odd.dropWhile(_ < 10).last\n        val firstEven = even.takeWhile(_ < 10)\n\
    \        val lastEven = even.dropWhile(_ < 10).last\n        val firstOddAndLastOdd\
    \ = firstOdd ++ lastOdd\n        val firstEvenAndLastEven = firstEven ++ lastEven\n\
    \        val firstOddAndLastEvenAndLastOdd = firstOddAndLastOdd ++ lastEven\n\
    \        val firstEvenAndLastOddAndLastEven = firstEvenAndLastEven ++ lastOdd\n\
    \        val firstOddAndLastEvenAndLastOddAndLastEven = firstOddAndLastEvenAndLastOdd\
    \ ++ lastEven\n        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEvenAndLastOdd ++ lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOdd ++ lastEven\n        val\
    \ firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven = firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOdd\
    \ ++ lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\n\
    \        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\n\
    \        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAnd", "        val numsCopy = nums.toList\n \
    \       val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_ % 2 != 0)\n        numsCopy4.size",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size", "        val numsCopy\
    \ = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.size", "       \
    \ val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ % 2 ==\
    \ 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n        var\
    \ count = 0\n        for (i <- 0 until numsCopy.size) {\n            if (numsCopy(i)\
    \ > 10) {\n                if (numsCopy(i) mod 2 != 0) {\n                   \
    \ if (numsCopy(i) mod 2 != 1) {\n                        count += 1\n        \
    \            }\n                }\n            }\n        }\n        count", " \
    \       val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        numsCopy3.size",
  "        var count = 0\n        for (i <- nums) {\n            if (i > 10 && i %\
    \ 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n       \
    \ }\n        count", "        val numsMap = nums.map(x => (x, 1)).toMap\n    \
    \    nums.count(x => x > 10 && numsMap.getOrElse(x, 0) % 2 == 1)", "        var\
    \ count = 0\n        var lastDigit = 0\n        var firstDigit = 0\n        for\
    \ (i <- 0 until nums.size) {\n            val num = nums(i)\n            if (num\
    \ > 10) {\n                count += 1\n                lastDigit = num % 10\n\
    \                firstDigit = num / 10\n            }\n        }\n        if (count\
    \ > 0 && firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n            count\n   \
    \     } else {\n            0\n        }", "        val numsCopy = nums.toList\n\
    \        var count = 0\n        for(i <- 0 until numsCopy.size) {\n          \
    \  val num = numsCopy(i)\n            if(num > 10 && numsCopy(i).isOdd && numsCopy(i).isOdd\
    \ && numsCopy(i).isOdd) {\n                count += 1\n            }\n       \
    \ }\n        count", "        val numsMap = nums.map(x => (x, 1)).toMap\n    \
    \    numsMap.filter(_._1 > 10).filter(_._1.isOdd).filter(_._1.isOdd).length",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        numsCopy4.size", "        var count\
    \ = 0\n        for (i <- 0 until nums.length) \n            if (nums(i) > 10 &&\
    \ nums(i) % 2 == 1 && nums(i) % 2 == 1) \n                count += 1\n       \
    \ count", "        var count = 0\n        for (i <- 0 until nums.size) {\n   \
    \         if (nums(i) > 10) {\n                if (nums(i) % 2 == 1 && nums(i-1)\
    \ % 2 == 1) {\n                    count += 1\n                }\n           \
    \ }\n        }\n        count", "        val numsCopy = nums.toList\n        val\
    \ numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        val numsCopy = nums.toList\n        var count = 0\n        for(i <- 0 until\
    \ numsCopy.size) {\n            val num = numsCopy(i)\n            if(num > 10)\
    \ {\n                val firstDigit = num / 10\n                val lastDigit\
    \ = num % 10\n                if(firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \        count", "        val numsCopy = nums.toList\n        numsCopy.filter(_\
    \ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n\
    \        var count = 0\n        for(i <- 0 until numsCopy.size) {\n          \
    \  val num = numsCopy(i)\n            if(num > 10) {\n                if(numsCopy(i-1)\
    \ % 2 == 1 && numsCopy(i+1) % 2 == 1) {\n                    count += 1\n    \
    \            }\n            }\n        }\n        count", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        var count = 0\n        for (i <- 0 until numsSorted.length)\
    \ {\n            if (numsSorted(i) > 10 && numsSorted(i).isOdd && numsSorted(i).isOdd\
    \ && numsSorted(i).isOdd) {\n                count += 1\n            }\n     \
    \   }\n        count", "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 !=\
    \ 0)\n        val numsCopy4 = numsCopy3.filter(_ % 2 != 0)\n        val numsCopy5\
    \ = numsCopy4.filter(_ % 2 != 0)\n        numsCopy5.size", "        val numsCopy\
    \ = nums.toList\n        val evens = numsCopy.filter(x => x % 2 == 0)\n      \
    \  val odds = numsCopy.filter(x => x % 2 != 0)\n        val evensAndOdds = evens.zip(odds)\n\
    \        val evensAndOddsCount = evensAndOdds.filter(x => x._1 == x._2).length\n\
    \        val evensAndOddsFirstAndLast = evensAndOdds.filter(x => x._1 == x._2\
    \ && x._2 == x._1)\n        val evensAndOddsFirstAndLastCount = evensAndOddsFirstAndLast.length\n\
    \        val evensAndOddsFirstAndLastFirstAndLast = evensAndOddsFirstAndLast.filter(x\
    \ => x._1 == x._2 && x._2 == x._1 && x._2 == x._1)\n        val evensAndOddsFirstAndLastFirstAndLastCount\
    \ = evensAndOddsFirstAndLastFirstAndLast.length\n        val evensAndOddsFirstAndLastFirstAndLastFirstAndLast\
    \ = evensAndOddsFirstAndLastFirstAndLast.filter(x => x._1 == x._2 && x._2 == x._1\
    \ && x._2 == x._1 && x._2 == x._1)\n        val evensAndOddsFirstAndLastFirstAndLastFirstAndLastCount\
    \ = evensAndOddsFirstAndLastFirstAndLastFirstAndLast.length\n        val evensAndOddsFirstAndLastFirstAndLastFirstAndLastFirstAndLast\
    \ = evensAndOddsFirstAndLastFirstAndLastFirstAndLast.filter(x => x._1 == x._2\
    \ && x._2 == x._1 && x._2 == x._1 && x._2 == x._1 && x._2 == x._1)\n        val\
    \ evensAndOddsFirstAndLastFirstAndLastFirstAndLastFirstAndLastCount = evensAndOddsFirstAndLastFirstAndLastFirstAndLastFirstAndLast.length\n\
    \        val evensAndOddsFirstAndLastFirstAndLastFirstAndLastFirstAndLastFirstAndLast\
    \ = evensAndOddsFirstAndLastFirstAndLastFirstAndLastFirstAndLast.filter(x => x._1\
    \ == x._2 && x._2 == x._1 && x._2 == x._1 && x._2 == x._1 && x._2 == x._1 && x._2\
    \ == x._1)\n        val evensAndOddsFirstAndLastFirstAndLastFirstAndLastFirstAndLastFirstAndLastCount\
    \ = evensAndOdd", "        var count = 0\n        var lastNum = 0\n        var\
    \ firstNum = 0\n        for(num <- nums) {\n            if(num > 10) {\n     \
    \           if(lastNum % 2 == 1 && firstNum % 2 == 1) {\n                    count\
    \ += 1\n                }\n                lastNum = num\n                firstNum\
    \ = num\n            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_ > 9)\n        val numsCopy5\
    \ = numsCopy4.filter(_ % 2 != 0)\n        numsCopy5.size", "        val numsCopy\
    \ = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        numsCopy5.size",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.size",
  "        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ %\
    \ 2 == 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n    \
    \    var count = 0\n        for(i <- 0 until numsCopy.size) {\n            val\
    \ num = numsCopy(i)\n            if(num > 10 && numsCopy(i).isOdd && numsCopy(i).isOdd\
    \ && numsCopy(i).isOdd) {\n                count += 1\n            }\n       \
    \ }\n        count", "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 ==\
    \ 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ %\
    \ 2 == 1).filter(_ % 2 == 0).size", "        var count = 0\n        for (i <-\
    \ nums) {\n            if (i > 10 && i % 2 != 0 && i % 2 != 1) {\n           \
    \     count += 1\n            }\n        }\n        count", "        var count\
    \ = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i) > 10\
    \ && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n                count\
    \ += 1\n            }\n        }\n        count", "        var count = 0\n   \
    \     for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 != 0) {\n\
    \                count += 1\n            }\n        }\n        count", "     \
    \   val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ % 2 ==\
    \ 1).filter(_ % 2 == 0).size", "        var count = 0\n        for (i <- nums)\
    \ {\n            if (i > 10 && i % 2 != 0 && i % 2 != 1) {\n                count\
    \ += 1\n            }\n        }\n        count", "        val numsSorted = nums.sortWith((x,\
    \ y) => x > y)\n        val oddNums = numsSorted.filter(_ % 2 == 1)\n        val\
    \ firstOddNum = oddNums.head\n        val lastOddNum = oddNums.last\n        val\
    \ firstOddNumOdd = firstOddNum % 2 == 1\n        val lastOddNumOdd = lastOddNum\
    \ % 2 == 1\n        val firstAndLastOddNumOdd = firstOddNumOdd && lastOddNumOdd\n\
    \        val firstAndLastOddNumOddAndLastOddNumOdd = firstAndLastOddNumOdd &&\
    \ lastOddNumOdd && lastOddNumOdd\n        val firstAndLastOddNumOddAndLastOddNumOddAndLastOddNumOdd\
    \ = firstAndLastOddNumOdd && lastOddNumOdd && lastOddNumOdd && lastOddNumOdd &&\
    \ lastOddNumOdd\n        val firstAndLastOddNumOddAndLastOddNumOddAndLastOddNumOddAndLastOddNumOdd\
    \ = firstAndLastOddNumOdd && lastOddNumOdd && lastOddNumOdd && lastOddNumOdd &&\
    \ lastOddNumOdd && lastOddNumOdd && lastOddNumOdd\n        val firstAndLastOddNumOddAndLastOddNumOddAndLastOddNumOddAndLastOddNumOddAndLastOddNumOdd\
    \ = firstAndLastOddNumOdd && lastOddNumOdd && lastOddNumOdd && lastOddNumOdd &&\
    \ lastOddNumOdd && lastOddNumOdd && lastOddNumOdd && lastOddNumOdd && lastOddNumOdd\n\
    \        val firstAndLastOddNumOddAndLastOddNumOddAndLastOddNumOddAndLastOddNumOddAndLastOddNumOddAndLastOddNumOdd\
    \ = firstAndLastOddNumOdd && lastOddNumOdd && lastOddNumOdd && lastOddNumOdd &&\
    \ lastOddNumOdd && lastOddNumOdd && lastOddNumOdd && lastOddNumOdd && lastOddNum",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        var count = 0\n        for (i <- 0 until numsSorted.length)\
    \ {\n            if (numsSorted(i) > 10 && numsSorted(i).isOdd && numsSorted(i).isOdd)\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \       var count = 0\n        for (i <- nums) {\n            if (i > 10 && i\
    \ % 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n     \
    \   }\n        count", "        val numsSorted = nums.sortWith(_ < _)\n      \
    \  val odds = numsSorted.filter(_ % 2 == 1)\n        val evens = numsSorted.filter(_\
    \ % 2 == 0)\n        val firstOdds = evens.takeWhile(_ < 10)\n        val lastOdds\
    \ = evens.dropWhile(_ < 10)\n        val firstEvens = odds.takeWhile(_ < 10)\n\
    \        val lastEvens = odds.dropWhile(_ < 10)\n        val firstOddsEvens =\
    \ firstOdds.zip(lastEvens)\n        val firstEvensOdds = firstEvens.zip(lastOdds)\n\
    \        val firstOddsEvensOdds = firstOddsEvens.filter(x => x._1 < x._2)\n  \
    \      val firstEvensOddsOdds = firstEvensOdds.filter(x => x._1 < x._2)\n    \
    \    val firstOddsEvensOddsOdds = firstOddsEvensOdds.filter(x => x._1 < x._2)\n\
    \        val firstEvensOddsOddsOddsOdds = firstEvensOddsOdds.filter(x => x._1\
    \ < x._2)\n        val firstOddsEvensOddsOddsOddsOdds = firstOddsEvensOddsOdds.filter(x\
    \ => x._1 < x._2)\n        val firstEvensOddsOddsOddsOddsOddsOdds = firstEvensOddsOddsOddsOdds.filter(x\
    \ => x._1 < x._2)\n        val firstOddsEvensOddsOddsOddsOddsOddsOdds = firstOddsEvensOddsOddsOddsOddsOdds.filter(x\
    \ => x._1 < x._2)\n        val firstEvensOddsOddsOddsOddsOddsOddsOddsOdds = firstEvensOddsOddsOddsOddsOddsOddsOdds.filter(x\
    \ => x._1 < x._2)\n        val firstOddsEvensOddsOddsOddsOddsOddsOddsOddsOddsOddsOddsOdds\
    \ = firstOddsEvensO", "        val numsMap = nums.map(x => (x, 1)).toMap\n   \
    \     numsMap.filter(_._1 > 10).filter(_._2._1 % 2 == 1).length", "        val\
    \ numsSorted = nums.sortWith(_ < _)\n        val odd = numsSorted.filter(_ % 2\
    \ == 1)\n        val even = numsSorted.filter(_ % 2 == 0)\n        val first =\
    \ even.head\n        val last = even.last\n        val firstOdd = odd.filter(_\
    \ % 2 == 1)\n        val lastOdd = odd.filter(_ % 2 == 0)\n        val firstEven\
    \ = even.filter(_ % 2 == 0)\n        val lastEven = even.filter(_ % 2 == 1)\n\
    \        val firstOddEven = firstOdd.filter(_ % 2 == 0)\n        val lastOddEven\
    \ = lastOdd.filter(_ % 2 == 0)\n        val firstOddEvenLastOdd = firstOddEven.last\n\
    \        val lastOddEvenLastOdd = lastOddEven.last\n        val firstEvenLastOdd\
    \ = firstEven.last\n        val lastEvenLastOdd = lastEven.last\n        val firstEvenLastOddEven\
    \ = firstEvenLastOdd.filter(_ % 2 == 0)\n        val lastEvenLastOddEven = lastEvenLastOdd.filter(_\
    \ % 2 == 0)\n        val firstEvenLastOddEvenLastOdd = firstEvenLastOddEven.last\n\
    \        val lastEvenLastOddEvenLastOdd = lastEvenLastOddEven.last\n        val\
    \ firstEvenLastOddEvenLastOddEven = firstEvenLastOddEvenLastOdd.filter(_ % 2 ==\
    \ 0)\n        val lastEvenLastOddEvenLastOddEven = lastEvenLastOddEvenLastOdd.filter(_\
    \ % 2 == 0)\n        val firstEvenLastOddEvenLastOddEvenLastOdd = firstEvenLastOddEvenLastOddEven.last\n\
    \        val lastEvenLastOddEvenLastOddEvenLastOdd = lastEvenLastOddEvenLastOddEven.last\n\
    \        val firstEvenLastOddEvenLastOddEvenLastOddEven = firstEvenLastOddEvenLastOddEvenLastOdd.filter(_\
    \ % 2 == 0)\n        val lastEvenLastOddEvenLastOddEvenLastOddEven = lastEvenLastOddEvenLastOddEvenLastOdd.filter(_\
    \ % 2 == 0)\n        val firstEvenLastOddEvenLastOddEvenLastOddEvenLastOdd = firstEvenLastOddEvenLastOddEvenLastOdd",
  "        val numsCopy = nums.toList\n        var count = 0\n        for (i <- 0\
    \ until numsCopy.size) {\n            if (numsCopy(i) > 10) {\n              \
    \  if (numsCopy(i) mod 2 != 0) {\n                    if (numsCopy(i) mod 2 !=\
    \ 1) {\n                        count += 1\n                    }\n          \
    \      }\n            }\n        }\n        count", "        var count = 0\n \
    \       var lastDigit = 0\n        var firstDigit = 0\n        for (i <- nums)\
    \ {\n            if (i > 10) {\n                count += 1\n                lastDigit\
    \ = i\n            } else {\n                if (i % 2 == 1) {\n             \
    \       firstDigit = i\n                }\n            }\n        }\n        if\
    \ (count == 0) {\n            return 0\n        }\n        if (lastDigit % 2 ==\
    \ 1 && firstDigit % 2 == 1) {\n            count += 1\n        }\n        return\
    \ count", "        val numsSorted = nums.sortWith(_ < _)\n        val numsFiltered\
    \ = numsSorted.filter(_ > 10)\n        val firstOddNum = numsFiltered.head\n \
    \       val lastOddNum = numsFiltered.last\n        val firstOddNumIsOdd = firstOddNum\
    \ % 2 != 0\n        val lastOddNumIsOdd = lastOddNum % 2 != 0\n        if (firstOddNumIsOdd\
    \ && lastOddNumIsOdd) {\n            numsSorted.length\n        } else {\n   \
    \         numsSorted.length + 1\n        }", "        val numsSorted = nums.sortWith((x,\
    \ y) => x > y)\n        val oddNums = numsSorted.filter(_ % 2 != 0)\n        val\
    \ firstOddNum = oddNums.head\n        val lastOddNum = oddNums.last\n        val\
    \ firstOddNumOddNum = firstOddNum * lastOddNum\n        val firstOddNumEvenNum\
    \ = firstOddNum * evenNums(firstOddNum)\n        val firstOddNumOddNumEvenNum\
    \ = firstOddNumOddNum * evenNums(firstOddNumEvenNum)\n        val firstOddNumOddNumEvenNumEvenNum\
    \ = firstOddNumOddNumEvenNum * evenNums(firstOddNumEvenNum)\n        val firstOddNumOddNumEvenNumEvenNumEvenNum\
    \ = firstOddNumOddNumEvenNumEvenNum * evenNums(firstOddNumEvenNumEvenNum)\n  \
    \      val firstOddNumOddNumEvenNumEvenNumEvenNumEvenNum = firstOddNumOddNumEvenNumEvenNumEvenNum\
    \ * evenNums(firstOddNumEvenNumEvenNumEvenNumEvenNum)\n        val firstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNum\
    \ = firstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNum * evenNums(firstOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNum)\n\
    \        val firstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNum = firstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNum\
    \ * evenNums(firstOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEven)\n\
    \        val firstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNum\
    \ = firstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNum * evenNums(firstOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEven)\n\
    \        val firstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEven\
    \ = firstOddNumOddNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNumEvenNum\
    \ * evenNums(firstOddNumEvenNumEvenNum", "        var count = 0\n        for (i\
    \ <- nums) {\n            if (i > 10 && i % 2 != 0 && i % 2 != 1) {\n        \
    \        count += 1\n            }\n        }\n        count", "        var count\
    \ = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 && i %\
    \ 2 != 1) {\n                count += 1\n            }\n        }\n        count",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.length", "        var count\
    \ = 0\n        var last = 0\n        var first = 0\n        var odd = 0\n    \
    \    for (i <- 0 until nums.size) {\n            val n = nums(i)\n           \
    \ if (n > 10) {\n                count += 1\n                if (n % 2 == 1) {\n\
    \                    odd += 1\n                }\n                if (n % 2 ==\
    \ 0) {\n                    first += 1\n                }\n                if\
    \ (n % 2 == 0) {\n                    last += 1\n                }\n         \
    \   }\n        }\n        count + odd", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_ % 2 != 0)\n        val\
    \ numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        val numsCopy6 = numsCopy5.filter(_\
    \ % 2 != 0)\n        val numsCopy7 = numsCopy6.filter(_ % 2 != 0)\n        val\
    \ numsCopy8 = numsCopy7.filter(_ % 2 != 0)\n        val numsCopy9 = numsCopy8.filter(_\
    \ % 2 != 0)\n        val numsCopy10 = numsCopy9.filter(_ % 2 != 0)\n        val\
    \ numsCopy11 = numsCopy10.filter(_ % 2 != 0)\n        val numsCopy12 = numsCopy11.filter(_\
    \ % 2 != 0)\n        val numsCopy13 = numsCopy12.filter(_ % 2 != 0)\n        val\
    \ numsCopy14 = numsCopy13.filter(_ % 2 != 0)\n        val numsCopy15 = numsCopy14.filter(_\
    \ % 2 != 0)\n        val numsCopy16 = numsCopy15.filter(_ % 2 != 0)\n        val\
    \ numsCopy17 = numsCopy16.filter(_ % 2 != 0)\n        val numsCopy18 = numsCopy17.filter(_\
    \ % 2 != 0)\n        val numsCopy19 = numsCopy18.filter(_ % 2 != 0)\n        val\
    \ numsCopy20 = numsCopy19.filter(_ % 2 != 0)\n        val numsCopy21 = numsCopy20.filter(_\
    \ % 2 != 0)\n        val numsCopy22 = numsCopy21.filter(_ % 2 != 0)\n        val\
    \ numsCopy23 = numsCopy22.filter(_ % 2 != 0)\n        val numsCopy24 = numsCopy23.filter(_\
    \ % 2 != 0)\n        val numsCopy25 = numsCopy24.filter(_ % 2 != 0)\n        val\
    \ numsCopy26 = numsCopy25.filter(_ % 2 != 0)\n        val numsCopy27 = numsCopy26.filter(_\
    \ % 2 != 0)\n        val numsCopy28 = numsCopy27.filter(_ % 2 != 0)\n        val\
    \ numsCopy29 = numsCopy28.filter(_ % 2 != 0)\n        val numsCopy30 = numsCopy",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size", "        val numsMap\
    \ = nums.map(x => (x, 1)).toMap\n        val numsMap2 = nums.map(x => (x, 1)).toMap\n\
    \        val numsMap3 = nums.map(x => (x, 1)).toMap\n        val numsMap4 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap5 = nums.map(x => (x, 1)).toMap\n     \
    \   val numsMap6 = nums.map(x => (x, 1)).toMap\n        val numsMap7 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap8 = nums.map(x => (x, 1)).toMap\n     \
    \   val numsMap9 = nums.map(x => (x, 1)).toMap\n        val numsMap10 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap11 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap12 = nums.map(x => (x, 1)).toMap\n        val numsMap13 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap14 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap15 = nums.map(x => (x, 1)).toMap\n        val numsMap16 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap17 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap18 = nums.map(x => (x, 1)).toMap\n        val numsMap19 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap20 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap21 = nums.map(x => (x, 1)).toMap\n        val numsMap22 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap23 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap24 = nums.map(x => (x, 1)).toMap\n        val numsMap25 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap26 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap27 = nums.map(x => (x, 1)).toMap\n        val numsMap28 = nums.map(x\
    \ => (x, 1)).toMap\n        val numsMap29 = nums.map(x => (x, 1)).toMap\n    \
    \    val numsMap30 = nums.map(x => (x, 1)).toMap\n        val numsMap31 = nums.map(x\
    \ => (x, 1)).to", "        val numsSorted = nums.sortWith(_ < _)\n        val\
    \ odds = numsSorted.filter(_ % 2 == 1)\n        val evens = numsSorted.filter(_\
    \ % 2 == 0)\n        val firstOdds = evens.takeWhile(_ < 10)\n        val lastOdds\
    \ = evens.dropWhile(_ < 10).reverse\n        odds.length + firstOdds.length +\
    \ lastOdds.length", "        val numsCopy = nums.toList\n        numsCopy.foreach(x\
    \ => if (x > 10 && x % 2 == 1 && x % 2 == 0) numsCopy.remove(x))\n        numsCopy.size",
  "        var count = 0\n        for (i<- nums) {\n            if (i > 10 && i %\
    \ 2 == 1 && i % 2 == 0) {\n                count += 1\n            }\n       \
    \ }\n        count", "        var count = 0\n        for ( n <- nums ) {\n   \
    \         if ( n > 10 && n % 2 == 1 && n % 10 == 5 ) {\n                count\
    \ += 1\n            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_ > 0)\n        val numsCopy5\
    \ = numsCopy4.filter(_ % 2 != 0)\n        numsCopy5.size", "        val numsCopy\
    \ = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size", "        var count = 0\n        for (i <-\
    \ nums) {\n            if (i > 10 && i % 2 != 0 && i % 2 != 1) {\n           \
    \     count += 1\n            }\n        }\n        count", "        var count\
    \ = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 && i %\
    \ 2 != 1) {\n                count += 1\n            }\n        }\n        count"]
stop_tokens:
- "\n    }\n"
