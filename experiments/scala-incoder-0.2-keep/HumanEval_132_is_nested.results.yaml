language: scala
name: HumanEval_132_is_nested
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string)\n        var openBrackets = 0\n        var closeBrackets\
    \ = 0\n        while (brackets.length > 0) {\n            val current = brackets.head\n\
    \            if (current == '[') {\n                openBrackets += 1\n      \
    \      } else if (current == ']') {\n                closeBrackets += 1\n    \
    \        } else if (current == '[' && closeBrackets > 0) {\n                closeBrackets\
    \ -= 1\n            } else if (current == ']' && openBrackets > 0) {\n       \
    \         openBrackets -= 1\n            }\n            brackets = brackets.tail\n\
    \        }\n        return openBrackets == 0 && closeBrackets == 0\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv9shb113.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ArrayBuffer(string)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpv9shb113.scala:28:21 -----------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            brackets = brackets.tail\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val brackets\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799232
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string)\n        val openings = mutable.HashSet[String]()\n\
    \        val closings = mutable.HashSet[String]()\n        val openings_count\
    \ = mutable.HashMap[String, Int]()\n        val closings_count = mutable.HashMap[String,\
    \ Int]()\n        val openings_count_sorted = mutable.HashMap[String, Int]()\n\
    \        val closings_count_sorted = mutable.HashMap[String, Int]()\n        val\
    \ openings_count_sorted_reverse = mutable.HashMap[String, Int]()\n        val\
    \ closings_count_sorted_reverse = mutable.HashMap[String, Int]()\n        val\
    \ openings_count_sorted_reverse2 = mutable.HashMap[String, Int]()\n        val\
    \ closings_count_sorted_reverse2 = mutable.HashMap[String, Int]()\n        val\
    \ openings_count_sorted_reverse3 = mutable.HashMap[String, Int]()\n        val\
    \ closings_count_sorted_reverse3 = mutable.HashMap[String, Int]()\n        val\
    \ openings_count_sorted_reverse4 = mutable.HashMap[String, Int]()\n        val\
    \ closings_count_sorted_reverse4 = mutable.HashMap[String, Int]()\n        val\
    \ openings_count_sorted_reverse5 = mutable.HashMap[String, Int]()\n        val\
    \ closings_count_sorted_reverse5 = mutable.HashMap[String, Int]()\n        val\
    \ openings_count_sorted_reverse6 = mutable.HashMap[String, Int]()\n        val\
    \ closings_count_sorted_reverse6 = mutable.HashMap[String, Int]()\n        val\
    \ openings_count_sorted_reverse7 = mutable.HashMap[String, Int]()\n        val\
    \ closings_count_sorted_reverse7 = mutable.HashMap[String, Int]()\n        val\
    \ openings_count_sorted_reverse8 = mutable.HashMap[String, Int]()\n        val\
    \ closings_count_sorted_reverse8 = mutable.HashMap[String, Int]()\n        val\
    \ openings_count_sorted_reverse9 = mutable.HashMap[String, Int]()\n        val\
    \ closings_count_sorted_reverse9 = mutable.HashMap[String, Int]()\n        val\
    \ openings_count_sorted_reverse10 = mutable.HashMap[String, Int]()\n        val\
    \ closings_count_sorted_reverse10 = mutable.HashMap[String, Int]()\n        val\
    \ openings_count_sorted_reverse11 = mutable.HashMap[String, Int]()\n        val\
    \ closings_count_sorted_reverse11 = mutable.HashMap[String, Int]()\n        val\
    \ openings_count_sorted_reverse12 = mutable.HashMap[String, Int]()\n        val\
    \ closings_count_sorted_reverse12 = mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpklzr1cfx.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpklzr1cfx.scala:14:23 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ArrayBuffer(string)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpklzr1cfx.scala:15:23 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopenings\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpklzr1cfx.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mclosings\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpklzr1cfx.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenings_count\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpklzr1cfx.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mclosings_count\e[0m = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \      "
  stdout: ''
  timestamp: 1659799235
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[').toList\n        val bracketsCount = brackets.length\n  \
    \      val openBrackets = brackets.filter(x => x == '[').length\n        val closeBrackets\
    \ = brackets.filter(x => x == ']').length\n        val openBracketsCount = openBrackets\n\
    \        val closeBracketsCount = closeBrackets\n        val openBracketsCountMinusCloseBrackets\
    \ = openBracketsCount - closeBracketsCount\n        val openBracketsCountMinusCloseBracketsLessThanOrEqualTo2\
    \ = openBracketsCountMinusCloseBrackets <= 2\n        val openBracketsCountMinusCloseBracketsLessThanOrEqualTo3\
    \ = openBracketsCountMinusCloseBrackets <= 3\n        val openBracketsCountMinusCloseBracketsLessThanOrEqualTo4\
    \ = openBracketsCountMinusCloseBrackets <= 4\n        val openBracketsCountMinusCloseBracketsLessThanOrEqualTo5\
    \ = openBracketsCountMinusCloseBrackets <= 5\n        val openBracketsCountMinusCloseBracketsLessThanOrEqualTo6\
    \ = openBracketsCountMinusCloseBrackets <= 6\n        val openBracketsCountMinusCloseBracketsLessThanOrEqualTo7\
    \ = openBracketsCountMinusCloseBrackets <= 7\n        val openBracketsCountMinusCloseBracketsLessThanOrEqualTo8\
    \ = openBracketsCountMinusCloseBrackets <= 8\n        val openBracketsCountMinusCloseBracketsLessThanOrEqualTo9\
    \ = openBracketsCountMinusCloseBrackets <= 9\n        val openBracketsCountMinusCloseBracketsLessThanOrEqualTo10\
    \ = openBracketsCountMinusCloseBrackets <= 10\n        val openBracketsCountMinusCloseBracketsLessThanOrEqualTo11\
    \ = openBracketsCountMinusCloseBrackets <= 11\n        val openBracketsCountMinusCloseBracketsLessThanOrEqualTo12\
    \ = openBracketsCountMinusCloseBrackets <= 12\n        val openBracketsCountMinusCloseBracketsLessThanOrEqualTo13\
    \ = openBracketsCountMinusCloseBrackets <= 13\n        val openBracketsCountMinusCloseBracketsLess\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9sieg7_e.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp9sieg7_e.scala:16:48\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33mval\e[0m \e[36mopenBrackets\e[0m = brackets.filter(\e[36mx\e[0m => x ==\
    \ \e[31m'['\e[0m).length\n\e[31m\e[31m   |\e[0m                              \
    \                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp9sieg7_e.scala:17:49\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mcloseBrackets\e[0m = brackets.filter(\e[36mx\e[0m => x\
    \ == \e[31m']'\e[0m).length\n\e[31m\e[31m   |\e[0m                           \
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9sieg7_e.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799236
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        brackets += \"[\" \n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvjqof0h5.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Write\
    \ your code here\n        val stack = mutable.Stack[String]()\n        val brackets\
    \ = mutable.HashSet[String]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount2 = mutable.HashMap[String, Int]()\n      \
    \  val bracketsCount3 = mutable.HashMap[String, Int]()\n        val bracketsCount4\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount5 = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount6 = mutable.HashMap[String, Int]()\n      \
    \  val bracketsCount7 = mutable.HashMap[String, Int]()\n        val bracketsCount8\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount9 = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount10 = mutable.HashMap[String, Int]()\n     \
    \   val bracketsCount11 = mutable.HashMap[String, Int]()\n        val bracketsCount12\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount13 = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount14 = mutable.HashMap[String, Int]()\n     \
    \   val bracketsCount15 = mutable.HashMap[String, Int]()\n        val bracketsCount16\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount17 = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount18 = mutable.HashMap[String, Int]()\n     \
    \   val bracketsCount19 = mutable.HashMap[String, Int]()\n        val bracketsCount20\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount21 = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount22 = mutable.HashMap[String, Int]()\n     \
    \   val bracketsCount23 = mutable.HashMap[String, Int]()\n        val bracketsCount24\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount25 = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount26 = mutable.HashMap[String, Int]()\n     \
    \   val bracketsCount27 = mutable.HashMap[String, Int]()\n        val bracketsCount28\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount29 = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount30 = mutable.HashMap[String, Int]()\n     \
    \   val bracketsCount31 = mutable.HashMap[String, Int]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo8gf9v0q.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpo8gf9v0q.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpo8gf9v0q.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo8gf9v0q.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mbracketsCount2\e[0m = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpo8gf9v0q.scala:19:29 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount3\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo"
  stdout: ''
  timestamp: 1659799236
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val nestedBrackets\
    \ = brackets.filter(_.contains(\"[\")) \n        val notNestedBrackets = brackets.filter(_.contains(\"\
    ]\"))\n        nestedBrackets.forall(_.contains(\"[\")) && notNestedBrackets.forall(_.contains(\"\
    ]\"))\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxsezeasf.scala:21)\n\tat Problem.main(tmpxsezeasf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799237
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val openBrackets = mutable.ListBuffer[String]()\n\
    \        val closeBrackets = mutable.ListBuffer[String]()\n        val openBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount2 = mutable.ListBuffer[Int]()\n        val closeBracketsCount2\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount3 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount3 = mutable.ListBuffer[Int]()\n        val openBracketsCount4\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount4 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount5 = mutable.ListBuffer[Int]()\n        val closeBracketsCount5\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount6 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount6 = mutable.ListBuffer[Int]()\n        val openBracketsCount7\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount7 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount8 = mutable.ListBuffer[Int]()\n        val closeBracketsCount8\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount9 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount9 = mutable.ListBuffer[Int]()\n        val openBracketsCount10\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount10 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount11 = mutable.ListBuffer[Int]()\n        val closeBracketsCount11\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount12 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount12 = mutable.ListBuffer[Int]()\n        val openBracketsCount13\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount13 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount14 = mutable.ListBuffer[Int]()\n        val closeBracketsCount14\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpocafe7du.scala:44:34 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsCount14\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpocafe7du.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpocafe7du.scala:15:27\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpocafe7du.scala:16:28 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpocafe7du.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoc"
  stdout: ''
  timestamp: 1659799236
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        brackets += \"[\" \n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        val\
    \ bracketsString = brackets.mkString(\"\")\n        val bracketsStringLength =\
    \ bracketsString.length\n        val bracketsStringArray = bracketsString.toCharArray\n\
    \        val bracketsStringArrayLength = bracketsStringArray.length\n        val\
    \ bracketsStringArrayIterator = bracketsStringArray.iterator\n        val bracketsStringArrayIteratorNext\
    \ = bracketsStringArrayIterator.next\n        val bracketsStringArrayIteratorNextString\
    \ = bracketsStringArrayIteratorNext.toString\n        val bracketsStringArrayIteratorNextChar\
    \ = bracketsStringArrayIteratorNextString.charAt(0)\n        val bracketsStringArrayIteratorNextCharLength\
    \ = bracketsStringArrayIteratorNextString.length\n        val bracketsStringArrayIteratorNextCharArray\
    \ = bracketsStringArrayIteratorNextString.toCharArray\n        val bracketsStringArrayIteratorNextCharArrayLength\
    \ = bracketsStringArrayIteratorNextCharArray.length\n        val bracketsStringArrayIteratorNextCharArrayIterator\
    \ = bracketsStringArrayIteratorNextCharArray.iterator\n        val bracketsStringArrayIteratorNextCharArrayIteratorNext\
    \ = bracketsStringArrayIteratorNextCharArrayIterator.next\n        val bracketsStringArrayIteratorNextCharArrayIteratorNextString\
    \ = bracketsStringArrayIteratorNextCharArrayIteratorNext.toString\n        val\
    \ bracketsStringArrayIteratorNextCharArrayIteratorNextChar = bracketsStringArrayIteratorNextCharArrayIteratorNextString.charAt(0)\n\
    \        val bracketsStringArrayIteratorNextCharArrayIteratorNextCharLength =\
    \ bracketsStringArrayIteratorNextCharArrayIteratorNextString.length\n        val\
    \ bracketsStringArrayIteratorNextCharArrayIteratorNextCharArray = bracketsStringArrayIteratorNextCharArrayIteratorNextString.toCharArray\n\
    \        val bracketsStringArrayIteratorNextCharArrayIteratorNextCharArrayLength\
    \ = bracketsStringArrayIteratorNextCharArrayIteratorNextCharArray.length\n   \
    \     val bracketsStringArrayIteratorNextCharArrayIteratorNextCharArrayIterator\
    \ = bracketsStringArrayIteratorNextCharArrayIteratorNextCharArray.iterator\n \
    \       val bracketsStringArrayIteratorNextCharArrayIteratorNextCharArrayIteratorNext\
    \ = bracketsStringArrayIteratorNextCharArrayIteratorNextCharArrayIterator.next\n\
    \        val bracketsStringArrayIteratorNextCharArrayIteratorNextCharArrayIteratorNextString\
    \ = bracketsStringArrayIteratorNextCharArrayIteratorNextCharArrayIteratorNext.toString\n\
    \        val bracketsStringArrayIteratorNextCharArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp39pshdfp.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp39pshdfp.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp39pshdfp.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799236
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").map(_.toInt)\n        val stack = mutable.Stack[Int]()\n\
    \        val openBrackets = mutable.HashSet[Int]()\n        val closeBrackets\
    \ = mutable.HashSet[Int]()\n        val openBracketsCount = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount = mutable.HashMap[Int, Int]()\n     \
    \   val openBracketsCount2 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount2\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount3 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount4 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount4\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount5 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount6 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount6\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount7 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount7 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount8 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount8\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount9 = mutable.HashMap[Int, Int]()\n    \
    \    val openBracketsCount10 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount10\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount11 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBracketsCount11 = mutable.HashMap[Int, Int]()\n   \
    \     val openBracketsCount12 = mutable.HashMap[Int, Int]()\n        val closeBracketsCount12\
    \ = mutable.HashMap[Int, Int]()\n        val openBracketsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val closeBra\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp52rrdvp6.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp52rrdvp6.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp52rrdvp6.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp52rrdvp6.scala:17:28 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.HashSet[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp52rrdvp6.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp52rrdvp6.scala:19:33 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBracketsCount\e[0m = mutable.HashMap[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659799236
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.Set[Char]()\n        val openBrackets = mutable.Set[Char]()\n    \
    \    val closeBrackets = mutable.Set[Char]()\n        val openBracketsCount =\
    \ mutable.Set[Int]()\n        val closeBracketsCount = mutable.Set[Int]()\n  \
    \      val openBracketsCount2 = mutable.Set[Int]()\n        val closeBracketsCount2\
    \ = mutable.Set[Int]()\n        val openBracketsCount3 = mutable.Set[Int]()\n\
    \        val closeBracketsCount3 = mutable.Set[Int]()\n        val openBracketsCount4\
    \ = mutable.Set[Int]()\n        val closeBracketsCount4 = mutable.Set[Int]()\n\
    \        val openBracketsCount5 = mutable.Set[Int]()\n        val closeBracketsCount5\
    \ = mutable.Set[Int]()\n        val openBracketsCount6 = mutable.Set[Int]()\n\
    \        val closeBracketsCount6 = mutable.Set[Int]()\n        val openBracketsCount7\
    \ = mutable.Set[Int]()\n        val closeBracketsCount7 = mutable.Set[Int]()\n\
    \        val openBracketsCount8 = mutable.Set[Int]()\n        val closeBracketsCount8\
    \ = mutable.Set[Int]()\n        val openBracketsCount9 = mutable.Set[Int]()\n\
    \        val closeBracketsCount9 = mutable.Set[Int]()\n        val openBracketsCount10\
    \ = mutable.Set[Int]()\n        val closeBracketsCount10 = mutable.Set[Int]()\n\
    \        val openBracketsCount11 = mutable.Set[Int]()\n        val closeBracketsCount11\
    \ = mutable.Set[Int]()\n        val openBracketsCount12 = mutable.Set[Int]()\n\
    \        val closeBracketsCount12 = mutable.Set[Int]()\n        val openBracketsCount13\
    \ = mutable.Set[Int]()\n        val closeBracketsCount13 = mutable.Set[Int]()\n\
    \        val openBracketsCount14 = mutable.Set[Int]()\n        val closeBracketsCount14\
    \ = mutable.Set[Int]()\n        val openBracketsCount15 = mutable.Set[Int]()\n\
    \        val closeBracket\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp10bu6dz3.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp10bu6dz3.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.Set[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp10bu6dz3.scala:15:27\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.Set[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp10bu6dz3.scala:16:28 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.Set[\e[35mChar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp10bu6dz3.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp10bu6dz3.scala:18:33\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsCount\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \             "
  stdout: ''
  timestamp: 1659799235
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n        val bracketsCount = brackets.length\n\
    \        val openBrackets = brackets.filter(_.contains(\"[\")).length\n      \
    \  val closeBrackets = brackets.filter(_.contains(\"]\")).length\n        val\
    \ openBracketsCount = openBrackets\n        val closeBracketsCount = closeBrackets\n\
    \        val openBracketsCountMinusCloseBrackets = openBracketsCount - closeBracketsCount\n\
    \        val openBracketsCountMinusCloseBracketsLessOrEqualToOne = openBracketsCountMinusCloseBrackets\
    \ <= 1\n        val openBracketsCountMinusCloseBracketsLessOrEqualToTwo = openBracketsCountMinusCloseBrackets\
    \ <= 2\n        val openBracketsCountMinusCloseBracketsLessOrEqualToThree = openBracketsCountMinusCloseBrackets\
    \ <= 3\n        val openBracketsCountMinusCloseBracketsLessOrEqualToFour = openBracketsCountMinusCloseBrackets\
    \ <= 4\n        val openBracketsCountMinusCloseBracketsLessOrEqualToFive = openBracketsCountMinusCloseBrackets\
    \ <= 5\n        val openBracketsCountMinusCloseBracketsLessOrEqualToSix = openBracketsCountMinusCloseBrackets\
    \ <= 6\n        val openBracketsCountMinusCloseBracketsLessOrEqualToSeven = openBracketsCountMinusCloseBrackets\
    \ <= 7\n        val openBracketsCountMinusCloseBracketsLessOrEqualToEight = openBracketsCountMinusCloseBrackets\
    \ <= 8\n        val openBracketsCountMinusCloseBracketsLessOrEqualToNine = openBracketsCountMinusCloseBrackets\
    \ <= 9\n        val openBracketsCountMinusCloseBracketsLessOrEqualToTen = openBracketsCountMinusCloseBrackets\
    \ <= 10\n        val openBracketsCountMinusCloseBracketsLessOrEqualToEleven =\
    \ openBracketsCountMinusCloseBrackets <= 11\n        val openBracketsCountMinusCloseBracketsLessOrEqualToTwelve\
    \ = openBracketsCountMinusCloseBrackets <= 12\n        val openBracket\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp60hqammt.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp60hqammt.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799236
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val nested = brackets.filter(_.nonEmpty).map(_.head).distinct\n\
    \        nested.size == brackets.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ws6nhpa.scala:20)\n\tat Problem.main(tmp7ws6nhpa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799237
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val stack = mutable.Stack[String]()\n\
    \        val bracketsCount = brackets.length\n        val stackCount = stack.length\n\
    \        val isNested = bracketsCount > 0 && stackCount > 0\n        val isNestedInsideBrackets\
    \ = brackets.exists(bracket => {\n            val bracketIndex = brackets.indexOf(bracket)\n\
    \            stack.push(bracket)\n            stack.push(bracket)\n          \
    \  stack.push(bracket)\n            stack.push(bracket)\n            stack.push(bracket)\n\
    \            stack.push(bracket)\n            stack.push(bracket)\n          \
    \  stack.push(bracket)\n            stack.push(bracket)\n            stack.push(bracket)\n\
    \            stack.push(bracket)\n            stack.push(bracket)\n          \
    \  stack.push(bracket)\n            stack.push(bracket)\n            stack.push(bracket)\n\
    \            stack.push(bracket)\n            stack.push(bracket)\n          \
    \  stack.push(bracket)\n            stack.push(bracket)\n            stack.push(bracket)\n\
    \            stack.push(bracket)\n            stack.push(bracket)\n          \
    \  stack.push(bracket)\n            stack.push(bracket)\n            stack.push(bracket)\n\
    \            stack.push(bracket)\n            stack.push(bracket)\n          \
    \  stack.push(bracket)\n            stack.push(bracket)\n            stack.push(bracket)\n\
    \            stack.push(bracket)\n            stack.push(bracket)\n          \
    \  stack.push(bracket)\n            stack.push(bracket)\n            stack.push(bracket)\n\
    \            stack.push(bracket)\n            stack.push(bracket)\n          \
    \  stack.push(bracket)\n            stack.push(bracket)\n            stack.push(bracket)\n\
    \            stack.push(bracket)\n            stack.push(bracket)\n          \
    \  stack.push(bracket)\n            stack.push(bracket)\n            stack.push(bracket)\n\
    \            stack.push(bracket)\n            stack.push(bracket)\n          \
    \  stack.push(bracket)\n            stack.push(bracket)\n            stack.push(bracket)\n\
    \            stack.push(bracket)\n            stack.push(bracket)\n          \
    \  stack.push(bracket)\n            stack.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp14xdeucn.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp14xdeucn.scala:76:4 ----------------------------\e[0m\e[0m\n\e[31m76\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp14xdeucn.scala:94:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m94 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp14xdeucn.scala:15:20 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp14xdeucn.scala:93:1 ---------------------\e[0m\e\
    [0m\n\e[31m93 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:  \
    \  Unit\n\e[31m   |\e[0m Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659799235
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n        val brackets = mutable.Set[Char]()\n        val openBrackets\
    \ = mutable.Set[Char]()\n        val closeBrackets = mutable.Set[Char]()\n   \
    \     val openBracketsCount = mutable.Set[Int]()\n        val closeBracketsCount\
    \ = mutable.Set[Int]()\n        val openBracketsCountMap = mutable.Map[Char, Int]()\n\
    \        val closeBracketsCountMap = mutable.Map[Char, Int]()\n        val openBracketsCountMap2\
    \ = mutable.Map[Char, Int]()\n        val closeBracketsCountMap2 = mutable.Map[Char,\
    \ Int]()\n        val openBracketsCountMap3 = mutable.Map[Char, Int]()\n     \
    \   val closeBracketsCountMap3 = mutable.Map[Char, Int]()\n        val openBracketsCountMap4\
    \ = mutable.Map[Char, Int]()\n        val closeBracketsCountMap4 = mutable.Map[Char,\
    \ Int]()\n        val openBracketsCountMap5 = mutable.Map[Char, Int]()\n     \
    \   val closeBracketsCountMap5 = mutable.Map[Char, Int]()\n        val openBracketsCountMap6\
    \ = mutable.Map[Char, Int]()\n        val closeBracketsCountMap6 = mutable.Map[Char,\
    \ Int]()\n        val openBracketsCountMap7 = mutable.Map[Char, Int]()\n     \
    \   val closeBracketsCountMap7 = mutable.Map[Char, Int]()\n        val openBracketsCountMap8\
    \ = mutable.Map[Char, Int]()\n        val closeBracketsCountMap8 = mutable.Map[Char,\
    \ Int]()\n        val openBracketsCountMap9 = mutable.Map[Char, Int]()\n     \
    \   val closeBracketsCountMap9 = mutable.Map[Char, Int]()\n        val openBracketsCountMap10\
    \ = mutable.Map[Char, Int]()\n        val closeBracketsCountMap10 = mutable.Map[Char,\
    \ Int]()\n        val openBracketsCountMap11 = mutable.Map[Char, Int]()\n    \
    \    val closeBracketsCountMap11 = mutable.Map[Char, Int]()\n        val openBracketsCountMap12\
    \ = mutable.Map[Char, Int]()\n        val closeBracketsCountMap12 = mutable.Map[Char,\
    \ Int]()\n        val openBracketsCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwuaqhxri.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwuaqhxri.scala:15:23\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.Set[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwuaqhxri.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.Set[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwuaqhxri.scala:17:28 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.Set[\e[35mChar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpwuaqhxri.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwuaqhxri.scala:19:33\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsCount\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \             "
  stdout: ''
  timestamp: 1659799236
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string.length)\n        var openBrackets = 0\n       \
    \ var closedBrackets = 0\n        var openBracketsCount = 0\n        var closedBracketsCount\
    \ = 0\n        var openBracketsCountMax = 0\n        var closedBracketsCountMax\
    \ = 0\n        var openBracketsCountMin = 0\n        var closedBracketsCountMin\
    \ = 0\n        var openBracketsCountMaxMin = 0\n        var closedBracketsCountMaxMin\
    \ = 0\n        var openBracketsCountMaxMinMax = 0\n        var closedBracketsCountMaxMinMax\
    \ = 0\n        var openBracketsCountMaxMinMaxMax = 0\n        var closedBracketsCountMaxMinMaxMax\
    \ = 0\n        var openBracketsCountMaxMinMaxMaxMax = 0\n        var closedBracketsCountMaxMinMaxMax\
    \ = 0\n        var openBracketsCountMaxMinMaxMaxMax = 0\n        var closedBracketsCountMaxMinMaxMaxMax\
    \ = 0\n        var openBracketsCountMaxMinMaxMaxMax = 0\n        var closedBracketsCountMaxMinMaxMaxMax\
    \ = 0\n        var openBracketsCountMaxMinMaxMaxMax = 0\n        var closedBracketsCountMaxMinMaxMaxMax\
    \ = 0\n        var openBracketsCountMaxMinMaxMaxMax = 0\n        var closedBracketsCountMaxMinMaxMaxMax\
    \ = 0\n        var openBracketsCountMaxMinMaxMaxMax = 0\n        var closedBracketsCountMaxMinMaxMaxMax\
    \ = 0\n        var openBracketsCountMaxMinMaxMaxMax = 0\n        var closedBracketsCountMaxMinMaxMaxMax\
    \ = 0\n        var openBracketsCountMaxMinMaxMaxMax = 0\n        var closedBracketsCountMaxMinMaxMaxMax\
    \ = 0\n        var openBracketsCountMaxMinMaxMaxMax = 0\n        var closedBracketsCountMaxMinMaxMaxMax\
    \ = 0\n        var openBracketsCountMaxMinMaxMaxMax = 0\n        var closedBracketsCountMaxMinMaxMaxMax\
    \ = 0\n        var openBracketsCountMaxMinMaxMaxMax = 0\n        var closedBracketsCountMaxMinMaxMaxMax\
    \ = 0\n        var openBracketsCountMaxMinMaxMaxMax = 0\n        var closedBracketsCountMaxMinMaxMaxMax\
    \ = 0\n        var openBracketsCountMaxMinMaxMaxMax = 0\n        var closedBracketsCountMaxMinMaxMaxMax\
    \ = 0\n        var openBracketsCountMaxMinMaxMaxMax = 0\n        var closedBracketsCountMaxMinMaxMaxMax\
    \ = 0\n        var openBracketsCountMax\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuh04abrs.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuh04abrs.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mclosedBracketsCountMaxMinMaxMax\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mclosedBracketsCountMaxMinMaxMax\
    \ is already defined as \e[33mvariable\e[0m \e[35mclosedBracketsCountMaxMinMaxMax\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuh04abrs.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mvar\e[0m \e[36mopenBracketsCountMaxMinMaxMaxMax\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsCountMaxMinMaxMaxMax is already defined as \e\
    [33mvariable\e[0m \e[35mopenBracketsCountMaxMinMaxMaxMax\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuh04abrs.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mopenBracketsCountMaxMinMaxMaxMax\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mopenBracketsCountMaxMinMaxMaxMax\
    \ is already defined as \e[33mvariable\e[0m \e[35mopenBracketsCountMaxMinMaxMaxMax\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuh04abrs.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mvar\e[0m \e[36mclosedBracketsCountMaxMinMaxMaxMax\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosedBracketsCountMaxMinMaxMaxMax is already defined as \e\
    [33mvariable"
  stdout: ''
  timestamp: 1659799237
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string.length)\n        brackets.update(0, string.length)\n\
    \        brackets.update(1, string.length)\n        brackets.update(0, string.length)\n\
    \        val stack = mutable.ArrayBuffer.empty[Int]\n        var index = 0\n \
    \       while (index < brackets.length) {\n            val bracket = brackets(index)\n\
    \            val left = brackets(index - 1)\n            val right = brackets(index\
    \ + 1)\n            if (bracket == left) {\n                stack.append(left)\n\
    \                index += 2\n            } else if (bracket == right) {\n    \
    \            stack.append(right)\n                index += 2\n            } else\
    \ if (bracket == brackets(index - 2)) {\n                stack.append(bracket)\n\
    \                index += 3\n            } else {\n                index += 2\n\
    \            }\n        }\n        stack.length == 0 || (stack.length == 1 &&\
    \ stack(0) == brackets(0))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7pktbv5u.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ArrayBuffer(string.length)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7pktbv5u.scala:18:20 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799232
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer.empty[String]\n        val openBrackets = mutable.ArrayBuffer.empty[String]\n\
    \        val closeBrackets = mutable.ArrayBuffer.empty[String]\n        val openBracketsCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closeBracketsCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val openBracketsCounts = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closeBracketsCounts = mutable.ArrayBuffer.empty[Int]\n        val openBracketsCountMax\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closeBracketsCountMax = mutable.ArrayBuffer.empty[Int]\n\
    \        val openBracketsCountMaxs = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closeBracketsCountMaxs = mutable.ArrayBuffer.empty[Int]\n        val openBracketsCountMin\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closeBracketsCountMin = mutable.ArrayBuffer.empty[Int]\n\
    \        val openBracketsCountMins = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closeBracketsCountMins = mutable.ArrayBuffer.empty[Int]\n        val openBracketsCountMaxMin\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closeBracketsCountMaxMin = mutable.ArrayBuffer.empty[Int]\n\
    \        val openBracketsCountMaxMins = mutable.ArrayBuffer.empty[Int]\n     \
    \   val closeBracketsCountMaxMins = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openBracketsCountMinMax = mutable.ArrayBuffer.empty[Int]\n        val closeBracketsCountMinMax\
    \ = mutable.ArrayBuffer.empty[Int]\n        val openBracketsCountMinMaxs = mutable.ArrayBuffer.empty[Int]\n\
    \        val closeBracketsCountMinMaxs = mutable.ArrayBuffer.empty[Int]\n    \
    \    val openBracketsCountMinMaxMin = mutable.ArrayBuffer.empty[Int]\n       \
    \ val closeBracketsCountMinMaxMin = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openBracketsCountMinMaxMins = mutable.ArrayBuffer.empty[Int]\n        val closeBracketsCountMinMaxMins\
    \ = mutable.ArrayBuffer.empty[Int]\n        val openBracketsCountMinMaxMinMax\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closeBrackets\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpok6qabwv.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpok6qabwv.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ArrayBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpok6qabwv.scala:15:27 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpok6qabwv.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpok6qabwv.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m           \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpok6qabwv.scala:18:33 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBracketsCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                 "
  stdout: ''
  timestamp: 1659799236
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val bracketsNestings = brackets.map(x => x.split(\"\\\\]\")).map(x => x.length)\n\
    \        val bracketsNestingCount = bracketsNestings.reduce((x, y) => x + y)\n\
    \        val bracketsNestingCountMinusOne = bracketsNestingCount - 1\n       \
    \ val bracketsNestingCountMinusTwo = bracketsNestingCount - 2\n        val bracketsNestingCountMinusThree\
    \ = bracketsNestingCount - 3\n        val bracketsNestingCountMinusFour = bracketsNestingCount\
    \ - 4\n        val bracketsNestingCountMinusFive = bracketsNestingCount - 5\n\
    \        val bracketsNestingCountMinusSix = bracketsNestingCount - 6\n       \
    \ val bracketsNestingCountMinusSeven = bracketsNestingCount - 7\n        val bracketsNestingCountMinusEight\
    \ = bracketsNestingCount - 8\n        val bracketsNestingCountMinusNine = bracketsNestingCount\
    \ - 9\n        val bracketsNestingCountMinusTen = bracketsNestingCount - 10\n\
    \        val bracketsNestingCountMinusEleven = bracketsNestingCount - 11\n   \
    \     val bracketsNestingCountMinusTwelve = bracketsNestingCount - 12\n      \
    \  val bracketsNestingCountMinusThirteen = bracketsNestingCount - 13\n       \
    \ val bracketsNestingCountMinusFourteen = bracketsNestingCount - 14\n        val\
    \ bracketsNestingCountMinusFifteen = bracketsNestingCount - 15\n        val bracketsNestingCountMinusSixteen\
    \ = bracketsNestingCount - 16\n        val bracketsNestingCountMinusSeventeen\
    \ = bracketsNestingCount - 17\n        val bracketsNestingCountMinusEighteen =\
    \ bracketsNestingCount - 18\n        val bracketsNestingCountMinusNineteen = bracketsNestingCount\
    \ - 19\n        val bracketsNestingCountMinusTwenty = bracketsNestingCount - 20\n\
    \        val bracketsNestingCountMin\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcm7qy3k6.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpcm7qy3k6.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799236
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val openBrackets = brackets.filter(x => x.equals(\"[\")).length\n   \
    \     val closeBrackets = brackets.filter(x => x.equals(\"]\")).length\n     \
    \   val openBracketsCount = openBrackets\n        val closeBracketsCount = closeBrackets\n\
    \        val isNested = openBracketsCount != closeBracketsCount && openBracketsCount\
    \ != bracketsCount && closeBracketsCount != bracketsCount\n        return isNested\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0gw6x5v5.scala:24)\n\tat Problem.main(tmp0gw6x5v5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799236
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val openBrackets = brackets.filter(_.contains(\"\
    [\")).toList\n        val closeBrackets = brackets.filter(_.contains(\"]\")).toList\n\
    \        val openBracketsCount = openBrackets.count\n        val closeBracketsCount\
    \ = closeBrackets.count\n        val openBracketsNestings = openBrackets.map(_.count(\"\
    [\")).toList\n        val closeBracketsNestings = closeBrackets.map(_.count(\"\
    ]\")).toList\n        val openBracketsNestingCount = openBracketsNestings.reduce((x,y)\
    \ => x + y)\n        val closeBracketsNestingCount = closeBracketsNestings.reduce((x,y)\
    \ => x + y)\n        val openBracketsNestingCount = openBracketsNestings.reduce((x,y)\
    \ => x + y)\n        val closeBracketsNestingCount = closeBracketsNestings.reduce((x,y)\
    \ => x + y)\n        val openBracketsNestingCount = openBracketsNestings.reduce((x,y)\
    \ => x + y)\n        val closeBracketsNestingCount = closeBracketsNestings.reduce((x,y)\
    \ => x + y)\n        val openBracketsNestingCount = openBracketsNestings.reduce((x,y)\
    \ => x + y)\n        val closeBracketsNestingCount = closeBracketsNestings.reduce((x,y)\
    \ => x + y)\n        val openBracketsNestingCount = openBracketsNestings.reduce((x,y)\
    \ => x + y)\n        val closeBracketsNestingCount = closeBracketsNestings.reduce((x,y)\
    \ => x + y)\n        val openBracketsNestingCount = openBracketsNestings.reduce((x,y)\
    \ => x + y)\n        val closeBracketsNestingCount = closeBracketsNestings.reduce((x,y)\
    \ => x + y)\n        val openBracketsNestingCount = openBracketsNestings.reduce((x,y)\
    \ => x + y)\n        val closeBracketsNestingCount = closeBracketsNestings.reduce((x,y)\
    \ => x + y)\n        val openBracketsNestingCount = openBracketsNestings.reduce((x,y)\
    \ => x + y)\n        val close\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpivd4op3t.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpivd4op3t.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopenBracketsNestingCount\e[0m = openBracketsNestings.reduce((\e[36mx\e\
    [0m,\e[36my\e[0m) => x + y)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsNestingCount is already defined as \e[33mvalue\e\
    [0m \e[35mopenBracketsNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpivd4op3t.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestingCount\e\
    [0m = closeBracketsNestings.reduce((\e[36mx\e[0m,\e[36my\e[0m) => x + y)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsNestingCount is already defined as \e[33mvalue\e\
    [0m \e[35mcloseBracketsNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpivd4op3t.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestingCount\e\
    [0m = openBracketsNestings.reduce((\e[36mx\e[0m,\e[36my\e[0m) => x + y)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsNestingCount is already defined as \e[33mvalue\e\
    [0m \e[35mopenBracketsNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpivd4op3t.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestingCoun"
  stdout: ''
  timestamp: 1659799237
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        brackets += \"[\" \n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        val\
    \ bracketsString = brackets.mkString\n        val bracketsArray = bracketsString.toArray\n\
    \        val bracketsArrayLength = bracketsArray.length\n        val bracketsArrayIterator\
    \ = bracketsArray.iterator\n        val bracketsArrayIteratorNext = bracketsArrayIterator.next\n\
    \        val bracketsArrayIteratorPrev = bracketsArrayIterator.previous\n    \
    \    val bracketsArrayIteratorNextPrev = bracketsArrayIterator.nextPrevious\n\
    \        val bracketsArrayIteratorNextNext = bracketsArrayIterator.nextNext\n\
    \        val bracketsArrayIteratorNextNextPrev = bracketsArrayIterator.nextNextPrevious\n\
    \        val bracketsArrayIteratorNextNextNext = bracketsArrayIterator.nextNextNext\n\
    \        val bracketsArrayIteratorNextNextNextPrev = bracketsArrayIterator.nextNextNextPrevious\n\
    \        val bracketsArrayIteratorNextNextNextNext = bracketsArrayIterator.nextNextNextNext\n\
    \        val bracketsArrayIteratorNextNextNextNextPrev = bracketsArrayIterator.nextNextNextNextPrevious\n\
    \        val bracketsArrayIteratorNextNextNextNextNextPrev = bracketsArrayIterator.nextNextNextNextNextPrevious\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextPrev = bracketsArrayIterator.nextNextNextNextNextNextPreviousPrevious\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNextPrev = bracketsArrayIterator.nextNextNextNextNextNextNextPreviousPreviousPrevious\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNextNextPrev = bracketsArrayIterator.nextNextNextNextNextNextNextNextPreviousPreviousPreviousPrevious\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNextNextNextPrev = bracketsArrayIterator.nextNextNextNextNextNextNextNextNextPreviousPreviousPreviousPreviousPrevious\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextPrev\
    \ = bracketsArrayIterator.nextNextNextNextNextNextNextNextNextNextNextPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPreviousPrevious\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxggi8hq1.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxggi8hq1.scala:38:5 ---------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799235
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(x => x.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(x => x.contains(\"]\"))\n \
    \       val openBracketsCount = openBrackets.size\n        val closeBracketsCount\
    \ = closeBrackets.size\n        val openBracketsNestings = openBrackets.map(x\
    \ => x.split(\"]\").length).toSeq\n        val closeBracketsNestings = closeBrackets.map(x\
    \ => x.split(\"[\").length).toSeq\n        val openBracketsNestingCount = openBracketsNestings.sum\n\
    \        val closeBracketsNestingCount = closeBracketsNestings.sum\n        val\
    \ openBracketsNestingSum = openBracketsNestings.sum\n        val closeBracketsNestingSum\
    \ = closeBracketsNestings.sum\n        val openBracketsNestingCount = openBracketsNestings.sum\n\
    \        val closeBracketsNestingCount = closeBracketsNestings.sum\n        val\
    \ openBracketsNestingSum = openBracketsNestings.sum\n        val closeBracketsNestingSum\
    \ = closeBracketsNestings.sum\n        val openBracketsNestingCount = openBracketsNestings.sum\n\
    \        val closeBracketsNestingCount = closeBracketsNestings.sum\n        val\
    \ openBracketsNestingSum = openBracketsNestings.sum\n        val closeBracketsNestingSum\
    \ = closeBracketsNestings.sum\n        val openBracketsNestingCount = openBracketsNestings.sum\n\
    \        val closeBracketsNestingCount = closeBracketsNestings.sum\n        val\
    \ openBracketsNestingSum = openBracketsNestings.sum\n        val closeBracketsNestingSum\
    \ = closeBracketsNestings.sum\n        val openBracketsNestingCount = openBracketsNestings.sum\n\
    \        val closeBracketsNestingCount = closeBracketsNestings.sum\n        val\
    \ openBracketsNestingSum = openBracketsNestings.sum\n        val closeBracket\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2e0217h3.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2e0217h3.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopenBracketsNestingCount\e[0m = openBracketsNestings.sum\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mopenBracketsNestingCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenBracketsNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2e0217h3.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestingCount\e\
    [0m = closeBracketsNestings.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsNestingCount is already defined as \e[33mvalue\e\
    [0m \e[35mcloseBracketsNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2e0217h3.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestingSum\e\
    [0m = openBracketsNestings.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsNestingSum is already defined as \e[33mvalue\e\
    [0m \e[35mopenBracketsNestingSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2e0217h3.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestingSum\e\
    [0m = closeBracketsNestings.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsNestingSum is already defined as"
  stdout: ''
  timestamp: 1659799236
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val openingBrackets = brackets.filter(_.startsWith(\"[\"))\n        val\
    \ closingBrackets = brackets.filter(_.endsWith(\"]\"))\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsNesting = (openingBracketsCount - closingBracketsCount)\
    \ / openingBracketsCount\n        val closingBracketsNesting = (closingBracketsCount\
    \ - openingBracketsCount) / closingBracketsCount\n        val isNested = openingBracketsNesting\
    \ <= closingBracketsNesting\n        return isNested\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.isNested(tmpavx1zvu8.scala:20)\n\
    \tat Problem$.main(tmpavx1zvu8.scala:26)\n\tat Problem.main(tmpavx1zvu8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799237
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n        val brackets = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n\
    \        val stack = mutable.Stack[String]()\n        val result = mutable.Set[String]()\n\
    \        brackets.foreach(x => {\n            x match {\n                case\
    \ \"[\" => stack.push(x)\n                case \"{\" => stack.push(x)\n      \
    \          case \"]\" => stack.pop()\n                case \"}\" => stack.pop()\n\
    \                case _ => stack.pop()\n            }\n        })\n        stack.foreach(x\
    \ => result += x)\n        stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpreg6luln.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpreg6luln.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val nestedBrackets = openBrackets.filter(_.contains(\"]\"))\n        val validBrackets\
    \ = closeBrackets.filter(_.contains(\"[\"))\n        val validNestedBrackets =\
    \ nestedBrackets.filter(_.contains(\"]\"))\n        val validNestedBracketsCount\
    \ = validNestedBrackets.count(_ == \"[\")\n        val validBracketsCount = validBrackets.count(_\
    \ == \"[\")\n        val validBracketsCountPlusOne = validBracketsCount + 1\n\
    \        val validNestedBracketsCountPlusOne = validNestedBracketsCount + 1\n\
    \        val validNestedBracketsCountMinusOne = validNestedBracketsCount - 1\n\
    \        val validBracketsCountMinusOne = validBracketsCount - 1\n        val\
    \ validBracketsCountPlusOneMinusOne = validBracketsCountPlusOne - 1\n        val\
    \ validNestedBracketsCountMinusOneMinusOne = validNestedBracketsCountMinusOne\
    \ - 1\n        val validNestedBracketsCountMinusOneMinusOne = validNestedBracketsCountMinusOne\
    \ - 1\n        val validBracketsCountMinusOneMinusOne = validBracketsCountMinusOne\
    \ - 1\n        val validBracketsCountPlusOneMinusOneMinusOne = validBracketsCountPlusOneMinusOne\
    \ - 1\n        val validNestedBracketsCountMinusOneMinusOneMinusOne = validNestedBracketsCountMinusOneMinusOne\
    \ - 1\n        val validNestedBracketsCountMinusOneMinusOneMinusOne = validNestedBracketsCountMinusOneMinusOne\
    \ - 1\n        val validBracketsCountPlusOneMinusOneMinusOneMinusOne = validBracketsCountPlusOneMinusOneMinusOne\
    \ - 1\n        val validNestedBracketsCountMinusOneMinusOneMinusOneMinusOne =\
    \ validNestedBracketsCountMinusOneMinusOneMinusOneMinusOne - 1\n        val validNestedBracketsCountMinusOneMinusOneMinusOneMinusOne\
    \ = validNestedBracketsCountMinusOneMinusOneMinusOneMinusOne - 1\n        val\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpcd9fj8ah.scala:36:11 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpcd9fj8ah.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvalidNestedBracketsCountMinusOneMinusOne\e\
    [0m = validNestedBracketsCountMinusOne - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidNestedBracketsCountMinusOneMinusOne is already defined\
    \ as \e[33mvalue\e[0m \e[35mvalidNestedBracketsCountMinusOneMinusOne\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcd9fj8ah.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mvalidNestedBracketsCountMinusOneMinusOneMinusOne\e\
    [0m = validNestedBracketsCountMinusOneMinusOne - \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidNestedBracketsCountMinusOneMinusOneMinusOne is already\
    \ defined as \e[33mvalue\e[0m \e[35mvalidNestedBracketsCountMinusOneMinusOneMinusOne\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcd9fj8ah.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvalidNestedBracketsCountMinusOneMinusOneMinusOneMinusOne\e\
    [0m = validNestedBracketsCountMinusOneMinusOneMinusOneMinusOne - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidNestedBracketsCountMinusOneMinusOneMinusOneMinusOne"
  stdout: ''
  timestamp: 1659799244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestedBrackets = brackets.filter(x =>\
    \ x.contains(\"]\"))\n        val nestedBracketsCount = nestedBrackets.count\n\
    \        val bracketsCount = brackets.length\n        val isNested = nestedBracketsCount\
    \ != bracketsCount\n        return isNested\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxny7plzi.scala:18:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36misNested\e[0m = nestedBracketsCount\
    \ != bracketsCount\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types (String => Boolean) => Int and Int cannot\
    \ be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659799243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Write\
    \ your code here\n        val stack = mutable.Stack[String]()\n        val brackets\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount2 = mutable.HashMap[String, Int]()\n      \
    \  val bracketsCount3 = mutable.HashMap[String, Int]()\n        val bracketsCount4\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount5 = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount6 = mutable.HashMap[String, Int]()\n      \
    \  val bracketsCount7 = mutable.HashMap[String, Int]()\n        val bracketsCount8\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount9 = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount10 = mutable.HashMap[String, Int]()\n     \
    \   val bracketsCount11 = mutable.HashMap[String, Int]()\n        val bracketsCount12\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount13 = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount14 = mutable.HashMap[String, Int]()\n     \
    \   val bracketsCount15 = mutable.HashMap[String, Int]()\n        val bracketsCount16\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount17 = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount18 = mutable.HashMap[String, Int]()\n     \
    \   val bracketsCount19 = mutable.HashMap[String, Int]()\n        val bracketsCount20\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount21 = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount22 = mutable.HashMap[String, Int]()\n     \
    \   val bracketsCount23 = mutable.HashMap[String, Int]()\n        val bracketsCount24\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount25 = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount26 = mutable.HashMap[String, Int]()\n     \
    \   val bracketsCount27 = mutable.HashMap[String, Int]()\n        val bracketsCount28\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCount29 = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCount30 = mutable.HashMap[String, Int]()\n     \
    \   val bracketsCount31 = mutable.HashMap[String, Int]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdoaf_o29.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdoaf_o29.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdoaf_o29.scala:17:28\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mbracketsCount\e[0m = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdoaf_o29.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount2\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdoaf_o29.scala:19:29\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mbracketsCount3\e[0m = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Er"
  stdout: ''
  timestamp: 1659799246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.Set[Char]()\n        val bracketsStack = mutable.Stack[Char]()\n \
    \       val bracketsCount = mutable.Map[Char, Int]()\n        val bracketsCountStack\
    \ = mutable.Stack[Int]()\n        val bracketsCount = mutable.Map[Char, Int]()\n\
    \        val bracketsCountStack = mutable.Stack[Int]()\n        val bracketsCount\
    \ = mutable.Map[Char, Int]()\n        val bracketsCountStack = mutable.Stack[Int]()\n\
    \        val bracketsCount = mutable.Map[Char, Int]()\n        val bracketsCountStack\
    \ = mutable.Stack[Int]()\n        val bracketsCount = mutable.Map[Char, Int]()\n\
    \        val bracketsCountStack = mutable.Stack[Int]()\n        val bracketsCount\
    \ = mutable.Map[Char, Int]()\n        val bracketsCountStack = mutable.Stack[Int]()\n\
    \        val bracketsCount = mutable.Map[Char, Int]()\n        val bracketsCountStack\
    \ = mutable.Stack[Int]()\n        val bracketsCount = mutable.Map[Char, Int]()\n\
    \        val bracketsCountStack = mutable.Stack[Int]()\n        val bracketsCount\
    \ = mutable.Map[Char, Int]()\n        val bracketsCountStack = mutable.Stack[Int]()\n\
    \        val bracketsCount = mutable.Map[Char, Int]()\n        val bracketsCountStack\
    \ = mutable.Stack[Int]()\n        val bracketsCount = mutable.Map[Char, Int]()\n\
    \        val bracketsCountStack = mutable.Stack[Int]()\n        val bracketsCount\
    \ = mutable.Map[Char, Int]()\n        val bracketsCountStack = mutable.Stack[Int]()\n\
    \        val bracketsCount = mutable.Map[Char, Int]()\n        val bracketsCountStack\
    \ = mutable.Stack[Int]()\n        val bracketsCount = mutable.Map[Char, Int]()\n\
    \        val bracketsCountStack = mutable.Stack[Int]()\n        val bracketsCount\
    \ = mutable.Map[Char, Int]()\n        val bracketsCountStack = mutable.Stack[Int]()\n\
    \        val bracketsCount = mutable.Map[Char, Int]()\n        val bracketsCountStack\
    \ = mutable.Stack[Int]()\n        val bracketsCount = mutable.Map[Char, Int]()\n\
    \        val bracketsCountStack = mut\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq4vhqf4v.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq4vhqf4v.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mbracketsCountStack\e[0m = mutable.Stack[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCountStack is already defined as \e[33mvalue\e[0m\
    \ \e[35mbracketsCountStack\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpq4vhqf4v.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq4vhqf4v.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mbracketsCountStack\e[0m = mutable.Stack[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCountStack is already defined as \e[33mvalue\e[0m\
    \ \e[35mbracketsCountStack\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpq4vhqf4v.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m      "
  stdout: ''
  timestamp: 1659799245
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val nests = brackets.filter(x => x.contains(']'))\n\
    \        nests.forall(x => brackets.indexOf(x) == brackets.lastIndexOf(x))\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzi34braq.scala:20)\n\tat Problem.main(tmpzi34braq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\)\")\n        val bracketsCount = brackets.length\n\
    \        val bracketsNestings = brackets.map(x => x.split(\"\\\\[|\\\\]|\\\\)\"\
    ).length)\n        val bracketsNestingCount = bracketsNestings.sum\n        val\
    \ bracketsNestingSum = bracketsNestings.reduce((x,y) => x + y)\n        val bracketsNestingSum2\
    \ = bracketsNestings.reduce((x,y) => x + y)\n        val bracketsNestingSum3 =\
    \ bracketsNestings.reduce((x,y) => x + y)\n        val bracketsNestingSum4 = bracketsNestings.reduce((x,y)\
    \ => x + y)\n        val bracketsNestingSum5 = bracketsNestings.reduce((x,y) =>\
    \ x + y)\n        val bracketsNestingSum6 = bracketsNestings.reduce((x,y) => x\
    \ + y)\n        val bracketsNestingSum7 = bracketsNestings.reduce((x,y) => x +\
    \ y)\n        val bracketsNestingSum8 = bracketsNestings.reduce((x,y) => x + y)\n\
    \        val bracketsNestingSum9 = bracketsNestings.reduce((x,y) => x + y)\n \
    \       val bracketsNestingSum10 = bracketsNestings.reduce((x,y) => x + y)\n \
    \       val bracketsNestingSum11 = bracketsNestings.reduce((x,y) => x + y)\n \
    \       val bracketsNestingSum12 = bracketsNestings.reduce((x,y) => x + y)\n \
    \       val bracketsNestingSum13 = bracketsNestings.reduce((x,y) => x + y)\n \
    \       val bracketsNestingSum14 = bracketsNestings.reduce((x,y) => x + y)\n \
    \       val bracketsNestingSum15 = bracketsNestings.reduce((x,y) => x + y)\n \
    \       val bracketsNestingSum16 = bracketsNestings.reduce((x,y) => x + y)\n \
    \       val bracketsNestingSum17 = bracketsNestings.reduce((x,y) => x + y)\n \
    \       val bracketsNestingSum18 = bracketsNestings.reduce((x,y) => x + y)\n \
    \       val bracketsNestingSum19 = bracketsNestings.reduce((x,y) => x + y)\n \
    \       val bracketsNesting\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb9d_kxts.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpb9d_kxts.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string.length-1)\n        var openBrackets = 0\n     \
    \   var closeBrackets = 0\n        var openBracketsCount = 0\n        var closeBracketsCount\
    \ = 0\n        var openBracketsCount2 = 0\n        var closeBracketsCount2 = 0\n\
    \        var openBracketsCount3 = 0\n        var closeBracketsCount3 = 0\n   \
    \     var openBracketsCount4 = 0\n        var closeBracketsCount4 = 0\n      \
    \  var openBracketsCount5 = 0\n        var closeBracketsCount5 = 0\n        var\
    \ openBracketsCount6 = 0\n        var closeBracketsCount6 = 0\n        var openBracketsCount7\
    \ = 0\n        var closeBracketsCount7 = 0\n        var openBracketsCount8 = 0\n\
    \        var closeBracketsCount8 = 0\n        var openBracketsCount9 = 0\n   \
    \     var closeBracketsCount9 = 0\n        var openBracketsCount10 = 0\n     \
    \   var closeBracketsCount10 = 0\n        var openBracketsCount11 = 0\n      \
    \  var closeBracketsCount11 = 0\n        var openBracketsCount12 = 0\n       \
    \ var closeBracketsCount12 = 0\n        var openBracketsCount13 = 0\n        var\
    \ closeBracketsCount13 = 0\n        var openBracketsCount14 = 0\n        var closeBracketsCount14\
    \ = 0\n        var openBracketsCount15 = 0\n        var closeBracketsCount15 =\
    \ 0\n        var openBracketsCount16 = 0\n        var closeBracketsCount16 = 0\n\
    \        var openBracketsCount17 = 0\n        var closeBracketsCount17 = 0\n \
    \       var openBracketsCount18 = 0\n        var closeBracketsCount18 = 0\n  \
    \      var openBracketsCount19 = 0\n        var closeBracketsCount19 = 0\n   \
    \     var openBracketsCount20 = 0\n        var closeBracketsCount20 = 0\n    \
    \    var openBracketsCount21 = 0\n        var closeBracketsCount21 = 0\n     \
    \   var openBracketsCount22 = 0\n        var closeBracketsCount22 = 0\n      \
    \  var openBracketsCount23 = 0\n        var closeBracketsCount23 = 0\n       \
    \ var openBracketsCount24 = 0\n        var closeBracketsCount24 = 0\n        var\
    \ openBracketsCount25 = 0\n        var closeBracketsCount25 = 0\n        var openBracketsCount26\
    \ = 0\n        var closeBracketsCount26 = 0\n        var openBracketsCount27 =\
    \ 0\n        var closeBracketsCount27 = 0\n        var openBracket\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvdt8ih1_.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvdt8ih1_.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ArrayBuffer(string.length-\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvdt8ih1_.scala:72:5 ---------------------\e[0m\e[0m\n\e[31m72\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val bracketsCount\
    \ = brackets.length\n        val openBrackets = brackets.filter(_.startsWith(\"\
    [\")).length\n        val closeBrackets = brackets.filter(_.startsWith(\"]\")).length\n\
    \        val openBracketsCount = openBrackets\n        val closeBracketsCount\
    \ = closeBrackets\n        val openBracketsCount2 = openBrackets\n        val\
    \ closeBracketsCount2 = closeBrackets\n        val openBracketsCount3 = openBrackets\n\
    \        val closeBracketsCount3 = closeBrackets\n        val openBracketsCount4\
    \ = openBrackets\n        val closeBracketsCount4 = closeBrackets\n        val\
    \ openBracketsCount5 = openBrackets\n        val closeBracketsCount5 = closeBrackets\n\
    \        val openBracketsCount6 = openBrackets\n        val closeBracketsCount6\
    \ = closeBrackets\n        val openBracketsCount7 = openBrackets\n        val\
    \ closeBracketsCount7 = closeBrackets\n        val openBracketsCount8 = openBrackets\n\
    \        val closeBracketsCount8 = closeBrackets\n        val openBracketsCount9\
    \ = openBrackets\n        val closeBracketsCount9 = closeBrackets\n        val\
    \ openBracketsCount10 = openBrackets\n        val closeBracketsCount10 = closeBrackets\n\
    \        val openBracketsCount11 = openBrackets\n        val closeBracketsCount11\
    \ = closeBrackets\n        val openBracketsCount12 = openBrackets\n        val\
    \ closeBracketsCount12 = closeBrackets\n        val openBracketsCount13 = openBrackets\n\
    \        val closeBracketsCount13 = closeBrackets\n        val openBracketsCount14\
    \ = openBrackets\n        val closeBracketsCount14 = closeBrackets\n        val\
    \ openBracketsCount15 = openBrackets\n        val closeBracketsCount15 = closeBrackets\n\
    \        val openBracketsCount16 = openBrackets\n        val closeBracketsCount16\
    \ = closeBrackets\n        val openBracketsCount17 = openBrackets\n        val\
    \ closeBracketsCount17 = closeBrackets\n        val open\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuaxsbeat.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpuaxsbeat.scala:53:5 ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val openBrackets = brackets.filter(x => x.contains('['))\n\
    \        val closeBrackets = brackets.filter(x => x.contains(']'))\n        val\
    \ openBracketsCount = openBrackets.size\n        val closeBracketsCount = closeBrackets.size\n\
    \        val openBracketsNestings = openBrackets.toList.map(x => x.split(']').size)\n\
    \        val closeBracketsNestings = closeBrackets.toList.map(x => x.split(']').size)\n\
    \        val openBracketsNestingCount = openBracketsNestings.reduce((x, y) =>\
    \ x + y)\n        val closeBracketsNestingCount = closeBracketsNestings.reduce((x,\
    \ y) => x + y)\n        val isNesting = openBracketsNestingCount == closeBracketsNestingCount\
    \ && openBracketsCount == closeBracketsCount\n        val isNestingWithOneNesting\
    \ = openBracketsNestingCount == 1 && closeBracketsNestingCount == 1\n        val\
    \ isNestingWithTwoNestings = openBracketsNestingCount == 2 && closeBracketsNestingCount\
    \ == 2\n        val isNestingWithThreeNestings = openBracketsNestingCount == 3\
    \ && closeBracketsNestingCount == 3\n        val isNestingWithFourNestings = openBracketsNestingCount\
    \ == 4 && closeBracketsNestingCount == 4\n        val isNestingWithFiveNestings\
    \ = openBracketsNestingCount == 5 && closeBracketsNestingCount == 5\n        val\
    \ isNestingWithSixNestings = openBracketsNestingCount == 6 && closeBracketsNestingCount\
    \ == 6\n        val isNestingWithSevenNestings = openBracketsNestingCount == 7\
    \ && closeBracketsNestingCount == 7\n        val isNestingWithEightNestings =\
    \ openBracketsNestingCount == 8 && closeBracketsNestingCount == 8\n        val\
    \ isNestingWithNineNestings = openBracketsNestingCount == 9 && closeBracketsNestingCount\
    \ == 9\n        \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_hbna1qq.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val openBrackets = brackets.filter(x => x != '')\n\
    \        val closeBrackets = brackets.filter(x => x != '[]')\n        val openBracketsCount\
    \ = openBrackets.count\n        val closeBracketsCount = closeBrackets.count\n\
    \        val openBracketsCount = openBracketsCount + closeBracketsCount\n    \
    \    val openBracketsCount = openBracketsCount + 1\n        val closeBracketsCount\
    \ = closeBracketsCount + 1\n        val openBracketsCount = openBracketsCount\
    \ + 1\n        val closeBracketsCount = closeBracketsCount + 1\n        val openBracketsCount\
    \ = openBracketsCount + 1\n        val closeBracketsCount = closeBracketsCount\
    \ + 1\n        val openBracketsCount = openBracketsCount + 1\n        val closeBracketsCount\
    \ = closeBracketsCount + 1\n        val openBracketsCount = openBracketsCount\
    \ + 1\n        val closeBracketsCount = closeBracketsCount + 1\n        val openBracketsCount\
    \ = openBracketsCount + 1\n        val closeBracketsCount = closeBracketsCount\
    \ + 1\n        val openBracketsCount = openBracketsCount + 1\n        val closeBracketsCount\
    \ = closeBracketsCount + 1\n        val openBracketsCount = openBracketsCount\
    \ + 1\n        val closeBracketsCount = closeBracketsCount + 1\n        val openBracketsCount\
    \ = openBracketsCount + 1\n        val closeBracketsCount = closeBracketsCount\
    \ + 1\n        val openBracketsCount = openBracketsCount + 1\n        val closeBracketsCount\
    \ = closeBracketsCount + 1\n        val openBracketsCount = openBracketsCount\
    \ + 1\n        val closeBracketsCount = closeBracketsCount + 1\n        val openBracketsCount\
    \ = openBracketsCount + 1\n        val closeBracketsCount = closeBracketsCount\
    \ + 1\n        val openBracketsCount = openBracketsCount + 1\n        val closeBracketsCount\
    \ = closeBracketsCount + 1\n        val openBracketsCount = openBracketsCount\
    \ + 1\n        val closeBracketsCount = closeBracketsCount + 1\n        val openBracketsCount\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmplt2h4_0w.scala:15:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = brackets.filter(\e\
    [36mx\e[0m => x != '')\n\e[31m\e[31m   |\e[0m                                \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \                 empty character literal\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmplt2h4_0w.scala:16:26 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = brackets.filter(\e[36mx\e\
    [0m => x != '[]')\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m\
    \   |\e[0m                          expression expected but \e[31m=\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmplt2h4_0w.scala:16:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = brackets.filter(\e\
    [36mx\e[0m => x != '[]')\n\e[31m\e[31m   |\e[0m                              \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                    unclosed character literal\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmplt2h4_0w.scala:16:8 -------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = brackets.filter(\e[36mx\e\
    [0m => x != '[]')\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m    \
    \    Not found: 'val\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsLength = brackets.length\n\
    \        val openingBrackets = brackets.filter(_.contains(\"[\"))\n        val\
    \ closingBrackets = brackets.filter(_.contains(\"]\"))\n        val openingBracketsLength\
    \ = openingBrackets.length\n        val closingBracketsLength = closingBrackets.length\n\
    \        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        val openingBracketsSetLength = openingBracketsSet.length\n\
    \        val closingBracketsSetLength = closingBracketsSet.length\n        val\
    \ openingBracketsSetIsNested = openingBracketsSet.subsetOf(closingBracketsSet)\n\
    \        val closingBracketsSetIsNested = closingBracketsSet.subsetOf(openingBracketsSet)\n\
    \        val openingBracketsSetIsNestedLength = openingBracketsSetIsNested.length\n\
    \        val closingBracketsSetIsNestedLength = closingBracketsSetIsNested.length\n\
    \        val openingBracketsSetIsNestedAndNotNested = openingBracketsSetIsNested\
    \ && closingBracketsSetIsNested\n        val closingBracketsSetIsNestedAndNotNested\
    \ = closingBracketsSetIsNested && openingBracketsSetIsNested\n        val openingBracketsSetIsNestedAndNotNestedLength\
    \ = openingBracketsSetIsNestedAndNotNested.length\n        val closingBracketsSetIsNestedAndNotNestedLength\
    \ = closingBracketsSetIsNestedAndNotNested.length\n        val openingBracketsSetIsNestedAndNotNestedAndNotNested\
    \ = openingBracketsSetIsNestedAndNotNested && closingBracketsSetIsNestedAndNotNested\n\
    \        val closingBracketsSetIsNestedAndNotNestedAndNotNested = closingBracketsSetIsNestedAndNotNested\
    \ && openingBracketsSetIsNestedAndNotNested\n        val openingBracketsSetIsNestedAndNotNestedAndNotNestedLength\
    \ = openingBracketsSetIsNestedAndNotNestedAndNotNested.length\n        val closingBracketsSetIsNestedAndNotNestedAndNotNestedLength\
    \ = closingBracketsSetIsNestedAndNotNestedAndNotNested.length\n        val openingBracketsSetIsNestedAndNotNestedAndNotNestedAndNotNested\
    \ = open\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpan6n9z3g.scala:22:58 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsSetLength\e\
    [0m = openingBracketsSet.length\n\e[31m\e[31m   |\e[0m                       \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                value length is not a member of Set[String]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpan6n9z3g.scala:23:58 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsSetLength\e[0m\
    \ = closingBracketsSet.length\n\e[31m\e[31m   |\e[0m                         \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \              value length is not a member of Set[String]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpan6n9z3g.scala:26:74 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsSetIsNestedLength\e\
    [0m = openingBracketsSetIsNested.length\n\e[31m\e[31m   |\e[0m               \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 value length is not a member of Boolean\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpan6n9z3g.scala:27:74 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsSetIsNestedLength\e\
    [0m = closingBracketsSetIsNested.length\n\e[31m\e[31m   |\e[0m               \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 value length is not a member of Boolean\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpan6n9z3g.scala:30:98 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsSetIsNestedAndNotNestedLength\e\
    [0m = openingBracketsSetIsNestedAndNotNested.length\n\e[31m\e[31m   |\e[0m   \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value length is not a member\
    \ of Boolean\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpan6n9z3g.scala:31:9"
  stdout: ''
  timestamp: 1659799248
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val openBrackets\
    \ = brackets.filter(_.contains(\"[\"))\n        val closeBrackets = brackets.filter(_.contains(\"\
    ]\"))\n        val openBracketsCount = openBrackets.size\n        val closeBracketsCount\
    \ = closeBrackets.size\n        val openBracketsNesting = (openBracketsCount -\
    \ closeBracketsCount)\n        val closeBracketsNesting = (closeBracketsCount\
    \ - openBracketsCount)\n        val isNested = openBracketsNesting >= 0 && closeBracketsNesting\
    \ >= 0\n        return isNested\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0dy1a1d.scala:26)\n\tat Problem.main(tmpo0dy1a1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val nested = brackets.foldLeft(false)((a,\
    \ b) => a && b)\n        nested\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2vqpz72w.scala:15:61\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnested\e\
    [0m = brackets.foldLeft(\e[31mfalse\e[0m)((\e[36ma\e[0m, \e[36mb\e[0m) => a &&\
    \ b)\n\e[31m\e[31m   |\e[0m                                                  \
    \           ^\e[0m\n\e[31m   |\e[0m                                          \
    \        Found:    (b : String)\n\e[31m   |\e[0m                             \
    \                     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799247
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.filter(x => x.contains(\"\
    ]\")).map(x => x.split(\"]\"))\n        nestings.forall(x => x.length == brackets.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxqg99bhf.scala:19)\n\tat Problem.main(tmpxqg99bhf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val nestedBrackets = brackets.filter(x\
    \ => x.contains(\"[\") && x.contains(\"]\"))\n        val nestedBracketsCount\
    \ = nestedBrackets.length\n        val bracketsCount = brackets.length\n     \
    \   val isNested = nestedBracketsCount > 0 && bracketsCount > nestedBracketsCount\n\
    \        isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfyg22wnr.scala:22)\n\tat Problem.main(tmpfyg22wnr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        brackets += \"[\" \n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets.toList.contains(string)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8zg1vh6m.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnmdy48t8.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36misNested\e\
    [0m(\e[36mstring\e[0m : \e[35mString\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                              ^\e[0m\n\e[31m   |\e\
    [0m                                              Found:    Unit\n\e[31m   |\e\
    [0m                                              Required: Boolean\n\e[31m14 |\e\
    [0m        \e[34m// Your code here\e[0m\n\e[31m15 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        var openBrackets = 0\n        var closeBrackets\
    \ = 0\n        for (char <- string.toCharArray) {\n            if (char == '[')\
    \ {\n                openBrackets += 1\n            } else if (char == ']') {\n\
    \                closeBrackets += 1\n            } else if (char == '[' && openBrackets\
    \ > closeBrackets) {\n                brackets += char\n            } else if\
    \ (char == ']' && openBrackets > closeBrackets) {\n                brackets +=\
    \ char\n            } else if (char == '[' && closeBrackets > openBrackets) {\n\
    \                brackets += char\n            } else if (char == ']' && closeBrackets\
    \ > openBrackets) {\n                brackets += char\n            }\n       \
    \ }\n        brackets.size == openBrackets + closeBrackets\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv2skp8ra.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val openBrackets = mutable.ListBuffer[String]()\n\
    \        val closeBrackets = mutable.ListBuffer[String]()\n        val openBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCounts = mutable.ListBuffer[Int]()\n        val closeBracketsCounts\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCount = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCount = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCounts = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCounts = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:18:33\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsCount\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error"
  stdout: ''
  timestamp: 1659799248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val bracketsCount = brackets.length\n        val\
    \ openingBrackets = brackets.filter(_.startsWith('['))\n        val closingBrackets\
    \ = brackets.filter(_.endsWith(']'))\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsCount2\
    \ = openingBrackets.filter(_.startsWith('[')).size\n        val closingBracketsCount2\
    \ = closingBrackets.filter(_.endsWith(']')).size\n        val openingBracketsCount3\
    \ = openingBrackets.filter(_.startsWith('[')).filter(_.startsWith('[')).size\n\
    \        val closingBracketsCount3 = closingBrackets.filter(_.endsWith(']')).filter(_.endsWith(']')).size\n\
    \        val openingBracketsCount4 = openingBrackets.filter(_.startsWith('[')).filter(_.startsWith('[')).filter(_.startsWith('[')).size\n\
    \        val closingBracketsCount4 = closingBrackets.filter(_.endsWith(']')).filter(_.endsWith(']')).filter(_.endsWith(']')).size\n\
    \        val openingBracketsCount5 = openingBrackets.filter(_.startsWith('[')).filter(_.startsWith('[')).filter(_.startsWith('[')).filter(_.startsWith('[')).size\n\
    \        val closingBracketsCount5 = closingBrackets.filter(_.endsWith(']')).filter(_.endsWith(']')).filter(_.endsWith(']')).filter(_.endsWith(']')).size\n\
    \        val openingBracketsCount6 = openingBrackets.filter(_.startsWith('[')).filter(_.startsWith('[')).filter(_.startsWith('[')).filter(_.startsWith('[')).filter(_.startsWith('[')).size\n\
    \        val closingBracketsCount6 = closingBrackets.filter(_.endsWith(']')).filter(_.endsWith(']')).filter(_.endsWith(']')).filter(_.endsWith(']')).filter(_.endsWith(']')).size\n\
    \        val openingBracketsCount7 = openingBrackets.filter(_.startsWith('[')).filter(_.startsWith('[')).filter(_.startsWith('[')).filter(_.startsWith('[')).filter(_.startsWith('[')).filter(_.startsWith('[')).size\n\
    \        val closingBracketsCount7 = closingBrackets.filter(_.endsWith(']\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) ==\
    \ (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2qylkd4u.scala:31:70 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsCount7\e\
    [0m = closingBrackets.filter(_.endsWith(']\n\e[31m\e[31m   |\e[0m            \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                              unclosed character literal\n\e\
    [31m\e[31m-- Error: /tmp/tmp2qylkd4u.scala:33:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2qylkd4u.scala:16:59 --------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = brackets.filter(_.startsWith(\e\
    [31m'['\e[0m))\n\e[31m\e[31m   |\e[0m                                        \
    \                   ^^^\e[0m\n\e[31m   |\e[0m                                \
    \                  Found:    (\e[31m'['\e[0m : Char)\n\e[31m   |\e[0m        \
    \                                          Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2qylkd4u.scala:17:57 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = brackets.filter(_.endsWith(\e\
    [31m']'\e[0m))\n\e[31m\e[31m   |\e[0m                                        \
    \                 ^^^\e[0m\n\e[31m   |\e[0m                                  \
    \                Found:    (\e[31m']'\e[0m : Char)\n\e[31m   |\e[0m          \
    \                                        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2qylkd4u.scala:20:72 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsCount2\e\
    [0m = openingBrackets.filter(_.startsWith(\e[31m'['\e[0m)).size\n\e[31"
  stdout: ''
  timestamp: 1659799254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.Set[Char]()\n        val openings = mutable.Set[Char]()\n        val\
    \ closings = mutable.Set[Char]()\n        val openings_count = mutable.Set[Int]()\n\
    \        val closings_count = mutable.Set[Int]()\n        val openings_count_sum\
    \ = mutable.Set[Int]()\n        val closings_count_sum = mutable.Set[Int]()\n\
    \        val openings_count_min = mutable.Set[Int]()\n        val closings_count_min\
    \ = mutable.Set[Int]()\n        val openings_count_max = mutable.Set[Int]()\n\
    \        val closings_count_max = mutable.Set[Int]()\n        val openings_count_avg\
    \ = mutable.Set[Int]()\n        val closings_count_avg = mutable.Set[Int]()\n\
    \        val openings_count_sum = mutable.Set[Int]()\n        val closings_count_sum\
    \ = mutable.Set[Int]()\n        val openings_count_min = mutable.Set[Int]()\n\
    \        val closings_count_min = mutable.Set[Int]()\n        val openings_count_max\
    \ = mutable.Set[Int]()\n        val closings_count_max = mutable.Set[Int]()\n\
    \        val openings_count_avg = mutable.Set[Int]()\n        val closings_count_avg\
    \ = mutable.Set[Int]()\n        val openings_count_sum = mutable.Set[Int]()\n\
    \        val closings_count_sum = mutable.Set[Int]()\n        val openings_count_min\
    \ = mutable.Set[Int]()\n        val closings_count_min = mutable.Set[Int]()\n\
    \        val openings_count_max = mutable.Set[Int]()\n        val closings_count_max\
    \ = mutable.Set[Int]()\n        val openings_count_avg = mutable.Set[Int]()\n\
    \        val closings_count_avg = mutable.Set[Int]()\n        val openings_count_sum\
    \ = mutable.Set[Int]()\n        val closings_count_sum = mutable.Set[Int]()\n\
    \        val openings_count_min = mutable.Set[Int]()\n        val closings_count_min\
    \ = mutable.Set[Int]()\n        val openings_count_max = mutable.Set[Int]()\n\
    \        val closings_count_max = mutable.Set[Int]()\n        val openings_count_av\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoysrjsbd.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoysrjsbd.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopenings_count_sum\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mopenings_count_sum is already defined as \e[33mvalue\e[0m \e[35mopenings_count_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoysrjsbd.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mclosings_count_sum\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosings_count_sum is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosings_count_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpoysrjsbd.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mopenings_count_min\e[0m\
    \ = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenings_count_min is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenings_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpoysrjsbd.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mclosings_count_min\e[0m\
    \ = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosings_count_min is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosings_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods"
  stdout: ''
  timestamp: 1659799247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.Set[String]()\n        brackets.foreach(x => {\n\
    \            x match {\n                case \"[\" => stack += x\n           \
    \     case \"]\" => stack.pop\n                case _ => ()\n            }\n \
    \       })\n        stack.foreach(x => result += x)\n        stack.isEmpty\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1k971ejx.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1k971ejx.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n        val brackets = string.split(\"\\\\[|\\\\]\")\n        val\
    \ stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[Boolean]()\n\
    \        for (i <- 0 until brackets.length) {\n            if (brackets(i) ==\
    \ \"[\") {\n                stack += \"[\"\n            } else if (brackets(i)\
    \ == \"]\") {\n                stack += \"]\"\n            } else if (brackets(i)\
    \ == \"(\") {\n                stack += \"(\"\n            } else if (brackets(i)\
    \ == \")\") {\n                stack += \")\"\n            } else if (brackets(i)\
    \ == \"]\") {\n                val openBracket = stack.pop()\n               \
    \ if (openBracket == \"[\") {\n                    stack += \"[\"\n          \
    \      } else if (openBracket == \"]\") {\n                    stack += \"]\"\n\
    \                } else if (openBracket == \"(\") {\n                    stack\
    \ += \"(\"\n                } else if (openBracket == \")\") {\n             \
    \       stack += \")\"\n                }\n            }\n        }\n        val\
    \ openBracket = stack.pop()\n        if (openBracket == \"[\") {\n           \
    \ stack += \"[\"\n        } else if (openBracket == \"]\") {\n            stack\
    \ += \"]\"\n        } else if (openBracket == \"(\") {\n            stack += \"\
    (\"\n        } else if (openBracket == \")\") {\n            stack += \")\"\n\
    \        }\n        if (stack.size == 0) {\n            result.add(false)\n  \
    \      } else {\n            result.add(true)\n        }\n        return result.toList(0)(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4lvgegww.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4lvgegww.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val stack = mutable.Stack[String]()\n\
    \        val bracketsCount = brackets.length\n        val openBracketsCount =\
    \ brackets.filter(_.startsWith(\"[\")).length\n        val closeBracketsCount\
    \ = brackets.filter(_.startsWith(\"]\")).length\n        val openBracketsCount2\
    \ = brackets.filter(_.startsWith(\"[[\")).length\n        val closeBracketsCount2\
    \ = brackets.filter(_.startsWith(\"]]\")).length\n        val openBracketsCount3\
    \ = brackets.filter(_.startsWith(\"[[[\")).length\n        val closeBracketsCount3\
    \ = brackets.filter(_.startsWith(\"]]]\")).length\n        val openBracketsCount4\
    \ = brackets.filter(_.startsWith(\"[[[[\")).length\n        val closeBracketsCount4\
    \ = brackets.filter(_.startsWith(\"]]]]\")).length\n        val openBracketsCount5\
    \ = brackets.filter(_.startsWith(\"[[[[[\")).length\n        val closeBracketsCount5\
    \ = brackets.filter(_.startsWith(\"]]]]]\")).length\n        val openBracketsCount6\
    \ = brackets.filter(_.startsWith(\"[[[[[[\")).length\n        val closeBracketsCount6\
    \ = brackets.filter(_.startsWith(\"]]]]]]\")).length\n        val openBracketsCount7\
    \ = brackets.filter(_.startsWith(\"[[[[[[[\")).length\n        val closeBracketsCount7\
    \ = brackets.filter(_.startsWith(\"]]]]]]]\")).length\n        val openBracketsCount8\
    \ = brackets.filter(_.startsWith(\"[[[[[[[[\")).length\n        val closeBracketsCount8\
    \ = brackets.filter(_.startsWith(\"]]]]]]]]\")).length\n        val openBracketsCount9\
    \ = brackets.filter(_.startsWith(\"[[[[[[[[[\")).length\n        val closeBracketsCount9\
    \ = brackets.filter(_.startsWith(\"]]]]]]]]]\")).length\n        val openBracketsCount10\
    \ = brackets.filter(_.startsWith(\"[[[[[[[[[[\")).length\n        val closeBracketsCount10\
    \ = brackets.filter(_.startsWith(\"]]]]]]]]]]\")).length\n        val openBracketsCount11\
    \ = brackets.filter(_.startsWith(\"[[[[[[[[[[[\")).length\n        val closeBracketsCount11\
    \ = brackets.filter(_.startsWith(\"]]]]]]]]]]]\")).length\n        val openBracketsCount12\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpr11opvg1.scala:39:33 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount12\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e\
    [0m                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr11opvg1.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr11opvg1.scala:40:5\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string.length)\n        var openBrackets = 0\n       \
    \ var closeBrackets = 0\n        var openBracketsCount = 0\n        var closeBracketsCount\
    \ = 0\n        var openBracketsCountMax = 0\n        var closeBracketsCountMax\
    \ = 0\n        var openBracketsCountMaxIndex = 0\n        var closeBracketsCountMaxIndex\
    \ = 0\n        var openBracketsCountMaxIndex2 = 0\n        var closeBracketsCountMaxIndex2\
    \ = 0\n        var openBracketsCountMaxIndex3 = 0\n        var closeBracketsCountMaxIndex3\
    \ = 0\n        var openBracketsCountMaxIndex4 = 0\n        var closeBracketsCountMaxIndex4\
    \ = 0\n        var openBracketsCountMaxIndex5 = 0\n        var closeBracketsCountMaxIndex5\
    \ = 0\n        var openBracketsCountMaxIndex6 = 0\n        var closeBracketsCountMaxIndex6\
    \ = 0\n        var openBracketsCountMaxIndex7 = 0\n        var closeBracketsCountMaxIndex7\
    \ = 0\n        var openBracketsCountMaxIndex8 = 0\n        var closeBracketsCountMaxIndex8\
    \ = 0\n        var openBracketsCountMaxIndex9 = 0\n        var closeBracketsCountMaxIndex9\
    \ = 0\n        var openBracketsCountMaxIndex10 = 0\n        var closeBracketsCountMaxIndex10\
    \ = 0\n        var openBracketsCountMaxIndex11 = 0\n        var closeBracketsCountMaxIndex11\
    \ = 0\n        var openBracketsCountMaxIndex12 = 0\n        var closeBracketsCountMaxIndex12\
    \ = 0\n        var openBracketsCountMaxIndex13 = 0\n        var closeBracketsCountMaxIndex13\
    \ = 0\n        var openBracketsCountMaxIndex14 = 0\n        var closeBracketsCountMaxIndex14\
    \ = 0\n        var openBracketsCountMaxIndex15 = 0\n        var closeBracketsCountMaxIndex15\
    \ = 0\n        var openBracketsCountMaxIndex16 = 0\n        var closeBracketsCountMaxIndex16\
    \ = 0\n        var openBracketsCountMaxIndex17 = 0\n        var closeBracketsCountMaxIndex17\
    \ = 0\n        var openBracketsCountMaxIndex18 = 0\n        var closeBracketsCountMaxIndex18\
    \ = 0\n        var openBracketsCountMaxIndex19 = 0\n        var closeBracketsCountMaxIndex19\
    \ = 0\n        var openBracketsCountMaxIndex20 = 0\n        var closeBracketsCountMaxIndex20\
    \ = 0\n        var openBracketsCountMaxIndex21 = 0\n        var closeBrackets\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpauwam_jx.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpauwam_jx.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ArrayBuffer(string.length)\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpauwam_jx.scala:63:5\
    \ ---------------------\e[0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        brackets += \"[\" \n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        val\
    \ bracketsString = brackets.mkString(\"\")\n        val stringArray = string.split(bracketsString)\n\
    \        val stringArrayLength = stringArray.length\n        val bracketsArray\
    \ = stringArray(0).toString.split(bracketsString)\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayLength = stringArrayLength\
    \ - bracketsArrayLength\n        val bracketsArrayLength = stringArrayLength -\
    \ bracketsArrayLength\n        val bracketsArrayLength = stringArrayLength - bracketsArrayLength\n\
    \        val bracketsArrayLength = stringArrayLength - bracketsArrayLength\n \
    \       val bracketsArrayLength = stringArrayLength - bracketsArrayLength\n  \
    \      val bracketsArrayLength = stringArrayLength - bracketsArrayLength\n   \
    \     val bracketsArrayLength = stringArrayLength - bracketsArrayLength\n    \
    \    val bracketsArrayLength = stringArrayLength - bracketsArrayLength\n     \
    \   val bracketsArrayLength = stringArrayLength - bracketsArrayLength\n      \
    \  val bracketsArrayLength = stringArrayLength - bracketsArrayLength\n       \
    \ val bracketsArrayLength = stringArrayLength - bracketsArrayLength\n        val\
    \ bracketsArrayLength = stringArrayLength - bracketsArrayLength\n        val bracketsArrayLength\
    \ = stringArrayLength - bracketsArrayLength\n        val bracketsArrayLength =\
    \ stringArrayLength - bracketsArrayLength\n        val bracketsArrayLength = stringArrayLength\
    \ - bracketsArrayLength\n        val bracketsArrayLength = stringArrayLength -\
    \ bracketsArrayLength\n        val bracketsArrayLength = stringArrayLength - bracketsArrayLength\n\
    \        val bracketsArrayLength = stringArrayLength - bracketsArrayLength\n \
    \       val bracketsArrayLength = stringArrayLength - bracketsArrayLength\n  \
    \      val bracketsArrayLength = stringArrayLength - bracketsArrayLength\n   \
    \     val bracketsArrayLength = stringArrayLength - bracketsArrayLength\n    \
    \    val bracketsArrayLength = stringArrayLength - bracketsArrayLength\n     \
    \   val bracketsArrayLength = stringArrayLength - bracketsArrayLength\n      \
    \  val bracketsArrayLength = stringArrayLength - bracketsArrayLength\n       \
    \ val bracketsArrayLength = stringArrayLength - bracketsArrayLength\n        val\
    \ bracketsArrayLength = stringArrayLength - bracketsArrayLength\n        val bracketsArrayLength\
    \ = stringArrayLength - bracketsArrayLength\n        val bracketsArrayLength =\
    \ stringArrayLength - bracket\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdhbbkoi0.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mbracketsArrayLength\e[0m\
    \ = stringArrayLength - bracketsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mbracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdhbbkoi0.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mbracketsArrayLength\e[0m\
    \ = stringArrayLength - bracketsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mbracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdhbbkoi0.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mbracketsArrayLength\e[0m\
    \ = stringArrayLength - bracketsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mbracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdhbbkoi0.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mbracketsArrayLength\e[0m\
    \ = stringArrayLength - bracketsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mbracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of t"
  stdout: ''
  timestamp: 1659799255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer.empty[String]\n        val openBrackets = mutable.ArrayBuffer.empty[String]\n\
    \        val closeBrackets = mutable.ArrayBuffer.empty[String]\n        val openBracketsCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closeBracketsCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val openBracketsCounts = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closeBracketsCounts = mutable.ArrayBuffer.empty[Int]\n        val openBracketsCountPairs\
    \ = mutable.ArrayBuffer.empty[(Int, Int)]\n        val closeBracketsCountPairs\
    \ = mutable.ArrayBuffer.empty[(Int, Int)]\n        val openBracketsCountPairsCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closeBracketsCountPairsCount =\
    \ mutable.ArrayBuffer.empty[Int]\n        val openBracketsCountPairsCounts = mutable.ArrayBuffer.empty[Int]\n\
    \        val closeBracketsCountPairsCounts = mutable.ArrayBuffer.empty[Int]\n\
    \        val openBracketsCountPairsCountPairs = mutable.ArrayBuffer.empty[(Int,\
    \ Int)]\n        val closeBracketsCountPairsCountPairs = mutable.ArrayBuffer.empty[(Int,\
    \ Int)]\n        val openBracketsCountPairsCountPairsCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val closeBracketsCountPairsCountPairsCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val openBracketsCountPairsCountPairsCounts = mutable.ArrayBuffer.empty[Int]\n\
    \        val closeBracketsCountPairsCountPairsCounts = mutable.ArrayBuffer.empty[Int]\n\
    \        val openBracketsCountPairsCountPairsCountPairs = mutable.ArrayBuffer.empty[(Int,\
    \ Int)]\n        val closeBracketsCountPairsCountPairsCountPairs = mutable.ArrayBuffer.empty[(Int,\
    \ Int)]\n        val openBracketsCountPairsCountPairsCountPairsCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val closeBracketsCountPairsCountPairsCountPairsCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val openBracketsCountPairsCountPairsCountPairsCounts = mutable.ArrayBuffer.empty[Int]\n\
    \        val closeBracketsCountPairsCountPairsCountPairsCounts = mutable.ArrayBuffer.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7fpeg7e1.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp7fpeg7e1.scala:14:23 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7fpeg7e1.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7fpeg7e1.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7fpeg7e1.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m           \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7fpeg7e1.scala:18:33 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBracketsCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m       "
  stdout: ''
  timestamp: 1659799255
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val openBrackets = brackets.filter(x => x.contains('['))\n\
    \        val closeBrackets = brackets.filter(x => x.contains(']'))\n        val\
    \ openBracketsCount = openBrackets.size\n        val closeBracketsCount = closeBrackets.size\n\
    \        val openBracketsNestings = openBrackets.map(x => x.contains(']')).count(_\
    \ == true)\n        val closeBracketsNestings = closeBrackets.map(x => x.contains('[')).count(_\
    \ == true)\n        val isNested = openBracketsNestings + closeBracketsNestings\
    \ == openBracketsCount + closeBracketsCount\n        return isNested\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzniwvru6.scala:25)\n\tat Problem.main(tmpzniwvru6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n        val bracketsCount = brackets.length\n\
    \        val bracketsNestings = brackets.map(x => x.split(\"\\\\[|\\\\]|\\\\{|\\\
    \\}\").length)\n        val bracketsNestingsCount = bracketsNestings.sum\n   \
    \     val bracketsNestingsSum = bracketsNestings.sum\n        val bracketsNestingsSumOfSquares\
    \ = bracketsNestingsSum * bracketsNestingsSum\n        val bracketsNestingsSumOfSquaresOfSquares\
    \ = bracketsNestingsSumOfSquares * bracketsNestingsSumOfSquares\n        val bracketsNestingsSumOfSquaresOfSquaresOfSquares\
    \ = bracketsNestingsSumOfSquaresOfSquares * bracketsNestingsSumOfSquaresOfSquares\n\
    \        val bracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquares = bracketsNestingsSumOfSquaresOfSquaresOfSquares\
    \ * bracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquares\n        val bracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = bracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquares * bracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \        val bracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = bracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * bracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \        val bracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = bracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * bracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \        val bracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = bracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ * bracketsNestingsSumOfSquaresOfSquaresOfSquaresOf\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw0by8awo.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\e\
    [0m = bracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * bracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ is already defined as \e[33mvalue\e[0m \e[35mbracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpw0by8awo.scala:22:119 --------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquares\e\
    [0m = bracketsNestingsSumOfSquaresOfSquaresOfSquares * bracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquares\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35mbracketsNestingsSumOfSquaresOfSquaresOfSquaresOfSquares\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw0by8awo.scala:27:5\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799257
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val nested = brackets.foldLeft(false)((acc,\
    \ x) => acc && isNested(x))\n        nested\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6bh3ncir.scala:19)\n\tat Problem.main(tmp6bh3ncir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[Char]()\n        var openBrackets = 0\n        var closeBrackets\
    \ = 0\n        for(i <- 0 until string.length) {\n            if(brackets.isEmpty)\
    \ {\n                if(string.charAt(i) == '[') {\n                    openBrackets\
    \ += 1\n                } else if(string.charAt(i) == ']') {\n               \
    \     closeBrackets += 1\n                } else {\n                    return\
    \ false\n                }\n            } else {\n                if(brackets.last()\
    \ == '[' && string.charAt(i) == ']') {\n                    closeBrackets += 1\n\
    \                } else if(string.charAt(i) == '[') {\n                    openBrackets\
    \ += 1\n                } else if(string.charAt(i) == ']') {\n               \
    \     closeBrackets += 1\n                } else {\n                    return\
    \ false\n                }\n            }\n            brackets += string.charAt(i)\n\
    \        }\n        if(openBrackets != closeBrackets) {\n            return false\n\
    \        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsvjcblij.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val openBrackets = mutable.ListBuffer[String]()\n\
    \        val closeBrackets = mutable.ListBuffer[String]()\n        val openBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount2 = mutable.ListBuffer[Int]()\n        val closeBracketsCount2\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount3 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount3 = mutable.ListBuffer[Int]()\n        val openBracketsCount4\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount4 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount5 = mutable.ListBuffer[Int]()\n        val closeBracketsCount5\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount6 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount6 = mutable.ListBuffer[Int]()\n        val openBracketsCount7\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount7 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount8 = mutable.ListBuffer[Int]()\n        val closeBracketsCount8\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount9 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount9 = mutable.ListBuffer[Int]()\n        val openBracketsCount10\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount10 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount11 = mutable.ListBuffer[Int]()\n        val closeBracketsCount11\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount12 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount12 = mutable.ListBuffer[Int]()\n        val openBracketsCount13\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount13 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount14 = mutable.ListBuffer[Int]()\n        val closeBracketsCount14\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpocafe7du.scala:44:34 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsCount14\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpocafe7du.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpocafe7du.scala:15:27\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpocafe7du.scala:16:28 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpocafe7du.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoc"
  stdout: ''
  timestamp: 1659799236
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val bracketsNestingCount = brackets.count(x => x.contains(\"[\")) - brackets.count(x\
    \ => x.contains(\"]\"))\n        val bracketsNestingCount = if (bracketsNestingCount\
    \ > 0) bracketsNestingCount else 0\n        val bracketsNestingCountInRange =\
    \ bracketsNestingCount >= 0 && bracketsNestingCount <= 2\n        val bracketsNestingCountInRange2\
    \ = bracketsNestingCount >= 3 && bracketsNestingCount <= 4\n        val bracketsNestingCountInRange3\
    \ = bracketsNestingCount >= 5 && bracketsNestingCount <= 6\n        val bracketsNestingCountInRange4\
    \ = bracketsNestingCount >= 7 && bracketsNestingCount <= 8\n        val bracketsNestingCountInRange5\
    \ = bracketsNestingCount >= 9 && bracketsNestingCount <= 10\n        val bracketsNestingCountInRange6\
    \ = bracketsNestingCount >= 11 && bracketsNestingCount <= 12\n        val bracketsNestingCountInRange7\
    \ = bracketsNestingCount >= 13 && bracketsNestingCount <= 14\n        val bracketsNestingCountInRange8\
    \ = bracketsNestingCount >= 15 && bracketsNestingCount <= 16\n        val bracketsNestingCountInRange9\
    \ = bracketsNestingCount >= 17 && bracketsNestingCount <= 18\n        val bracketsNestingCountInRange10\
    \ = bracketsNestingCount >= 19 && bracketsNestingCount <= 20\n        val bracketsNestingCountInRange11\
    \ = bracketsNestingCount >= 21 && bracketsNestingCount <= 22\n        val bracketsNestingCountInRange12\
    \ = bracketsNestingCount >= 23 && bracketsNestingCount <= 24\n        val bracketsNestingCountInRange13\
    \ = bracketsNestingCount >= 25 && bracketsNestingCount <= 26\n        val bracketsNestingCountInRange14\
    \ = bracketsNestingCount >= 27 && bracketsNestingCount <= 28\n        val bracketsNestingCountInRange15\
    \ = bracketsNestingCount >= 29 && bracketsNestingCount <= 30\n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8lkkomx7.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingCount\e[0m\
    \ = \e[33mif\e[0m (bracketsNestingCount > \e[31m0\e[0m) bracketsNestingCount \e\
    [33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mbracketsNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp8lkkomx7.scala:34:5 ---------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799258
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val nestings = brackets.filter(x\
    \ => x.contains(\"]\")).map(x => x.split(\"\\\\]\")).toList\n        nestings.forall(x\
    \ => x.size == brackets.count(y => y.contains(\"[\")))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptgcnmqu2.scala:20)\n\tat Problem.main(tmptgcnmqu2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799258
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val openingBrackets = brackets.filter(x => x != \"[\")\n        val closingBrackets\
    \ = brackets.filter(x => x != \"]\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val isNested\
    \ = bracketsCount >= openingBracketsCount && bracketsCount <= closingBracketsCount\n\
    \        return isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcdgy8tuz.scala:25)\n\tat Problem.main(tmpcdgy8tuz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string)\n        val openBrackets = mutable.ArrayBuffer(0)\n\
    \        val closeBrackets = mutable.ArrayBuffer(0)\n        val openBracketsCount\
    \ = mutable.ArrayBuffer(0)\n        val closeBracketsCount = mutable.ArrayBuffer(0)\n\
    \        val openBracketsCounts = mutable.ArrayBuffer(0)\n        val closeBracketsCounts\
    \ = mutable.ArrayBuffer(0)\n        val openBracketsCountPairs = mutable.ArrayBuffer(0)\n\
    \        val closeBracketsCountPairs = mutable.ArrayBuffer(0)\n        val openBracketsCountPairsCount\
    \ = mutable.ArrayBuffer(0)\n        val closeBracketsCountPairsCount = mutable.ArrayBuffer(0)\n\
    \        val openBracketsCountPairsCounts = mutable.ArrayBuffer(0)\n        val\
    \ closeBracketsCountPairsCounts = mutable.ArrayBuffer(0)\n        val openBracketsCountPairsCountPairs\
    \ = mutable.ArrayBuffer(0)\n        val closeBracketsCountPairsCountPairs = mutable.ArrayBuffer(0)\n\
    \        val openBracketsCountPairsCountPairsCount = mutable.ArrayBuffer(0)\n\
    \        val closeBracketsCountPairsCountPairsCount = mutable.ArrayBuffer(0)\n\
    \        val openBracketsCountPairsCountPairsCounts = mutable.ArrayBuffer(0)\n\
    \        val closeBracketsCountPairsCountPairsCounts = mutable.ArrayBuffer(0)\n\
    \        val openBracketsCountPairsCountPairsCountPairs = mutable.ArrayBuffer(0)\n\
    \        val closeBracketsCountPairsCountPairsCountPairs = mutable.ArrayBuffer(0)\n\
    \        val openBracketsCountPairsCountPairsCountPairsCount = mutable.ArrayBuffer(0)\n\
    \        val closeBracketsCountPairsCountPairsCountPairsCount = mutable.ArrayBuffer(0)\n\
    \        val openBracketsCountPairsCountPairsCountPairsCounts = mutable.ArrayBuffer(0)\n\
    \        val closeBracketsCountPairsCountPairsCountPairsCounts = mutable.ArrayBuffer(0)\n\
    \        val openBracketsCountPairsCountPairsCountPairsCountPairs = mutable.ArrayBuffer(0)\n\
    \        val closeBracketsCountPairsCountPairsCountPairsCountPairs = mutable.ArrayBuffer(0)\n\
    \        val openBracketsCountPairsCountPairsCountPairsCountPairsCount = mutable.ArrayBuffer(0)\n\
    \        val closeBracketsCountPairs\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6c4c5iun.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6c4c5iun.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ArrayBuffer(string)\n\e[31m\e[31m   |\e[0m       \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6c4c5iun.scala:15:27\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.ArrayBuffer(\e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6c4c5iun.scala:16:28 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ArrayBuffer(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp6c4c5iun.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ArrayBuffer(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6c4c5iun.scala:18:33\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsCount\e[0m = mutable.ArrayBuffer(\e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       "
  stdout: ''
  timestamp: 1659799258
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val nestedBrackets = brackets.filter(x => x.contains(']'))\n\
    \        val nestedBracketsCount = nestedBrackets.length\n        val bracketsCount\
    \ = brackets.length\n        val isNested = nestedBracketsCount != bracketsCount\n\
    \        return isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0fsn6eho.scala:23)\n\tat Problem.main(tmp0fsn6eho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val openBrackets = mutable.ListBuffer[String]()\n\
    \        val closeBrackets = mutable.ListBuffer[String]()\n        val openBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCounts = mutable.ListBuffer[Int]()\n        val closeBracketsCounts\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCount = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCount = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCounts = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCounts = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:18:33\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsCount\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error"
  stdout: ''
  timestamp: 1659799248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer.empty[String]\n        val openings = mutable.ArrayBuffer.empty[String]\n\
    \        val closings = mutable.ArrayBuffer.empty[String]\n        val openings_count\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closings_count = mutable.ArrayBuffer.empty[Int]\n\
    \        val openings_count_max = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closings_count_max = mutable.ArrayBuffer.empty[Int]\n        val openings_count_min\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closings_count_min = mutable.ArrayBuffer.empty[Int]\n\
    \        val openings_count_min = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closings_count_min = mutable.ArrayBuffer.empty[Int]\n        val openings_count_max\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closings_count_max = mutable.ArrayBuffer.empty[Int]\n\
    \        val openings_count_min = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closings_count_min = mutable.ArrayBuffer.empty[Int]\n        val openings_count_max\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closings_count_max = mutable.ArrayBuffer.empty[Int]\n\
    \        val openings_count_min = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closings_count_min = mutable.ArrayBuffer.empty[Int]\n        val openings_count_max\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closings_count_max = mutable.ArrayBuffer.empty[Int]\n\
    \        val openings_count_min = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closings_count_min = mutable.ArrayBuffer.empty[Int]\n        val openings_count_max\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closings_count_max = mutable.ArrayBuffer.empty[Int]\n\
    \        val openings_count_min = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closings_count_min = mutable.ArrayBuffer.empty[Int]\n        val openings_count_max\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closings_count_max = mutable.ArrayBuffer.empty[Int]\n\
    \        val openings_count_min = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closings_count_min = mutable.ArrayBuffer.empty[Int]\n        val openings_count_max\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closings_count_max = mutable.ArrayBuffer.empty[Int]\n\
    \        val openings_count_min = mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzkyd_egm.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpzkyd_egm.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mopenings_count_min\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenings_count_min is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenings_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzkyd_egm.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mclosings_count_min\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosings_count_min is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosings_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzkyd_egm.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mopenings_count_max\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenings_count_max is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenings_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzkyd_egm.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mclosings_count_max\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosings_count_max is already def"
  stdout: ''
  timestamp: 1659799258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val openings = mutable.ListBuffer[String]()\n\
    \        val closings = mutable.ListBuffer[String]()\n        val openings_count\
    \ = mutable.ListBuffer[Int]()\n        val closings_count = mutable.ListBuffer[Int]()\n\
    \        val openings_count_max = mutable.ListBuffer[Int]()\n        val closings_count_max\
    \ = mutable.ListBuffer[Int]()\n        val openings_count_min = mutable.ListBuffer[Int]()\n\
    \        val closings_count_min = mutable.ListBuffer[Int]()\n        val openings_count_min\
    \ = mutable.ListBuffer[Int]()\n        val closings_count_min = mutable.ListBuffer[Int]()\n\
    \        val openings_count_max = mutable.ListBuffer[Int]()\n        val closings_count_max\
    \ = mutable.ListBuffer[Int]()\n        val openings_count_min = mutable.ListBuffer[Int]()\n\
    \        val closings_count_min = mutable.ListBuffer[Int]()\n        val openings_count_max\
    \ = mutable.ListBuffer[Int]()\n        val closings_count_max = mutable.ListBuffer[Int]()\n\
    \        val openings_count_min = mutable.ListBuffer[Int]()\n        val closings_count_min\
    \ = mutable.ListBuffer[Int]()\n        val openings_count_max = mutable.ListBuffer[Int]()\n\
    \        val closings_count_max = mutable.ListBuffer[Int]()\n        val openings_count_min\
    \ = mutable.ListBuffer[Int]()\n        val closings_count_min = mutable.ListBuffer[Int]()\n\
    \        val openings_count_max = mutable.ListBuffer[Int]()\n        val closings_count_max\
    \ = mutable.ListBuffer[Int]()\n        val openings_count_min = mutable.ListBuffer[Int]()\n\
    \        val closings_count_min = mutable.ListBuffer[Int]()\n        val openings_count_max\
    \ = mutable.ListBuffer[Int]()\n        val closings_count_max = mutable.ListBuffer[Int]()\n\
    \        val openings_count_min = mutable.ListBuffer[Int]()\n        val closings_count_min\
    \ = mutable.ListBuffer[Int]()\n        val openings_count_max = mutable.ListBuffer[Int]()\n\
    \        val closings_count_max = mutable.ListBuffer[Int]()\n        val openings_count_min\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphsedeh4z.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphsedeh4z.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mopenings_count_min\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenings_count_min is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenings_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphsedeh4z.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mclosings_count_min\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosings_count_min is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosings_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphsedeh4z.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mopenings_count_max\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenings_count_max is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenings_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphsedeh4z.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mclosings_count_max\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosings_count_max is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosings_cou"
  stdout: ''
  timestamp: 1659799258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string.length)\n        brackets.update(0, string.length)\n\
    \        val stack = mutable.ArrayBuffer.empty[String]\n        val result = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val stackSize = stack.length\n        val resultSize = result.length\n\
    \        val stackIndex = stackSize - 1\n        val resultIndex = resultSize\
    \ - 1\n        val openBrackets = mutable.ArrayBuffer.empty[String]\n        val\
    \ closeBrackets = mutable.ArrayBuffer.empty[String]\n        val openBracketIndex\
    \ = openBrackets.length - 1\n        val closeBracketIndex = closeBrackets.length\
    \ - 1\n        val openBracketsSize = openBrackets.length\n        val closeBracketsSize\
    \ = closeBrackets.length\n        val openBracketsIndex = openBracketsSize - 1\n\
    \        val closeBracketsIndex = closeBracketsSize - 1\n        val openBracketsIndex\
    \ = openBracketsSize - 1\n        val closeBracketsIndex = closeBracketsSize -\
    \ 1\n        val openBracketsIndex = openBracketsSize - 1\n        val closeBracketsIndex\
    \ = closeBracketsSize - 1\n        val openBracketsIndex = openBracketsSize -\
    \ 1\n        val closeBracketsIndex = closeBracketsSize - 1\n        val openBracketsIndex\
    \ = openBracketsSize - 1\n        val closeBracketsIndex = closeBracketsSize -\
    \ 1\n        val openBracketsIndex = openBracketsSize - 1\n        val closeBracketsIndex\
    \ = closeBracketsSize - 1\n        val openBracketsIndex = openBracketsSize -\
    \ 1\n        val closeBracketsIndex = closeBracketsSize - 1\n        val openBracketsIndex\
    \ = openBracketsSize - 1\n        val closeBracketsIndex = closeBracketsSize -\
    \ 1\n        val openBracketsIndex = openBracketsSize - 1\n        val closeBracketsIndex\
    \ = closeBracketsSize - 1\n        val openBracketsIndex = openBracketsSize -\
    \ 1\n        val closeBracketsIndex = closeBracketsSize - 1\n        val openBracketsIndex\
    \ = openBracketsSize - 1\n        val closeBracketsIndex = closeBracketsSize -\
    \ 1\n        val openBracketsIndex = openBracketsSize - 1\n        val closeBracketsIndex\
    \ = closeBracketsSize - 1\n        val openBracketsIndex = openBracketsSize -\
    \ 1\n        val closeBracketsIndex = close\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz65enihe.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsIndex\e[0m =\
    \ openBracketsSize - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mopenBracketsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpz65enihe.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsIndex\e[0m\
    \ = closeBracketsSize - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsIndex is already defined as \e[33mvalue\e[0m\
    \ \e[35mcloseBracketsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpz65enihe.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsIndex\e[0m =\
    \ openBracketsSize - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mopenBracketsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpz65enihe.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsIndex\e[0m\
    \ = closeBracketsSize - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsIndex is already defined as \e[33mvalue\e[0m\
    \ \e[35mcloseBracketsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpz65enihe.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    "
  stdout: ''
  timestamp: 1659799258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val bracketsCount = brackets.length\n        val openBracketsCount =\
    \ brackets.filter(_.startsWith(\"[\")).size\n        val closeBracketsCount =\
    \ brackets.filter(_.startsWith(\"]\")).size\n        val bracketsCount = openBracketsCount\
    \ + closeBracketsCount\n        val openBracketsCount = brackets.filter(_.startsWith(\"\
    [\")).size\n        val closeBracketsCount = brackets.filter(_.startsWith(\"]\"\
    )).size\n        val bracketsCount = openBracketsCount + closeBracketsCount\n\
    \        val openBracketsCount = brackets.filter(_.startsWith(\"[\")).size\n \
    \       val closeBracketsCount = brackets.filter(_.startsWith(\"]\")).size\n \
    \       val bracketsCount = openBracketsCount + closeBracketsCount\n        val\
    \ openBracketsCount = brackets.filter(_.startsWith(\"[\")).size\n        val closeBracketsCount\
    \ = brackets.filter(_.startsWith(\"]\")).size\n        val bracketsCount = openBracketsCount\
    \ + closeBracketsCount\n        val openBracketsCount = brackets.filter(_.startsWith(\"\
    [\")).size\n        val closeBracketsCount = brackets.filter(_.startsWith(\"]\"\
    )).size\n        val bracketsCount = openBracketsCount + closeBracketsCount\n\
    \        val openBracketsCount = brackets.filter(_.startsWith(\"[\")).size\n \
    \       val closeBracketsCount = brackets.filter(_.startsWith(\"]\")).size\n \
    \       val bracketsCount = openBracketsCount + closeBracketsCount\n        val\
    \ openBracketsCount = brackets.filter(_.startsWith(\"[\")).size\n        val closeBracketsCount\
    \ = brackets.filter(_.startsWith(\"]\")).size\n        val bracketsCount = openBracketsCount\
    \ + closeBracketsCount\n        val openBracketsCount = brackets.filter(_.startsWith(\"\
    [\")).size\n        val closeBracketsCount = brackets.filter(_.startsWith(\"]\"\
    )).size\n        val bracketsCount = openBracketsCount + closeBracketsCount\n\
    \        val openBracketsCount = brackets.filter(_.startsWith(\"[\")).size\n \
    \       val closeBracketsCount = brackets.filter(_.startsWith(\"]\")).size\n \
    \       val bracketsCount = openBracketsCount + closeBracketsCount\n        val\
    \ openBra\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp56bnpo7h.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp56bnpo7h.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbracketsCount\e[0m = openBracketsCount + closeBracketsCount\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp56bnpo7h.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m = brackets.filter(_.startsWith(\e\
    [31m\"[\"\e[0m)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsCount is already defined as \e[33mvalue\e[0m \e\
    [35mopenBracketsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp56bnpo7h.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsCount\e[0m\
    \ = brackets.filter(_.startsWith(\e[31m\"]\"\e[0m)).size\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcloseBracketsCount is already defined as \e[33mvalue\e[0m \e[35mcloseBracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp56bnpo7h.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = openBracketsCount\
    \ + closeBracketsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCount is already de"
  stdout: ''
  timestamp: 1659799259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val nestedBrackets = brackets.filter(x\
    \ => x.contains(\"]\"))\n        val nestedBracketsCount = nestedBrackets.length\n\
    \        val nestedBracketsCount = nestedBracketsCount.toInt\n        val bracketsCount\
    \ = brackets.length\n        val bracketsCount = bracketsCount.toInt\n       \
    \ val isNested = nestedBracketsCount > 0 && bracketsCount > 0 && bracketsCount\
    \ >= nestedBracketsCount\n        isNested\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu_rl5yer.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnestedBracketsCount\e[0m\
    \ = nestedBracketsCount.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnestedBracketsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mnestedBracketsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpu_rl5yer.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = bracketsCount.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mbracketsCount is already defined as \e[33mvalue\e[0m \e[35mbracketsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799257
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n        val nested = brackets.filter(x\
    \ => x.contains(\"[\")) \n        nested.length == brackets.length\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphid06153.scala:20)\n\tat Problem.main(tmphid06153.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val bracketsCount\
    \ = brackets.length\n        val openBrackets = brackets.filter(_.startsWith(\"\
    [\")).length\n        val closeBrackets = brackets.filter(_.endsWith(\"]\")).length\n\
    \        val openBracketsCount = openBrackets\n        val closeBracketsCount\
    \ = closeBrackets\n        val openBracketsNesting = (openBracketsCount - closeBracketsCount)\n\
    \        val closeBracketsNesting = (closeBracketsCount - openBracketsCount)\n\
    \        val openBracketsNestingIsValid = openBracketsNesting > 0\n        val\
    \ closeBracketsNestingIsValid = closeBracketsNesting > 0\n        val openBracketsNestingIsValidAndNestingIsValid\
    \ = openBracketsNestingIsValid && closeBracketsNestingIsValid\n        val openBracketsNestingIsValidAndNestingIsValidAndNestingIsValid\
    \ = openBracketsNestingIsValid && closeBracketsNestingIsValid && openBracketsNestingIsValidAndNestingIsValid\n\
    \        val openBracketsNestingIsValidAndNestingIsValidAndNestingIsValidAndNestingIsValid\
    \ = openBracketsNestingIsValid && closeBracketsNestingIsValid && openBracketsNestingIsValidAndNestingIsValid\
    \ && openBracketsNestingIsValidAndNestingIsValidAndNestingIsValid\n        val\
    \ openBracketsNestingIsValidAndNestingIsValidAndNestingIsValidAndNestingIsValidAndNestingIsValid\
    \ = openBracketsNestingIsValid && closeBracketsNestingIsValid && openBracketsNestingIsValidAndNestingIsValid\
    \ && openBracketsNestingIsValidAndNestingIsValidAndNestingIsValid && openBracketsNestingIsValidAndNestingIsValidAndNestingIsValidAndNestingIsValid\n\
    \        val openBracketsNestingIsValidAndNestingIsValidAndNestingIsValidAndNestingIsValidAndNesting\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpisxz77_e.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpisxz77_e.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799259
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").map(_.trim).toList\n        val nestings = brackets.filter(x\
    \ => x.contains(\"]\")).map(x => x.split(\"]\").map(_.trim).toList)\n        nestings.forall(nesting\
    \ => brackets.forall(x => nesting.contains(x)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpztbmw87l.scala:19)\n\tat Problem.main(tmpztbmw87l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string.length)\n        var i = 0\n        while (i <\
    \ string.length) {\n            if (string.charAt(i) == '[') {\n             \
    \   brackets += i\n            }\n            if (string.charAt(i) == ']') {\n\
    \                brackets -= i\n            }\n            i += 1\n        }\n\
    \        brackets.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoa2qx9nj.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ArrayBuffer(string.length)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799257
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val nests = brackets.filter(_.contains(']'))\n\
    \        nests.size > 0\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp026aolc_.scala:20)\n\tat Problem.main(tmp026aolc_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val openBrackets = brackets.filter(_.contains('['))\n\
    \        val closeBrackets = brackets.filter(_.contains(']'))\n        val openBracketsCount\
    \ = openBrackets.size\n        val closeBracketsCount = closeBrackets.size\n \
    \       val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNesting\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1vxofjn_.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1vxofjn_.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopenBracketsNestings\e[0m = openBrackets.filter(_.contains(\e[31m']'\e\
    [0m)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsNestings is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1vxofjn_.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestings\e\
    [0m = closeBrackets.filter(_.contains(\e[31m'['\e[0m)).size\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsNestings is already defined as \e[33mvalue\e\
    [0m \e[35mcloseBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1vxofjn_.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestings\e[0m\
    \ = openBrackets.filter(_.contains(\e[31m']'\e[0m)).size\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsNestings is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1vxofjn_.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestings\e\
    [0m = closeBrackets.filter(_.contains(\e[31m'['\e[0m)).size\n\e[31m\e[31m   |\e\
    [0m        ^^^^^"
  stdout: ''
  timestamp: 1659799266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Write\
    \ your code here\n        val brackets = mutable.ListBuffer[String]()\n      \
    \  val openBrackets = mutable.ListBuffer[String]()\n        val closeBrackets\
    \ = mutable.ListBuffer[String]()\n        val openBracketsCount = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount = mutable.ListBuffer[Int]()\n        val openBracketsCount2\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount2 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount3 = mutable.ListBuffer[Int]()\n        val closeBracketsCount3\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount4 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount4 = mutable.ListBuffer[Int]()\n        val openBracketsCount5\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount5 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount6 = mutable.ListBuffer[Int]()\n        val closeBracketsCount6\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount7 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount7 = mutable.ListBuffer[Int]()\n        val openBracketsCount8\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount8 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount9 = mutable.ListBuffer[Int]()\n        val closeBracketsCount9\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount10 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount10 = mutable.ListBuffer[Int]()\n        val openBracketsCount11\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount11 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount12 = mutable.ListBuffer[Int]()\n        val closeBracketsCount12\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount13 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount13 = mutable.ListBuffer[Int]()\n        val openBracketsCount14\
    \ = mutable.ListBuffer[Int]()\n        val closeBra\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplfa2ljm2.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplfa2ljm2.scala:15:23\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplfa2ljm2.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplfa2ljm2.scala:17:28 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplfa2ljm2.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplfa2ljm2.scala:19:33\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsCount\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e["
  stdout: ''
  timestamp: 1659799264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string.length)\n        var open = 0\n        var close\
    \ = 0\n        var openCount = 0\n        var closeCount = 0\n        var openCountMax\
    \ = 0\n        var closeCountMax = 0\n        var openCountMin = Integer.MAX_VALUE\n\
    \        var closeCountMin = Integer.MAX_VALUE\n        var openCountMaxMin =\
    \ Integer.MAX_VALUE\n        var closeCountMaxMin = Integer.MAX_VALUE\n      \
    \  var openCountMinMax = Integer.MAX_VALUE\n        var closeCountMinMax = Integer.MAX_VALUE\n\
    \        var openCountMinMaxMin = Integer.MAX_VALUE\n        var closeCountMinMaxMin\
    \ = Integer.MAX_VALUE\n        var openCountMinMaxMinMax = Integer.MAX_VALUE\n\
    \        var closeCountMinMaxMinMax = Integer.MAX_VALUE\n        var openCountMinMaxMinMaxMin\
    \ = Integer.MAX_VALUE\n        var closeCountMinMaxMinMaxMin = Integer.MAX_VALUE\n\
    \        var openCountMinMaxMinMaxMinMax = Integer.MAX_VALUE\n        var closeCountMinMaxMinMaxMinMax\
    \ = Integer.MAX_VALUE\n        var openCountMinMaxMinMaxMinMaxMin = Integer.MAX_VALUE\n\
    \        var closeCountMinMaxMinMaxMinMaxMin = Integer.MAX_VALUE\n        var\
    \ openCountMinMaxMinMaxMinMaxMinMax = Integer.MAX_VALUE\n        var closeCountMinMaxMinMaxMinMaxMinMax\
    \ = Integer.MAX_VALUE\n        var openCountMinMaxMinMaxMinMaxMinMaxMin = Integer.MAX_VALUE\n\
    \        var closeCountMinMaxMinMaxMinMaxMinMaxMin = Integer.MAX_VALUE\n     \
    \   var openCountMinMaxMinMaxMinMaxMinMaxMinMax = Integer.MAX_VALUE\n        var\
    \ closeCountMinMaxMinMaxMinMaxMinMaxMinMax = Integer.MAX_VALUE\n        var openCountMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = Integer.MAX_VALUE\n        var closeCountMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = Integer.MAX_VALUE\n        var openCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = Integer.MAX_VALUE\n        var closeCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = Integer.MAX_VALUE\n        var openCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = Integer.MAX_VALUE\n        var closeCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = Integer.MAX_VALUE\n        var openCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = Integer.MAX_VALUE\n        var closeCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = Integer.MAX_VALUE\n        var openCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = Integer.MAX_\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq4o_uktx.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mvar\e[0m \e[36mopenCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\e\
    [0m = Integer.MAX_VALUE\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax is already defined\
    \ as \e[33mvariable\e[0m \e[35mopenCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq4o_uktx.scala:48:12 ---------------------------\e[0m\e[0m\n\e\
    [31m48 |\e[0m        \e[33mvar\e[0m \e[36mcloseCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\e\
    [0m = Integer.MAX_VALUE\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax is already\
    \ defined as \e[33mvariable\e[0m \e[35mcloseCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpq4o_uktx.scala:14:23 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ArrayBuffer(string.length)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpq4o_uktx.scala:51:74 ------------------------\e[0m\e\
    [0m\n\e[31m51 |\e[0m        \e[33mvar\e[0m \e[36mopenCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\e\
    [0m = Integer.MAX_\n\e[31m\e[31m   |\e[0m                                    \
    \                              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                value MAX_ is not a member of object Integer\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpq4o_uktx.scala:52:5 ---------------------\e\
    [0m\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659799266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        brackets += \"[\" \n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets.toList.contains(string)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8zg1vh6m.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val bracketsCount\
    \ = brackets.length\n        val openingBrackets = brackets.filter(_.startsWith(\"\
    [\"))\n        val closingBrackets = brackets.filter(_.endsWith(\"]\"))\n    \
    \    val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        val openingBracketsCountNesting = (openingBracketsCount\
    \ - closingBracketsCount).abs\n        val closingBracketsCountNesting = (openingBracketsCountNesting\
    \ - openingBracketsCount).abs\n        val openingBracketsCountNesting2 = openingBracketsCount.toDouble\
    \ / closingBracketsCount.toDouble\n        val closingBracketsCountNesting2 =\
    \ openingBracketsCountNesting.toDouble / openingBracketsCount.toDouble\n     \
    \   val openingBracketsCountNesting3 = openingBracketsCount.toDouble / closingBracketsCount.toDouble\n\
    \        val closingBracketsCountNesting3 = openingBracketsCountNesting2.toDouble\
    \ / openingBracketsCount.toDouble\n        val openingBracketsCountNesting4 =\
    \ openingBracketsCount.toDouble / closingBracketsCount.toDouble\n        val closingBracketsCountNesting4\
    \ = openingBracketsCountNesting3.toDouble / openingBracketsCount.toDouble\n  \
    \      val openingBracketsCountNesting5 = openingBracketsCount.toDouble / closingBracketsCount.toDouble\n\
    \        val closingBracketsCountNesting5 = openingBracketsCountNesting4.toDouble\
    \ / openingBracketsCount.toDouble\n        val openingBracketsCountNesting6 =\
    \ openingBracketsCount.toDouble / closingBracketsCount.toDouble\n        val closingBracketsCountNesting6\
    \ = openingBracketsCountNesting5.toDouble / openingBracketsCount.toDouble\n  \
    \      val openingBracketsCountNesting7 = openingBracketsCount.toDouble / closingBracketsCount.toDouble\n\
    \        val closingBracket\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp31fokogm.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp31fokogm.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val openBrackets = mutable.ListBuffer[String]()\n\
    \        val closeBrackets = mutable.ListBuffer[String]()\n        val openBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCounts = mutable.ListBuffer[Int]()\n        val closeBracketsCounts\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCount = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCount = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCounts = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCounts = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:18:33\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsCount\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error"
  stdout: ''
  timestamp: 1659799248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.map(_.length).sum\n        val closeBracketsCount\
    \ = closeBrackets.map(_.length).sum\n        val openBracketsNestingCount = openBrackets.filter(_.contains(\"\
    [\")) match {\n            case Nil => 0\n            case _ => openBrackets.filter(_.contains(\"\
    [\").map(_.length).sum\n        }\n        val closeBracketsNestingCount = closeBrackets.filter(_.contains(\"\
    ]\") match {\n            case Nil => 0\n            case _ => closeBrackets.filter(_.contains(\"\
    ]\").map(_.length).sum\n        }\n        val openBracketsNestingCountIsNesting\
    \ = openBracketsNestingCount > 0\n        val closeBracketsNestingCountIsNesting\
    \ = closeBracketsNestingCount > 0\n        val openBracketsNestingCountIsNotNesting\
    \ = openBracketsNestingCount < 0\n        val closeBracketsNestingCountIsNotNesting\
    \ = closeBracketsNestingCount < 0\n        val openBracketsNestingCountIsNotNestingOrZero\
    \ = openBracketsNestingCount <= 0\n        val closeBracketsNestingCountIsNotNestingOrZero\
    \ = closeBracketsNestingCount <= 0\n        val openBracketsNestingCountIsNestingOrZero\
    \ = openBracketsNestingCount >= 0\n        val closeBracketsNestingCountIsNestingOrZero\
    \ = closeBracketsNestingCount >= 0\n        val openBracketsNestingCountIsNotNestingOrZero\
    \ = openBracketsNestingCount < 0\n        val closeBracketsNestingCountIsNotNestingOrZero\
    \ = closeBracketsNestingCount < 0\n        val openBracketsNestingCountIsNestingOrZero\
    \ = openBracketsNestingCount >= 0\n        val closeBracketsNestingCountIsNestingOrZero\
    \ = closeBracketsNestingCount >= 0\n        val openBracketsNesting\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5x8gqd4n.scala:22:8 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp5x8gqd4n.scala:26:8 ----------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m      \
    \  ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5x8gqd4n.scala:27:8\
    \ ----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopenBracketsNestingCountIsNesting\e[0m = openBracketsNestingCount > \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        ')'\
    \ expected, but 'val' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5x8gqd4n.scala:20:17\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m Nil\
    \ => \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (Nil : => collection.immutable.Nil\xB2.type)\n\e[31m   |\e\
    [0m        Required: Array[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m        where:\
    \    Nil  is a getter in \e[33mpackage object\e[0m \e[35mscala\e[0m\n\e[31m  \
    \ |\e[0m                  Nil\xB2 is a object in \e[33mpackage\e[0m \e[35mscala.collection.immutable\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m        pattern type is incompatible with\
    \ expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5x8gqd4n.scala:21:58\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e\
    [0m _ => openBrackets.filter(_.contains(\e[31m\"[\"\e[0m).map(_.length).sum\n\e\
    [31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value map is not a member\
    \ of Boolean\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5x8gqd4n.scala:24:17\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m Nil\
    \ => \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (Nil : => collection.immutable.Nil\xB2.typ"
  stdout: ''
  timestamp: 1659799269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnmdy48t8.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36misNested\e\
    [0m(\e[36mstring\e[0m : \e[35mString\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                              ^\e[0m\n\e[31m   |\e\
    [0m                                              Found:    Unit\n\e[31m   |\e\
    [0m                                              Required: Boolean\n\e[31m14 |\e\
    [0m        \e[34m// Your code here\e[0m\n\e[31m15 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val bracketsCount = brackets.length\n\
    \        val bracketsNestings = brackets.map(x => x.contains(\"[\") || x.contains(\"\
    ]\"))\n        val bracketsNestingsCount = bracketsNestings.count(_ == true)\n\
    \        val bracketsNestingsSum = bracketsNestings.sum\n        val bracketsNestingsSumCount\
    \ = bracketsNestingsSum.toInt\n        val bracketsNestingsSumCountNestings =\
    \ bracketsNestingsSumCount - bracketsNestingsCount\n        val bracketsNestingsSumCountNestingsNestings\
    \ = bracketsNestingsSumCountNestings.toInt\n        val bracketsNestingsSumCountNestingsNestingsNestings\
    \ = bracketsNestingsSumCountNestingsNestings.toInt\n        val bracketsNestingsSumCountNestingsNestingsNestingsNestings\
    \ = bracketsNestingsSumCountNestingsNestingsNestings.toInt\n        val bracketsNestingsSumCountNestingsNestingsNestingsNestingsNestings\
    \ = bracketsNestingsSumCountNestingsNestingsNestingsNestings.toInt\n        val\
    \ bracketsNestingsSumCountNestingsNestingsNestingsNestingsNestingsNestings = bracketsNestingsSumCountNestingsNestingsNestingsNestingsNestings.toInt\n\
    \        val bracketsNestingsSumCountNestingsNestingsNestingsNestingsNestingsNestingsNestings\
    \ = bracketsNestingsSumCountNestingsNestingsNestingsNestingsNestingsNestings.toInt\n\
    \        val bracketsNestingsSumCountNestingsNestingsNestingsNestingsNestingsNestingsNestingsNestings\
    \ = bracketsNestingsSumCountNestingsNestingsNestingsNestingsNestingsNestingsNestings.toInt\n\
    \        val bracketsNestingsSumCountNestingsNestingsNestingsNestingsNestingsNestingsNestingsNestingsNestings\
    \ = bracketsNestingsSumCountNestingsNest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp4_74xjmu.scala:18:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsSum\e[0m\
    \ = bracketsNestings.sum\n\e[31m\e[31m   |\e[0m                              \
    \                        ^\e[0m\n\e[31m   |\e[0m               No implicit Ordering\
    \ defined for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m               where:    B is\
    \ a type variable with constraint >: Boolean\n\e[31m   |\e[0m               .\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4_74xjmu.scala:28:111 -----------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsSumCountNestingsNestingsNestingsNestingsNestingsNestingsNestingsNestingsNestings\e\
    [0m = bracketsNestingsSumCountNestingsNest\n\e[31m\e[31m   |\e[0m            \
    \                                                                            \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: bracketsNestingsSumCountNestingsNest\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4_74xjmu.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799268
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val bracketsNestings = brackets.map(x => x.split(\"\\\\]\")).map(x => x.length)\n\
    \        val nestings = bracketsNestings.sum\n        val nestingsCount = nestings.toInt\n\
    \        nestingsCount > bracketsCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp39pgwy8w.scala:22)\n\tat Problem.main(tmp39pgwy8w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsNesting = brackets.filter(x =>\
    \ x.contains(\"]\"))\n        val bracketsNotNesting = brackets.filter(x => !x.contains(\"\
    ]\"))\n        val bracketsNotNesting2 = brackets.filter(x => !x.contains(\"]\"\
    ))\n        val bracketsNotNesting3 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting4 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting5 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting6 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting7 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting8 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting9 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting10 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting11 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting12 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting13 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting14 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting15 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting16 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting17 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting18 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting19 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting20 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting21 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting22 = brackets.filter(x => !x.contains(\"]\"))\n\
    \        val bracketsNotNesting23 = brackets.filter(\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpw40r4ejx.scala:38:51 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mbracketsNotNesting23\e[0m\
    \ = brackets.filter(\n\e[31m\e[31m   |\e[0m                                  \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpw40r4ejx.scala:39:5 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n        val brackets = mutable.ListBuffer[String]()\n        val\
    \ openBrackets = mutable.ListBuffer[String]()\n        val closeBrackets = mutable.ListBuffer[String]()\n\
    \        val openBracketCount = mutable.ListBuffer[Int]()\n        val closeBracketCount\
    \ = mutable.ListBuffer[Int]()\n        val openBracketCounts = mutable.ListBuffer[Int]()\n\
    \        val closeBracketCounts = mutable.ListBuffer[Int]()\n        val openBracketCountPairs\
    \ = mutable.ListBuffer[(Int, Int)]()\n        val closeBracketCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketCountPairsSorted = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketCountPairsSorted = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketCountPairsSorted2 = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketCountPairsSorted2 = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketCountPairsSorted3 = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketCountPairsSorted3 = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketCountPairsSorted4 = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketCountPairsSorted4 = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketCountPairsSorted5 = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketCountPairsSorted5 = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketCountPairsSorted6 = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketCountPairsSorted6 = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketCountPairsSorted7 = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketCountPairsSorted7 = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketCountPairsSorted8 = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketCountPairsSorted8 = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketCountPairsSorted9 = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketCountPair\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8kqqtvwe.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8kqqtvwe.scala:15:23\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8kqqtvwe.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8kqqtvwe.scala:17:28 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8kqqtvwe.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mopenBracketCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8kqqtvwe.scala:19:32\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketCount\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^\e[0m\n\e["
  stdout: ''
  timestamp: 1659799269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val openBrackets = brackets.filter(_.contains('['))\n\
    \        val closeBrackets = brackets.filter(_.contains(']'))\n        val openBracketsCount\
    \ = openBrackets.size\n        val closeBracketsCount = closeBrackets.size\n \
    \       val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(_.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).size\n\
    \        val openBracketsNesting\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1vxofjn_.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1vxofjn_.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopenBracketsNestings\e[0m = openBrackets.filter(_.contains(\e[31m']'\e\
    [0m)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsNestings is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1vxofjn_.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestings\e\
    [0m = closeBrackets.filter(_.contains(\e[31m'['\e[0m)).size\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsNestings is already defined as \e[33mvalue\e\
    [0m \e[35mcloseBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1vxofjn_.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestings\e[0m\
    \ = openBrackets.filter(_.contains(\e[31m']'\e[0m)).size\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsNestings is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1vxofjn_.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestings\e\
    [0m = closeBrackets.filter(_.contains(\e[31m'['\e[0m)).size\n\e[31m\e[31m   |\e\
    [0m        ^^^^^"
  stdout: ''
  timestamp: 1659799266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[Boolean]()\n        for(i <- 0 until\
    \ brackets.length){\n            val bracket = brackets(i)\n            if(bracket\
    \ == \"[\"){\n                stack += \"[\"\n            }else if(bracket ==\
    \ \"]\"){\n                val last = stack.pop()\n                if(!stack.isEmpty){\n\
    \                    val open = stack.pop()\n                    if(!stack.isEmpty){\n\
    \                        val close = stack.pop()\n                        if(open\
    \ != close){\n                            result.add(true)\n                 \
    \       }\n                    }\n                }\n            }else if(bracket\
    \ == \"{\"){\n                stack += \"{\"\n            }else if(bracket ==\
    \ \"}\"){\n                val last = stack.pop()\n                if(!stack.isEmpty){\n\
    \                    val open = stack.pop()\n                    if(!stack.isEmpty){\n\
    \                        val close = stack.pop()\n                        if(open\
    \ != close){\n                            result.add(true)\n                 \
    \       }\n                    }\n                }\n            }\n        }\n\
    \        result.size == brackets.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6r6xa9d9.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp6r6xa9d9.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val openBrackets = mutable.ListBuffer[String]()\n\
    \        val closeBrackets = mutable.ListBuffer[String]()\n        val openBracketCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketCounts = mutable.ListBuffer[Int]()\n        val closeBracketCounts\
    \ = mutable.ListBuffer[Int]()\n        val openBracketCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketCountPairsSorted = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketCountPairsSorted = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketCountPairsSortedReversed = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketCountPairsSortedReversed = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketCountPairsSortedReversedSorted = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketCountPairsSortedReversedSorted = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketCountPairsSortedReversedSortedSorted = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketCountPairsSortedReversedSortedSorted = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketCountPairsSortedReversedSortedSortedSorted =\
    \ mutable.ListBuffer[(Int, Int)]()\n        val closeBracketCountPairsSortedReversedSortedSortedSorted\
    \ = mutable.ListBuffer[(Int, Int)]()\n        val openBracketCountPairsSortedReversedSortedSortedSortedSorted\
    \ = mutable.ListBuffer[(Int, Int)]()\n        val closeBracketCountPairsSortedReversedSortedSortedSortedSorted\
    \ = mutable.ListBuffer[(Int, Int)]()\n        val openBracketCountPairsSortedReversedSortedSortedSortedSortedSorted\
    \ = mutable.ListBuffer[(Int, Int)]()\n        val closeBracketCountPairsSortedReversedSortedSortedSortedSortedSorted\
    \ = mutable.ListBuffer[(Int, Int)]()\n        val openBracketCountPairsSortedReversedSortedSortedSortedSortedSortedSorted\
    \ = mutable.ListBuffer[(\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9ztryq9q.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp9ztryq9q.scala:14:23 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9ztryq9q.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ztryq9q.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ztryq9q.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ztryq9q.scala:18:32\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketCount\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^"
  stdout: ''
  timestamp: 1659799269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val openBrackets = brackets.filter(x => x.contains('['))\n\
    \        val closeBrackets = brackets.filter(x => x.contains(']'))\n        val\
    \ openBracketsCount = openBrackets.size\n        val closeBracketsCount = closeBrackets.size\n\
    \        val openBracketsNestings = openBrackets.map(x => x.split(']').size)\n\
    \        val closeBracketsNestings = closeBrackets.map(x => x.split(']').size)\n\
    \        val openBracketsNestingCount = openBracketsNestings.sum\n        val\
    \ closeBracketsNestingCount = closeBracketsNestings.sum\n        val openBracketsNestingSum\
    \ = openBracketsNestings.sum\n        val closeBracketsNestingSum = closeBracketsNestings.sum\n\
    \        val openBracketsNestingAverage = openBracketsNestingSum / openBracketsCount\n\
    \        val closeBracketsNestingAverage = closeBracketsNestingSum / closeBracketsCount\n\
    \        val openBracketsNestingStdDev = openBracketsNestings.map(x => Math.sqrt(x.map(x\
    \ => Math.pow(x - openBracketsNestingAverage, 2)).sum / openBracketsCount))\n\
    \        val closeBracketsNestingStdDev = closeBracketsNestings.map(x => Math.sqrt(x.map(x\
    \ => Math.pow(x - closeBracketsNestingAverage, 2)).sum / closeBracketsCount))\n\
    \        val openBracketsNestingStdDevAverage = openBracketsNestingStdDev.sum\
    \ / openBracketsCount\n        val closeBracketsNestingStdDevAverage = closeBracketsNestingStdDev.sum\
    \ / closeBracketsCount\n        val openBracketsNestingStdDevStdDev = openBracketsNestingStdDev.map(x\
    \ => Math.sqrt(x.map(x => Math.pow(x - openBracketsNestingAverage, 2)).sum / openBracketsCount))\n\
    \        val closeBracketsNestingStdDevStdDev = closeBracketsNestingStdDev.map(x\
    \ => Math.sqrt(x.map(x => Math.pow(x - closeBracketsNesting\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk_a0dm6z.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk_a0dm6z.scala:27:82\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBracketsNestingStdDev\e[0m = openBracketsNestings.map(\e[36mx\e[0m =>\
    \ Math.sqrt(x.map(\e[36mx\e[0m => Math.pow(x - openBracketsNestingAverage, \e\
    [31m2\e[0m)).sum / openBracketsCount))\n\e[31m\e[31m   |\e[0m                \
    \                                                                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                        value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk_a0dm6z.scala:28:84\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsNestingStdDev\e[0m = closeBracketsNestings.map(\e[36mx\e[0m =>\
    \ Math.sqrt(x.map(\e[36mx\e[0m => Math.pow(x - closeBracketsNestingAverage, \e\
    [31m2\e[0m)).sum / closeBracketsCount))\n\e[31m\e[31m   |\e[0m               \
    \                                                                   ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk_a0dm6z.scala:31:93\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBracketsNestingStdDevStdDev\e[0m = openBracketsNestingStdDev.map(\e[36mx\e\
    [0m => Math.sqrt(x.map(\e[36mx\e[0m => Math.pow(x - openBracketsNestingAverage,\
    \ \e[31m2\e[0m)).sum / openBracketsCount))\n\e[31m\e[31m   |\e[0m            \
    \                                                                            \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                                     value map\
    \ is not a member of Double\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk_a0dm6z.scala:32:95\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsNestingStdDevStdDev\e[0m = closeBracketsNestingStdDev.map(\e\
    [36mx\e[0m => Math.sqrt(x.map(\e[36mx\e[0m => Math.pow(x - closeBracketsNesting\n\
    \e[31"
  stdout: ''
  timestamp: 1659799271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnmdy48t8.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36misNested\e\
    [0m(\e[36mstring\e[0m : \e[35mString\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                              ^\e[0m\n\e[31m   |\e\
    [0m                                              Found:    Unit\n\e[31m   |\e\
    [0m                                              Required: Boolean\n\e[31m14 |\e\
    [0m        \e[34m// Your code here\e[0m\n\e[31m15 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n        val bracketsCount = brackets.length\n\
    \        val bracketsNesting = new mutable.HashSet[Int]()\n        var currentNesting\
    \ = 0\n        for(i <- 0 until bracketsCount) {\n            val bracket = brackets(i)\n\
    \            if(bracket == \"[\" || bracket == \"{\" || bracket == \"}\") {\n\
    \                currentNesting += 1\n                bracketsNesting.add(currentNesting)\n\
    \            } else if(bracket == \"(\") {\n                currentNesting -=\
    \ 1\n                bracketsNesting.add(currentNesting)\n            }\n    \
    \    }\n        val bracketsNestingCount = bracketsNesting.length\n        val\
    \ bracketsNestingCount = bracketsNestingCount.toInt\n        val bracketsNestingCount\
    \ = bracketsNestingCount.toInt\n        val bracketsNestingCount = bracketsNestingCount.toInt\n\
    \        val bracketsNestingCount = bracketsNestingCount.toInt\n        val bracketsNestingCount\
    \ = bracketsNestingCount.toInt\n        val bracketsNestingCount = bracketsNestingCount.toInt\n\
    \        val bracketsNestingCount = bracketsNestingCount.toInt\n        val bracketsNestingCount\
    \ = bracketsNestingCount.toInt\n        val bracketsNestingCount = bracketsNestingCount.toInt\n\
    \        val bracketsNestingCount = bracketsNestingCount.toInt\n        val bracketsNestingCount\
    \ = bracketsNestingCount.toInt\n        val bracketsNestingCount = bracketsNestingCount.toInt\n\
    \        val bracketsNestingCount = bracketsNestingCount.toInt\n        val bracketsNestingCount\
    \ = bracketsNestingCount.toInt\n        val bracketsNestingCount = bracketsNestingCount.toInt\n\
    \        val bracketsNestingCount = bracketsNestingCount.toInt\n        val bracketsNestingCount\
    \ = bracketsNestingCount.toInt\n        val bracketsNestingCount = bracketsNestingCount.toInt\n\
    \        val bracketsNestingCount = bracketsNestingCount.toInt\n        val bracketsNestingCount\
    \ = bracketsNestingCount.toInt\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprys1v7xa.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingCount\e[0m\
    \ = bracketsNestingCount.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mbracketsNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprys1v7xa.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingCount\e[0m\
    \ = bracketsNestingCount.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mbracketsNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprys1v7xa.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingCount\e[0m\
    \ = bracketsNestingCount.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mbracketsNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprys1v7xa.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingCount\e[0m\
    \ = bracketsNestingCount.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mbracketsNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprys1v7xa.scala:33:12 -----"
  stdout: ''
  timestamp: 1659799269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    ]\"))\n        val closeBrackets = brackets.filter(_.contains(\"[\"))\n      \
    \  val openBracketsCount = openBrackets.count(_ == \"[\")\n        val closeBracketsCount\
    \ = closeBrackets.count(_ == \"[\")\n        val openBracketsCount2 = openBrackets.count(_\
    \ == \"[\")\n        val closeBracketsCount2 = closeBrackets.count(_ == \"[\"\
    )\n        val openBracketsCount3 = openBrackets.count(_ == \"[\")\n        val\
    \ closeBracketsCount3 = closeBrackets.count(_ == \"[\")\n        val openBracketsCount4\
    \ = openBrackets.count(_ == \"[\")\n        val closeBracketsCount4 = closeBrackets.count(_\
    \ == \"[\")\n        val openBracketsCount5 = openBrackets.count(_ == \"[\")\n\
    \        val closeBracketsCount5 = closeBrackets.count(_ == \"[\")\n        val\
    \ openBracketsCount6 = openBrackets.count(_ == \"[\")\n        val closeBracketsCount6\
    \ = closeBrackets.count(_ == \"[\")\n        val openBracketsCount7 = openBrackets.count(_\
    \ == \"[\")\n        val closeBracketsCount7 = closeBrackets.count(_ == \"[\"\
    )\n        val openBracketsCount8 = openBrackets.count(_ == \"[\")\n        val\
    \ closeBracketsCount8 = closeBrackets.count(_ == \"[\")\n        val openBracketsCount9\
    \ = openBrackets.count(_ == \"[\")\n        val closeBracketsCount9 = closeBrackets.count(_\
    \ == \"[\")\n        val openBracketsCount10 = openBrackets.count(_ == \"[\")\n\
    \        val closeBracketsCount10 = closeBrackets.count(_ == \"[\")\n        val\
    \ openBracketsCount11 = openBrackets.count(_ == \"[\")\n        val closeBracketsCount11\
    \ = closeBrackets.count(_ == \"[\")\n        val openBracketsCount12 = openBrackets.count(_\
    \ == \"[\")\n        val closeBracketsCount12 = closeBrackets.count(_ == \"[\"\
    )\n        val openBracketsCount13 = openBrackets.count(_ == \"[\")\n        val\
    \ closeBracketsCount13 = closeBrackets.count(_ == \"[\")\n        val openBra\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4vd92ii2.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4vd92ii2.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer.empty[String]\n        var openBrackets = 0\n        var\
    \ closeBrackets = 0\n        var openBracketsCount = 0\n        var closeBracketsCount\
    \ = 0\n        var openBracketsCount2 = 0\n        var closeBracketsCount2 = 0\n\
    \        var openBracketsCount3 = 0\n        var closeBracketsCount3 = 0\n   \
    \     var openBracketsCount4 = 0\n        var closeBracketsCount4 = 0\n      \
    \  var openBracketsCount5 = 0\n        var closeBracketsCount5 = 0\n        var\
    \ openBracketsCount6 = 0\n        var closeBracketsCount6 = 0\n        var openBracketsCount7\
    \ = 0\n        var closeBracketsCount7 = 0\n        var openBracketsCount8 = 0\n\
    \        var closeBracketsCount8 = 0\n        var openBracketsCount9 = 0\n   \
    \     var closeBracketsCount9 = 0\n        var openBracketsCount10 = 0\n     \
    \   var closeBracketsCount10 = 0\n        var openBracketsCount11 = 0\n      \
    \  var closeBracketsCount11 = 0\n        var openBracketsCount12 = 0\n       \
    \ var closeBracketsCount12 = 0\n        var openBracketsCount13 = 0\n        var\
    \ closeBracketsCount13 = 0\n        var openBracketsCount14 = 0\n        var closeBracketsCount14\
    \ = 0\n        var openBracketsCount15 = 0\n        var closeBracketsCount15 =\
    \ 0\n        var openBracketsCount16 = 0\n        var closeBracketsCount16 = 0\n\
    \        var openBracketsCount17 = 0\n        var closeBracketsCount17 = 0\n \
    \       var openBracketsCount18 = 0\n        var closeBracketsCount18 = 0\n  \
    \      var openBracketsCount19 = 0\n        var closeBracketsCount19 = 0\n   \
    \     var openBracketsCount20 = 0\n        var closeBracketsCount20 = 0\n    \
    \    var openBracketsCount21 = 0\n        var closeBracketsCount21 = 0\n     \
    \   var openBracketsCount22 = 0\n        var closeBracketsCount22 = 0\n      \
    \  var openBracketsCount23 = 0\n        var closeBracketsCount23 = 0\n       \
    \ var openBracketsCount24 = 0\n        var closeBracketsCount24 = 0\n        var\
    \ openBracketsCount25 = 0\n        var closeBracketsCount25 = 0\n        var openBracketsCount26\
    \ = 0\n        var closeBracketsCount26 = 0\n        var openBracketsCount27 =\
    \ 0\n        var closeBracketsCount27 = 0\n        var openBra\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppv06ywhm.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppv06ywhm.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ArrayBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppv06ywhm.scala:72:5 ---------------------\e[0m\e[0m\n\e[31m72\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n        val bracketsCount = brackets.length\n\
    \        val openBrackets = brackets.filter(x => x.startsWith(\"[\")).length\n\
    \        val closeBrackets = brackets.filter(x => x.startsWith(\"]\")).length\n\
    \        val openBracketsCount = openBrackets\n        val closeBracketsCount\
    \ = closeBrackets\n        val openBracketsCountMinusCloseBrackets = openBracketsCount\
    \ - closeBracketsCount\n        val openBracketsCountMinusCloseBracketsMinusOne\
    \ = openBracketsCountMinusCloseBrackets - 1\n        val openBracketsCountMinusCloseBracketsMinusTwo\
    \ = openBracketsCountMinusCloseBrackets - 2\n        val openBracketsCountMinusCloseBracketsMinusThree\
    \ = openBracketsCountMinusCloseBrackets - 3\n        val openBracketsCountMinusCloseBracketsMinusFour\
    \ = openBracketsCountMinusCloseBrackets - 4\n        val openBracketsCountMinusCloseBracketsMinusFive\
    \ = openBracketsCountMinusCloseBrackets - 5\n        val openBracketsCountMinusCloseBracketsMinusSix\
    \ = openBracketsCountMinusCloseBrackets - 6\n        val openBracketsCountMinusCloseBracketsMinusSeven\
    \ = openBracketsCountMinusCloseBrackets - 7\n        val openBracketsCountMinusCloseBracketsMinusEight\
    \ = openBracketsCountMinusCloseBrackets - 8\n        val openBracketsCountMinusCloseBracketsMinusNine\
    \ = openBracketsCountMinusCloseBrackets - 9\n        val openBracketsCountMinusCloseBracketsMinusTen\
    \ = openBracketsCountMinusCloseBrackets - 10\n        val openBracketsCountMinusCloseBracketsMinusEleven\
    \ = openBracketsCountMinusCloseBrackets - 11\n        val openBracketsCountMinusCloseBracketsMinusTwelve\
    \ = openBracketsCountMinusCloseBrackets - 12\n        val openBracketsCountMinusCloseBracketsMinusThirteen\
    \ = openBracketsCountMinusCloseBrackets - 13\n        val openBra\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphkbondyx.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphkbondyx.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string.length)\n        brackets.update(0, string.length)\n\
    \        var openBrackets = 0\n        var closedBrackets = 0\n        var openBracketsCount\
    \ = 0\n        var closedBracketsCount = 0\n        var openBracketsCountMax =\
    \ 0\n        var closedBracketsCountMax = 0\n        var openBracketsCountMax2\
    \ = 0\n        var closedBracketsCountMax2 = 0\n        var openBracketsCountMax3\
    \ = 0\n        var closedBracketsCountMax3 = 0\n        var openBracketsCountMax4\
    \ = 0\n        var closedBracketsCountMax4 = 0\n        var openBracketsCountMax5\
    \ = 0\n        var closedBracketsCountMax5 = 0\n        var openBracketsCountMax6\
    \ = 0\n        var closedBracketsCountMax6 = 0\n        var openBracketsCountMax7\
    \ = 0\n        var closedBracketsCountMax7 = 0\n        var openBracketsCountMax8\
    \ = 0\n        var closedBracketsCountMax8 = 0\n        var openBracketsCountMax9\
    \ = 0\n        var closedBracketsCountMax9 = 0\n        var openBracketsCountMax10\
    \ = 0\n        var closedBracketsCountMax10 = 0\n        var openBracketsCountMax11\
    \ = 0\n        var closedBracketsCountMax11 = 0\n        var openBracketsCountMax12\
    \ = 0\n        var closedBracketsCountMax12 = 0\n        var openBracketsCountMax13\
    \ = 0\n        var closedBracketsCountMax13 = 0\n        var openBracketsCountMax14\
    \ = 0\n        var closedBracketsCountMax14 = 0\n        var openBracketsCountMax15\
    \ = 0\n        var closedBracketsCountMax15 = 0\n        var openBracketsCountMax16\
    \ = 0\n        var closedBracketsCountMax16 = 0\n        var openBracketsCountMax17\
    \ = 0\n        var closedBracketsCountMax17 = 0\n        var openBracketsCountMax18\
    \ = 0\n        var closedBracketsCountMax18 = 0\n        var openBracketsCountMax19\
    \ = 0\n        var closedBracketsCountMax19 = 0\n        var openBracketsCountMax20\
    \ = 0\n        var closedBracketsCountMax20 = 0\n        var openBracketsCountMax21\
    \ = 0\n        var closedBracketsCountMax21 = 0\n        var openBracketsCountMax22\
    \ = 0\n        var closedBracketsCountMax22 = 0\n        var openBracketsCountMax23\
    \ = 0\n        var closedBracketsCountMax23 = 0\n        var openBrackets\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) ==\
    \ (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa4n8_k2a.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa4n8_k2a.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ArrayBuffer(string.length)\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa4n8_k2a.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[').toList\n        val openBrackets = brackets.filter(_.contains('[')).toList\n\
    \        val closeBrackets = brackets.filter(_.contains(']')).toList\n       \
    \ val openBracketsCount = openBrackets.size\n        val closeBracketsCount =\
    \ closeBrackets.size\n        val openBracketsNestings = openBrackets.filter(_.contains('[')).toList\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains(']')).toList\n\
    \        val openBracketsNestingsCount = openBracketsNestings.size\n        val\
    \ closeBracketsNestingsCount = closeBracketsNestings.size\n        val openBracketsNestingsNestings\
    \ = openBracketsNestings.filter(_.contains('[')).toList\n        val closeBracketsNestingsNestings\
    \ = closeBracketsNestings.filter(_.contains(']')).toList\n        val openBracketsNestingsNestingsCount\
    \ = openBracketsNestingsNestings.size\n        val closeBracketsNestingsNestingsCount\
    \ = closeBracketsNestingsNestings.size\n        val openBracketsNestingsNestingsNestings\
    \ = openBracketsNestingsNestings.filter(_.contains('[')).toList\n        val closeBracketsNestingsNestingsNestings\
    \ = closeBracketsNestingsNestings.filter(_.contains(']')).toList\n        val\
    \ openBracketsNestingsNestingsNestingsCount = openBracketsNestingsNestingsNestings.size\n\
    \        val closeBracketsNestingsNestingsNestingsCount = closeBracketsNestingsNestingsNestings.size\n\
    \        val openBracketsNestingsNestingsNestingsNestings = openBracketsNestingsNestingsNestings.filter(_.contains('[')).toList\n\
    \        val closeBracketsNestingsNestingsNestingsNestings = closeBracketsNestingsNestingsNestings.filter(_.contains(']')).toList\n\
    \        val openBracketsNestingsNestingsNestingsNestingsCount = openBracketsNestingsNestingsNest\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpedc95p9l.scala:33:64 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestingsNestingsNestingsNestingsCount\e\
    [0m = openBracketsNestingsNestingsNest\n\e[31m\e[31m   |\e[0m                \
    \                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: openBracketsNestingsNestingsNest\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpedc95p9l.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val openBrackets = brackets.filter(x\
    \ => x.equals(\"[\")).toList\n        val closeBrackets = brackets.filter(x =>\
    \ x.equals(\"]\")).toList\n        val openBracketsCount = openBrackets.size\n\
    \        val closeBracketsCount = closeBrackets.size\n        val openBracketsNestings\
    \ = openBrackets.map(x => x.equals(\"[\") ? 1 : 0)\n        val closeBracketsNestings\
    \ = closeBrackets.map(x => x.equals(\"]\") ? 1 : 0)\n        val openBracketsNestingCount\
    \ = openBracketsNestings.sum\n        val closeBracketsNestingCount = closeBracketsNestings.sum\n\
    \        val openBracketsNestingSum = openBracketsNestings.foldLeft(0)(_ + _)\n\
    \        val closeBracketsNestingSum = closeBracketsNestings.foldLeft(0)(_ + _)\n\
    \        val openBracketsNestingSumCount = openBracketsNestingSum\n        val\
    \ closeBracketsNestingSumCount = closeBracketsNestingSum\n        val openBracketsNestingSumCountCount\
    \ = openBracketsNestingSumCount\n        val closeBracketsNestingSumCountCount\
    \ = closeBracketsNestingSumCount\n        val openBracketsNestingSumCountCountCount\
    \ = openBracketsNestingSumCountCount\n        val closeBracketsNestingSumCountCountCount\
    \ = closeBracketsNestingSumCountCount\n        val openBracketsNestingSumCountCountCountCount\
    \ = openBracketsNestingSumCountCountCount\n        val closeBracketsNestingSumCountCountCountCount\
    \ = closeBracketsNestingSumCountCountCount\n        val openBracketsNestingSumCountCountCountCountCount\
    \ = openBracketsNestingSumCountCountCountCount\n        val closeBracketsNestingSumCountCountCountCountCount\
    \ = closeBracketsNestingSumCountCountCountCount\n        val openBracketsNestingSumCountCountCountCountCountCount\
    \ = openBracketsNestingSumCountCountCountCountCount\n        val closeBracketsNestingSumCountCountCountCountCountCount\
    \ = closeBracket\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjb_dcd9l.scala:19:71 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestings\e[0m\
    \ = openBrackets.map(\e[36mx\e[0m => x.equals(\e[31m\"[\"\e[0m) ? \e[31m1\e[0m\
    \ : \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                   value ? is not a member of Boolean\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpjb_dcd9l.scala:20:73 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestings\e[0m =\
    \ closeBrackets.map(\e[36mx\e[0m => x.equals(\e[31m\"]\"\e[0m) ? \e[31m1\e[0m\
    \ : \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \                      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                     value ? is not a member of Boolean\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpjb_dcd9l.scala:36:68 ------------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestingSumCountCountCountCountCountCount\e\
    [0m = closeBracket\n\e[31m\e[31m   |\e[0m                                    \
    \                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                                       Not found: closeBracket\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjb_dcd9l.scala:37:5 ---------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string.length)\n        var index = 0\n        while (index\
    \ < string.length) {\n            if (string.charAt(index) == '[') {\n       \
    \         brackets += index\n            }\n            if (string.charAt(index)\
    \ == ']') {\n                brackets -= index\n            }\n            index\
    \ += 1\n        }\n        brackets.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdhz95agh.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ArrayBuffer(string.length)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        brackets += \"[\" \n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvjqof0h5.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string.length)\n        var index = 0\n        while (index\
    \ < string.length) {\n            if (string.charAt(index) == '[') {\n       \
    \         brackets.update(brackets.length, string.charAt(index))\n           \
    \     index += 1\n            } else if (string.charAt(index) == ']') {\n    \
    \            val bracket = brackets(brackets.length - 1)\n                if (bracket\
    \ == '[') {\n                    brackets.update(brackets.length, string.charAt(index))\n\
    \                    index += 1\n                } else if (bracket == ']') {\n\
    \                    brackets.update(brackets.length, string.charAt(index))\n\
    \                    index += 1\n                } else {\n                  \
    \  brackets.update(brackets.length, string.charAt(index))\n                  \
    \  index += 1\n                }\n            } else {\n                index\
    \ += 1\n            }\n        }\n        brackets.size == string.length\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) ==\
    \ (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwl6gb4x9.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ArrayBuffer(string.length)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Write\
    \ your code here\n        val brackets = mutable.Set[Char]()\n        val openBrackets\
    \ = mutable.Set[Char]()\n        val closeBrackets = mutable.Set[Char]()\n   \
    \     val openBracketsCount = mutable.Set[Int]()\n        val closeBracketsCount\
    \ = mutable.Set[Int]()\n        val openBracketsCount2 = mutable.Set[Int]()\n\
    \        val closeBracketsCount2 = mutable.Set[Int]()\n        val openBracketsCount3\
    \ = mutable.Set[Int]()\n        val closeBracketsCount3 = mutable.Set[Int]()\n\
    \        val openBracketsCount4 = mutable.Set[Int]()\n        val closeBracketsCount4\
    \ = mutable.Set[Int]()\n        val openBracketsCount5 = mutable.Set[Int]()\n\
    \        val closeBracketsCount5 = mutable.Set[Int]()\n        val openBracketsCount6\
    \ = mutable.Set[Int]()\n        val closeBracketsCount6 = mutable.Set[Int]()\n\
    \        val openBracketsCount7 = mutable.Set[Int]()\n        val closeBracketsCount7\
    \ = mutable.Set[Int]()\n        val openBracketsCount8 = mutable.Set[Int]()\n\
    \        val closeBracketsCount8 = mutable.Set[Int]()\n        val openBracketsCount9\
    \ = mutable.Set[Int]()\n        val closeBracketsCount9 = mutable.Set[Int]()\n\
    \        val openBracketsCount10 = mutable.Set[Int]()\n        val closeBracketsCount10\
    \ = mutable.Set[Int]()\n        val openBracketsCount11 = mutable.Set[Int]()\n\
    \        val closeBracketsCount11 = mutable.Set[Int]()\n        val openBracketsCount12\
    \ = mutable.Set[Int]()\n        val closeBracketsCount12 = mutable.Set[Int]()\n\
    \        val openBracketsCount13 = mutable.Set[Int]()\n        val closeBracketsCount13\
    \ = mutable.Set[Int]()\n        val openBracketsCount14 = mutable.Set[Int]()\n\
    \        val closeBracketsCount14 = mutable.Set[Int]()\n        val openBracketsCount15\
    \ = mutable.Set[Int]()\n\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2atm3lq7.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2atm3lq7.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2atm3lq7.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2atm3lq7.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2atm3lq7.scala:19:33\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsCount\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp2atm3lq7.scala:20:33 ----------"
  stdout: ''
  timestamp: 1659799275
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val nestings = brackets.map(x => x.split(']').length)\n\
    \        nestings.sum > 0\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnbi6vrbe.scala:20)\n\tat Problem.main(tmpnbi6vrbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val bracketsCount = mutable.ListBuffer[Int]()\n\
    \        val openBrackets = mutable.ListBuffer[String]()\n        val openBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBrackets = mutable.ListBuffer[String]()\n\
    \        val closeBracketsCount = mutable.ListBuffer[Int]()\n        val openBracketsNesting\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsNesting = mutable.ListBuffer[Int]()\n\
    \        val openBracketsNestingCount = mutable.ListBuffer[Int]()\n        val\
    \ closeBracketsNestingCount = mutable.ListBuffer[Int]()\n        val openBracketsNestingSum\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsNestingSum = mutable.ListBuffer[Int]()\n\
    \        val openBracketsNestingSumCount = mutable.ListBuffer[Int]()\n       \
    \ val closeBracketsNestingSumCount = mutable.ListBuffer[Int]()\n        val openBracketsNestingSumSum\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsNestingSumSum = mutable.ListBuffer[Int]()\n\
    \        val openBracketsNestingSumSumCount = mutable.ListBuffer[Int]()\n    \
    \    val closeBracketsNestingSumSumCount = mutable.ListBuffer[Int]()\n       \
    \ val openBracketsNestingSumSumSum = mutable.ListBuffer[Int]()\n        val closeBracketsNestingSumSumSum\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsNestingSumSumSumCount =\
    \ mutable.ListBuffer[Int]()\n        val closeBracketsNestingSumSumSumCount =\
    \ mutable.ListBuffer[Int]()\n        val openBracketsNestingSumSumSumSum = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsNestingSumSumSumSum = mutable.ListBuffer[Int]()\n  \
    \      val openBracketsNestingSumSumSumSumCount = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsNestingSumSumSumSumCount = mutable.ListBuffer[Int]()\n\
    \        val openBracket\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd7zchvg3.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd7zchvg3.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd7zchvg3.scala:15:28\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mbracketsCount\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpd7zchvg3.scala:16:27 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpd7zchvg3.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd7zchvg3.scala:18:28\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1659799276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnmdy48t8.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36misNested\e\
    [0m(\e[36mstring\e[0m : \e[35mString\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                              ^\e[0m\n\e[31m   |\e\
    [0m                                              Found:    Unit\n\e[31m   |\e\
    [0m                                              Required: Boolean\n\e[31m14 |\e\
    [0m        \e[34m// Your code here\e[0m\n\e[31m15 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val openBrackets = brackets.filter(x => x.contains(\"[\"))\n        val\
    \ closeBrackets = brackets.filter(x => x.contains(\"]\"))\n        val openBracketsCount\
    \ = openBrackets.length\n        val closeBracketsCount = closeBrackets.length\n\
    \        val openBracketsNestings = openBrackets.filter(x => x.contains(\"]\"\
    ))\n        val closeBracketsNestings = closeBrackets.filter(x => x.contains(\"\
    [\"))\n        val openBracketsNestingsCount = openBracketsNestings.length\n \
    \       val closeBracketsNestingsCount = closeBracketsNestings.length\n      \
    \  val openBracketsNestingsNestings = openBracketsNestings.filter(x => x.contains(\"\
    [\"))\n        val closeBracketsNestingsNestings = closeBracketsNestings.filter(x\
    \ => x.contains(\"]\"))\n        val openBracketsNestingsNestingsCount = openBracketsNestingsNestings.length\n\
    \        val closeBracketsNestingsNestingsCount = closeBracketsNestingsNestings.length\n\
    \        val openBracketsNestingsNestingsNestings = openBracketsNestingsNestings.filter(x\
    \ => x.contains(\"]\"))\n        val closeBracketsNestingsNestingsNestings = closeBracketsNestingsNestings.filter(x\
    \ => x.contains(\"[\"))\n        val openBracketsNestingsNestingsNestingsCount\
    \ = openBracketsNestingsNestingsNestings.length\n        val closeBracketsNestingsNestingsNestingsCount\
    \ = closeBracketsNestingsNestingsNestings.length\n        val openBracketsNestingsNestingsNestingsNestings\
    \ = openBracketsNestingsNestingsNestings.filter(x => x.contains(\"[\"))\n    \
    \    val closeBracketsNestingsNestingsNestingsCount = closeBracketsNestingsNestingsNestings.length\n\
    \        val openBracketsNestingsNestingsNestingsNestingsCount = openBracketsNestingsNestingsNestingsNesting\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphwznls60.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestingsNestingsNestingsCount\e\
    [0m = closeBracketsNestingsNestingsNestings.length\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsNestingsNestingsNestingsCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mcloseBracketsNestingsNestingsNestingsCount\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmphwznls60.scala:34:64 ------------------------\e[0m\e[0m\n\e[31m34 |\e\
    [0m        \e[33mval\e[0m \e[36mopenBracketsNestingsNestingsNestingsNestingsCount\e\
    [0m = openBracketsNestingsNestingsNestingsNesting\n\e[31m\e[31m   |\e[0m     \
    \                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: openBracketsNestingsNestingsNestingsNesting\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphwznls60.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        brackets += \"[\" \n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets.toList.contains(string)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8zg1vh6m.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[Boolean]()\n        for (i <- 0 until\
    \ brackets.length) {\n            val bracket = brackets(i)\n            if (bracket\
    \ == \"[\" || bracket == \"(\") {\n                stack += bracket\n        \
    \    } else if (bracket == \"]\" || bracket == \")\") {\n                val top\
    \ = stack.pop()\n                if (top == bracket) {\n                    result\
    \ += true\n                }\n            }\n        }\n        result.length\
    \ == brackets.length\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprcoxs628.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprcoxs628.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val openBrackets = mutable.ListBuffer[String]()\n\
    \        val closeBrackets = mutable.ListBuffer[String]()\n        val openBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCounts = mutable.ListBuffer[Int]()\n        val closeBracketsCounts\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCount = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCount = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCounts = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCounts = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:18:33\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsCount\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error"
  stdout: ''
  timestamp: 1659799248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val openBrackets = brackets.filter(x => x != '[')\n\
    \        val closeBrackets = brackets.filter(x => x != ']')\n        val openBracketsCount\
    \ = openBrackets.length\n        val closeBracketsCount = closeBrackets.length\n\
    \        val openBracketsNestings = openBrackets.map(x => x.length)\n        val\
    \ closeBracketsNestings = closeBrackets.map(x => x.length)\n        val openBracketsNestingCount\
    \ = openBracketsNestings.sum\n        val closeBracketsNestingCount = closeBracketsNestings.sum\n\
    \        val openBracketsNestingSum = openBracketsNestings.map(x => x).sum\n \
    \       val closeBracketsNestingSum = closeBracketsNestings.map(x => x).sum\n\
    \        val openBracketsNestingAverage = openBracketsNestingSum / openBracketsCount\n\
    \        val closeBracketsNestingAverage = closeBracketsNestingSum / closeBracketsCount\n\
    \        val openBracketsNestingVariance = openBracketsNestings.map(x => x - openBracketsNestingAverage).sum\n\
    \        val closeBracketsNestingVariance = closeBracketsNestings.map(x => x -\
    \ closeBracketsNestingAverage).sum\n        val openBracketsNestingStandardDeviation\
    \ = math.sqrt(openBracketsNestingVariance / openBracketsCount)\n        val closeBracketsNestingStandardDeviation\
    \ = math.sqrt(closeBracketsNestingVariance / closeBracketsCount)\n        val\
    \ openBracketsNestingMedian = openBracketsNestings.map(x => x.toDouble).sorted\n\
    \        val closeBracketsNestingMedian = closeBracketsNestings.map(x => x.toDouble).sorted\n\
    \        val openBracketsNestingFirstHalf = openBracketsNestings.take(openBracketsCount\
    \ / 2)\n        val closeBracketsNestingFirstHalf = closeBracketsNestings.take(closeBracketsCount\
    \ / 2)\n        val openBracketsNestingSecondHalf = openBracket\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcx4w3yjw.scala:15:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = brackets.filter(\e\
    [36mx\e[0m => x != \e[31m'['\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ String and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpcx4w3yjw.scala:16:49\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33mval\e[0m \e[36mcloseBrackets\e[0m = brackets.filter(\e[36mx\e[0m => x\
    \ != \e[31m']'\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and\
    \ Char cannot be compared with == or !=\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpcx4w3yjw.scala:35:44 ------------------------\e[0m\e[0m\n\e[31m35 |\e\
    [0m        \e[33mval\e[0m \e[36mopenBracketsNestingSecondHalf\e[0m = openBracket\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Not found: openBracket\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcx4w3yjw.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799279
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").filter(_.nonEmpty)\n        val nested = brackets.filter(_.nonEmpty).map(_.split(\"\
    \\\\]\").filter(_.nonEmpty))\n        nested.forall(_.size == brackets.size)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpssaovcpl.scala:19)\n\tat Problem.main(tmpssaovcpl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n        val brackets = mutable.ListBuffer[String]()\n        val\
    \ openBrackets = mutable.ListBuffer[String]()\n        val closeBrackets = mutable.ListBuffer[String]()\n\
    \        val openBracketsCount = mutable.ListBuffer[Int]()\n        val closeBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount2 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount2 = mutable.ListBuffer[Int]()\n        val openBracketsCount3\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount3 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount4 = mutable.ListBuffer[Int]()\n        val closeBracketsCount4\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount5 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount5 = mutable.ListBuffer[Int]()\n        val openBracketsCount6\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount6 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount7 = mutable.ListBuffer[Int]()\n        val closeBracketsCount7\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount8 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount8 = mutable.ListBuffer[Int]()\n        val openBracketsCount9\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount9 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount10 = mutable.ListBuffer[Int]()\n        val closeBracketsCount10\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount11 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount11 = mutable.ListBuffer[Int]()\n        val openBracketsCount12\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount12 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount13 = mutable.ListBuffer[Int]()\n        val closeBracketsCount13\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount14 = mutable.ListBuffer[Int]()\n\
    \        val closeBra\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph4898eni.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph4898eni.scala:15:23\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph4898eni.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmph4898eni.scala:17:28 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmph4898eni.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph4898eni.scala:19:33\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsCount\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e["
  stdout: ''
  timestamp: 1659799280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string.length)\n        var openBrackets = 0\n       \
    \ var closeBrackets = 0\n        var openBracketsCount = 0\n        var closeBracketsCount\
    \ = 0\n        var openBracketsCountMax = 0\n        var closeBracketsCountMax\
    \ = 0\n        var openBracketsCountMaxIndex = 0\n        var closeBracketsCountMaxIndex\
    \ = 0\n        var openBracketsCountMaxIndex2 = 0\n        var closeBracketsCountMaxIndex2\
    \ = 0\n        var openBracketsCountMaxIndex3 = 0\n        var closeBracketsCountMaxIndex3\
    \ = 0\n        var openBracketsCountMaxIndex4 = 0\n        var closeBracketsCountMaxIndex4\
    \ = 0\n        var openBracketsCountMaxIndex5 = 0\n        var closeBracketsCountMaxIndex5\
    \ = 0\n        var openBracketsCountMaxIndex6 = 0\n        var closeBracketsCountMaxIndex6\
    \ = 0\n        var openBracketsCountMaxIndex7 = 0\n        var closeBracketsCountMaxIndex7\
    \ = 0\n        var openBracketsCountMaxIndex8 = 0\n        var closeBracketsCountMaxIndex8\
    \ = 0\n        var openBracketsCountMaxIndex9 = 0\n        var closeBracketsCountMaxIndex9\
    \ = 0\n        var openBracketsCountMaxIndex10 = 0\n        var closeBracketsCountMaxIndex10\
    \ = 0\n        var openBracketsCountMaxIndex11 = 0\n        var closeBracketsCountMaxIndex11\
    \ = 0\n        var openBracketsCountMaxIndex12 = 0\n        var closeBracketsCountMaxIndex12\
    \ = 0\n        var openBracketsCountMaxIndex13 = 0\n        var closeBracketsCountMaxIndex13\
    \ = 0\n        var openBracketsCountMaxIndex14 = 0\n        var closeBracketsCountMaxIndex14\
    \ = 0\n        var openBracketsCountMaxIndex15 = 0\n        var closeBracketsCountMaxIndex15\
    \ = 0\n        var openBracketsCountMaxIndex16 = 0\n        var closeBracketsCountMaxIndex16\
    \ = 0\n        var openBracketsCountMaxIndex17 = 0\n        var closeBracketsCountMaxIndex17\
    \ = 0\n        var openBracketsCountMaxIndex18 = 0\n        var closeBracketsCountMaxIndex18\
    \ = 0\n        var openBracketsCountMaxIndex19 = 0\n        var closeBracketsCountMaxIndex19\
    \ = 0\n        var openBracketsCountMaxIndex20 = 0\n        var closeBracketsCountMaxIndex20\
    \ = 0\n        var openBracketsCountMaxIndex21 = 0\n        var closeBrackets\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpauwam_jx.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpauwam_jx.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ArrayBuffer(string.length)\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpauwam_jx.scala:63:5\
    \ ---------------------\e[0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val openBrackets = mutable.ListBuffer[String]()\n\
    \        val closeBrackets = mutable.ListBuffer[String]()\n        val openBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCounts = mutable.ListBuffer[Int]()\n        val closeBracketsCounts\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCount = mutable.ListBuffer[Int]()\n       \
    \ val closeBracketsCountPairsCount = mutable.ListBuffer[Int]()\n        val openBracketsCountPairsCounts\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCountPairsCounts = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCountPairsCountPairs = mutable.ListBuffer[(Int, Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairs = mutable.ListBuffer[(Int,\
    \ Int, Int)]()\n        val openBracketsCountPairsCountPairsCount = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCountPairsCountPairsCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCountPairsCountPairsCounts = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCountPairsCountPairsCounts = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCountPairsCountPairsCountPairs = mutable.ListBuffer[(Int,\
    \ Int, Int, Int)]()\n        val closeBracketsCountPairsCountPairsCountPairs =\
    \ mutable.ListBuffer[(Int, Int, Int, Int)]()\n        val openBracketsCountPairsCountPairsCountPairsCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCountPairsCountPairsCountPairsCount\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCountPairsCountPairsCountPairsCounts\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCountPairs\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq4bdl2gi.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4bdl2gi.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4bdl2gi.scala:15:27\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpq4bdl2gi.scala:16:28 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4bdl2gi.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4bdl2gi.scala:18:33\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsCount\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e["
  stdout: ''
  timestamp: 1659799279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.Set[Char]()\n        val openBrackets = mutable.Set[Char]()\n    \
    \    val closeBrackets = mutable.Set[Char]()\n        val openBracketsCount =\
    \ mutable.Set[Int]()\n        val closeBracketsCount = mutable.Set[Int]()\n  \
    \      val openBracketsCounts = mutable.Map[Char, Int]()\n        val closeBracketsCounts\
    \ = mutable.Map[Char, Int]()\n        val openBracketsCountMap = mutable.Map[Char,\
    \ Int]()\n        val closeBracketsCountMap = mutable.Map[Char, Int]()\n     \
    \   val openBracketsCountMap2 = mutable.Map[Char, Int]()\n        val closeBracketsCountMap2\
    \ = mutable.Map[Char, Int]()\n        val openBracketsCountMap3 = mutable.Map[Char,\
    \ Int]()\n        val closeBracketsCountMap3 = mutable.Map[Char, Int]()\n    \
    \    val openBracketsCountMap4 = mutable.Map[Char, Int]()\n        val closeBracketsCountMap4\
    \ = mutable.Map[Char, Int]()\n        val openBracketsCountMap5 = mutable.Map[Char,\
    \ Int]()\n        val closeBracketsCountMap5 = mutable.Map[Char, Int]()\n    \
    \    val openBracketsCountMap6 = mutable.Map[Char, Int]()\n        val closeBracketsCountMap6\
    \ = mutable.Map[Char, Int]()\n        val openBracketsCountMap7 = mutable.Map[Char,\
    \ Int]()\n        val closeBracketsCountMap7 = mutable.Map[Char, Int]()\n    \
    \    val openBracketsCountMap8 = mutable.Map[Char, Int]()\n        val closeBracketsCountMap8\
    \ = mutable.Map[Char, Int]()\n        val openBracketsCountMap9 = mutable.Map[Char,\
    \ Int]()\n        val closeBracketsCountMap9 = mutable.Map[Char, Int]()\n    \
    \    val openBracketsCountMap10 = mutable.Map[Char, Int]()\n        val closeBracketsCountMap10\
    \ = mutable.Map[Char, Int]()\n        val openBracketsCountMap11 = mutable.Map[Char,\
    \ Int]()\n        val closeBracketsCountMap11 = mutable.Map[Char, Int]()\n   \
    \     val openBracketsCountMap12 = mutable.Map[Char, \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0ktlj99e.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp0ktlj99e.scala:14:23 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.Set[\e[35mChar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0ktlj99e.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ktlj99e.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ktlj99e.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ktlj99e.scala:18:33\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsCount\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \   "
  stdout: ''
  timestamp: 1659799280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\)\")\n        val bracketsCount = brackets.length\n\
    \        val openBrackets = brackets.filter(x => x == \"[\")\n        val closeBrackets\
    \ = brackets.filter(x => x == \"]\")\n        val openBracketsCount = openBrackets.length\n\
    \        val closeBracketsCount = closeBrackets.length\n        val isNested =\
    \ openBracketsCount != closeBracketsCount\n        val isNestedOrEmpty = openBracketsCount\
    \ == 0 && closeBracketsCount == 0\n        val isNestedOrEmptyOrEmpty = openBracketsCount\
    \ == 0 && closeBracketsCount == 0\n        val isNestedOrEmptyOrEmptyOrEmpty =\
    \ openBracketsCount == 0 && closeBracketsCount == 0\n        val isNestedOrEmptyOrEmptyOrEmptyOrEmpty\
    \ = openBracketsCount == 0 && closeBracketsCount == 0\n        val isNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\
    \ = openBracketsCount == 0 && closeBracketsCount == 0\n        val isNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\
    \ = openBracketsCount == 0 && closeBracketsCount == 0\n        val isNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\
    \ = openBracketsCount == 0 && closeBracketsCount == 0\n        val isNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\
    \ = openBracketsCount == 0 && closeBracketsCount == 0\n        val isNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\
    \ = openBracketsCount == 0 && closeBracketsCount == 0\n        val isNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\
    \ = openBracketsCount == 0 && closeBracketsCount == 0\n        val isNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\
    \ = openBracketsCount == 0 && closeBracketsCount == 0\n        val isNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\
    \ = openBracketsCount == 0 && closeBracketsCount == 0\n        val isNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\
    \ = openBracketsCount == 0 && closeBracketsCount == 0\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_2dyq_yu.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36misNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\e\
    [0m = openBracketsCount == \e[31m0\e[0m && closeBracketsCount == \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty is already\
    \ defined as \e[33mvalue\e[0m \e[35misNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_2dyq_yu.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36misNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\e\
    [0m = openBracketsCount == \e[31m0\e[0m && closeBracketsCount == \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\
    \ is already defined as \e[33mvalue\e[0m \e[35misNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_2dyq_yu.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36misNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\e\
    [0m = openBracketsCount == \e[31m0\e[0m && closeBracketsCount == \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misNestedOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  isNestedOrEmptyOrEmptyOrEmpt"
  stdout: ''
  timestamp: 1659799280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\)\")\n        val bracketsLength = brackets.length\n\
    \        val bracketsNesting = new mutable.HashSet[Int](bracketsLength)\n    \
    \    val bracketsNestingCount = new mutable.HashMap[Int, Int](bracketsLength)\n\
    \        var i = 0\n        while (i < bracketsLength) {\n            val bracket\
    \ = brackets(i)\n            val bracketLength = bracket.length\n            if\
    \ (bracketLength > 1) {\n                val bracketNesting = bracket.split(\"\
    \\\\[|\\\\]|\\\\)\")\n                for (j <- 0 until bracketNesting.length)\
    \ {\n                    val bracketNestingLength = bracketNesting(j).length\n\
    \                    if (bracketNestingLength > 1) {\n                       \
    \ bracketsNesting.add(j)\n                        bracketsNestingCount(j) = bracketNestingLength\n\
    \                    }\n                }\n            }\n            i += 1\n\
    \        }\n        val bracketsNestingCount = bracketsNestingCount.toSeq\n  \
    \      val bracketsNestingCountSorted = bracketsNestingCount.sortBy(_._1)\n  \
    \      val bracketsNestingCountSortedLength = bracketsNestingCountSorted.length\n\
    \        val bracketsNestingCountSortedLength = if (bracketsNestingCountSortedLength\
    \ == 0) 1 else bracketsNestingCountSortedLength\n        val bracketsNestingCountSortedLength\
    \ = if (bracketsNestingCountSortedLength == 1) 1 else bracketsNestingCountSortedLength\n\
    \        val bracketsNestingCountSortedLength = if (bracketsNestingCountSortedLength\
    \ == 2) 2 else bracketsNestingCountSortedLength\n        val bracketsNestingCountSortedLength\
    \ = if (bracketsNestingCountSortedLength == 3) 3 else bracketsNestingCountSortedLength\n\
    \        val bracketsNestingCountSortedLength = if (bracketsNestingCountSortedLength\
    \ == 4) 4 else bracketsNestingCountSortedLength\n        val bracketsNestingCountSortedLength\
    \ = if (bracketsNestingCountSortedLength == 5) 5 else bracketsNestingCountSortedLength\n\
    \        val bracketsNestingCountSortedLength = if (bracketsNestingCountSortedLength\
    \ == 6) 6 else bracketsNestingCountSortedLength\n        val bracketsNestingCountSortedLength\
    \ = if (bracketsNestingCountSortedLength == 7) 7 else bracketsNestingCountSortedLength\n\
    \        val bracketsNestingCountSortedLength = if (bracket\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp95op6k_u.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp95op6k_u.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbracketsNestingCount\e[0m = bracketsNestingCount.toSeq\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mbracketsNestingCount is already defined as \e[33mvalue\e[0m \e[35mbracketsNestingCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp95op6k_u.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingCountSortedLength\e[0m\
    \ = \e[33mif\e[0m (bracketsNestingCountSortedLength == \e[31m0\e[0m) \e[31m1\e\
    [0m \e[33melse\e[0m bracketsNestingCountSortedLength\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingCountSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mbracketsNestingCountSortedLength\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp95op6k_u.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbracketsNestingCountSortedLength\e[0m = \e[33mif\e[0m (bracketsNestingCountSortedLength\
    \ == \e[31m1\e[0m) \e[31m1\e[0m \e[33melse\e[0m bracketsNestingCountSortedLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingCountSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mbracketsNestingCountSortedLength\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of t"
  stdout: ''
  timestamp: 1659799280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val bracketsLength = brackets.length\n        val\
    \ openBrackets = brackets.filter(x => x == '[').length\n        val closeBrackets\
    \ = brackets.filter(x => x == ']').length\n        val isNested = openBrackets\
    \ == closeBrackets\n        return isNested\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpt8m7e7tk.scala:16:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = brackets.filter(\e\
    [36mx\e[0m => x == \e[31m'['\e[0m).length\n\e[31m\e[31m   |\e[0m             \
    \                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types String and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpt8m7e7tk.scala:17:49 -----------------------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = brackets.filter(\e\
    [36mx\e[0m => x == \e[31m']'\e[0m).length\n\e[31m\e[31m   |\e[0m             \
    \                                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types String and Char cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659799281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.Set[Char]()\n        val openBrackets = mutable.Set[Char]()\n    \
    \    val closeBrackets = mutable.Set[Char]()\n        val openBracketsCount =\
    \ mutable.Set[Int]()\n        val closeBracketsCount = mutable.Set[Int]()\n  \
    \      val openBracketsCounts = mutable.Map[Char, Int]()\n        val closeBracketsCounts\
    \ = mutable.Map[Char, Int]()\n        val openBracketsCountMap = mutable.Map[Char,\
    \ Int]()\n        val closeBracketsCountMap = mutable.Map[Char, Int]()\n     \
    \   val openBracketsCountMap2 = mutable.Map[Char, Int]()\n        val closeBracketsCountMap2\
    \ = mutable.Map[Char, Int]()\n        val openBracketsCountMap3 = mutable.Map[Char,\
    \ Int]()\n        val closeBracketsCountMap3 = mutable.Map[Char, Int]()\n    \
    \    val openBracketsCountMap4 = mutable.Map[Char, Int]()\n        val closeBracketsCountMap4\
    \ = mutable.Map[Char, Int]()\n        val openBracketsCountMap5 = mutable.Map[Char,\
    \ Int]()\n        val closeBracketsCountMap5 = mutable.Map[Char, Int]()\n    \
    \    val openBracketsCountMap6 = mutable.Map[Char, Int]()\n        val closeBracketsCountMap6\
    \ = mutable.Map[Char, Int]()\n        val openBracketsCountMap7 = mutable.Map[Char,\
    \ Int]()\n        val closeBracketsCountMap7 = mutable.Map[Char, Int]()\n    \
    \    val openBracketsCountMap8 = mutable.Map[Char, Int]()\n        val closeBracketsCountMap8\
    \ = mutable.Map[Char, Int]()\n        val openBracketsCountMap9 = mutable.Map[Char,\
    \ Int]()\n        val closeBracketsCountMap9 = mutable.Map[Char, Int]()\n    \
    \    val openBracketsCountMap10 = mutable.Map[Char, Int]()\n        val closeBracketsCountMap10\
    \ = mutable.Map[Char, Int]()\n        val openBracketsCountMap11 = mutable.Map[Char,\
    \ Int]()\n        val closeBracketsCountMap11 = mutable.Map[Char, Int]()\n   \
    \     val openBracketsCountMap12 = mutable.Map[Char, \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0ktlj99e.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp0ktlj99e.scala:14:23 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.Set[\e[35mChar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0ktlj99e.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ktlj99e.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ktlj99e.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ktlj99e.scala:18:33\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsCount\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \   "
  stdout: ''
  timestamp: 1659799280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string.length)\n        brackets.update(0, string.length)\n\
    \        val stack = mutable.ArrayBuffer.empty[String]\n        val openings =\
    \ mutable.ArrayBuffer.empty[String]\n        val closings = mutable.ArrayBuffer.empty[String]\n\
    \        val openings_count = mutable.ArrayBuffer.empty[Int]\n        val closings_count\
    \ = mutable.ArrayBuffer.empty[Int]\n        val openings_count_max = mutable.ArrayBuffer.empty[Int]\n\
    \        val closings_count_max = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openings_count_min = mutable.ArrayBuffer.empty[Int]\n        val closings_count_min\
    \ = mutable.ArrayBuffer.empty[Int]\n        val openings_count_min = mutable.ArrayBuffer.empty[Int]\n\
    \        val closings_count_min = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openings_count_max = mutable.ArrayBuffer.empty[Int]\n        val closings_count_max\
    \ = mutable.ArrayBuffer.empty[Int]\n        val openings_count_min = mutable.ArrayBuffer.empty[Int]\n\
    \        val closings_count_min = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openings_count_max = mutable.ArrayBuffer.empty[Int]\n        val closings_count_max\
    \ = mutable.ArrayBuffer.empty[Int]\n        val openings_count_min = mutable.ArrayBuffer.empty[Int]\n\
    \        val closings_count_min = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openings_count_max = mutable.ArrayBuffer.empty[Int]\n        val closings_count_max\
    \ = mutable.ArrayBuffer.empty[Int]\n        val openings_count_min = mutable.ArrayBuffer.empty[Int]\n\
    \        val closings_count_min = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openings_count_max = mutable.ArrayBuffer.empty[Int]\n        val closings_count_max\
    \ = mutable.ArrayBuffer.empty[Int]\n        val openings_count_min = mutable.ArrayBuffer.empty[Int]\n\
    \        val closings_count_min = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openings_count_max = mutable.ArrayBuffer.empty[Int]\n        val closings_count_max\
    \ = mutable.ArrayBuffer.empty[Int]\n        val openings_count_min = mutable.ArrayBuffer.empty[Int]\n\
    \        val closings_count_min = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openings_count_max = mutable.ArrayBuffer.empty[Int]\n        val closing\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnifni1ne.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnifni1ne.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopenings_count_min\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenings_count_min is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenings_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnifni1ne.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mclosings_count_min\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosings_count_min is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosings_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnifni1ne.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mopenings_count_max\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenings_count_max is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenings_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnifni1ne.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mclosings_count_max\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosings_count_max is already defined as \e["
  stdout: ''
  timestamp: 1659799280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsLength = brackets.length\n  \
    \      val openBrackets = brackets.filter(x => x.contains(\"[\"))\n        val\
    \ closedBrackets = brackets.filter(x => x.contains(\"]\"))\n        val openBracketsLength\
    \ = openBrackets.length\n        val closedBracketsLength = closedBrackets.length\n\
    \        val openBracketsNestings = openBrackets.filter(x => x.contains(\"[\"\
    )).length\n        val closedBracketsNestings = closedBrackets.filter(x => x.contains(\"\
    ]\")).length\n        val openBracketsNestings = openBrackets.filter(x => x.contains(\"\
    [\")).length\n        val closedBracketsNestings = closedBrackets.filter(x =>\
    \ x.contains(\"]\")).length\n        val openBracketsNestings = openBrackets.filter(x\
    \ => x.contains(\"[\")).length\n        val closedBracketsNestings = closedBrackets.filter(x\
    \ => x.contains(\"]\")).length\n        val openBracketsNestings = openBrackets.filter(x\
    \ => x.contains(\"[\")).length\n        val closedBracketsNestings = closedBrackets.filter(x\
    \ => x.contains(\"]\")).length\n        val openBracketsNestings = openBrackets.filter(x\
    \ => x.contains(\"[\")).length\n        val closedBracketsNestings = closedBrackets.filter(x\
    \ => x.contains(\"]\")).length\n        val openBracketsNestings = openBrackets.filter(x\
    \ => x.contains(\"[\")).length\n        val closedBracketsNestings = closedBrackets.filter(x\
    \ => x.contains(\"]\")).length\n        val openBracketsNestings = openBrackets.filter(x\
    \ => x.contains(\"[\")).length\n        val closedBracketsNestings = closedBrackets.filter(x\
    \ => x.contains(\"]\")).length\n        val openBracketsNestings = openBrackets.filter(x\
    \ => x.contains(\"[\")).length\n        val closedBracketsNestings = closedBrackets.filter(x\
    \ => x.contains(\"]\")).length\n        val openBracketsNestings = openBrackets.filter(x\
    \ => x.contains(\"[\")).length\n        val closedBracketsNestings = closedBrackets.filter(x\
    \ => x.contains(\"]\")).length\n        val openBra\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp92fj3web.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp92fj3web.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopenBracketsNestings\e[0m = openBrackets.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"[\"\e[0m)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsNestings is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp92fj3web.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mclosedBracketsNestings\e\
    [0m = closedBrackets.filter(\e[36mx\e[0m => x.contains(\e[31m\"]\"\e[0m)).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosedBracketsNestings is already defined as \e[33mvalue\e\
    [0m \e[35mclosedBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp92fj3web.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestings\e[0m\
    \ = openBrackets.filter(\e[36mx\e[0m => x.contains(\e[31m\"[\"\e[0m)).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsNestings is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp92fj3web.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mclosedBracketsNestings\e\
    [0m = closedB"
  stdout: ''
  timestamp: 1659799281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val stack = mutable.Stack[String]()\n\
    \        val openBrackets = mutable.HashSet[String]()\n        val closeBrackets\
    \ = mutable.HashSet[String]()\n        val bracketsCount = brackets.length\n \
    \       val openBracketsCount = openBrackets.size\n        val closeBracketsCount\
    \ = closeBrackets.size\n        val openBracketsCount2 = openBracketsCount * 2\n\
    \        val closeBracketsCount2 = closeBracketsCount * 2\n        val openBracketsCount3\
    \ = openBracketsCount2 * 3\n        val closeBracketsCount3 = closeBracketsCount2\
    \ * 3\n        val openBracketsCount4 = openBracketsCount3 * 4\n        val closeBracketsCount4\
    \ = closeBracketsCount3 * 4\n        val openBracketsCount5 = openBracketsCount4\
    \ * 5\n        val closeBracketsCount5 = closeBracketsCount4 * 5\n        val\
    \ openBracketsCount6 = openBracketsCount5 * 6\n        val closeBracketsCount6\
    \ = closeBracketsCount5 * 6\n        val openBracketsCount7 = openBracketsCount6\
    \ * 7\n        val closeBracketsCount7 = closeBracketsCount6 * 7\n        val\
    \ openBracketsCount8 = openBracketsCount7 * 8\n        val closeBracketsCount8\
    \ = closeBracketsCount7 * 8\n        val openBracketsCount9 = openBracketsCount8\
    \ * 9\n        val closeBracketsCount9 = closeBracketsCount8 * 9\n        val\
    \ openBracketsCount10 = openBracketsCount9 * 10\n        val closeBracketsCount10\
    \ = closeBracketsCount9 * 10\n        val openBracketsCount11 = openBracketsCount10\
    \ * 11\n        val closeBracketsCount11 = closeBracketsCount10 * 11\n       \
    \ val openBracketsCount12 = openBracketsCount11 * 12\n        val closeBracketsCount12\
    \ = closeBracketsCount11 * 12\n        val openBracketsCount13 = openBracketsCount12\
    \ * 13\n        val closeBracketsCount13 = closeBracketsCount12 * 13\n       \
    \ val openBracketsCount14 = openBracketsCount13 * 14\n        val closeBracketsCount14\
    \ = closeBra\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpym5h68gh.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpym5h68gh.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpym5h68gh.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpym5h68gh.scala:46:35 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsCount14\e[0m\
    \ = closeBra\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: closeBra\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpym5h68gh.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659799281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.size\n        val closeBracketsCount =\
    \ closeBrackets.size\n        val openBracketsNesting = (openBracketsCount - closeBracketsCount).abs\n\
    \        val closeBracketsNesting = (closeBracketsCount - openBracketsCount).abs\n\
    \        val isNesting = openBracketsNesting < closeBracketsNesting\n        val\
    \ isNested = openBrackets.size != closeBrackets.size\n        val isNested = openBracketsNesting\
    \ < closeBracketsNesting\n        val isNested = openBracketsNesting < closeBracketsNesting\n\
    \        val isNested = openBracketsNesting < closeBracketsNesting\n        val\
    \ isNested = openBracketsNesting < closeBracketsNesting\n        val isNested\
    \ = openBracketsNesting < closeBracketsNesting\n        val isNested = openBracketsNesting\
    \ < closeBracketsNesting\n        val isNested = openBracketsNesting < closeBracketsNesting\n\
    \        val isNested = openBracketsNesting < closeBracketsNesting\n        val\
    \ isNested = openBracketsNesting < closeBracketsNesting\n        val isNested\
    \ = openBracketsNesting < closeBracketsNesting\n        val isNested = openBracketsNesting\
    \ < closeBracketsNesting\n        val isNested = openBracketsNesting < closeBracketsNesting\n\
    \        val isNested = openBracketsNesting < closeBracketsNesting\n        val\
    \ isNested = openBracketsNesting < closeBracketsNesting\n        val isNested\
    \ = openBracketsNesting < closeBracketsNesting\n        val isNested = openBracketsNesting\
    \ < closeBracketsNesting\n        val isNested = openBracketsNesting < closeBracketsNesting\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp1_eg2a8b.scala:40:11 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp1_eg2a8b.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misNested\e[0m = openBracketsNesting\
    \ < closeBracketsNesting\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misNested is already defined as \e[33mvalue\e[0m \e[35misNested\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1_eg2a8b.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36misNested\e[0m = openBracketsNesting\
    \ < closeBracketsNesting\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misNested is already defined as \e[33mvalue\e[0m \e[35misNested\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1_eg2a8b.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36misNested\e[0m = openBracketsNesting\
    \ < closeBracketsNesting\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misNested is already defined as \e[33mvalue\e[0m \e[35misNested\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1_eg2a8b.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36misNested\e[0m = openBracketsNesting\
    \ < closeBracketsNesting\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misNested is alre"
  stdout: ''
  timestamp: 1659799281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsLength = brackets.length\n  \
    \      val openBrackets = brackets.filter(_.contains(\"[\"))\n        val closedBrackets\
    \ = brackets.filter(_.contains(\"]\"))\n        val openBracketsLength = openBrackets.length\n\
    \        val closedBracketsLength = closedBrackets.length\n        val openBracketsNestings\
    \ = openBrackets.map(_.split(\"]\")).map(_.length)\n        val closedBracketsNestings\
    \ = closedBrackets.map(_.split(\"]\")).map(_.length)\n        val openBracketsNestingsSum\
    \ = openBracketsNestings.sum\n        val closedBracketsNestingsSum = closedBracketsNestings.sum\n\
    \        val openBracketsNestingsSumEqualsLength = openBracketsNestingsSum ==\
    \ closedBracketsNestingsSum\n        val openBracketsNestingsSumEqualsLengthEqualsOpenBracketsLength\
    \ = openBracketsNestingsSum == openBracketsLength\n        val openBracketsNestingsSumEqualsLengthEqualsClosedBracketsLength\
    \ = openBracketsNestingsSum == closedBracketsLength\n        val openBracketsNestingsSumEqualsLengthEqualsOpenBracketsNestingsSum\
    \ = openBracketsNestingsSum == openBracketsNestingsSum\n        val openBracketsNestingsSumEqualsLengthEqualsClosedBracketsNestingsSum\
    \ = openBracketsNestingsSum == closedBracketsNestingsSum\n        val openBracketsNestingsSumEqualsLengthEqualsOpenBracketsNestingsSumEqualsLength\
    \ = openBracketsNestingsSum == openBracketsNestingsSumEqualsLength\n        val\
    \ openBracketsNestingsSumEqualsLengthEqualsClosedBracketsNestingsSumEqualsLength\
    \ = openBracketsNestingsSum == closedBracketsNestingsSumEqualsLength\n       \
    \ val openBracketsNestingsSumEqualsLengthEqualsOpenBracketsNestingsSumEqualsLengthEqualsOpenBracketsNestingsSum\
    \ = openBracketsNestingsSum == openBracketsNestingsSumEqualsLengthEqualsOpenBracketsNestingsSum\n\
    \        val open\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr79siene.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpr79siene.scala:29:91\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m       \
    \ \e[33mval\e[0m \e[36mopenBracketsNestingsSumEqualsLengthEqualsOpenBracketsNestingsSumEqualsLength\e\
    [0m = openBracketsNestingsSum == openBracketsNestingsSumEqualsLength\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Int and Boolean cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr79siene.scala:30:120\
    \ -----------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBracketsNestingsSumEqualsLengthEqualsClosedBracketsNestingsSumEqualsLength\e\
    [0m = openBracketsNestingsSum == closedBracketsNestingsSumEqualsLength\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: closedBracketsNestingsSumEqualsLength\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpr79siene.scala:31:120 ----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestingsSumEqualsLengthEqualsOpenBracketsNestingsSumEqualsLengthEqualsOpenBracketsNestingsSum\e\
    [0m = openBracketsNestingsSum == openBracketsNestingsSumEqualsLengthEqualsOpenBracketsNestingsSum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Int and Boolean cannot be compared\
    \ with == or !=\n\e[31m\e["
  stdout: ''
  timestamp: 1659799284
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val nestings = brackets.map(x => x.split(\"\
    \\\\]\"))\n        val nestingCount = nestings.map(x => x.size).sum\n        nestingCount\
    \ > 0\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphty148dv.scala:21)\n\tat Problem.main(tmphty148dv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string.length)\n        var openBrackets = 0\n       \
    \ var closeBrackets = 0\n        var openBracketsCount = 0\n        var closeBracketsCount\
    \ = 0\n        var openBracketsCountMax = string.length\n        var closeBracketsCountMax\
    \ = string.length\n        var openBracketsCountMin = string.length\n        var\
    \ closeBracketsCountMin = string.length\n        var openBracketsCountMaxIndex\
    \ = 0\n        var closeBracketsCountMaxIndex = 0\n        var openBracketsCountMinIndex\
    \ = 0\n        var closeBracketsCountMinIndex = 0\n        var openBracketsCountMaxIndex\
    \ = 0\n        var closeBracketsCountMaxIndex = 0\n        var openBracketsCountMinIndex\
    \ = 0\n        var closeBracketsCountMinIndex = 0\n        var openBracketsCountMaxIndex\
    \ = 0\n        var closeBracketsCountMaxIndex = 0\n        var openBracketsCountMinIndex\
    \ = 0\n        var closeBracketsCountMinIndex = 0\n        var openBracketsCountMaxIndex\
    \ = 0\n        var closeBracketsCountMaxIndex = 0\n        var openBracketsCountMinIndex\
    \ = 0\n        var closeBracketsCountMinIndex = 0\n        var openBracketsCountMaxIndex\
    \ = 0\n        var closeBracketsCountMaxIndex = 0\n        var openBracketsCountMinIndex\
    \ = 0\n        var closeBracketsCountMinIndex = 0\n        var openBracketsCountMaxIndex\
    \ = 0\n        var closeBracketsCountMaxIndex = 0\n        var openBracketsCountMinIndex\
    \ = 0\n        var closeBracketsCountMinIndex = 0\n        var openBracketsCountMaxIndex\
    \ = 0\n        var closeBracketsCountMaxIndex = 0\n        var openBracketsCountMinIndex\
    \ = 0\n        var closeBracketsCountMinIndex = 0\n        var openBracketsCountMaxIndex\
    \ = 0\n        var closeBracketsCountMaxIndex = 0\n        var openBracketsCountMinIndex\
    \ = 0\n        var closeBracketsCountMinIndex = 0\n        var openBracketsCountMaxIndex\
    \ = 0\n        var closeBracketsCountMaxIndex = 0\n        var openBracketsCountMinIndex\
    \ = 0\n        var closeBracketsCountMinIndex = 0\n        var openBracketsCountMaxIndex\
    \ = 0\n        var closeBracketsCountMaxIndex = 0\n        var openBracketsCountMinIndex\
    \ = 0\n        var closeBracketsCountMinIndex = 0\n        var openBracketsCountMaxIndex\
    \ = 0\n        var closeBracketsCountMaxIndex = 0\n        var openBracketsCountMinIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyztfdl49.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyztfdl49.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mopenBracketsCountMaxIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mopenBracketsCountMaxIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mopenBracketsCountMaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyztfdl49.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mvar\e[0m \e[36mcloseBracketsCountMaxIndex\e[0m = \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsCountMaxIndex is already defined as \e[33mvariable\e\
    [0m \e[35mcloseBracketsCountMaxIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyztfdl49.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m \e[36mopenBracketsCountMinIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsCountMinIndex is already defined as \e[33mvariable\e\
    [0m \e[35mopenBracketsCountMinIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyztfdl49.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m \e[36mcloseBracketsCountMinIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsCountMinIndex is already defined as \e[33mvariable\e\
    [0m \e[35mcloseBracketsCountMinIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods mus"
  stdout: ''
  timestamp: 1659799282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        brackets += \"[\" \n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets.toList.contains(string)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfua25lx6.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnmdy48t8.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36misNested\e\
    [0m(\e[36mstring\e[0m : \e[35mString\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                              ^\e[0m\n\e[31m   |\e\
    [0m                                              Found:    Unit\n\e[31m   |\e\
    [0m                                              Required: Boolean\n\e[31m14 |\e\
    [0m        \e[34m// Your code here\e[0m\n\e[31m15 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val bracketsCount = mutable.ListBuffer[Int]()\n\
    \        val openBrackets = mutable.ListBuffer[String]()\n        val openBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBrackets = mutable.ListBuffer[String]()\n\
    \        val closeBracketsCount = mutable.ListBuffer[Int]()\n        val openBracketsNesting\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsNesting = mutable.ListBuffer[Int]()\n\
    \        val openBracketsNestingCount = mutable.ListBuffer[Int]()\n        val\
    \ closeBracketsNestingCount = mutable.ListBuffer[Int]()\n        val openBracketsNestingNesting\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsNestingNesting = mutable.ListBuffer[Int]()\n\
    \        val openBracketsNestingNestingCount = mutable.ListBuffer[Int]()\n   \
    \     val closeBracketsNestingNestingCount = mutable.ListBuffer[Int]()\n     \
    \   val openBracketsNestingNestingNesting = mutable.ListBuffer[Int]()\n      \
    \  val closeBracketsNestingNestingNesting = mutable.ListBuffer[Int]()\n      \
    \  val openBracketsNestingNestingNestingCount = mutable.ListBuffer[Int]()\n  \
    \      val closeBracketsNestingNestingNestingCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsNestingNestingNestingNesting = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsNestingNestingNestingCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsNestingNestingNestingNestingCount = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsNestingNestingNestingNestingCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsNestingNestingNestingNestingNesting = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsNestingNestingNestingNestingCount = mutable.ListBuffer[Int]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp90gk7gyh.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestingNestingNestingCount\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsNestingNestingNestingCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mcloseBracketsNestingNestingNestingCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp90gk7gyh.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestingNestingNestingNestingCount\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsNestingNestingNestingNestingCount is already\
    \ defined as \e[33mvalue\e[0m \e[35mcloseBracketsNestingNestingNestingNestingCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp90gk7gyh.scala:14:23 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp90gk7gyh.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mbracketsCount\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp90gk7gyh.scala:16:27 ------------"
  stdout: ''
  timestamp: 1659799284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[Char]()\n        val openBrackets = mutable.ListBuffer[Char]()\n\
    \        val closeBrackets = mutable.ListBuffer[Char]()\n        val openBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount2 = mutable.ListBuffer[Int]()\n        val closeBracketsCount2\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount3 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount3 = mutable.ListBuffer[Int]()\n        val openBracketsCount4\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount4 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount5 = mutable.ListBuffer[Int]()\n        val closeBracketsCount5\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount6 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount6 = mutable.ListBuffer[Int]()\n        val openBracketsCount7\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount7 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount8 = mutable.ListBuffer[Int]()\n        val closeBracketsCount8\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount9 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount9 = mutable.ListBuffer[Int]()\n        val openBracketsCount10\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount10 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount11 = mutable.ListBuffer[Int]()\n        val closeBracketsCount11\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount12 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount12 = mutable.ListBuffer[Int]()\n        val openBracketsCount13\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount13 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount14 = mutable.ListBuffer[Int]()\n        val closeBracketsCount14\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfb5gy669.scala:44:34 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsCount14\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfb5gy669.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfb5gy669.scala:15:27\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.ListBuffer[\e[35mChar\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfb5gy669.scala:16:28 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e[35mChar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfb5gy669.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfb5gy669"
  stdout: ''
  timestamp: 1659799284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val nestings = brackets.groupBy(x => x).mapValues(_.size)\n        val\
    \ nestingCount = nestings.filter(_._2 > 1).length\n        nestingCount > 0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvge36d4f.scala:17:53 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnestingCount\e[0m = nestings.filter(_._2\
    \ > \e[31m1\e[0m).length\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m   value length is not a member of scala.collection.MapView[String,\
    \ Int]\n1 error found\n"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        brackets += \"[\" \n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        val\
    \ bracketsString = brackets.mkString(\"\")\n        val bracketsRegex = \"\"\"\
    \\[|\\]|\\(|\\)\"\"\".r\n        val bracketsMatcher = bracketsRegex.findAllIn(string)\n\
    \        val bracketsCount = bracketsMatcher.length\n        val bracketsIndex\
    \ = 0\n        var bracketsIndexCount = 0\n        var bracketsIndexCountMax =\
    \ bracketsCount - 1\n        var bracketsIndexCountMin = 0\n        var bracketsIndexCountMaxMin\
    \ = 0\n        var bracketsIndexCountMinMax = 0\n        var bracketsIndexCountMinMaxMin\
    \ = 0\n        var bracketsIndexCountMinMaxMinMax = 0\n        var bracketsIndexCountMinMaxMinMaxMin\
    \ = 0\n        var bracketsIndexCountMinMaxMinMaxMinMax = 0\n        var bracketsIndexCountMinMaxMinMaxMinMaxMin\
    \ = 0\n        var bracketsIndexCountMinMaxMinMaxMinMaxMinMax = 0\n        var\
    \ bracketsIndexCountMinMaxMinMaxMinMaxMinMaxMin = 0\n        var bracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = 0\n        var bracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMax = 0\n    \
    \    var bracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMax = 0\n        var bracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = 0\n        var bracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMin = 0\n \
    \       var bracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n     \
    \   var bracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n        var\
    \ bracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = 0\n        var bracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = 0\n        var bracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = 0\n        var bracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = 0\n        var bracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = 0\n        var bracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = 0\n        var bracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwz4lkl3b.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwz4lkl3b.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mbracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMax\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMax is already\
    \ defined as \e[33mvariable\e[0m \e[35mbracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMax\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwz4lkl3b.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mvar\e[0m \e[36mbracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMax\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMax is already\
    \ defined as \e[33mvariable\e[0m \e[35mbracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMax\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwz4lkl3b.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mvar\e[0m \e[36mbracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMax\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMax is already\
    \ defined as \e[33mvariable\e[0m \e[35mbracketsIndexCountMinMaxMinMaxMinMaxMinMaxMinMax\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwz4lkl3b.scala:42:12 ---------------------------\e[0m\e[0m\n\e\
    [31m42 |\e[0m        \e[33mvar\e[0m \e[36mbracketsInde"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string.length)\n        brackets.update(0, string.length)\n\
    \        brackets.update(1, 0)\n        brackets.update(2, 0)\n        brackets.update(3,\
    \ 0)\n        brackets.update(4, 0)\n        brackets.update(5, 0)\n        brackets.update(6,\
    \ 0)\n        brackets.update(7, 0)\n        brackets.update(8, 0)\n        brackets.update(9,\
    \ 0)\n        brackets.update(10, 0)\n        brackets.update(11, 0)\n       \
    \ brackets.update(12, 0)\n        brackets.update(13, 0)\n        brackets.update(14,\
    \ 0)\n        brackets.update(15, 0)\n        brackets.update(16, 0)\n       \
    \ brackets.update(17, 0)\n        brackets.update(18, 0)\n        brackets.update(19,\
    \ 0)\n        brackets.update(20, 0)\n        brackets.update(21, 0)\n       \
    \ brackets.update(22, 0)\n        brackets.update(23, 0)\n        brackets.update(24,\
    \ 0)\n        brackets.update(25, 0)\n        brackets.update(26, 0)\n       \
    \ brackets.update(27, 0)\n        brackets.update(28, 0)\n        brackets.update(29,\
    \ 0)\n        brackets.update(30, 0)\n        brackets.update(31, 0)\n       \
    \ brackets.update(32, 0)\n        brackets.update(33, 0)\n        brackets.update(34,\
    \ 0)\n        brackets.update(35, 0)\n        brackets.update(36, 0)\n       \
    \ brackets.update(37, 0)\n        brackets.update(38, 0)\n        brackets.update(39,\
    \ 0)\n        brackets.update(40, 0)\n        brackets.update(41, 0)\n       \
    \ brackets.update(42, 0)\n        brackets.update(43, 0)\n        brackets.update(44,\
    \ 0)\n        brackets.update(45, 0)\n        brackets.update(46, 0)\n       \
    \ brackets.update(47, 0)\n        brackets.update(48, 0)\n        brackets.update(49,\
    \ 0)\n        brackets.update(50, 0)\n        brackets.update(51, 0)\n       \
    \ brackets.update(52, 0)\n        brackets.update(53, 0)\n        brackets.update(54,\
    \ 0)\n        brackets.update(55, 0)\n        brackets.update(56, 0)\n       \
    \ brackets.update(57, 0)\n        brackets.update(58, 0)\n        brackets.update(59,\
    \ 0)\n        brackets.update(60, 0)\n        brackets.update(61, 0)\n       \
    \ brackets.update(62, 0)\n        brackets.update(63, 0)\n        brackets.update(64,\
    \ 0)\n        brackets.update(65, 0)\n        brackets.update(66, 0)\n       \
    \ brackets.update(67, 0)\n        brackets.update(68, 0)\n        brackets.update(69,\
    \ 0)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmzocc94h.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ArrayBuffer(string.length)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val openBrackets = brackets.filter(x => x != ']')\n\
    \        val closeBrackets = brackets.filter(x => x != ']')\n        val openBracketsCount\
    \ = openBrackets.size\n        val closeBracketsCount = closeBrackets.size\n \
    \       val openBracketsNestings = openBrackets.toList.zip(closeBrackets.toList).filter(x\
    \ => x._1 == x._2).size\n        val closeBracketsNestings = closeBrackets.toList.zip(openBrackets.toList).filter(x\
    \ => x._1 == x._2).size\n        openBracketsNestings == closeBracketsNestings\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfo2qp4s9.scala:15:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = brackets.filter(\e\
    [36mx\e[0m => x != \e[31m']'\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ String and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpfo2qp4s9.scala:16:49\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33mval\e[0m \e[36mcloseBrackets\e[0m = brackets.filter(\e[36mx\e[0m => x\
    \ != \e[31m']'\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and\
    \ Char cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659799290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val openBrackets = mutable.ListBuffer[String]()\n\
    \        val closeBrackets = mutable.ListBuffer[String]()\n        val openBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCounts = mutable.ListBuffer[Int]()\n        val closeBracketsCounts\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCount = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCount = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCounts = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCounts = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:18:33\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsCount\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error"
  stdout: ''
  timestamp: 1659799248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").filter(_.nonEmpty).toList\n        val openBrackets\
    \ = brackets.filter(_.startsWith(\"[\")).toList\n        val closeBrackets = brackets.filter(_.endsWith(\"\
    ]\")).toList\n        val openBracketsCount = openBrackets.map(_.length).sum\n\
    \        val closeBracketsCount = closeBrackets.map(_.length).sum\n        val\
    \ openBracketsNesting = (openBracketsCount - closeBracketsCount) / openBracketsCount.toDouble\n\
    \        val closeBracketsNesting = (closeBracketsCount - openBracketsCount) /\
    \ closeBracketsCount.toDouble\n        val isNesting = openBracketsNesting < closeBracketsNesting\n\
    \        val isNested = openBrackets.forall(_.startsWith(\"[\") && _.endsWith(\"\
    ]\"))\n        val isNotNested = openBrackets.forall(_.startsWith(\"[\") && !_.endsWith(\"\
    ]\"))\n        isNesting && isNested && isNotNested\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp18a_n5dd.scala:22:43 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misNested\e[0m = openBrackets.forall(_.startsWith(\e\
    [31m\"[\"\e[0m) && _.endsWith(\e[31m\"]\"\e[0m))\n\e[31m\e[31m   |\e[0m      \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp18a_n5dd.scala:23:46 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misNotNested\e[0m = openBrackets.forall(_.startsWith(\e\
    [31m\"[\"\e[0m) && !_.endsWith(\e[31m\"]\"\e[0m))\n\e[31m\e[31m   |\e[0m     \
    \                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string)\n        var openBrackets = 0\n        var closeBrackets\
    \ = 0\n        var openBracketsCount = 0\n        var closeBracketsCount = 0\n\
    \        while(openBracketsCount != closeBracketsCount) {\n            val openBracket\
    \ = brackets.head\n            val closeBracket = brackets.last\n            openBracketsCount\
    \ += openBracket.length\n            closeBracketsCount += closeBracket.length\n\
    \            if(openBracket.length == closeBracket.length) {\n               \
    \ if(openBracket.head == '[') {\n                    openBrackets += 1\n     \
    \               if(openBrackets.toDouble == closeBrackets.toDouble) {\n      \
    \                  closeBrackets += 1\n                    }\n               \
    \ } else if(openBracket.head == ']') {\n                    closeBrackets += 1\n\
    \                    if(openBrackets.toDouble == closeBrackets.toDouble) {\n \
    \                       openBrackets -= 1\n                    }\n           \
    \     }\n            }\n            brackets = brackets.tail\n        }\n    \
    \    return openBracketsCount == closeBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnoi4yfdg.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ArrayBuffer(string)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpnoi4yfdg.scala:37:21 -----------------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m            brackets = brackets.tail\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val brackets\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val nestedBrackets = brackets.filter(x => x.contains(']'))\n\
    \        val nestedBracketsCount = nestedBrackets.size\n        val bracketsCount\
    \ = brackets.size\n        val isNested = nestedBracketsCount != bracketsCount\n\
    \        return isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxhqtucnz.scala:23)\n\tat Problem.main(tmpxhqtucnz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val bracketsCount = brackets.length\n        val\
    \ bracketsNestings = brackets.map(x => x.count('[')) // count the nesting for\
    \ each bracket\n        val bracketsNestingsSum = bracketsNestings.sum // sum\
    \ the nesting for each bracket\n        val bracketsNestingsSumIsNesting = bracketsNestingsSum\
    \ > 0 && bracketsNestingsSum < bracketsCount // check if the sum is greater than\
    \ 0 and less than the length of the brackets array\n        val bracketsNestingsSumIsNotNesting\
    \ = bracketsNestingsSum < 0 && bracketsNestingsSum > 0 // check if the sum is\
    \ greater than 0 and less than 0\n        val bracketsNestingsSumIsNestingAndNotNesting\
    \ = bracketsNestingsSum > 0 && bracketsNestingsSum < bracketsCount // check if\
    \ the sum is greater than 0 and less than the length of the brackets array\n \
    \       val bracketsNestingsSumIsNestingAndNesting = bracketsNestingsSum > 0 &&\
    \ bracketsNestingsSum < bracketsCount // check if the sum is greater than 0 and\
    \ less than the length of the brackets array\n        val bracketsNestingsSumIsNestingAndNotNesting\
    \ = bracketsNestingsSum > 0 && bracketsNestingsSum < bracketsCount // check if\
    \ the sum is greater than 0 and less than the length of the brackets array\n \
    \       val bracketsNestingsSumIsNestingAndNestingAndNotNesting = bracketsNestingsSum\
    \ > 0 && bracketsNestingsSum < bracketsCount // check if the sum is greater than\
    \ 0 and less than the length of the brackets array\n        val bracketsNestingsSumIsNestingAndNestingAndNesting\
    \ = bracketsNestingsSum > 0 && bracketsNestingsSum < bracketsCount // check if\
    \ the sum is greater than 0 and less than the length of the brackets array\n \
    \       val bracketsNestingsSumIsNestingAndNestingAndNotNesting = bracketsNestingsSum\
    \ > 0 && bracketsNestingsSum < bracketsCount // check if the sum is greater than\
    \ 0 and less than the length of the brackets array\n        val bracketsNestingsSumIsNestingAndNestingAndNestingAndNotNesting\
    \ = bracketsNestingsSum > 0 && bracketsNestingsSum < bracketsCount // check if\
    \ the sum is greater than 0 and less than the length of the brackets array\n \
    \       val bracketsNestingsSumIsNest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp72kbsyug.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp72kbsyug.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbracketsNestingsSumIsNestingAndNotNesting\e[0m = bracketsNestingsSum >\
    \ \e[31m0\e[0m && bracketsNestingsSum < bracketsCount \e[34m// check if the sum\
    \ is greater than 0 and less than the length of the brackets array\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingsSumIsNestingAndNotNesting is already defined\
    \ as \e[33mvalue\e[0m \e[35mbracketsNestingsSumIsNestingAndNotNesting\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp72kbsyug.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsSumIsNestingAndNestingAndNotNesting\e\
    [0m = bracketsNestingsSum > \e[31m0\e[0m && bracketsNestingsSum < bracketsCount\
    \ \e[34m// check if the sum is greater than 0 and less than the length of the\
    \ brackets array\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingsSumIsNestingAndNestingAndNotNesting is already\
    \ defined as \e[33mvalue\e[0m \e[35mbracketsNestingsSumIsNestingAndNestingAndNotNesting\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp72kbsyug.scala:16:57 --------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestings\e[0m = brackets.map(\e\
    [36mx\e[0m => x.count(\e[31m'['\e[0m)) \e[34m// count the nesting for each bracket\e\
    [0m\n\e[31m\e[31m   |\e[0m                                 "
  stdout: ''
  timestamp: 1659799292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val openBrackets = brackets.filter(_.contains('['))\n\
    \        val closeBrackets = brackets.filter(_.contains(']'))\n        val openBracketsCount\
    \ = openBrackets.size\n        val closeBracketsCount = closeBrackets.size\n \
    \       val openBracketsNestings = openBrackets.filter(_.contains('['))\n    \
    \    val closeBracketsNestings = closeBrackets.filter(_.contains(']'))\n     \
    \   val openBracketsNestingsCount = openBracketsNestings.size\n        val closeBracketsNestingsCount\
    \ = closeBracketsNestings.size\n        val openBracketsNestingsInside = openBracketsNestings.filter(_.contains('['))\n\
    \        val closeBracketsNestingsInside = closeBracketsNestings.filter(_.contains(']'))\n\
    \        val openBracketsNestingsInsideCount = openBracketsNestingsInside.size\n\
    \        val closeBracketsNestingsInsideCount = closeBracketsNestingsInside.size\n\
    \        val openBracketsNestingsInsideNestings = openBracketsNestingsInside.filter(_.contains('['))\n\
    \        val closeBracketsNestingsInsideNestings = closeBracketsNestingsInside.filter(_.contains(']'))\n\
    \        val openBracketsNestingsInsideNestingsCount = openBracketsNestingsInsideNestings.size\n\
    \        val closeBracketsNestingsInsideNestingsCount = closeBracketsNestingsInsideNestings.size\n\
    \        val openBracketsNestingsInsideNestingsInside = openBracketsNestingsInsideNestings.filter(_.contains('['))\n\
    \        val closeBracketsNestingsInsideNestingsInside = closeBracketsNestingsInsideNestings.filter(_.contains(']'))\n\
    \        val openBracketsNestingsInsideNestingsInsideCount = openBracketsNestingsInsideNestingsInside.size\n\
    \        val closeBracketsNestingsInsideNestingsInsideCount = closeBracketsNestingsInsideNestingsInside.size\n\
    \        val openBracketsNe\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqc8k_0il.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqc8k_0il.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnmdy48t8.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36misNested\e\
    [0m(\e[36mstring\e[0m : \e[35mString\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                              ^\e[0m\n\e[31m   |\e\
    [0m                                              Found:    Unit\n\e[31m   |\e\
    [0m                                              Required: Boolean\n\e[31m14 |\e\
    [0m        \e[34m// Your code here\e[0m\n\e[31m15 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Write\
    \ your code here\n        val brackets = mutable.HashSet[Char]()\n        val\
    \ openBrackets = mutable.HashSet[Char]()\n        val closeBrackets = mutable.HashSet[Char]()\n\
    \        val openBracketsCount = mutable.HashMap[Char, Int]()\n        val closeBracketsCount\
    \ = mutable.HashMap[Char, Int]()\n        val openBracketsCounts = mutable.HashMap[Char,\
    \ Int]()\n        val closeBracketsCounts = mutable.HashMap[Char, Int]()\n   \
    \     val openBracketsCountMax = mutable.HashMap[Char, Int]()\n        val closeBracketsCountMax\
    \ = mutable.HashMap[Char, Int]()\n        val openBracketsCountMin = mutable.HashMap[Char,\
    \ Int]()\n        val closeBracketsCountMin = mutable.HashMap[Char, Int]()\n \
    \       val openBracketsCountMaxMin = mutable.HashMap[Char, Int]()\n        val\
    \ closeBracketsCountMaxMin = mutable.HashMap[Char, Int]()\n        val openBracketsCountMaxMinMax\
    \ = mutable.HashMap[Char, Int]()\n        val closeBracketsCountMaxMinMax = mutable.HashMap[Char,\
    \ Int]()\n        val openBracketsCountMaxMinMaxMin = mutable.HashMap[Char, Int]()\n\
    \        val closeBracketsCountMaxMinMaxMin = mutable.HashMap[Char, Int]()\n \
    \       val openBracketsCountMaxMinMaxMinMax = mutable.HashMap[Char, Int]()\n\
    \        val closeBracketsCountMaxMinMaxMinMax = mutable.HashMap[Char, Int]()\n\
    \        val openBracketsCountMaxMinMaxMinMaxMin = mutable.HashMap[Char, Int]()\n\
    \        val closeBracketsCountMaxMinMaxMinMaxMin = mutable.HashMap[Char, Int]()\n\
    \        val openBracketsCountMaxMinMaxMinMaxMinMax = mutable.HashMap[Char, Int]()\n\
    \        val closeBracketsCountMaxMinMaxMinMaxMinMax = mutable.HashMap[Char, Int]()\n\
    \        val openBracketsCountMaxMinMaxMinMaxMinMaxMin = mutable.HashMap[Char,\
    \ Int]()\n        val closeBracketsCountMaxMinMaxMinMaxMinMaxMin = mutable.HashMap[Char,\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplfnj1qna.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmplfnj1qna.scala:15:23 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.HashSet[\e[35mChar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmplfnj1qna.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplfnj1qna.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplfnj1qna.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplfnj1qna.scala:19:33 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBracketsCount\e[0m = mutable.HashMap[\e[35mChar\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       "
  stdout: ''
  timestamp: 1659799291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").filter(_.nonEmpty)\n        val nesting = brackets.foldLeft(false)((nested,\
    \ current) => {\n            if (nested.nonEmpty && current.nonEmpty) {\n    \
    \            val first = current.head\n                val last = current.last\n\
    \                if (first == '[' && last == ']') {\n                    nested\
    \ = true\n                } else if (first == '[' && last != ']') {\n        \
    \            nested = false\n                } else if (first != ']' && last ==\
    \ '[') {\n                    nested = false\n                }\n            }\n\
    \            nested\n        })\n        nesting\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyckklm81.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (nested.nonEmpty && current.nonEmpty)\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value nonEmpty is not a member of Boolean\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpyckklm81.scala:20:27 -----------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                    nested = \e[31mtrue\e[0m\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \        Reassignment to val nested\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpyckklm81.scala:22:27 -----------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                    nested = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m \
    \                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment\
    \ to val nested\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpyckklm81.scala:24:27\
    \ -----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                   \
    \ nested = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val nested\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val openBrackets = brackets.filter(x => x == \"[\").length\n        val\
    \ closeBrackets = brackets.filter(x => x == \"]\").length\n        val openBracketsCount\
    \ = openBrackets\n        val closeBracketsCount = closeBrackets\n        val\
    \ openBracketsNesting = (openBracketsCount - closeBracketsCount) / openBracketsCount\n\
    \        val closeBracketsNesting = (closeBracketsCount - openBracketsCount) /\
    \ closeBracketsCount\n        val isNesting = openBracketsNesting < closeBracketsNesting\n\
    \        val isNested = openBracketsCount > 0 && closeBracketsCount > 0\n    \
    \    isNesting && isNested\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.isNested(tmp78bn7ed6.scala:20)\n\
    \tat Problem$.main(tmp78bn7ed6.scala:27)\n\tat Problem.main(tmp78bn7ed6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string.length)\n        brackets.update(0, string.length)\n\
    \        val stack = mutable.ArrayBuffer.empty[Int]\n        val open = mutable.ArrayBuffer.empty[Int]\n\
    \        val close = mutable.ArrayBuffer.empty[Int]\n        val openCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val closeCount = mutable.ArrayBuffer.empty[Int]\n        val openCounts\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closeCounts = mutable.ArrayBuffer.empty[Int]\n\
    \        val openCountMax = mutable.ArrayBuffer.empty[Int]\n        val closeCountMax\
    \ = mutable.ArrayBuffer.empty[Int]\n        val openCountMaxs = mutable.ArrayBuffer.empty[Int]\n\
    \        val closeCountMaxs = mutable.ArrayBuffer.empty[Int]\n        val openCountMin\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closeCountMin = mutable.ArrayBuffer.empty[Int]\n\
    \        val openCountMins = mutable.ArrayBuffer.empty[Int]\n        val closeCountMins\
    \ = mutable.ArrayBuffer.empty[Int]\n        val openCountMaxMin = mutable.ArrayBuffer.empty[Int]\n\
    \        val closeCountMaxMin = mutable.ArrayBuffer.empty[Int]\n        val openCountMaxMins\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closeCountMaxMins = mutable.ArrayBuffer.empty[Int]\n\
    \        val openCountMinMax = mutable.ArrayBuffer.empty[Int]\n        val closeCountMinMax\
    \ = mutable.ArrayBuffer.empty[Int]\n        val openCountMinMaxs = mutable.ArrayBuffer.empty[Int]\n\
    \        val closeCountMinMaxs = mutable.ArrayBuffer.empty[Int]\n        val openCountMinMaxMin\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closeCountMinMaxMin = mutable.ArrayBuffer.empty[Int]\n\
    \        val openCountMinMaxMins = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closeCountMinMaxMins = mutable.ArrayBuffer.empty[Int]\n        val openCountMinMaxMinMax\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closeCountMinMaxMinMax = mutable.ArrayBuffer.empty[Int]\n\
    \        val openCountMinMaxMinMaxs = mutable.ArrayBuffer.empty[Int]\n       \
    \ val closeCountMinMaxMinMaxs = mutable.ArrayBuffer.empty[Int]\n        val openCountMinMaxMinMaxMin\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpshm7nzq1.scala:47:38 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mopenCountMinMaxMinMaxMin\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e\
    [31m   |\e[0m                                      expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpshm7nzq1.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ArrayBuffer(string.length)\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpshm7nzq1.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpshm7nzq1.scala:17:19\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mopen\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpshm7nzq1.scala:18:20\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mclose\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpshm7nzq1.scala:19:24\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m "
  stdout: ''
  timestamp: 1659799292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").filter(_.nonEmpty).map(_.toInt)\n        val nesting\
    \ = brackets.foldLeft(0)((sum, current) => sum + current)\n        nesting ==\
    \ brackets.sum\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"]]\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$2(tmpa4mztm83.scala:14)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.isNested(tmpa4mztm83.scala:14)\n\
    \tat Problem$.main(tmpa4mztm83.scala:19)\n\tat Problem.main(tmpa4mztm83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        brackets += \"[\" \n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets.toList.contains(string)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfua25lx6.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n        val brackets = mutable.ArrayBuffer(string.length)\n     \
    \   brackets.update(0, string.length)\n        var openBrackets = 0\n        var\
    \ closeBrackets = 0\n        var openBracketsCount = 0\n        var closeBracketsCount\
    \ = 0\n        var openBracketsCountMax = 0\n        var closeBracketsCountMax\
    \ = 0\n        var openBracketsCountMin = 0\n        var closeBracketsCountMin\
    \ = 0\n        var openBracketsCountMaxMin = 0\n        var closeBracketsCountMaxMin\
    \ = 0\n        var openBracketsCountMinMax = 0\n        var closeBracketsCountMinMax\
    \ = 0\n        var openBracketsCountMaxMinMax = 0\n        var closeBracketsCountMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMax = 0\n        var closeBracketsCountMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMax = 0\n        var closeBracketsCountMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMax = 0\n        var closeBracketsCountMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMax = 0\n        var closeBracketsCountMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMax = 0\n        var closeBracketsCountMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMax = 0\n        var closeBracketsCountMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMax = 0\n        var closeBracketsCountMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMax = 0\n        var closeBracketsCountMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMax = 0\n        var closeBracketsCountMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMax = 0\n        var closeBracketsCountMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMax = 0\n        var closeBracketsCountMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMax = 0\n        var closeBracketsCountMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMax = 0\n        var closeBracketsCountMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMax = 0\n        var closeBracketsCountMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMax = 0\n        var closeBracketsCountMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMax = 0\n        var closeBracketsCountMaxMinMax\
    \ = 0\n        var openBracketsCountMinMax\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcusdzttk.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcusdzttk.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcloseBracketsCountMaxMinMax\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcloseBracketsCountMaxMinMax\
    \ is already defined as \e[33mvariable\e[0m \e[35mcloseBracketsCountMaxMinMax\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcusdzttk.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mvar\e[0m \e[36mopenBracketsCountMinMaxMax\e[0m = \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsCountMinMaxMax is already defined as \e[33mvariable\e\
    [0m \e[35mopenBracketsCountMinMaxMax\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcusdzttk.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mvar\e[0m \e[36mcloseBracketsCountMaxMinMax\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsCountMaxMinMax is already defined as \e[33mvariable\e\
    [0m \e[35mcloseBracketsCountMaxMinMax\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcusdzttk.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mvar\e[0m \e[36mopenBracketsCountMinMaxMax\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsCountMinMaxMax is already defined as \e[33mvariable\e\
    [0m \e[35mopenBracketsCountMinMaxMax\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overlo"
  stdout: ''
  timestamp: 1659799292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string.length)\n        var openBrackets = 0\n       \
    \ var closeBrackets = 0\n        var openBracketsCount = 0\n        var closeBracketsCount\
    \ = 0\n        var openBracketsCountMax = 0\n        var closeBracketsCountMax\
    \ = 0\n        var openBracketsCountMax2 = 0\n        var closeBracketsCountMax2\
    \ = 0\n        var openBracketsCountMax3 = 0\n        var closeBracketsCountMax3\
    \ = 0\n        var openBracketsCountMax4 = 0\n        var closeBracketsCountMax4\
    \ = 0\n        var openBracketsCountMax5 = 0\n        var closeBracketsCountMax5\
    \ = 0\n        var openBracketsCountMax6 = 0\n        var closeBracketsCountMax6\
    \ = 0\n        var openBracketsCountMax7 = 0\n        var closeBracketsCountMax7\
    \ = 0\n        var openBracketsCountMax8 = 0\n        var closeBracketsCountMax8\
    \ = 0\n        var openBracketsCountMax9 = 0\n        var closeBracketsCountMax9\
    \ = 0\n        var openBracketsCountMax10 = 0\n        var closeBracketsCountMax10\
    \ = 0\n        var openBracketsCountMax11 = 0\n        var closeBracketsCountMax11\
    \ = 0\n        var openBracketsCountMax12 = 0\n        var closeBracketsCountMax12\
    \ = 0\n        var openBracketsCountMax13 = 0\n        var closeBracketsCountMax13\
    \ = 0\n        var openBracketsCountMax14 = 0\n        var closeBracketsCountMax14\
    \ = 0\n        var openBracketsCountMax15 = 0\n        var closeBracketsCountMax15\
    \ = 0\n        var openBracketsCountMax16 = 0\n        var closeBracketsCountMax16\
    \ = 0\n        var openBracketsCountMax17 = 0\n        var closeBracketsCountMax17\
    \ = 0\n        var openBracketsCountMax18 = 0\n        var closeBracketsCountMax18\
    \ = 0\n        var openBracketsCountMax19 = 0\n        var closeBracketsCountMax19\
    \ = 0\n        var openBracketsCountMax20 = 0\n        var closeBracketsCountMax20\
    \ = 0\n        var openBracketsCountMax21 = 0\n        var closeBracketsCountMax21\
    \ = 0\n        var openBracketsCountMax22 = 0\n        var closeBracketsCountMax22\
    \ = 0\n        var openBracketsCountMax23 = 0\n        var closeBracketsCountMax23\
    \ = 0\n        var openBracketsCountMax24 = 0\n        var closeBracket\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6g_s09hb.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6g_s09hb.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ArrayBuffer(string.length)\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6g_s09hb.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val openBrackets = brackets.filter(x\
    \ => x.startsWith(\"[\")).toList\n        val closeBrackets = brackets.filter(x\
    \ => x.endsWith(\"]\")).toList\n        val openBracketsCount = openBrackets.size\n\
    \        val closeBracketsCount = closeBrackets.size\n        val openBracketsNestingCount\
    \ = openBrackets.filter(x => x.contains(\"[\")).size\n        val closeBracketsNestingCount\
    \ = closeBrackets.filter(x => x.contains(\"]\")).size\n        val openBracketsNestingNeededCount\
    \ = openBracketsCount - openBracketsNestingCount\n        val closeBracketsNestingNeededCount\
    \ = closeBracketsCount - closeBracketsNestingCount\n        val isNesting = openBracketsNestingNeededCount\
    \ > 0 && closeBracketsNestingNeededCount > 0\n        val isNestingValid = openBracketsNestingNeededCount\
    \ > 0 && closeBracketsNestingNeededCount > 0\n        val isNestingValid2 = openBracketsNestingNeededCount\
    \ > 0 && closeBracketsNestingNeededCount > 0\n        val isNestingValid3 = openBracketsNestingNeededCount\
    \ > 0 && closeBracketsNestingNeededCount > 0\n        val isNestingValid4 = openBracketsNestingNeededCount\
    \ > 0 && closeBracketsNestingNeededCount > 0\n        val isNestingValid5 = openBracketsNestingNeededCount\
    \ > 0 && closeBracketsNestingNeededCount > 0\n        val isNestingValid6 = openBracketsNestingNeededCount\
    \ > 0 && closeBracketsNestingNeededCount > 0\n        val isNestingValid7 = openBracketsNestingNeededCount\
    \ > 0 && closeBracketsNestingNeededCount > 0\n        val isNestingValid8 = openBracketsNestingNeededCount\
    \ > 0 && closeBracketsNestingNeededCount > 0\n        val isNestingValid9 = openBracketsNestingNeededCount\
    \ > 0 && closeBracketsNestingNeededCount > 0\n        val isNestingValid10 = openBracketsNesting\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_n80b6g6.scala:33:31 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36misNestingValid10\e[0m =\
    \ openBracketsNesting\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Not found: openBracketsNesting\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_n80b6g6.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val nesting = brackets.foldLeft(false)((nested,\
    \ current) => {\n            val open = current.split(\"\\\\[\").length\n    \
    \        val close = current.split(\"\\\\]\").length\n            if (open > close)\
    \ nested || false\n            else nested && open == close\n        })\n    \
    \    nesting\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6ctlkh4r.scala:24)\n\tat Problem.main(tmp6ctlkh4r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799295
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val nestings = brackets.map(_.split(\"\
    \\\\]\").filter(_.nonEmpty))\n        nestings.forall(nesting => nesting.forall(nesting\
    \ => nesting.nonEmpty))\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8g6zp0ya.scala:20)\n\tat Problem.main(tmp8g6zp0ya.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val bracketsNesting = mutable.ListBuffer[String]()\n\
    \        val bracketsNestingCount = mutable.ListBuffer[Int]()\n        val bracketsNestingCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsNestingCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsNestingCount = mutable.ListBuffer[Int]()\n        val bracketsNestingCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsNestingCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsNestingCount = mutable.ListBuffer[Int]()\n        val bracketsNestingCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsNestingCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsNestingCount = mutable.ListBuffer[Int]()\n        val bracketsNestingCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsNestingCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsNestingCount = mutable.ListBuffer[Int]()\n        val bracketsNestingCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsNestingCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsNestingCount = mutable.ListBuffer[Int]()\n        val bracketsNestingCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsNestingCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsNestingCount = mutable.ListBuffer[Int]()\n        val bracketsNestingCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsNestingCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsNestingCount = mutable.ListBuffer[Int]()\n        val bracketsNestingCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsNestingCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsNestingCount = mutable.ListBuffer[Int]()\n        val bracketsNestingCount\
    \ = mutable.ListBuffer[Int]()\n        val bracketsNestingCount = mutable.ListBuffer[Int]()\n\
    \        val bracketsNestingCount = mutable.ListBuffer[Int]()\n        val bracketsNesting\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvheamt25.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvheamt25.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbracketsNestingCount\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mbracketsNestingCount is already defined as \e[33mvalue\e[0m \e\
    [35mbracketsNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpvheamt25.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingCount\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mbracketsNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpvheamt25.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingCount\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mbracketsNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpvheamt25.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingCount\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingCount is already defined as \e[33mvalue\e["
  stdout: ''
  timestamp: 1659799295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]|\\\\{|\\\\}\")\n        val bracketsCount = brackets.length\n\
    \        val bracketsNestings = brackets.filter(x => x.contains(\"]\")).length\n\
    \        val bracketsNestingsInside = brackets.filter(x => x.contains(\"[\")).length\n\
    \        val bracketsNestingsInside2 = brackets.filter(x => x.contains(\"{\")).length\n\
    \        val bracketsNestingsInside3 = brackets.filter(x => x.contains(\"}\")).length\n\
    \        val bracketsNestingsInside4 = brackets.filter(x => x.contains(\"(\")).length\n\
    \        val bracketsNestingsInside5 = brackets.filter(x => x.contains(\")\")).length\n\
    \        val bracketsNestingsInside6 = brackets.filter(x => x.contains(\"{\")).length\n\
    \        val bracketsNestingsInside7 = brackets.filter(x => x.contains(\"}\")).length\n\
    \        val bracketsNestingsInside8 = brackets.filter(x => x.contains(\"(\")).length\n\
    \        val bracketsNestingsInside9 = brackets.filter(x => x.contains(\")\")).length\n\
    \        val bracketsNestingsInside10 = brackets.filter(x => x.contains(\"[\"\
    )).length\n        val bracketsNestingsInside11 = brackets.filter(x => x.contains(\"\
    ]\")).length\n        val bracketsNestingsInside12 = brackets.filter(x => x.contains(\"\
    {\")).length\n        val bracketsNestingsInside13 = brackets.filter(x => x.contains(\"\
    }\")).length\n        val bracketsNestingsInside14 = brackets.filter(x => x.contains(\"\
    (\")).length\n        val bracketsNestingsInside15 = brackets.filter(x => x.contains(\"\
    )\")).length\n        val bracketsNestingsInside16 = brackets.filter(x => x.contains(\"\
    [\")).length\n        val bracketsNestingsInside17 = brackets.filter(x => x.contains(\"\
    ]\")).length\n        val bracketsNestingsInside18 = brackets.filter(x => x.contains(\"\
    {\")).length\n        val bracketsNestingsInside19 = brackets.filter(x => x.contains(\"\
    }\")).length\n        val bracketsNestingsInside20 = brackets.filter(x => x.contains(\"\
    (\")).length\n        val bracketsNestingsInside21 = brackets.filter(x => x.contains(\"\
    ]\"))\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq6mwzqmy.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val openBrackets = brackets.filter(x => x.contains('['))\n\
    \        val closeBrackets = brackets.filter(x => x.contains(']'))\n        val\
    \ openBracketsCount = openBrackets.size\n        val closeBracketsCount = closeBrackets.size\n\
    \        val openBracketsNestings = openBrackets.filter(x => x.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(x => x.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(x => x.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(x => x.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(x => x.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(x => x.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(x => x.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(x => x.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(x => x.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(x => x.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(x => x.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(x => x.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(x => x.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(x => x.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(x => x.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(x => x.contains('[')).size\n\
    \        val openBracketsNestings = openBrackets.filter(x => x.contains(']')).size\n\
    \        val closeBracketsNestings = closeBrackets.filter(x => x.contains('[')).size\n\
    \        val openBracketsNestings = openBracket\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzul418f0.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestings\e[0m\
    \ = openBrackets.filter(\e[36mx\e[0m => x.contains(\e[31m']'\e[0m)).size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsNestings is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzul418f0.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestings\e\
    [0m = closeBrackets.filter(\e[36mx\e[0m => x.contains(\e[31m'['\e[0m)).size\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsNestings is already defined as \e[33mvalue\e\
    [0m \e[35mcloseBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzul418f0.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestings\e[0m\
    \ = openBrackets.filter(\e[36mx\e[0m => x.contains(\e[31m']'\e[0m)).size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsNestings is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzul418f0.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestings\e\
    [0m = closeBrackets.filter(\e[36mx\e[0m => x.contains(\e[31m'['\e[0m)).size\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsNestings is already"
  stdout: ''
  timestamp: 1659799297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val nestedBrackets = brackets.filter(x\
    \ => x.contains(\"[\")) \n        val nestedBracketsCount = nestedBrackets.length\n\
    \        val nestedBracketsNestings = nestedBrackets.filter(x => x.contains(\"\
    ]\")).length\n        val nestedBracketsNestings = nestedBracketsNestings.toInt\n\
    \        val nestedBracketsNestings = nestedBracketsNestings.toInt\n        val\
    \ nestedBracketsNestings = nestedBracketsNestings.toInt\n        val nestedBracketsNestings\
    \ = nestedBracketsNestings.toInt\n        val nestedBracketsNestings = nestedBracketsNestings.toInt\n\
    \        val nestedBracketsNestings = nestedBracketsNestings.toInt\n        val\
    \ nestedBracketsNestings = nestedBracketsNestings.toInt\n        val nestedBracketsNestings\
    \ = nestedBracketsNestings.toInt\n        val nestedBracketsNestings = nestedBracketsNestings.toInt\n\
    \        val nestedBracketsNestings = nestedBracketsNestings.toInt\n        val\
    \ nestedBracketsNestings = nestedBracketsNestings.toInt\n        val nestedBracketsNestings\
    \ = nestedBracketsNestings.toInt\n        val nestedBracketsNestings = nestedBracketsNestings.toInt\n\
    \        val nestedBracketsNestings = nestedBracketsNestings.toInt\n        val\
    \ nestedBracketsNestings = nestedBracketsNestings.toInt\n        val nestedBracketsNestings\
    \ = nestedBracketsNestings.toInt\n        val nestedBracketsNestings = nestedBracketsNestings.toInt\n\
    \        val nestedBracketsNestings = nestedBracketsNestings.toInt\n        val\
    \ nestedBracketsNestings = nestedBracketsNestings.toInt\n        val nestedBracketsNestings\
    \ = nestedBracketsNestings.toInt\n        val nestedBracketsNestings = nestedBracketsNestings.toInt\n\
    \        val nestedBrackets\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfjivd8sw.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfjivd8sw.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnestedBracketsNestings\e[0m = nestedBracketsNestings.toInt\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnestedBracketsNestings is already defined as \e[33mvalue\e\
    [0m \e[35mnestedBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfjivd8sw.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnestedBracketsNestings\e\
    [0m = nestedBracketsNestings.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnestedBracketsNestings is already defined as \e[33mvalue\e\
    [0m \e[35mnestedBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfjivd8sw.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnestedBracketsNestings\e\
    [0m = nestedBracketsNestings.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnestedBracketsNestings is already defined as \e[33mvalue\e\
    [0m \e[35mnestedBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfjivd8sw.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnestedBracketsNestings\e\
    [0m = nestedBracketsNestings.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnestedBracketsNestings is already defin"
  stdout: ''
  timestamp: 1659799296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val bracketsCount = mutable.ListBuffer[Int]()\n\
    \        val openBrackets = mutable.ListBuffer[String]()\n        val openBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBrackets = mutable.ListBuffer[String]()\n\
    \        val closeBracketsCount = mutable.ListBuffer[Int]()\n        val openBracketsNesting\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsNesting = mutable.ListBuffer[Int]()\n\
    \        val openBracketsNestingCount = mutable.ListBuffer[Int]()\n        val\
    \ closeBracketsNestingCount = mutable.ListBuffer[Int]()\n        val openBracketsNestingCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsNestingCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsNestingCount = mutable.ListBuffer[Int]()\n        val\
    \ closeBracketsNestingCount = mutable.ListBuffer[Int]()\n        val openBracketsNestingCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsNestingCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsNestingCount = mutable.ListBuffer[Int]()\n        val\
    \ closeBracketsNestingCount = mutable.ListBuffer[Int]()\n        val openBracketsNestingCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsNestingCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsNestingCount = mutable.ListBuffer[Int]()\n        val\
    \ closeBracketsNestingCount = mutable.ListBuffer[Int]()\n        val openBracketsNestingCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsNestingCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsNestingCount = mutable.ListBuffer[Int]()\n        val\
    \ closeBracketsNestingCount = mutable.ListBuffer[Int]()\n        val openBracketsNestingCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsNestingCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsNe\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpejlhoq5o.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpejlhoq5o.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopenBracketsNestingCount\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsNestingCount is already defined as \e[33mvalue\e\
    [0m \e[35mopenBracketsNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpejlhoq5o.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestingCount\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsNestingCount is already defined as \e[33mvalue\e\
    [0m \e[35mcloseBracketsNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpejlhoq5o.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestingCount\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsNestingCount is already defined as \e[33mvalue\e\
    [0m \e[35mopenBracketsNestingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpejlhoq5o.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestingCount\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1659799296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        brackets += \"[\" \n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets.toList.contains(string)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8zg1vh6m.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[').filter(_.nonEmpty).toList\n        val nestedBrackets =\
    \ brackets.filter(_.nonEmpty).map(_.split(']').filter(_.nonEmpty).toList)\n  \
    \      nestedBrackets.forall(nestedBrackets => brackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => nestedBrackets.forall(nestedBrackets\
    \ => nestedBrackets.forall(nestedBrackets => \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpblwc6i4k.scala:16:1721 -------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        nestedBrackets.forall(\e[36mnestedBrackets\e\
    [0m => brackets.forall(\e[36mnestedBrackets\e[0m => nestedBrackets.forall(\e[36mnestedBrackets\e\
    [0m => nestedBrackets.forall(\e[36mnestedBrackets\e[0m => nestedBrackets.forall(\e\
    [36mnestedBrackets\e[0m => nestedBrackets.forall(\e[36mnestedBrackets\e[0m =>\
    \ nestedBrackets.forall(\e[36mnestedBrackets\e[0m => nestedBrackets.forall(\e\
    [36mnestedBrackets\e[0m => nestedBrackets.forall(\e[36mnestedBrackets\e[0m =>\
    \ nestedBrackets.forall(\e[36mnestedBrackets\e[0m => nestedBrackets.forall(\e\
    [36mnestedBrackets\e[0m => nestedBrackets.forall(\e[36mnestedBrackets\e[0m =>\
    \ nestedBrackets.forall(\e[36mnestedBrackets\e[0m => nestedBrackets.forall(\e\
    [36mnestedBrackets\e[0m => nestedBrackets.forall(\e[36mnestedBrackets\e[0m =>\
    \ nestedBrackets.forall(\e[36mnestedBrackets\e[0m => nestedBrackets.forall(\e\
    [36mnestedBrackets\e[0m => nestedBrackets.forall(\e[36mnestedBrackets\e[0m =>\
    \ nestedBrackets.forall(\e[36mnestedBrackets\e[0m => nestedBrackets.forall(\e\
    [36mnestedBrackets\e[0m => nestedBrackets.forall(\e[36mnestedBrackets\e[0m =>\
    \ nestedBrackets.forall(\e[36mnestedBrackets\e[0m => nestedBrackets.forall(\e\
    [36mnestedBrackets\e[0m => nestedBrackets.forall(\e[36mnestedBrackets\e[0m =>\
    \ nestedBrackets.forall(\e[36mnestedBrackets\e[0m => nestedBrackets.forall(\e\
    [36mnestedBrackets\e[0m => nestedBrackets.forall(\e[36mnestedBrackets\e[0m =>\
    \ nestedBrackets.forall(\e[36mnestedBrackets\e[0m => nestedBrackets.forall(\e\
    [36mnestedBrackets\e[0m => nestedBrackets.forall(\e[36mnestedBrackets\e[0m =>\
    \ nestedBrackets.forall(\e[36mnestedBrackets\e[0m => nestedBrackets.forall(\e\
    [36mnestedBrackets\e[0m => nestedBrackets.forall(\e[36mnestedBrackets\e[0m =>\
    \ nestedBrackets.forall(\e[36mnestedBrackets\e[0m => nestedBrackets.forall(\e\
    [36mnestedBrackets\e[0m => nestedBrackets.forall(\e[36mnestedBrackets\e[0m =>\
    \ nestedBrackets.forall(\e[36mnestedBrackets\e[0m => nestedBrackets.forall(\e\
    [36mnestedBrackets\e[0m => nestedBrackets.forall(\e[36mnestedBrackets\e[0m =>\
    \ nestedBrackets.forall(\e"
  stdout: ''
  timestamp: 1659799299
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val bracketsCount = brackets.length\n\
    \        val openBrackets = brackets.filter(_.startsWith(\"[\")).length\n    \
    \    val closeBrackets = brackets.filter(_.endsWith(\"]\")).length\n        val\
    \ openBracketsCount = openBrackets\n        val closeBracketsCount = closeBrackets\n\
    \        val isNested = openBracketsCount == closeBracketsCount && openBracketsCount\
    \ > 0\n        return isNested\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_uexpo89.scala:24)\n\tat Problem.main(tmp_uexpo89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799299
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val openingBrackets = brackets.filter(x => x.equals(\"[\"))\n       \
    \ val closingBrackets = brackets.filter(x => x.equals(\"]\"))\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsNestings = openingBrackets.map(x => if (x.equals(\"\
    [\")) 1 else 0)\n        val closingBracketsNestings = closingBrackets.map(x =>\
    \ if (x.equals(\"]\") || x.equals(\"[\")) 1 else 0)\n        val openingBracketsNestingCount\
    \ = openingBracketsNestings.sum\n        val closingBracketsNestingCount = closingBracketsNestings.sum\n\
    \        val openingBracketsNestingCountIsOne = openingBracketsNestingCount ==\
    \ 1\n        val closingBracketsNestingCountIsOne = closingBracketsNestingCount\
    \ == 1\n        val openingBracketsNestingCountIsZero = openingBracketsNestingCount\
    \ == 0\n        val closingBracketsNestingCountIsZero = closingBracketsNestingCount\
    \ == 0\n        val openingBracketsNestingCountIsEqualToClosingBracketsNestingCount\
    \ = openingBracketsNestingCount == closingBracketsNestingCount\n        val openingBracketsNestingCountIsEqualToClosingBracketsNestingCountIsOne\
    \ = openingBracketsNestingCountIsOne && closingBracketsNestingCountIsOne\n   \
    \     val openingBracketsNestingCountIsEqualToClosingBracketsNestingCountIsZero\
    \ = openingBracketsNestingCountIsZero && closingBracketsNestingCountIsZero\n \
    \       val openingBracketsNestingCountIsEqualToClosingBracketsNestingCountIsEqualToClosingBracketsNestingCount\
    \ = openingBracketsNestingCountIsEqualToClosingBracketsNestingCountIsOne && closingBracketsNestingCountIsEqualToClosingBracketsNestingCountIsOne\n\
    \        val openingBracket\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjlo8e_y_.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjlo8e_y_.scala:31:186\
    \ -----------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mopeningBracketsNestingCountIsEqualToClosingBracketsNestingCountIsEqualToClosingBracketsNestingCount\e\
    [0m = openingBracketsNestingCountIsEqualToClosingBracketsNestingCountIsOne &&\
    \ closingBracketsNestingCountIsEqualToClosingBracketsNestingCountIsOne\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: closingBracketsNestingCountIsEqualToClosingBracketsNestingCountIsOne\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjlo8e_y_.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val bracketsCount = brackets.length\n        val openBracketsCount =\
    \ brackets.filter(_.startsWith(\"[\")).length\n        val closeBracketsCount\
    \ = brackets.filter(_.startsWith(\"]\")).length\n        val openBracketsCount2\
    \ = brackets.filter(_.startsWith(\"[\")).filter(_.startsWith(\"[\")).length\n\
    \        val closeBracketsCount2 = brackets.filter(_.startsWith(\"]\")).filter(_.startsWith(\"\
    ]\")).length\n        val openBracketsCount3 = brackets.filter(_.startsWith(\"\
    [\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"[\")).length\n       \
    \ val closeBracketsCount3 = brackets.filter(_.startsWith(\"]\")).filter(_.startsWith(\"\
    ]\")).filter(_.startsWith(\"]\")).length\n        val openBracketsCount4 = brackets.filter(_.startsWith(\"\
    [\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"\
    [\")).length\n        val closeBracketsCount4 = brackets.filter(_.startsWith(\"\
    ]\")).filter(_.startsWith(\"]\")).filter(_.startsWith(\"]\")).filter(_.startsWith(\"\
    ]\")).length\n        val openBracketsCount5 = brackets.filter(_.startsWith(\"\
    [\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"\
    [\")).filter(_.startsWith(\"[\")).length\n        val closeBracketsCount5 = brackets.filter(_.startsWith(\"\
    ]\")).filter(_.startsWith(\"]\")).filter(_.startsWith(\"]\")).filter(_.startsWith(\"\
    ]\")).filter(_.startsWith(\"]\")).length\n        val openBracketsCount6 = brackets.filter(_.startsWith(\"\
    [\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"\
    [\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"[\")).length\n       \
    \ val closeBracketsCount6 = brackets.filter(_.startsWith(\"]\")).filter(_.startsWith(\"\
    ]\")).filter(_.startsWith(\"]\")).filter(_.startsWith(\"]\")).filter(_.startsWith(\"\
    ]\")).filter(_.startsWith(\"]\")).length\n        val openBracketsCount7 = brackets.filter(_.startsWith(\"\
    [\")).filter(_.start\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjxes1p7y.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjxes1p7y.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjxes1p7y.scala:29:77\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBracketsCount7\e[0m = brackets.filter(_.startsWith(\e[31m\"[\"\e[0m)).filter(_.start\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m       value start is not a member\
    \ of String - did you mean _$44.charAt?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpjxes1p7y.scala:30:5 ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val bracketsCount = brackets.size\n\
    \        val bracketsNestings = brackets.filter(x => x.contains(\"[\")) \n   \
    \     val bracketsNestingsCount = bracketsNestings.size\n        val bracketsNestingsNestings\
    \ = bracketsNestings.filter(x => x.contains(\"[\")) \n        val bracketsNestingsNestingsCount\
    \ = bracketsNestingsNestings.size\n        val bracketsNestingsNestingsNestingsCount\
    \ = bracketsNestingsNestings.filter(x => x.contains(\"[\")) \n        val bracketsNestingsNestingsNestingsCountCount\
    \ = bracketsNestingsNestingsNestings.filter(x => x.contains(\"[\")) \n       \
    \ val bracketsNestingsNestingsNestingsCountCountCount = bracketsNestingsNestingsNestings.filter(x\
    \ => x.contains(\"[\")) \n        val bracketsNestingsNestingsNestingsCountCountCountCount\
    \ = bracketsNestingsNestingsNestings.filter(x => x.contains(\"[\")) \n       \
    \ val bracketsNestingsNestingsNestingsCountCountCountCountCount = bracketsNestingsNestings.filter(x\
    \ => x.contains(\"[\")) \n        val bracketsNestingsNestingsNestingsCountCountCountCountCountCount\
    \ = bracketsNestingsNestings.filter(x => x.contains(\"[\")) \n        val bracketsNestingsNestingsNestingsCountCountCountCountCountCountCount\
    \ = bracketsNestingsNestings.filter(x => x.contains(\"[\")) \n        val bracketsNestingsNestingsNestingsCountCountCountCountCountCountCountCount\
    \ = bracketsNestingsNestings.filter(x => x.contains(\"[\")) \n        val bracketsNestingsNestingsNestingsCountCountCountCountCountCountCountCountCount\
    \ = bracketsNestingsNestings.filter(x => x.contains(\"[\")) \n        val bracketsNestingsNestingsNestingsCountCountCountCountCountCountCountCountCountCountCount\
    \ = bracketsNestingsNestings.filter(x => x.contains(\"[\")) \n        val bracketsNestingsNestingsNestingsCountCountCountCountCountCountCountCountCountCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpanvvh7_v.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpanvvh7_v.scala:21:57\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mbracketsNestingsNestingsNestingsCountCount\e[0m = bracketsNestingsNestingsNestings.filter(\e\
    [36mx\e[0m => x.contains(\e[31m\"[\"\e[0m)) \n\e[31m\e[31m   |\e[0m          \
    \                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: bracketsNestingsNestingsNestings\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpanvvh7_v.scala:22:62\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mbracketsNestingsNestingsNestingsCountCountCount\e[0m = bracketsNestingsNestingsNestings.filter(\e\
    [36mx\e[0m => x.contains(\e[31m\"[\"\e[0m)) \n\e[31m\e[31m   |\e[0m          \
    \                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: bracketsNestingsNestingsNestings\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpanvvh7_v.scala:23:67\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mbracketsNestingsNestingsNestingsCountCountCountCount\e[0m = bracketsNestingsNestingsNestings.filter(\e\
    [36mx\e[0m => x.contains(\e[31m\"[\"\e[0m)) \n\e[31m\e[31m   |\e[0m          \
    \                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: bracketsNestingsNestingsNestings\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpanvvh7_v.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     "
  stdout: ''
  timestamp: 1659799302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        brackets += \"[\" \n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n        brackets += \"}\"\n        brackets += \"[\"\n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        brackets\
    \ += \"{\"\n\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvjqof0h5.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val bracketsCount = brackets.length\n\
    \        val bracketsNestings = brackets.map(x => x.contains(\"[\") || x.contains(\"\
    ]\"))\n        val bracketsNestingsCount = bracketsNestings.count(_ == true)\n\
    \        val bracketsNestingsCountMinusOne = bracketsNestingsCount - 1\n     \
    \   val bracketsNestingsCountMinusTwo = bracketsNestingsCount - 2\n        val\
    \ bracketsNestingsCountMinusThree = bracketsNestingsCount - 3\n        val bracketsNestingsCountMinusFour\
    \ = bracketsNestingsCount - 4\n        val bracketsNestingsCountMinusFive = bracketsNestingsCount\
    \ - 5\n        val bracketsNestingsCountMinusSix = bracketsNestingsCount - 6\n\
    \        val bracketsNestingsCountMinusSeven = bracketsNestingsCount - 7\n   \
    \     val bracketsNestingsCountMinusEight = bracketsNestingsCount - 8\n      \
    \  val bracketsNestingsCountMinusNine = bracketsNestingsCount - 9\n        val\
    \ bracketsNestingsCountMinusTen = bracketsNestingsCount - 10\n        val bracketsNestingsCountMinusEleven\
    \ = bracketsNestingsCount - 11\n        val bracketsNestingsCountMinusTwelve =\
    \ bracketsNestingsCount - 12\n        val bracketsNestingsCountMinusThirteen =\
    \ bracketsNestingsCount - 13\n        val bracketsNestingsCountMinusFourteen =\
    \ bracketsNestingsCount - 14\n        val bracketsNestingsCountMinusFifteen =\
    \ bracketsNestingsCount - 15\n        val bracketsNestingsCountMinusSixteen =\
    \ bracketsNestingsCount - 16\n        val bracketsNestingsCountMinusSeventeen\
    \ = bracketsNestingsCount - 17\n        val bracketsNestingsCountMinusEighteen\
    \ = bracketsNestingsCount - 18\n        val bracketsNestingsCountMinusNineteen\
    \ = bracketsNestingsCount - 19\n        val bracketsNestingsCountMinusTwenty =\
    \ bracketsNestingsCount - 20\n        val bracketsNestingsCountMin\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsgahoy1i.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpsgahoy1i.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val openBrackets = brackets.filter(_.contains(']'))\n\
    \        val closeBrackets = brackets.filter(_.contains('['))\n        val openBracketsCount\
    \ = openBrackets.count\n        val closeBracketsCount = closeBrackets.count\n\
    \        val openBracketsNestings = openBrackets.filter(_.contains(']')).length\n\
    \        val closeBracketsNestings = closeBrackets.filter(_.contains('[')).length\n\
    \        val openBracketsNestings = openBracketsNestings + closeBracketsNestings\n\
    \        val closeBracketsNestings = closeBracketsNestings + openBracketsNestings\n\
    \        val openBracketsNestings = openBracketsNestings + closeBracketsNestings\n\
    \        val closeBracketsNestings = closeBracketsNestings + openBracketsNestings\n\
    \        val openBracketsNestings = openBracketsNestings + closeBracketsNestings\n\
    \        val closeBracketsNestings = closeBracketsNestings + openBracketsNestings\n\
    \        val openBracketsNestings = openBracketsNestings + closeBracketsNestings\n\
    \        val closeBracketsNestings = closeBracketsNestings + openBracketsNestings\n\
    \        val openBracketsNestings = openBracketsNestings + closeBracketsNestings\n\
    \        val closeBracketsNestings = closeBracketsNestings + openBracketsNestings\n\
    \        val openBracketsNestings = openBracketsNestings + closeBracketsNestings\n\
    \        val closeBracketsNestings = closeBracketsNestings + openBracketsNestings\n\
    \        val openBracketsNestings = openBracketsNestings + closeBracketsNestings\n\
    \        val closeBracketsNestings = closeBracketsNestings + openBracketsNestings\n\
    \        val openBracketsNestings = openBracketsNestings + closeBracketsNestings\n\
    \        val closeBracketsNestings = closeBracket\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbyywfhv2.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestings\e[0m\
    \ = openBracketsNestings + closeBracketsNestings\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mopenBracketsNestings is already defined as \e[33mvalue\e[0m \e\
    [35mopenBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbyywfhv2.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestings\e\
    [0m = closeBracketsNestings + openBracketsNestings\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsNestings is already defined as \e[33mvalue\e\
    [0m \e[35mcloseBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbyywfhv2.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestings\e[0m\
    \ = openBracketsNestings + closeBracketsNestings\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mopenBracketsNestings is already defined as \e[33mvalue\e[0m \e\
    [35mopenBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbyywfhv2.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestings\e\
    [0m = closeBracketsNestings + openBracketsNestings\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsNestings is already defined as \e[33mvalue\e\
    [0m \e[35mcloseBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote th"
  stdout: ''
  timestamp: 1659799304
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val openBrackets = brackets.filter(_.contains(\"[\")).length\n      \
    \  val closeBrackets = brackets.filter(_.contains(\"]\")).length\n        val\
    \ isNested = openBrackets == closeBrackets\n        return isNested\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdx60ae85.scala:23)\n\tat Problem.main(tmpdx60ae85.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val openings = mutable.ListBuffer[String]()\n\
    \        val closings = mutable.ListBuffer[String]()\n        val openings_count\
    \ = mutable.ListBuffer[Int]()\n        val closings_count = mutable.ListBuffer[Int]()\n\
    \        val openings_count_max = mutable.ListBuffer[Int]()\n        val closings_count_max\
    \ = mutable.ListBuffer[Int]()\n        val openings_count_min = mutable.ListBuffer[Int]()\n\
    \        val closings_count_min = mutable.ListBuffer[Int]()\n        val openings_count_min\
    \ = mutable.ListBuffer[Int]()\n        val closings_count_min = mutable.ListBuffer[Int]()\n\
    \        val openings_count_max = mutable.ListBuffer[Int]()\n        val closings_count_max\
    \ = mutable.ListBuffer[Int]()\n        val openings_count_min = mutable.ListBuffer[Int]()\n\
    \        val closings_count_min = mutable.ListBuffer[Int]()\n        val openings_count_max\
    \ = mutable.ListBuffer[Int]()\n        val closings_count_max = mutable.ListBuffer[Int]()\n\
    \        val openings_count_min = mutable.ListBuffer[Int]()\n        val closings_count_min\
    \ = mutable.ListBuffer[Int]()\n        val openings_count_max = mutable.ListBuffer[Int]()\n\
    \        val closings_count_max = mutable.ListBuffer[Int]()\n        val openings_count_min\
    \ = mutable.ListBuffer[Int]()\n        val closings_count_min = mutable.ListBuffer[Int]()\n\
    \        val openings_count_max = mutable.ListBuffer[Int]()\n        val closings_count_max\
    \ = mutable.ListBuffer[Int]()\n        val openings_count_min = mutable.ListBuffer[Int]()\n\
    \        val closings_count_min = mutable.ListBuffer[Int]()\n        val openings_count_max\
    \ = mutable.ListBuffer[Int]()\n        val closings_count_max = mutable.ListBuffer[Int]()\n\
    \        val openings_count_min = mutable.ListBuffer[Int]()\n        val closings_count_min\
    \ = mutable.ListBuffer[Int]()\n        val openings_count_max = mutable.ListBuffer[Int]()\n\
    \        val closings_count_max = mutable.ListBuffer[Int]()\n        val openings_count_min\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphsedeh4z.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphsedeh4z.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mopenings_count_min\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenings_count_min is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenings_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphsedeh4z.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mclosings_count_min\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosings_count_min is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosings_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphsedeh4z.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mopenings_count_max\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenings_count_max is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenings_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphsedeh4z.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mclosings_count_max\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosings_count_max is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosings_cou"
  stdout: ''
  timestamp: 1659799258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string)\n        var openBrackets = 0\n        var closeBrackets\
    \ = 0\n        var openBracketsCount = 0\n        var closeBracketsCount = 0\n\
    \        while(openBracketsCount < brackets.length && closeBracketsCount < brackets.length)\
    \ {\n            val openBracket = brackets(openBracketsCount)\n            val\
    \ closeBracket = brackets(closeBracketsCount)\n            if(openBracket == '[')\
    \ {\n                openBracketsCount += 1\n                closeBracketsCount\
    \ += 1\n            } else if(openBracket == '}') {\n                openBracketsCount\
    \ += 1\n                closeBracketsCount += 1\n            } else if(closeBracket\
    \ == '[') {\n                openBracketsCount += 1\n            } else if(closeBracket\
    \ == '}') {\n                closeBracketsCount += 1\n            } else if(openBracket\
    \ == '[' && closeBracket == '}') {\n                openBracketsCount += 1\n \
    \               closeBracketsCount += 1\n            } else if(openBracket ==\
    \ '{' && closeBracket == '}') {\n                openBracketsCount += 1\n    \
    \        } else if(openBracket == '[' && closeBracket == '[') {\n            \
    \    openBracketsCount += 1\n                closeBracketsCount += 1\n       \
    \     } else if(openBracket == '{' && closeBracket == '[') {\n               \
    \ openBracketsCount += 1\n            } else if(openBracket == '[' && closeBracket\
    \ == '{') {\n                openBracketsCount += 1\n            } else if(openBracket\
    \ == '{' && closeBracket == '{') {\n                closeBracketsCount += 1\n\
    \            } else if(openBracket == '[' && closeBracket == '[' && closeBracket\
    \ == '}') {\n                openBracketsCount += 1\n                closeBracketsCount\
    \ += 1\n            } else if(openBracket == '{' && closeBracket == '[' && closeBracket\
    \ == '}') {\n                openBracketsCount += 1\n                closeBracketsCount\
    \ += 1\n            } else if(openBracket == '[' && closeBracket == '[' && closeBracket\
    \ == '[' && closeBracket == '}') {\n                openBracketsCount += 1\n \
    \               closeBracketsCount += 1\n            } else if(openBracket ==\
    \ '{' && closeBracket == '[' && closeBracket == '[' && closeBracket == '}') {\n\
    \                openBracketsCount += 1\n                closeBracketsCount +=\
    \ 1\n            } else if(openBracket == '[' && closeBracket == '['\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppbzjcfuw.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppbzjcfuw.scala:78:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m78 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmppbzjcfuw.scala:14:23 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ArrayBuffer(string)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmppbzjcfuw.scala:77:1 ---------------------\e[0m\e\
    [0m\n\e[31m77 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:  \
    \  Unit\n\e[31m   |\e[0m Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmppbzjcfuw.scala:60:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m60 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val bracketsNestings\
    \ = brackets.map(_.split(\"\\\\]\")).map(_.filter(_.nonEmpty))\n        val bracketsNestingCount\
    \ = bracketsNestings.map(_.size).sum\n        val bracketsNestingCountMinusOne\
    \ = bracketsNestingCount - 1\n        val bracketsNestingCountMinusTwo = bracketsNestingCount\
    \ - 2\n        val bracketsNestingCountMinusThree = bracketsNestingCount - 3\n\
    \        val bracketsNestingCountMinusFour = bracketsNestingCount - 4\n      \
    \  val bracketsNestingCountMinusFive = bracketsNestingCount - 5\n        val bracketsNestingCountMinusSix\
    \ = bracketsNestingCount - 6\n        val bracketsNestingCountMinusSeven = bracketsNestingCount\
    \ - 7\n        val bracketsNestingCountMinusEight = bracketsNestingCount - 8\n\
    \        val bracketsNestingCountMinusNine = bracketsNestingCount - 9\n      \
    \  val bracketsNestingCountMinusTen = bracketsNestingCount - 10\n        val bracketsNestingCountMinusEleven\
    \ = bracketsNestingCount - 11\n        val bracketsNestingCountMinusTwelve = bracketsNestingCount\
    \ - 12\n        val bracketsNestingCountMinusThirteen = bracketsNestingCount -\
    \ 13\n        val bracketsNestingCountMinusFourteen = bracketsNestingCount - 14\n\
    \        val bracketsNestingCountMinusFifteen = bracketsNestingCount - 15\n  \
    \      val bracketsNestingCountMinusSixteen = bracketsNestingCount - 16\n    \
    \    val bracketsNestingCountMinusSeventeen = bracketsNestingCount - 17\n    \
    \    val bracketsNestingCountMinusEighteen = bracketsNestingCount - 18\n     \
    \   val bracketsNestingCountMinusNineteen = bracketsNestingCount - 19\n      \
    \  val bracketsNestingCountMinusTwenty = bracketsNestingCount - 20\n        val\
    \ bracketsNestingCountMinusThir\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps2naogkf.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmps2naogkf.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Your\
    \ code here\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnmdy48t8.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36misNested\e\
    [0m(\e[36mstring\e[0m : \e[35mString\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                              ^\e[0m\n\e[31m   |\e\
    [0m                                              Found:    Unit\n\e[31m   |\e\
    [0m                                              Required: Boolean\n\e[31m14 |\e\
    [0m        \e[34m// Your code here\e[0m\n\e[31m15 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val openBrackets = mutable.ListBuffer[String]()\n\
    \        val closeBrackets = mutable.ListBuffer[String]()\n        val openBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCounts = mutable.ListBuffer[Int]()\n        val closeBracketsCounts\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCount = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCount = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCounts = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCounts = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:18:33\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsCount\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error"
  stdout: ''
  timestamp: 1659799248
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val openBrackets = brackets.filter(x => x != \"[\").length\n        val\
    \ closeBrackets = brackets.filter(x => x != \"]\").length\n        val openBracketsCount\
    \ = openBrackets\n        val closeBracketsCount = closeBrackets\n        val\
    \ isNested = openBracketsCount == closeBracketsCount && openBracketsCount > 0\n\
    \        return isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3s7vw_8g.scala:29)\n\tat Problem.main(tmp3s7vw_8g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer.empty[String]\n        brackets += \"[\" \n        brackets\
    \ += \"]\"\n        val bracketsString = brackets.mkString\n        val bracketsArray\
    \ = bracketsString.toCharArray\n        val bracketsArrayLength = bracketsArray.length\n\
    \        val bracketsArrayIterator = bracketsArray.iterator\n        val bracketsArrayIteratorNext\
    \ = bracketsArrayIterator.next\n        val bracketsArrayIteratorNextNext = bracketsArrayIteratorNext.next\n\
    \        val bracketsArrayIteratorNextNextNext = bracketsArrayIteratorNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNext = bracketsArrayIteratorNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNext = bracketsArrayIteratorNextNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNext = bracketsArrayIteratorNextNextNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNext = bracketsArrayIteratorNextNextNextNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNextNext = bracketsArrayIteratorNextNextNextNextNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNextNextNext = bracketsArrayIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNext = bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgdweoehq.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mbracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mbracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgdweoehq.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mbracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mbracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpgdweoehq.scala:14:23 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic"
  stdout: ''
  timestamp: 1659799303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val openBrackets = mutable.ListBuffer[String]()\n\
    \        val closeBrackets = mutable.ListBuffer[String]()\n        val openBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCounts = mutable.ListBuffer[Int]()\n        val closeBracketsCounts\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCount = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCount = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCounts = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCounts = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCountPairsCount = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairsCounts = mutable.ListBuffer[(Int,\
    \ Int)]()\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf6ph54t4.scala:18:33\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsCount\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error"
  stdout: ''
  timestamp: 1659799248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        // Write\
    \ your code here\n        val stack = mutable.Stack[String]()\n        val brackets\
    \ = mutable.HashSet[String]()\n        val bracketsCount = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCounts = mutable.HashMap[String, Int]()\n      \
    \  val bracketsCountOf = mutable.HashMap[String, Int]()\n        val bracketsCountOfs\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCountOfsOf = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCountOfsOfs = mutable.HashMap[String, Int]()\n \
    \       val bracketsCountOfsOfsOf = mutable.HashMap[String, Int]()\n        val\
    \ bracketsCountOfsOfsOfs = mutable.HashMap[String, Int]()\n        val bracketsCountOfsOfsOfsOf\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCountOfsOfsOfsOfs = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCountOfsOfsOfsOf = mutable.HashMap[String, Int]()\n\
    \        val bracketsCountOfsOfsOfsOfs = mutable.HashMap[String, Int]()\n    \
    \    val bracketsCountOfsOfsOfsOfsOf = mutable.HashMap[String, Int]()\n      \
    \  val bracketsCountOfsOfsOfsOfsOfs = mutable.HashMap[String, Int]()\n       \
    \ val bracketsCountOfsOfsOfsOfsOf = mutable.HashMap[String, Int]()\n        val\
    \ bracketsCountOfsOfsOfsOfsOfs = mutable.HashMap[String, Int]()\n        val bracketsCountOfsOfsOfsOfsOf\
    \ = mutable.HashMap[String, Int]()\n        val bracketsCountOfsOfsOfsOfsOfs =\
    \ mutable.HashMap[String, Int]()\n        val bracketsCountOfsOfsOfsOfsOf = mutable.HashMap[String,\
    \ Int]()\n        val bracketsCountOfsOfsOfsOfsOfs = mutable.HashMap[String, Int]()\n\
    \        val bracketsCountOfsOfsOfsOfsOf = mutable.HashMap[String, Int]()\n  \
    \      val bracketsCountOfsOfsOfsOfsOfs = mutable.HashMap[String, Int]()\n   \
    \     val bracketsCountOfsOfsOfsOfsOf = mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl0v2obvh.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpl0v2obvh.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mbracketsCountOfsOfsOfsOf\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCountOfsOfsOfsOf is already defined as \e[33mvalue\e\
    [0m \e[35mbracketsCountOfsOfsOfsOf\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl0v2obvh.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mbracketsCountOfsOfsOfsOfs\e\
    [0m = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mbracketsCountOfsOfsOfsOfs is already defined as \e[33mvalue\e[0m\
    \ \e[35mbracketsCountOfsOfsOfsOfs\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl0v2obvh.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mbracketsCountOfsOfsOfsOfsOf\e\
    [0m = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsCountOfsOfsOfsOfsOf is already defined as \e[33mvalue\e\
    [0m \e[35mbracketsCountOfsOfsOfsOfsOf\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl0v2obvh.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mbracketsCountOfsOfsOfsOfsOfs\e\
    [0m = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]("
  stdout: ''
  timestamp: 1659799303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val stack = mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until string.length) {\n            if (string(i) == '[')\
    \ {\n                brackets += string(i)\n                stack += string(i)\n\
    \            } else if (string(i) == ']') {\n                if (brackets.nonEmpty\
    \ && brackets.last.equals('[')) {\n                    brackets.pop\n        \
    \            stack.pop\n                } else {\n                    return false\n\
    \                }\n            }\n        }\n        if (stack.nonEmpty && stack.last.equals('['))\
    \ {\n            stack.pop\n        }\n        stack.nonEmpty\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0w3bw61h.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0w3bw61h.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").filter(_.nonEmpty)\n        val bracketsCount\
    \ = brackets.length\n        val openingBrackets = brackets.filter(_.startsWith(\"\
    [\"))\n        val closingBrackets = brackets.filter(_.endsWith(\"]\"))\n    \
    \    val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        val openingBracketsCount2 = openingBrackets.filter(_.startsWith(\"\
    [\")).count\n        val closingBracketsCount2 = closingBrackets.filter(_.endsWith(\"\
    ]\")).count\n        val openingBracketsCount3 = openingBrackets.filter(_.startsWith(\"\
    [\")).filter(_.startsWith(\"[\")).count\n        val closingBracketsCount3 = closingBrackets.filter(_.endsWith(\"\
    ]\")).filter(_.endsWith(\"]\")).count\n        val openingBracketsCount4 = openingBrackets.filter(_.startsWith(\"\
    [\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"[\")).count\n        val\
    \ closingBracketsCount4 = closingBrackets.filter(_.endsWith(\"]\")).filter(_.endsWith(\"\
    ]\")).filter(_.endsWith(\"]\")).count\n        val openingBracketsCount5 = openingBrackets.filter(_.startsWith(\"\
    [\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"\
    [\")).filter(_.startsWith(\"[\")).count\n        val closingBracketsCount5 = closingBrackets.filter(_.endsWith(\"\
    ]\")).filter(_.endsWith(\"]\")).filter(_.endsWith(\"]\")).filter(_.endsWith(\"\
    ]\")).filter(_.endsWith(\"]\")).count\n        val openingBracketsCount6 = openingBrackets.filter(_.startsWith(\"\
    [\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"\
    [\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"\
    [\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"\
    [\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"\
    [\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"[\")).filter(_.startsWith(\"\
    [\"))\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps7slrt1k.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\").toList\n        val stack = mutable.Stack[String]()\n\
    \        val openBrackets = mutable.Set[String]()\n        val closeBrackets =\
    \ mutable.Set[String]()\n        val openBracketCount = mutable.Map[String, Int]()\n\
    \        val closeBracketCount = mutable.Map[String, Int]()\n        val openBracketCounts\
    \ = mutable.Map[String, Int]()\n        val closeBracketCounts = mutable.Map[String,\
    \ Int]()\n        val openBracketCountTotal = mutable.Map[String, Int]()\n   \
    \     val closeBracketCountTotal = mutable.Map[String, Int]()\n        val openBracketCountTotals\
    \ = mutable.Map[String, Int]()\n        val closeBracketCountTotals = mutable.Map[String,\
    \ Int]()\n        val openBracketCountTotal = mutable.Map[String, Int]()\n   \
    \     val closeBracketCountTotal = mutable.Map[String, Int]()\n        val openBracketCountTotals\
    \ = mutable.Map[String, Int]()\n        val closeBracketCountTotals = mutable.Map[String,\
    \ Int]()\n        val openBracketCountTotal = mutable.Map[String, Int]()\n   \
    \     val closeBracketCountTotal = mutable.Map[String, Int]()\n        val openBracketCountTotals\
    \ = mutable.Map[String, Int]()\n        val closeBracketCountTotals = mutable.Map[String,\
    \ Int]()\n        val openBracketCountTotal = mutable.Map[String, Int]()\n   \
    \     val closeBracketCountTotal = mutable.Map[String, Int]()\n        val openBracketCountTotals\
    \ = mutable.Map[String, Int]()\n        val closeBracketCountTotals = mutable.Map[String,\
    \ Int]()\n        val openBracketCountTotal = mutable.Map[String, Int]()\n   \
    \     val closeBracketCountTotal = mutable.Map[String, Int]()\n        val openBracketCountTotals\
    \ = mutable.Map[String, Int]()\n        val closeBracketCountTotals = mutable.Map[String,\
    \ Int]()\n        val openBracketCountTotal = mutable.Map[String, Int]()\n   \
    \     val closeBracketCountTotal = mutable.Map[String, Int]()\n        val openBracketCountTotals\
    \ = mutable.Map[String, Int]()\n        val closeBracketCountTotals = mutable.Map[String,\
    \ Int]()\n        val openBracketCountTotal = mutable.Map[String, Int]()\n   \
    \     \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2milsxmp.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mopenBracketCountTotal\e\
    [0m = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mopenBracketCountTotal is already defined as \e[33mvalue\e[0m \e[35mopenBracketCountTotal\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2milsxmp.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketCountTotal\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketCountTotal is already defined as \e[33mvalue\e\
    [0m \e[35mcloseBracketCountTotal\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2milsxmp.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mopenBracketCountTotals\e\
    [0m = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mopenBracketCountTotals is already defined as \e[33mvalue\e[0m \e[35mopenBracketCountTotals\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2milsxmp.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketCountTotals\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketCountTotals is already defined as \e[33mvalue\e\
    [0m \e[35mcloseBracketCountTotals\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the"
  stdout: ''
  timestamp: 1659799305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val openBrackets = mutable.ListBuffer[String]()\n\
    \        val closeBrackets = mutable.ListBuffer[String]()\n        val openBracketCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketCounts = mutable.ListBuffer[Int]()\n        val closeBracketCounts\
    \ = mutable.ListBuffer[Int]()\n        val openBracketCountMax = mutable.ListBuffer[Int]()\n\
    \        val closeBracketCountMax = mutable.ListBuffer[Int]()\n        val openBracketCountMin\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketCountMin = mutable.ListBuffer[Int]()\n\
    \        val openBracketCountMaxNest = mutable.ListBuffer[Int]()\n        val\
    \ closeBracketCountMaxNest = mutable.ListBuffer[Int]()\n        val openBracketCountMinNest\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketCountMinNest = mutable.ListBuffer[Int]()\n\
    \        val openBracketCountMaxNest2 = mutable.ListBuffer[Int]()\n        val\
    \ closeBracketCountMaxNest2 = mutable.ListBuffer[Int]()\n        val openBracketCountMinNest2\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketCountMinNest2 = mutable.ListBuffer[Int]()\n\
    \        val openBracketCountMaxNest3 = mutable.ListBuffer[Int]()\n        val\
    \ closeBracketCountMaxNest3 = mutable.ListBuffer[Int]()\n        val openBracketCountMinNest3\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketCountMinNest3 = mutable.ListBuffer[Int]()\n\
    \        val openBracketCountMaxNest4 = mutable.ListBuffer[Int]()\n        val\
    \ closeBracketCountMaxNest4 = mutable.ListBuffer[Int]()\n        val openBracketCountMinNest4\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketCountMinNest4 = mutable.ListBuffer[Int]()\n\
    \        val openBracketCountMaxNest5 = mutable.ListBuffer[Int]()\n        val\
    \ closeBracketCountMaxNest5 = mutable.ListBuffer[Int]()\n        \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps3ra9yz5.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmps3ra9yz5.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps3ra9yz5.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps3ra9yz5.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps3ra9yz5.scala:18:32\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketCount\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp"
  stdout: ''
  timestamp: 1659799306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val bracketsNestingCount = brackets.filter(_.contains(\"[\")+_.contains(\"\
    ]\")).length\n        val isNested = bracketsCount - bracketsNestingCount > 0\n\
    \        isNested\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpjzj3d8ai.scala:16:51 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingCount\e[0m\
    \ = brackets.filter(_.contains(\e[31m\"[\"\e[0m)+_.contains(\e[31m\"]\"\e[0m)).length\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1659799303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val stack = mutable.ListBuffer[String]()\n\
    \        val openBrackets = mutable.ListBuffer[String]()\n        val closeBrackets\
    \ = mutable.ListBuffer[String]()\n        val openBracketCount = mutable.ListBuffer[Int]()\n\
    \        val closeBracketCount = mutable.ListBuffer[Int]()\n        val openBracketCounts\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketCounts = mutable.ListBuffer[Int]()\n\
    \        val openBracketCountArray = mutable.ListBuffer[Int]()\n        val closeBracketCountArray\
    \ = mutable.ListBuffer[Int]()\n        val openBracketCountArray2 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketCountArray2 = mutable.ListBuffer[Int]()\n        val\
    \ openBracketCountArray3 = mutable.ListBuffer[Int]()\n        val closeBracketCountArray3\
    \ = mutable.ListBuffer[Int]()\n        val openBracketCountArray4 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketCountArray4 = mutable.ListBuffer[Int]()\n        val\
    \ openBracketCountArray5 = mutable.ListBuffer[Int]()\n        val closeBracketCountArray5\
    \ = mutable.ListBuffer[Int]()\n        val openBracketCountArray6 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketCountArray6 = mutable.ListBuffer[Int]()\n        val\
    \ openBracketCountArray7 = mutable.ListBuffer[Int]()\n        val closeBracketCountArray7\
    \ = mutable.ListBuffer[Int]()\n        val openBracketCountArray8 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketCountArray8 = mutable.ListBuffer[Int]()\n        val\
    \ openBracketCountArray9 = mutable.ListBuffer[Int]()\n        val closeBracketCountArray9\
    \ = mutable.ListBuffer[Int]()\n        val openBracketCountArray10 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketCountArray10 = mutable.ListBuffer[Int]()\n        val\
    \ openBracketCountArray11 = mutable.ListBuffer[Int]()\n        val closeBracketCountArray11\
    \ = mutable.ListBuffer[Int]()\n        val openBracketCountArray12 = mutable.ListBuffer[Int]()\n\
    \        val close\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwd3wi60u.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwd3wi60u.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwd3wi60u.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwd3wi60u.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwd3wi60u.scala:17:28 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpwd3wi60u.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mopenBracketCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     "
  stdout: ''
  timestamp: 1659799306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.map(_.length).sum\n        val closeBracketsCount\
    \ = closeBrackets.map(_.length).sum\n        val openBracketsNestings = openBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val closeBracketsNestings = closeBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val openBracketsNestings = openBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val closeBracketsNestings = closeBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val openBracketsNestings = openBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val closeBracketsNestings = closeBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val openBracketsNestings = openBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val closeBracketsNestings = closeBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val openBracketsNestings = openBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val closeBracketsNestings = closeBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val openBracketsNestings = openBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val closeBracketsNestings = closeBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val openBracketsNestings = openBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val closeBracketsNestings = closeBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val openBracketsNestings = openBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val closeBracketsNestings = closeBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val openBracketsNestings = openBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val closeBracketsNestings = closeBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val openBrackets\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp21i4x4vw.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp21i4x4vw.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopenBracketsNestings\e[0m = openBrackets.map(_.split(\e[31m\"\\\\]\"\e\
    [0m).length).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsNestings is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp21i4x4vw.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestings\e\
    [0m = closeBrackets.map(_.split(\e[31m\"\\\\]\"\e[0m).length).sum\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsNestings is already defined as \e[33mvalue\e\
    [0m \e[35mcloseBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp21i4x4vw.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestings\e[0m\
    \ = openBrackets.map(_.split(\e[31m\"\\\\]\"\e[0m).length).sum\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsNestings is already defined as \e[33mvalue\e[0m\
    \ \e[35mopenBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp21i4x4vw.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestings\e\
    [0m = closeBrackets.map(_.split(\e[31m\"\\\\]\"\e[0m).length).sum\n\e[31m\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659799310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val stack = mutable.Stack[String]()\n\
    \        val bracketsCount = brackets.length\n        val bracketsNestings = mutable.HashMap[String,\
    \ Int]()\n        val bracketsNestingsCount = bracketsNestings.size\n        val\
    \ bracketsNestingsCount = bracketsNestings.size\n        val bracketsNestingsCount\
    \ = bracketsNestings.size\n        val bracketsNestingsCount = bracketsNestings.size\n\
    \        val bracketsNestingsCount = bracketsNestings.size\n        val bracketsNestingsCount\
    \ = bracketsNestings.size\n        val bracketsNestingsCount = bracketsNestings.size\n\
    \        val bracketsNestingsCount = bracketsNestings.size\n        val bracketsNestingsCount\
    \ = bracketsNestings.size\n        val bracketsNestingsCount = bracketsNestings.size\n\
    \        val bracketsNestingsCount = bracketsNestings.size\n        val bracketsNestingsCount\
    \ = bracketsNestings.size\n        val bracketsNestingsCount = bracketsNestings.size\n\
    \        val bracketsNestingsCount = bracketsNestings.size\n        val bracketsNestingsCount\
    \ = bracketsNestings.size\n        val bracketsNestingsCount = bracketsNestings.size\n\
    \        val bracketsNestingsCount = bracketsNestings.size\n        val bracketsNestingsCount\
    \ = bracketsNestings.size\n        val bracketsNestingsCount = bracketsNestings.size\n\
    \        val bracketsNestingsCount = bracketsNestings.size\n        val bracketsNestingsCount\
    \ = bracketsNestings.size\n        val bracketsNestingsCount = bracketsNestings.size\n\
    \        val bracketsNestingsCount = bracketsNestings.size\n        val bracketsNestingsCount\
    \ = bracketsNestings.size\n        val bracketsNestingsCount = bracketsNestings.size\n\
    \        val bracketsNestingsCount = bracketsNestings.size\n        val bracketsNestingsCount\
    \ = bracketsNestings.size\n        val bracketsNestingsCount = bracketsNestings.size\n\
    \        val bracketsNestingsCount = bracketsNestings.size\n        val bracketsNestingsCount\
    \ = bracketsNestings.size\n        val bracketsNestingsCount = bracketsNestings.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxk45lzt_.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsCount\e\
    [0m = bracketsNestings.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingsCount is already defined as \e[33mvalue\e\
    [0m \e[35mbracketsNestingsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxk45lzt_.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsCount\e\
    [0m = bracketsNestings.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingsCount is already defined as \e[33mvalue\e\
    [0m \e[35mbracketsNestingsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxk45lzt_.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsCount\e\
    [0m = bracketsNestings.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingsCount is already defined as \e[33mvalue\e\
    [0m \e[35mbracketsNestingsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxk45lzt_.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsCount\e\
    [0m = bracketsNestings.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsNestingsCount is already defined as \e[33mvalue\e\
    [0m \e[35mbracketsNestingsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxk45lzt_.scala:23:12 ---------------------------\e\
    ["
  stdout: ''
  timestamp: 1659799307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val bracketsCount = brackets.length\n        val\
    \ openBrackets = brackets.filter(x => x == '[').length\n        val closeBrackets\
    \ = brackets.filter(x => x == ']').length\n        val isNested = openBrackets\
    \ == closeBrackets\n        return isNested\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpit7k3nco.scala:16:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = brackets.filter(\e\
    [36mx\e[0m => x == \e[31m'['\e[0m).length\n\e[31m\e[31m   |\e[0m             \
    \                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types String and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpit7k3nco.scala:17:49 -----------------------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = brackets.filter(\e\
    [36mx\e[0m => x == \e[31m']'\e[0m).length\n\e[31m\e[31m   |\e[0m             \
    \                                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types String and Char cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659799310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        brackets += \"[\" \n        brackets\
    \ += \"]\"\n        brackets += \"(\"\n        brackets += \")\"\n        val\
    \ bracketsString = brackets.mkString(\"\")\n        val stringWithoutBrackets\
    \ = string.replaceAll(bracketsString, \"\")\n        val stringWithoutBracketsArray\
    \ = stringWithoutBrackets.toCharArray\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val stringWithoutBracketsArrayLength\
    \ = stringWithoutBracketsArray.length\n        val string\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjzbi3y85.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjzbi3y85.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstringWithoutBracketsArrayLength\e[0m = stringWithoutBracketsArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstringWithoutBracketsArrayLength is already defined as \e\
    [33mvalue\e[0m \e[35mstringWithoutBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjzbi3y85.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstringWithoutBracketsArrayLength\e[0m = stringWithoutBracketsArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstringWithoutBracketsArrayLength is already defined as \e\
    [33mvalue\e[0m \e[35mstringWithoutBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjzbi3y85.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstringWithoutBracketsArrayLength\e[0m = stringWithoutBracketsArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstringWithoutBracketsArrayLength is already defined as \e\
    [33mvalue\e[0m \e[35mstringWithoutBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjzbi3y85.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstringWithoutBracketsArrayLength\e[0m = stringWit"
  stdout: ''
  timestamp: 1659799308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.Set[Char]()\n        val stack = mutable.Stack[Char]()\n        val\
    \ bracketsCount = mutable.Map[Char, Int]()\n        val openingBrackets = mutable.Set[Char]()\n\
    \        val closingBrackets = mutable.Set[Char]()\n        val openingBracketsCount\
    \ = mutable.Map[Char, Int]()\n        val closingBracketsCount = mutable.Map[Char,\
    \ Int]()\n        val openingBracketsCount2 = mutable.Map[Char, Int]()\n     \
    \   val closingBracketsCount2 = mutable.Map[Char, Int]()\n        val openingBracketsCount3\
    \ = mutable.Map[Char, Int]()\n        val closingBracketsCount3 = mutable.Map[Char,\
    \ Int]()\n        val openingBracketsCount4 = mutable.Map[Char, Int]()\n     \
    \   val closingBracketsCount4 = mutable.Map[Char, Int]()\n        val openingBracketsCount5\
    \ = mutable.Map[Char, Int]()\n        val closingBracketsCount5 = mutable.Map[Char,\
    \ Int]()\n        val openingBracketsCount6 = mutable.Map[Char, Int]()\n     \
    \   val closingBracketsCount6 = mutable.Map[Char, Int]()\n        val openingBracketsCount7\
    \ = mutable.Map[Char, Int]()\n        val closingBracketsCount7 = mutable.Map[Char,\
    \ Int]()\n        val openingBracketsCount8 = mutable.Map[Char, Int]()\n     \
    \   val closingBracketsCount8 = mutable.Map[Char, Int]()\n        val openingBracketsCount9\
    \ = mutable.Map[Char, Int]()\n        val closingBracketsCount9 = mutable.Map[Char,\
    \ Int]()\n        val openingBracketsCount10 = mutable.Map[Char, Int]()\n    \
    \    val closingBracketsCount10 = mutable.Map[Char, Int]()\n        val openingBracketsCount11\
    \ = mutable.Map[Char, Int]()\n        val closingBracketsCount11 = mutable.Map[Char,\
    \ Int]()\n        val openingBracketsCount12 = mutable.Map[Char, Int]()\n    \
    \    val closingBracketsCount12 = mutable.Map[Char, Int]()\n        val openingBracketsCount13\
    \ = mutable.Map[Char, Int]()\n        val closingBracketsCount13\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkgt62unx.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkgt62unx.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.Set[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkgt62unx.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.Stack[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m     \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkgt62unx.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mbracketsCount\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpkgt62unx.scala:17:30 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkgt62unx.scala:18:30 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found:"
  stdout: ''
  timestamp: 1659799310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[').toList\n        val openBrackets = brackets.filter(x =>\
    \ x.contains('[')).toList\n        val closeBrackets = brackets.filter(x => x.contains(']')).toList\n\
    \        val openBracketsCount = openBrackets.size\n        val closeBracketsCount\
    \ = closeBrackets.size\n        val openBracketsNestings = openBrackets.filter(x\
    \ => x.contains('[')).toList\n        val closeBracketsNestings = closeBrackets.filter(x\
    \ => x.contains(']')).toList\n        val openBracketsNestingsCount = openBracketsNestings.size\n\
    \        val closeBracketsNestingsCount = closeBracketsNestings.size\n       \
    \ val openBracketsNestingsNestings = openBracketsNestings.filter(x => x.contains('[')).toList\n\
    \        val closeBracketsNestingsNestings = closeBracketsNestings.filter(x =>\
    \ x.contains(']')).toList\n        val openBracketsNestingsNestingsCount = openBracketsNestingsNestings.size\n\
    \        val closeBracketsNestingsNestingsCount = closeBracketsNestingsNestings.size\n\
    \        val openBracketsNestingsNestingsNestings = openBracketsNestingsNestings.filter(x\
    \ => x.contains('[')).toList\n        val closeBracketsNestingsNestingsNestings\
    \ = closeBracketsNestingsNestings.filter(x => x.contains(']')).toList\n      \
    \  val openBracketsNestingsNestingsNestingsCount = openBracketsNestingsNestingsNestings.size\n\
    \        val closeBracketsNestingsNestingsNestingsCount = closeBracketsNestingsNestingsNestings.size\n\
    \        val openBracketsNestingsNestingsNestingsNestings = openBracketsNestingsNestingsNestings.filter(x\
    \ => x.contains('[')).toList\n        val closeBracketsNestingsNestingsNestingsNestings\
    \ = closeBracketsNestingsNestingsNestings.filter(x => x.contains(']')).toList\n\
    \        val openBracketsNestingsNest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp75iotxff.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp75iotxff.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val openBrackets = brackets.filter(_.contains(\"[\")).length\n      \
    \  val closeBrackets = brackets.filter(_.contains(\"]\")).length\n        val\
    \ openBracketsCount = openBrackets\n        val closeBracketsCount = closeBrackets\n\
    \        val isNested = openBracketsCount == closeBracketsCount\n        val isNestedOrNot\
    \ = openBracketsCount > closeBracketsCount\n        isNested\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppqt1co7x.scala:26)\n\tat Problem.main(tmppqt1co7x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val openBrackets = mutable.ListBuffer[String]()\n\
    \        val closeBrackets = mutable.ListBuffer[String]()\n        val openBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount2 = mutable.ListBuffer[Int]()\n        val closeBracketsCount2\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount3 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount3 = mutable.ListBuffer[Int]()\n        val openBracketsCount4\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount4 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount5 = mutable.ListBuffer[Int]()\n        val closeBracketsCount5\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount6 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount6 = mutable.ListBuffer[Int]()\n        val openBracketsCount7\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount7 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount8 = mutable.ListBuffer[Int]()\n        val closeBracketsCount8\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount9 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount9 = mutable.ListBuffer[Int]()\n        val openBracketsCount10\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount10 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount11 = mutable.ListBuffer[Int]()\n        val closeBracketsCount11\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCount12 = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCount12 = mutable.ListBuffer[Int]()\n        val openBracketsCount13\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount13 = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCount14 = mutable.ListBuffer[Int]()\n        val closeBracketsCount14\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpocafe7du.scala:44:34 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsCount14\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpocafe7du.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpocafe7du.scala:15:27\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpocafe7du.scala:16:28 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpocafe7du.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoc"
  stdout: ''
  timestamp: 1659799236
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.Set[Char]()\n        val openBrackets = mutable.Set[Char]()\n    \
    \    val closeBrackets = mutable.Set[Char]()\n        val openBracketsCount =\
    \ mutable.Set[Char]()\n        val closeBracketsCount = mutable.Set[Char]()\n\
    \        val openBracketsCount2 = mutable.Set[Char]()\n        val closeBracketsCount2\
    \ = mutable.Set[Char]()\n        val openBracketsCount3 = mutable.Set[Char]()\n\
    \        val closeBracketsCount3 = mutable.Set[Char]()\n        val openBracketsCount4\
    \ = mutable.Set[Char]()\n        val closeBracketsCount4 = mutable.Set[Char]()\n\
    \        val openBracketsCount5 = mutable.Set[Char]()\n        val closeBracketsCount5\
    \ = mutable.Set[Char]()\n        val openBracketsCount6 = mutable.Set[Char]()\n\
    \        val closeBracketsCount6 = mutable.Set[Char]()\n        val openBracketsCount7\
    \ = mutable.Set[Char]()\n        val closeBracketsCount7 = mutable.Set[Char]()\n\
    \        val openBracketsCount8 = mutable.Set[Char]()\n        val closeBracketsCount8\
    \ = mutable.Set[Char]()\n        val openBracketsCount9 = mutable.Set[Char]()\n\
    \        val closeBracketsCount9 = mutable.Set[Char]()\n        val openBracketsCount10\
    \ = mutable.Set[Char]()\n        val closeBracketsCount10 = mutable.Set[Char]()\n\
    \        val openBracketsCount11 = mutable.Set[Char]()\n        val closeBracketsCount11\
    \ = mutable.Set[Char]()\n        val openBracketsCount12 = mutable.Set[Char]()\n\
    \        val closeBracketsCount12 = mutable.Set[Char]()\n        val openBracketsCount13\
    \ = mutable.Set[Char]()\n        val closeBracketsCount13 = mutable.Set[Char]()\n\
    \        val openBracketsCount14 = mutable.Set[Char]()\n        val closeBracketsCount14\
    \ = mutable.Set[Char]()\n        val openBracketsCount15 = mutable.Set[Char]()\n\
    \        val closeBracket\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp990y8dxe.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp990y8dxe.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.Set[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp990y8dxe.scala:15:27\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBrackets\e[0m = mutable.Set[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp990y8dxe.scala:16:28 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.Set[\e[35mChar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp990y8dxe.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.Set[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp990y8dxe.scala:18:33\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsCount\e[0m = mutable.Set[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           "
  stdout: ''
  timestamp: 1659799311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[|\\\\]\")\n        val bracketsCount = brackets.length\n\
    \        val bracketsNestings = brackets.foldLeft(0)((acc, curr) => {\n      \
    \      if (curr.contains(\"[\")) acc + 1 else acc\n        })\n        val bracketsNestingsInside\
    \ = brackets.foldLeft(0)((acc, curr) => {\n            if (curr.contains(\"[\"\
    )) acc + 1 else acc\n        })\n        val bracketsNestingsInside = brackets.foldLeft(0)((acc,\
    \ curr) => {\n            if (curr.contains(\"[\")) acc + 1 else acc\n       \
    \ })\n        val bracketsNestingsInside = brackets.foldLeft(0)((acc, curr) =>\
    \ {\n            if (curr.contains(\"[\")) acc + 1 else acc\n        })\n    \
    \    val bracketsNestingsInside = brackets.foldLeft(0)((acc, curr) => {\n    \
    \        if (curr.contains(\"[\")) acc + 1 else acc\n        })\n        val bracketsNestingsInside\
    \ = brackets.foldLeft(0)((acc, curr) => {\n            if (curr.contains(\"[\"\
    )) acc + 1 else acc\n        })\n        val bracketsNestingsInside = brackets.foldLeft(0)((acc,\
    \ curr) => {\n            if (curr.contains(\"[\")) acc + 1 else acc\n       \
    \ })\n        val bracketsNestingsInside = brackets.foldLeft(0)((acc, curr) =>\
    \ {\n            if (curr.contains(\"[\")) acc + 1 else acc\n        })\n    \
    \    val bracketsNestingsInside = brackets.foldLeft(0)((acc, curr) => {\n    \
    \        if (curr.contains(\"[\")) acc + 1 else acc\n        })\n        val bracketsNestingsInside\
    \ = brackets.foldLeft(0)((acc, curr) => {\n            if (curr.contains(\"[\"\
    )) acc + 1 else acc\n        })\n        val bracketsNestingsInside = brackets.foldLeft(0)((acc,\
    \ curr) => {\n            if (curr.contains(\"[\")) acc + 1 else acc\n       \
    \ })\n        val bracketsNestingsInside = brackets.foldLeft(0)((acc, curr) =>\
    \ {\n            if (curr.contains(\"[\")) acc + 1 else acc\n        })\n    \
    \    val bracketsNestingsInside = brackets.foldLeft(0)((acc, curr) => {\n    \
    \        if (curr.contains(\"[\")) acc + 1 else acc\n        })\n        val bracketsNestingsInside\
    \ = brackets.foldLe\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpurey2mme.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbracketsNestingsInside\e\
    [0m = brackets.foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mcurr\e[0m) => {\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mbracketsNestingsInside is\
    \ already defined as \e[33mvalue\e[0m \e[35mbracketsNestingsInside\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m23 |\e[0m            \e[33mif\e\
    [0m (curr.contains(\e[31m\"[\"\e[0m)) acc + \e[31m1\e[0m \e[33melse\e[0m acc\n\
    \e[31m24 |\e[0m        })\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpurey2mme.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbracketsNestingsInside\e[0m = brackets.foldLeft(\e[31m0\e[0m)((\e[36macc\e\
    [0m, \e[36mcurr\e[0m) => {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e\
    [0mbracketsNestingsInside is already defined as \e[33mvalue\e[0m \e[35mbracketsNestingsInside\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m26 |\e[0m         \
    \   \e[33mif\e[0m (curr.contains(\e[31m\"[\"\e[0m)) acc + \e[31m1\e[0m \e[33melse\e\
    [0m acc\n\e[31m27 |\e[0m        })\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpurey2mme.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbracketsNestingsInside\e[0m = brackets.foldLeft(\e[31m0\e[0m)((\e[36macc\e\
    [0m, \e[36mcurr\e[0m) => {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e\
    [0mbracketsNestingsInside is already defined as \e[33mvalue\e[0m \e[35mbracketsNestingsInside\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m29 |\e[0m         \
    \   \e[33mif\e[0m (curr.contains(\e[31m\"[\"\e[0m)) acc + \e[31m1\e[0m \e[33melse\e\
    [0m acc\n\e[31m30 |\e[0m        })\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpurey2mme.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbracketsNestingsInside\e[0m = brackets.foldLeft(\e[31m0\e[0m)((\e[36macc\e\
    [0"
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string.length)\n        var openBrackets = 0\n       \
    \ var closeBrackets = 0\n        var openBracketsCount = 0\n        var closeBracketsCount\
    \ = 0\n        var openBracketsCountMax = 0\n        var closeBracketsCountMax\
    \ = 0\n        var openBracketsCountMin = 0\n        var closeBracketsCountMin\
    \ = 0\n        var openBracketsCountMaxMin = 0\n        var closeBracketsCountMaxMin\
    \ = 0\n        var openBracketsCountMinMax = 0\n        var closeBracketsCountMinMax\
    \ = 0\n        var openBracketsCountMinMaxMin = 0\n        var closeBracketsCountMinMaxMin\
    \ = 0\n        var openBracketsCountMinMaxMinMax = 0\n        var closeBracketsCountMinMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMinMaxMin = 0\n        var closeBracketsCountMinMaxMinMaxMin\
    \ = 0\n        var openBracketsCountMinMaxMinMaxMinMax = 0\n        var closeBracketsCountMinMaxMinMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMinMaxMinMaxMin = 0\n        var closeBracketsCountMinMaxMinMaxMinMaxMin\
    \ = 0\n        var openBracketsCountMinMaxMinMaxMinMaxMinMax = 0\n        var\
    \ closeBracketsCountMinMaxMinMaxMinMaxMinMax = 0\n        var openBracketsCountMinMaxMinMaxMinMaxMinMaxMin\
    \ = 0\n        var closeBracketsCountMinMaxMinMaxMinMaxMinMaxMin = 0\n       \
    \ var openBracketsCountMinMaxMinMaxMinMaxMinMaxMinMax = 0\n        var closeBracketsCountMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMinMaxMinMaxMinMaxMinMaxMin = 0\n  \
    \      var closeBracketsCountMinMaxMinMaxMinMaxMinMaxMinMaxMin = 0\n        var\
    \ openBracketsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n        var closeBracketsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = 0\n        var openBracketsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin =\
    \ 0\n        var closeBracketsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = 0\n\
    \        var openBracketsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = 0\n  \
    \      var closeBracketsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = 0\n   \
    \     var open\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp68w10g5q.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp68w10g5q.scala:49:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m49 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mopenBracketsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopenBracketsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin is\
    \ already defined as \e[33mvariable\e[0m \e[35mopenBracketsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp68w10g5q.scala:50:12 ---------------------------\e[0m\e[0m\n\e\
    [31m50 |\e[0m        \e[33mvar\e[0m \e[36mcloseBracketsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ is already defined as \e[33mvariable\e[0m \e[35mcloseBracketsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp68w10g5q.scala:14:23 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ArrayBuffer(string.length)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp68w10g5q.scala:52:5 ---------------------\e[0m\e\
    [0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation avai"
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val openBrackets = mutable.ListBuffer[String]()\n\
    \        val closeBrackets = mutable.ListBuffer[String]()\n        val openBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCounts = mutable.ListBuffer[Int]()\n        val closeBracketsCounts\
    \ = mutable.ListBuffer[Int]()\n        val openBracketsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCount = mutable.ListBuffer[Int]()\n       \
    \ val closeBracketsCountPairsCount = mutable.ListBuffer[Int]()\n        val openBracketsCountPairsCounts\
    \ = mutable.ListBuffer[Int]()\n        val closeBracketsCountPairsCounts = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCountPairsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val closeBracketsCountPairsCountPairs = mutable.ListBuffer[(Int, Int)]()\n\
    \        val openBracketsCountPairsCountPairsCount = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCountPairsCountPairsCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCountPairsCountPairsCounts = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCountPairsCountPairsCounts = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCountPairsCountPairsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val closeBracketsCountPairsCountPairsCountPairs = mutable.ListBuffer[(Int,\
    \ Int)]()\n        val openBracketsCountPairsCountPairsCountPairsCount = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCountPairsCountPairsCountPairsCount = mutable.ListBuffer[Int]()\n\
    \        val openBracketsCountPairsCountPairsCountPairsCounts = mutable.ListBuffer[Int]()\n\
    \        val closeBracketsCountPairsCountPairsCountPairsCounts = mutable.ListBuffer\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1sx5_d3.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1sx5_d3.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mopenBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1sx5_d3.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcloseBrackets\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1sx5_d3.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1sx5_d3.scala:18:33\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsCount\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error"
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ArrayBuffer(string.length)\n        var i = 0\n        while (i <\
    \ string.length) {\n            brackets += i\n            i += 1\n        }\n\
    \        val stack = mutable.Stack[Int]()\n        val openings = mutable.ArrayBuffer(string.length)\n\
    \        var j = 0\n        while (j < string.length) {\n            val opening\
    \ = string.charAt(j)\n            if (opening == '[') {\n                openings\
    \ += j\n                stack.push(j)\n            } else if (opening == ']')\
    \ {\n                val closing = string.charAt(j + 1)\n                if (closing\
    \ == '[') {\n                    val openingIndex = openings.indexOf(j)\n    \
    \                if (openingIndex >= 0) {\n                        val closingIndex\
    \ = openings.indexOf(j + 1)\n                        if (closingIndex >= 0) {\n\
    \                            val openingBracket = openings.take(openingIndex).last\n\
    \                            val closingBracket = openings.take(closingIndex).last\n\
    \                            if (closingBracket > openingBracket) {\n        \
    \                        val openingBracketIndex = openings.indexOf(openingBracket)\n\
    \                                val closingBracketIndex = openings.indexOf(closingBracket)\n\
    \                                if (openingBracketIndex < closingBracketIndex)\
    \ {\n                                    val openingBracketBracket = openings.take(openingBracketIndex).last\n\
    \                                    val closingBracketBracket = openings.take(closingBracketIndex).last\n\
    \                                    if (closingBracketBracket > openingBracketBracket)\
    \ {\n                                        if (closingBracketIndex - openingBracketIndex\
    \ > 1) {\n                                            return false\n         \
    \                               } else {\n                                   \
    \         openings += closingBracketIndex\n                                  \
    \          stack.push(closingBracketIndex)\n                                 \
    \           openings += closingBracketIndex\n                                \
    \            stack.push(closingBracketIndex)\n                               \
    \             openings += closingBracketIndex\n                              \
    \              stack.push(closingBracketIndex)\n                             \
    \               openings += closingBracketIndex\n                            \
    \                stack.push(closingBracketIndex)\n                           \
    \                 openings += closingBracketIndex\n                          \
    \                  stack.push(closingBracketIndex)\n                         \
    \                   openings += closingBracketIndex\n                        \
    \                    stack.push(closingBracketIndex)\n                       \
    \                     openings += closingBracketIndex\n                      \
    \                      stack.push(closingBracketIndex)\n                     \
    \                       openings += closingBracketIndex\n                    \
    \                        stack.push(closingBracketIndex)\n                   \
    \                         openings += closingBracketIndex\n                  \
    \                          stack.push(closingBracketIndex)\n                 \
    \                           openings += closingBracketIndex\n                \
    \                            stack.push(closingBracketIndex)\n               \
    \                             openings += closingBracketIndex\n              \
    \                              stack.push(closingBracketIndex)\n             \
    \                               openings += closingBracketIndex\n\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbvjjoiaw.scala:90:0 ----------------------------\e\
    [0m\e[0m\n\e[31m90 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbvjjoiaw.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ArrayBuffer(string.length)\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbvjjoiaw.scala:20:20\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mstack\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbvjjoiaw.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mopenings\e[0m = mutable.ArrayBuffer(string.length)\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbvjjoiaw.scala:23:8\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mwhile\e[0m (j\
    \ < string.length) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    Unit\n\e[31m   |\e[0m        Required: Boolean\n\e[31m24 |\e[0m\
    \            \e[33mval\e[0m \e[36mopening\e[0m = string.charAt(j)\n\e[31m25 |\e\
    [0m            \e[33mif\e[0m (opening == \e[31m'['\e[0m) {\n\e[31m26 |\e[0m  \
    \              openings += j\n\e[31m27 |\e[0m                stack.push(j)\n\e\
    [31m28 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (opening == \e[31m']'\e\
    [0m) {\n\e[31m29 |\e[0m                \e[33mval\e[0m \e[36mclosing\e[0m = string.charAt(j\
    \ + \e[31m1\e[0m)\n\e[31m30 |\e[0m                \e[33mif\e[0m (closing == \e\
    [31m'['\e[0m) {\n\e["
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val openBrackets = brackets.filter(_.contains(\"\
    [\"))\n        val closeBrackets = brackets.filter(_.contains(\"]\"))\n      \
    \  val openBracketsCount = openBrackets.map(_.length).sum\n        val closeBracketsCount\
    \ = closeBrackets.map(_.length).sum\n        val openBracketsNestings = openBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val closeBracketsNestings = closeBrackets.map(_.split(\"\
    \\\\]\").length).sum\n        val openBracketsNestings = openBracketsNestings\
    \ + closeBracketsNestings\n        val closeBracketsNestings = closeBracketsNestings\
    \ + openBracketsNestings\n        val openBracketsNestings = openBracketsNestings\
    \ + closeBracketsNestings\n        val closeBracketsNestings = closeBracketsNestings\
    \ + openBracketsNestings\n        val openBracketsNestings = openBracketsNestings\
    \ + closeBracketsNestings\n        val closeBracketsNestings = closeBracketsNestings\
    \ + openBracketsNestings\n        val openBracketsNestings = openBracketsNestings\
    \ + closeBracketsNestings\n        val closeBracketsNestings = closeBracketsNestings\
    \ + openBracketsNestings\n        val openBracketsNestings = openBracketsNestings\
    \ + closeBracketsNestings\n        val closeBracketsNestings = closeBracketsNestings\
    \ + openBracketsNestings\n        val openBracketsNestings = openBracketsNestings\
    \ + closeBracketsNestings\n        val closeBracketsNestings = closeBracketsNestings\
    \ + openBracketsNestings\n        val openBracketsNestings = openBracketsNestings\
    \ + closeBracketsNestings\n        val closeBracketsNestings = closeBracketsNestings\
    \ + openBracketsNestings\n        val openBracketsNestings = openBracketsNestings\
    \ + closeBracketsNestings\n\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvtmzlkbd.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestings\e[0m\
    \ = openBracketsNestings + closeBracketsNestings\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mopenBracketsNestings is already defined as \e[33mvalue\e[0m \e\
    [35mopenBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpvtmzlkbd.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestings\e\
    [0m = closeBracketsNestings + openBracketsNestings\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsNestings is already defined as \e[33mvalue\e\
    [0m \e[35mcloseBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvtmzlkbd.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestings\e[0m\
    \ = openBracketsNestings + closeBracketsNestings\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mopenBracketsNestings is already defined as \e[33mvalue\e[0m \e\
    [35mopenBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpvtmzlkbd.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNestings\e\
    [0m = closeBracketsNestings + openBracketsNestings\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcloseBracketsNestings is already defined as \e[33mvalue\e\
    [0m \e[35mcloseBracketsNestings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote th"
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val openBrackets = brackets.filter(x => x.contains('['))\n\
    \        val closeBrackets = brackets.filter(x => x.contains(']'))\n        val\
    \ openBracketsCount = openBrackets.length\n        val closeBracketsCount = closeBrackets.length\n\
    \        val openBracketsNestings = openBrackets.map(x => x.contains(']'))\n \
    \       val closeBracketsNestings = closeBrackets.map(x => x.contains('['))\n\
    \        val openBracketsNestingsCount = openBracketsNestings.filter(x => x).length\n\
    \        val closeBracketsNestingsCount = closeBracketsNestings.filter(x => x).length\n\
    \        val openBracketsNestingsNestings = openBracketsNestings.filter(x => closeBracketsNestings.contains(x))\n\
    \        val closeBracketsNestingsNestings = closeBracketsNestings.filter(x =>\
    \ openBracketsNestings.contains(x))\n        val openBracketsNestingsNestingsCount\
    \ = openBracketsNestingsNestings.filter(x => closeBracketsNestingsNestings.contains(x))\n\
    \        val closeBracketsNestingsNestingsCount = closeBracketsNestingsNestings.filter(x\
    \ => openBracketsNestingsNestings.contains(x))\n        val openBracketsNestingsNestingsNestingsCount\
    \ = openBracketsNestingsNestingsNestings.filter(x => closeBracketsNestingsNestingsNestings.contains(x))\n\
    \        val closeBracketsNestingsNestingsNestingsCount = closeBracketsNestingsNestingsNestings.filter(x\
    \ => openBracketsNestingsNestingsNestings.contains(x))\n        val openBracketsNestingsNestingsNestingsNestingsCount\
    \ = openBracketsNestingsNestingsNestingsNestings.filter(x => closeBracketsNestingsNestingsNestingsNestings.contains(x))\n\
    \        val closeBracketsNestingsNestingsNestingsNestingsCount = closeBracketsNestingsNestingsNestingsNestings.filter(x\
    \ => open\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcjap1neg.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcjap1neg.scala:27:56\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBracketsNestingsNestingsNestingsCount\e[0m = openBracketsNestingsNestingsNestings.filter(\e\
    [36mx\e[0m => closeBracketsNestingsNestingsNestings.contains(x))\n\e[31m\e[31m\
    \   |\e[0m                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: openBracketsNestingsNestingsNestings\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcjap1neg.scala:28:57\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseBracketsNestingsNestingsNestingsCount\e[0m = closeBracketsNestingsNestingsNestings.filter(\e\
    [36mx\e[0m => openBracketsNestingsNestingsNestings.contains(x))\n\e[31m\e[31m\
    \   |\e[0m                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: closeBracketsNestingsNestingsNestings\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcjap1neg.scala:29:64\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBracketsNestingsNestingsNestingsNestingsCount\e[0m = openBracketsNestingsNestingsNestingsNestings.filter(\e\
    [36mx\e[0m => closeBracketsNestingsNestingsNestingsNestings.contains(x))\n\e[31m\e\
    [31m   |\e[0m                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Not found: openBracketsNestingsNestingsNestingsNestings\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcjap1neg.scala:30"
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\").filter(_.nonEmpty).toList\n        val openBrackets\
    \ = brackets.filter(_.startsWith(\"[\")).toList\n        val closeBrackets = brackets.filter(_.endsWith(\"\
    ]\")).toList\n        val openBracketsCount = openBrackets.count\n        val\
    \ closeBracketsCount = closeBrackets.count\n        val openBracketsNesting =\
    \ (openBracketsCount - closeBracketsCount).abs <= 1\n        val closeBracketsNesting\
    \ = (closeBracketsCount - openBracketsCount).abs <= 1\n        openBracketsNesting\
    \ && closeBracketsNesting\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsob3o_fg.scala:19:53 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNesting\e[0m\
    \ = (openBracketsCount - closeBracketsCount).abs <= \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue - is not a member of (String => Boolean) => Int, but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpsob3o_fg.scala:20:55 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcloseBracketsNesting\e[0m\
    \ = (closeBracketsCount - openBracketsCount).abs <= \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue - is not a member of (String => Boolean) => Int, but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val openBrackets = brackets.filter(x => x.contains(\"[\"))\n        val\
    \ closedBrackets = brackets.filter(x => x.contains(\"]\"))\n        val openBracketsCount\
    \ = openBrackets.length\n        val closedBracketsCount = closedBrackets.length\n\
    \        val openBracketsNestings = openBrackets.filter(x => x.contains(\"[\"\
    ))\n        val closedBracketsNestings = closedBrackets.filter(x => x.contains(\"\
    ]\"))\n        val openBracketsNestingsCount = openBracketsNestings.length\n \
    \       val closedBracketsNestingsCount = closedBracketsNestings.length\n    \
    \    val openBracketsNestingsNestings = openBracketsNestings.filter(x => x.contains(\"\
    [\"))\n        val closedBracketsNestingsNestings = closedBracketsNestings.filter(x\
    \ => x.contains(\"]\"))\n        val openBracketsNestingsNestingsCount = openBracketsNestingsNestings.length\n\
    \        val closedBracketsNestingsNestingsCount = closedBracketsNestingsNestings.length\n\
    \        val openBracketsNestingsNestingsNestings = openBracketsNestingsNestings.filter(x\
    \ => x.contains(\"[\"))\n        val closedBracketsNestingsNestingsNestings =\
    \ closedBracketsNestingsNestings.filter(x => x.contains(\"]\"))\n        val openBracketsNestingsNestingsNestingsCount\
    \ = openBracketsNestingsNestingsNestings.length\n        val closedBracketsNestingsNestingsNestingsCount\
    \ = closedBracketsNestingsNestingsNestings.length\n        val openBracketsNestingsNestingsNestingsNestingsCount\
    \ = openBracketsNestingsNestingsNestingsNestings.length\n        val closedBracketsNestingsNestingsNestingsNestingsCount\
    \ = closedBracketsNestingsNestingsNestingsNestings.length\n        val openBracketsNestingsNestingsNestingsNestingsNestingsCount\
    \ = openBracketsNestingsNestingsNest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc1k9l4ur.scala:32:64 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mopenBracketsNestingsNestingsNestingsNestingsCount\e\
    [0m = openBracketsNestingsNestingsNestingsNestings.length\n\e[31m\e[31m   |\e\
    [0m                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Not found: openBracketsNestingsNestingsNestingsNestings\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc1k9l4ur.scala:33:66\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mclosedBracketsNestingsNestingsNestingsNestingsCount\e[0m = closedBracketsNestingsNestingsNestingsNestings.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               Not found: closedBracketsNestingsNestingsNestingsNestings\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc1k9l4ur.scala:34:72\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e\
    [36mopenBracketsNestingsNestingsNestingsNestingsNestingsCount\e[0m = openBracketsNestingsNestingsNest\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                       Not found: openBracketsNestingsNestingsNest\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc1k9l4ur.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = mutable.ListBuffer[String]()\n        val bracketsStack = mutable.ListBuffer[String]()\n\
    \        val bracketsStackSize = mutable.ListBuffer[Int]()\n        val bracketsStackSizeSize\
    \ = mutable.ListBuffer[Int]()\n        val bracketsStackSizeSizeSize = mutable.ListBuffer[Int]()\n\
    \        val bracketsStackSizeSizeSizeSize = mutable.ListBuffer[Int]()\n     \
    \   val bracketsStackSizeSizeSizeSizeSize = mutable.ListBuffer[Int]()\n      \
    \  val bracketsStackSizeSizeSizeSizeSizeSize = mutable.ListBuffer[Int]()\n   \
    \     val bracketsStackSizeSizeSizeSizeSizeSize = mutable.ListBuffer[Int]()\n\
    \        val bracketsStackSizeSizeSizeSizeSizeSizeSize = mutable.ListBuffer[Int]()\n\
    \        val bracketsStackSizeSizeSizeSizeSizeSizeSizeSize = mutable.ListBuffer[Int]()\n\
    \        val bracketsStackSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ListBuffer[Int]()\n\
    \        val bracketsStackSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ListBuffer[Int]()\n\
    \        val bracketsStackSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ListBuffer[Int]()\n\
    \        val bracketsStackSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ListBuffer[Int]()\n\
    \        val bracketsStackSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer[Int]()\n        val bracketsStackSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer[Int]()\n        val bracketsStackSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer[Int]()\n        val bracketsStackSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer[Int]()\n        val bracketsStackSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer[Int]()\n        val bracketsStackSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer[Int]()\n        val bracketsStackSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer[Int]()\n        val bracketsStackSizeSizeSize\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnq8u_0lm.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnq8u_0lm.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbracketsStackSizeSizeSizeSizeSizeSize\e[0m = mutable.ListBuffer[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsStackSizeSizeSizeSizeSizeSize is already defined as\
    \ \e[33mvalue\e[0m \e[35mbracketsStackSizeSizeSizeSizeSizeSize\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnq8u_0lm.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mbrackets\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnq8u_0lm.scala:15:28\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mbracketsStack\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnq8u_0lm.scala:16:32 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbracketsStackSize\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnq8u_0lm.scala:17:36 ---------------------"
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split(\"\\\\[\")\n        val bracketsCount = brackets.length\n   \
    \     val bracketsNestings = brackets.map(x => x.split(\"\\\\]\")).map(x => x.length)\n\
    \        val bracketsNestingSum = bracketsNestings.sum\n        val bracketsNestingCount\
    \ = bracketsNestings.count\n        val bracketsNestingSumSquare = bracketsNestings.map(x\
    \ => x * x).sum\n        val bracketsNestingCountSquare = bracketsNestings.map(x\
    \ => x * x).count\n        val bracketsNestingSumSquareRoot = math.sqrt(bracketsNestingSumSquare)\n\
    \        val bracketsNestingCountSquareRoot = math.sqrt(bracketsNestingCountSquare)\n\
    \        val bracketsNestingSumSquareRootSquare = bracketsNestingSumSquareRoot\
    \ * bracketsNestingSumSquareRoot\n        val bracketsNestingCountSquareRootSquare\
    \ = bracketsNestingCountSquareRoot * bracketsNestingCountSquareRoot\n        val\
    \ bracketsNestingSumSquareRootSquareRoot = bracketsNestingSumSquareRoot * bracketsNestingSumSquareRootSquare\n\
    \        val bracketsNestingCountSquareRootSquareRoot = bracketsNestingCountSquareRoot\
    \ * bracketsNestingCountSquareRootSquare\n        val bracketsNestingSumSquareRootSquareRootSquare\
    \ = bracketsNestingSumSquareRoot * bracketsNestingSumSquareRootSquare\n      \
    \  val bracketsNestingCountSquareRootSquareRootSquare = bracketsNestingCountSquareRoot\
    \ * bracketsNestingCountSquareRootSquare\n        val bracketsNestingSumSquareRootSquareRootSquareRoot\
    \ = bracketsNestingSumSquareRoot * bracketsNestingSumSquareRootSquareRoot\n  \
    \      val bracketsNestingCountSquareRootSquareRootSquareRoot = bracketsNestingCountSquareRoot\
    \ * bracketsNestingCountSquareRootSquareRoot\n        val bracketsNestingSumSquareRootSquareRootSquareRootSquare\
    \ = bracketsNestingSumSquareRoot * bracketsNestingSumSquareRootSquareRootSquare\n\
    \        val bracketsNestingCountSquareRootSquareRootSquareRootSquare = bracketsNestingCountSquareRoot\
    \ * bracketsNestingCountSquareRootSquareRootSquare\n        val bracketsNestingSumSquareRootSquareRootSquareRoot\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnhl937kv.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpnhl937kv.scala:22:55 --------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \        \e[33mval\e[0m \e[36mbracketsNestingCountSquareRoot\e[0m = math.sqrt(bracketsNestingCountSquare)\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (bracketsNestingCountSquare : (Int => Boolean)\
    \ => Int)\n\e[31m   |\e[0m        Required: Double\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpnhl937kv.scala:34:5 ---------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]')\
    \ \u279E False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[')\
    \ \u279E True\n    def isNested(string : String) : Boolean = {\n        val brackets\
    \ = string.split('[')\n        val openBrackets = brackets.filter(_.contains('['))\n\
    \        val closeBrackets = brackets.filter(_.contains(']'))\n        val nestedBrackets\
    \ = openBrackets.filter(_.contains(']'))\n        val nestedBracketsCount = nestedBrackets.size\n\
    \        val openBracketsCount = openBrackets.size\n        val closeBracketsCount\
    \ = closeBrackets.size\n        val isNested = nestedBracketsCount != openBracketsCount\
    \ && nestedBracketsCount != closeBracketsCount\n        return isNested\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp02atbbn2.scala:25)\n\tat Problem.main(tmp02atbbn2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799314
