name: HumanEval_117_select_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s and a natural number n, you have been tasked to implement\
  \ \n    // a function that returns a list of all words from string s that contain\
  \ exactly \n    // n consonants, in order these words appear in the string s.\n\
  \    // If the string s is empty then the function should return an empty list.\n\
  \    // Note: you may assume the input string contains only letters and spaces.\n\
  \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
  ]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
  \    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello\
  \ world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
  ]\n    def selectWords(s : String, n : Long) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
  \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
  Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
  \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
  \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
  ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
  ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
  a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n   \
  \ }\n\n}\n"
completions: ["        val result = new mutable.ListBuffer[String]()\n        val\
    \ vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n   \
    \     val consonantSet = consonants.toSet\n        val vowelSet = vowels.toSet\n\
    \        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val wordCounts = mutable.Map[String, Int]()\n\
    \        val wordList = s.split(\" \").toList\n        wordList.foreach(word =>\
    \ {\n            val wordArray = word.split(\"\")\n            wordArray.foreach(letter\
    \ => {\n                if (vowelSet.contains(letter)) {\n                   \
    \ vowelCounts(letter) = vowelCounts(letter) + 1\n                } else if (consonantSet.contains(letter))\
    \ {\n                    consonantCounts(letter) = consonantCounts(letter) + 1\n\
    \                }\n            })\n        })\n        vowelCounts.foreach {\
    \ case (letter, count) =>\n            if (count == n) {\n                result.add(word)\n\
    \            }\n        }\n        result.toList", "        val words: List[String]\
    \ = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).toList\n        val consonants:\
    \ List[String] = words.filter(_.matches(\"[aeiou]\"))\n        val consonantsCount:\
    \ Map[String, Long] = consonants.groupBy(_.toLowerCase).mapValues(_.length)\n\
    \        val consonantsCountSorted: Map[String, Long] = consonantsCount.sortBy(_._2).reverse\n\
    \        val consonantsCountSortedKeys: List[String] = consonantsCountSorted.keys.toList\n\
    \        val consonantsCountSortedValues: List[Long] = consonantsCountSorted.values.toList\n\
    \        val consonantsCountSortedKeysSorted: Map[String, Long] = consonantsCountSorted.sortBy(_._1).reverse\n\
    \        val consonantsCountSortedKeysSortedValues: List[Long] = consonantsCountSortedKeys.map(consonantsCountSortedKeysSorted.get(_)).toList\n\
    \        val consonantsCountSortedKeysSortedValuesSorted: Map[String, Long] =\
    \ consonantsCountSortedKeysSortedValues.sortBy(_._1).reverse\n        val consonantsCountSortedKeysSortedValuesSortedKeys:\
    \ List[String] = consonantsCountSortedKeysSortedValuesSorted.keys.toList\n   \
    \     val consonantsCountSortedKeysSortedValuesSortedValues: List[Long] = consonantsCountSortedKeysSortedValuesSorted.values.toList\n\
    \        val consonantsCountSortedKeysSortedValuesSortedKeysSorted: Map[String,\
    \ Long] = consonantsCountSortedKeysSortedValuesSortedKeys.map(consonantsCountSortedKeysSortedValuesSortedKeysSorted.get(_)).toList\n\
    \        val consonantsCountSortedKeysSortedValuesSortedKeysSortedValues: List[Long]\
    \ = consonantsCountSortedKeysSortedValuesSortedKeys.map(consonantsCountSortedKeysSortedValuesSortedKeysSortedValues.get(_)).toList\n\
    \        val consonantsCountSortedKeysSortedValuesSortedKeysSortedValuesSorted:\
    \ Map[String, Long] = consonantsCountSortedKeysSortedValuesSortedKeysSortedValues.map(consonantsCountSortedKeysSortedValuesSortedKeysSortedValuesSorted.get(_)).toList\n\
    \        val consonantsCountSortedKeysSortedValuesSortedKeysSortedValuesSortedKeys:\
    \ List[String] = consonantsCountSortedKeysSortedValuesSortedKeysSortedValuesSorted.keys.toList\n\
    \        val consonantsCountSortedKeysSortedValuesSortedKeysSortedValuesSorted",
  "        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        return result.toList", "        val words: List[String]\
    \ = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(n)).map(_.split(\"\
    \")).filter(_.size == n).map(_.mkString(\"\")).filter(_.nonEmpty)\n        words.toList",
  "        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.split(\"\\\\W\"\
    ).length\n            if (count == n) {\n                result += (word + \"\
    \ \")\n            }\n        })\n        return result.toList", "        val\
    \ words = s.split(\" \")\n        val list = mutable.ListBuffer[String]()\n  \
    \      for (word <- words) {\n            if (word.contains(\"a\") || word.contains(\"\
    e\") || word.contains(\"i\") || word.contains(\"o\") || word.contains(\"u\"))\
    \ {\n                list += word\n            }\n        }\n        if (list.size\
    \ < n) {\n            list\n        } else {\n            list.filter(_ => list.count(_\
    \ == word) == n)\n        }", "        val words = s.split(\" \").filter(_.isLetter).map(_.toUpperCase)\n\
    \        val list = words.toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\")\n        val consonantCount = new mutable.HashMap[String, Int]()\n  \
    \      val vowelCount = new mutable.HashMap[String, Int]()\n        val consonantCounts\
    \ = consonants.foldLeft(0)((acc, c) => acc + (consonantCount.getOrElse(c + \"\"\
    , 0)))\n        val vowelCounts = vowels.foldLeft(0)((acc, v) => acc + (vowelCount.getOrElse(v\
    \ + \"\", 0)))\n        list.foreach { word =>\n            val count = consonantCounts.get(word).orElse(vowelCounts.get(word).orElse(0))\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        result toList", "        val list = s.split(\"\
    \ \").toList\n        val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += (word + \" \")\n        })\n        if (result.isEmpty) result\
    \ else result.toList", "        val words = mutable.ListBuffer[String]()\n   \
    \     val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonants_count = consonants.count(_ == ' ')\n        val vowels_count\
    \ = vowels.count(_ == ' ')\n        val consonants_count = consonants.count(_\
    \ == ' ')\n        val vowels_count = vowels.count(_ == ' ')\n        val consonants_count\
    \ = consonants.count(_ == ' ')\n        val vowels_count = vowels.count(_ == '\
    \ ')\n        val consonants_count = consonants.count(_ == ' ')\n        val vowels_count\
    \ = vowels.count(_ == ' ')\n        val consonants_count = consonants.count(_\
    \ == ' ')\n        val vowels_count = vowels.count(_ == ' ')\n        val consonants_count\
    \ = consonants.count(_ == ' ')\n        val vowels_count = vowels.count(_ == '\
    \ ')\n        val consonants_count = consonants.count(_ == ' ')\n        val vowels_count\
    \ = vowels.count(_ == ' ')\n        val consonants_count = consonants.count(_\
    \ == ' ')\n        val vowels_count = vowels.count(_ == ' ')\n        val consonants_count\
    \ = consonants.count(_ == ' ')\n        val vowels_count = vowels.count(_ == '\
    \ ')\n        val consonants_count = consonants.count(_ == ' ')\n        val vowels_count\
    \ = vowels.count(_ == ' ')\n        val consonants_count = consonants.count(_\
    \ == ' ')\n        val vowels_count = vowels.count(_ == ' ')\n        val consonants_count\
    \ = consonants.count(_ == ' ')\n        val vowels_count = vowels.count(_ == '\
    \ ')\n        val consonants_count = consonants.count(_ == ' ')\n        val vowels_count\
    \ = vowels.count(_ == ' ')\n        val consonants_count = consonants.count(_\
    \ == ' ')\n        val vowels_count = vowels.count(_ == ' ')\n        val consonants_count\
    \ = consonants.count(_ == ' ')\n        val vowels_count = vowels.count(_ == '\
    \ ')\n        val consonants_count = consonants.count(_ == ' ')\n        val vowels_count\
    \ = vowels.count(_ == ' ')\n        val consonants_count = consonants.count(_\
    \ == ' ')\n        val vowels_count = vowels.count(_ == ", "        val list =\
    \ s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += word\n        }\n        if (result.isEmpty)\
    \ result else result.toList", "        val list = s.split(\" \")\n        val\
    \ list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x =>\
    \ x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"B\"))\n\
    \        val list5 = list4.filter(x => x.contains(\"C\"))\n        val list6 =\
    \ list5.filter(x => x.contains(\"D\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"E\"))\n        val list8 = list7.filter(x => x.contains(\"F\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"G\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"H\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"I\"))\n        val list12 = list11.filter(x => x.contains(\"\
    J\"))\n        val list13 = list12.filter(x => x.contains(\"K\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"L\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"M\"))\n        val list16 = list15.filter(x => x.contains(\"\
    N\"))\n        val list17 = list16.filter(x => x.contains(\"O\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"P\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"Q\"))\n        val list20 = list19.filter(x => x.contains(\"\
    R\"))\n        val list21 = list20.filter(x => x.contains(\"S\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"T\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"U\"))\n        val list24 = list23.filter(x => x.contains(\"\
    V\"))\n        val list25 = list24.filter(x => x.contains(\"W\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"X\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"Y\"))\n        val list28 = list27.filter(x => x.contains(\"\
    Z\"))\n        val list29 = list28.filter(x => x.contains(\"a\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"b\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"c\"))\n        val list32 = list31.filter(x => x.contains(\"\
    d\"))\n        val list33 = list32.filter(x => x.contains(\"e\"))\n        val\
    \ list34 = list33.", "        val list = s.split(\" \")\n        val list2 = list.map(x\
    \ => x.toUpperCase)\n        val list3 = list2.filter(x => x.contains(\"A\"))\n\
    \        val list4 = list3.filter(x => x.contains(\"E\"))\n        val list5 =\
    \ list4.filter(x => x.contains(\"I\"))\n        val list6 = list5.filter(x =>\
    \ x.contains(\"O\"))\n        val list7 = list6.filter(x => x.contains(\"U\"))\n\
    \        val list8 = list7.filter(x => x.contains(\"a\"))\n        val list9 =\
    \ list8.filter(x => x.contains(\"e\"))\n        val list10 = list9.filter(x =>\
    \ x.contains(\"i\"))\n        val list11 = list10.filter(x => x.contains(\"o\"\
    ))\n        val list12 = list11.filter(x => x.contains(\"u\"))\n        val list13\
    \ = list12.filter(x => x.contains(\"A\"))\n        val list14 = list13.filter(x\
    \ => x.contains(\"E\"))\n        val list15 = list14.filter(x => x.contains(\"\
    I\"))\n        val list16 = list15.filter(x => x.contains(\"O\"))\n        val\
    \ list17 = list16.filter(x => x.contains(\"U\"))\n        val list18 = list17.filter(x\
    \ => x.contains(\"a\"))\n        val list19 = list18.filter(x => x.contains(\"\
    e\"))\n        val list20 = list19.filter(x => x.contains(\"i\"))\n        val\
    \ list21 = list20.filter(x => x.contains(\"o\"))\n        val list22 = list21.filter(x\
    \ => x.contains(\"u\"))\n        val list23 = list22.filter(x => x.contains(\"\
    A\"))\n        val list24 = list23.filter(x => x.contains(\"E\"))\n        val\
    \ list25 = list24.filter(x => x.contains(\"I\"))\n        val list26 = list25.filter(x\
    \ => x.contains(\"O\"))\n        val list27 = list26.filter(x => x.contains(\"\
    U\"))\n        val list28 = list27.filter(x => x.contains(\"a\"))\n        val\
    \ list29 = list28.filter(x => x.contains(\"e\"))\n        val list30 = list29.filter(x\
    \ => x.contains(\"i\"))\n        val list31 = list30.filter(x => x.contains(\"\
    o\"))\n        val list32 = list31.filter(x => x.contains(\"u\"))\n        val\
    \ list33 = list32.filter(x => x.contains(\"A\"))\n        val list34 = list33.",
  "        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) result += (word + \" \")\n        }\n  \
    \      return result.toList", "        val list = s.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach(word => {\n\
    \            val count = word.count(c => c.isLetter)\n            if (count ==\
    \ n) {\n                result += word\n            }\n        })\n        if\
    \ (result.isEmpty) {\n            List()\n        } else {\n            result.toList\n\
    \        }", "        val list = s.split(\" \").toList\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isDigit)\n        val list = list.filterNot(_.isLetter)\n\
    \        val list = list.filterNot(_.isSpace)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isSpace)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filter", "        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase).toList\n        val consonants: List[String]\
    \ = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(\"\
    a\")).toList\n        val vowels: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(\"\
    e\")).toList\n        val consonantCounts = consonants.groupBy(c => c).mapValues(_.size).toList\n\
    \        val vowelCounts = vowels.groupBy(c => c).mapValues(_.size).toList\n \
    \       val consonantCountAndVowelCounts = consonantCounts ++ vowelCounts\n  \
    \      val consonantAndVowelCounts = consonantCountAndVowelCounts.filter(_._2\
    \ > n)\n        val consonantAndVowelCountPairs = consonantAndVowelCounts.map(_._1\
    \ -> _._2)\n        val consonantAndVowelCountPairsSorted = consonantAndVowelCountPairs.sortBy(_._1)\n\
    \        val consonantAndVowelCountPairsSortedByCount = consonantAndVowelCountPairsSorted.sortBy(_._2)\n\
    \        val consonantAndVowelCountPairsSortedByCountReversed = consonantAndVowelCountPairsSortedByCount.reverse\n\
    \        consonantAndVowelCountPairsSortedByCountReversed.map(_._1).filter(_._2\
    \ == n).map(_._1)", "        val list = s.split(\" \")\n        val list2 = list.filter(_\
    \ => _.length == n)\n        val list3 = list2.filter(_ => _.contains(\"a\"))\n\
    \        val list4 = list3.filter(_ => _.contains(\"e\"))\n        val list5 =\
    \ list4.filter(_ => _.contains(\"i\"))\n        val list6 = list5.filter(_ =>\
    \ _.contains(\"o\"))\n        val list7 = list6.filter(_ => _.contains(\"u\"))\n\
    \        list7", "        val list = s.split(\" \").toList\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     val count = word.count(c => c.isLetter)\n            if (count == n) {\n\
    \                result += (word + \" \")\n            }\n        }\n        if\
    \ (result.isEmpty) {\n            List()\n        } else {\n            result.toList\n\
    \        }", "        val wordList = s.split(\" \").toList\n        val wordSet\
    \ = wordList.map(_.toUpperCase).toSet\n        val result = wordList.filter(word\
    \ => wordSet.toSet.size == n)\n        result.map(word => word.toUpperCase).mkString(\"\
    \ \")", "        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        return result.toList", "        val list = s.split(\"\
    \ \")\n        val result = new mutable.ListBuffer[String]()\n        for (i <-\
    \ 0 until list.size) {\n            val word = list(i)\n            if (word.contains(\"\
    a\") || word.contains(\"e\") || word.contains(\"i\") || word.contains(\"o\") ||\
    \ word.contains(\"u\")) {\n                result.add(word)\n            }\n \
    \       }\n        return result.toList", "        val list = s.split(\" \")\n\
    \        val list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x\
    \ => x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"E\"\
    ))\n        val list5 = list4.filter(x => x.contains(\"I\"))\n        val list6\
    \ = list5.filter(x => x.contains(\"O\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"U\"))\n        val list8 = list7.filter(x => x.contains(\"Y\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"a\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"e\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"i\"))\n        val list12 = list11.filter(x => x.contains(\"\
    o\"))\n        val list13 = list12.filter(x => x.contains(\"u\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"y\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"A\"))\n        val list16 = list15.filter(x => x.contains(\"\
    E\"))\n        val list17 = list16.filter(x => x.contains(\"I\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"O\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"U\"))\n        val list20 = list19.filter(x => x.contains(\"\
    Y\"))\n        val list21 = list20.filter(x => x.contains(\"a\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"e\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"i\"))\n        val list24 = list23.filter(x => x.contains(\"\
    o\"))\n        val list25 = list24.filter(x => x.contains(\"u\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"y\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"A\"))\n        val list28 = list27.filter(x => x.contains(\"\
    E\"))\n        val list29 = list28.filter(x => x.contains(\"I\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"O\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"U\"))\n        val list32 = list31.filter(x => x.contains(\"\
    Y\"))\n        val list33 = list32.filter(x => x.contains(\"a\"))\n        val\
    \ list34 = list33.", "        val list = s.split(\" \").toList\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     val count = word.count(c => c.isLetter)\n            if (count == n) {\n\
    \                result += word\n            }\n        }\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }", "        val words = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        words.foreach(word => {\n            val count = word.count(c => c !=\
    \ \" \")\n            if (count == n) {\n                result += word\n    \
    \        }\n        })\n        return result.toList", "        val words = s.split(\"\
    \ \").filter(_.isLetter)\n        val list = words.toList\n        val count =\
    \ words.count(_.isLetter)\n        val list2 = list.filter(_ => count(_) == n)\n\
    \        list2.toList", "        val words = s.split(\" \")\n        val result\
    \ = new mutable.ListBuffer[String]()\n        words.foreach(w => {\n         \
    \   val letters = w.toCharArray\n            val count = letters.filter(x => x\
    \ != 'a' && x != 'e' && x != 'i' && x != 'o' && x != 'u').length\n           \
    \ if (count == n) {\n                result += (w + \" \")\n            }\n  \
    \      })\n        return result.toList", "        val list = s.split(\" \")\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) {\n                result += (word + \" \")\n            }\n        })\n\
    \        return result.toList", "        val list = s.split(\" \")\n        val\
    \ result: List[String] = new ArrayList[String]()\n        list.foreach(word =>\
    \ {\n            val count = word.split(\"[^aeiou]\").length\n            if (count\
    \ == n) {\n                result.add(word)\n            }\n        })\n     \
    \   return result.toList", "        val words = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonantSet = consonants.toSet\n        val vowelSet = vowels.toSet\n\
    \        val vowelCount = vowels.toSet.size\n        val consonantCount = consonants.toSet.size\n\
    \        val vowelCountSet = vowelCount.toSet\n        val consonantCountSet =\
    \ consonantCount.toSet\n        val vowelCountSet = vowelCount.toSet\n       \
    \ val consonantCountSet = consonantCount.toSet\n        val vowelCountSet = vowelCount.toSet\n\
    \        val consonantCountSet = consonantCount.toSet\n        val vowelCountSet\
    \ = vowelCount.toSet\n        val consonantCountSet = consonantCount.toSet\n \
    \       val vowelCountSet = vowelCount.toSet\n        val consonantCountSet =\
    \ consonantCount.toSet\n        val vowelCountSet = vowelCount.toSet\n       \
    \ val consonantCountSet = consonantCount.toSet\n        val vowelCountSet = vowelCount.toSet\n\
    \        val consonantCountSet = consonantCount.toSet\n        val vowelCountSet\
    \ = vowelCount.toSet\n        val consonantCountSet = consonantCount.toSet\n \
    \       val vowelCountSet = vowelCount.toSet\n        val consonantCountSet =\
    \ consonantCount.toSet\n        val vowelCountSet = vowelCount.toSet\n       \
    \ val consonantCountSet = consonantCount.toSet\n        val vowelCountSet = vowelCount.toSet\n\
    \        val consonantCountSet = consonantCount.toSet\n        val vowelCountSet\
    \ = vowelCount.toSet\n        val consonantCountSet = consonantCount.toSet\n \
    \       val vowelCountSet = vowelCount.toSet\n        val consonantCountSet =\
    \ consonantCount.toSet\n        val vowelCountSet = vowelCount.toSet\n       \
    \ val consonantCountSet = consonantCount.toSet\n        val vowelCountSet = vowelCount.toSet\n\
    \        val consonantCountSet = consonantCount.toSet\n        val vowelCountSet",
  "        val words = mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\
    \n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowel_consonants\
    \ = vowels ++ consonants\n        val vowel_consonant_pairs = vowel_consonants.grouped(2).map(_.mkString)\n\
    \        val vowel_consonant_pairs_with_n = vowel_consonant_pairs.filter(_ =>\
    \ n >= 0)\n        val vowel_consonant_pairs_with_n2 = vowel_consonant_pairs_with_n.filter(_\
    \ => n <= 0)\n        val vowel_consonant_pairs_with_n3 = vowel_consonant_pairs_with_n2.filter(_\
    \ => n >= 1)\n        val vowel_consonant_pairs_with_n4 = vowel_consonant_pairs_with_n3.filter(_\
    \ => n <= 1)\n        val vowel_consonant_pairs_with_n5 = vowel_consonant_pairs_with_n4.filter(_\
    \ => n >= 2)\n        val vowel_consonant_pairs_with_n6 = vowel_consonant_pairs_with_n5.filter(_\
    \ => n <= 2)\n        val vowel_consonant_pairs_with_n7 = vowel_consonant_pairs_with_n6.filter(_\
    \ => n >= 3)\n        val vowel_consonant_pairs_with_n8 = vowel_consonant_pairs_with_n7.filter(_\
    \ => n <= 3)\n        val vowel_consonant_pairs_with_n9 = vowel_consonant_pairs_with_n8.filter(_\
    \ => n >= 4)\n        val vowel_consonant_pairs_with_n10 = vowel_consonant_pairs_with_n9.filter(_\
    \ => n <= 4)\n        val vowel_consonant_pairs_with_n11 = vowel_consonant_pairs_with_n10.filter(_\
    \ => n >= 5)\n        val vowel_consonant_pairs_with_n12 = vowel_consonant_pairs_with_n11.filter(_\
    \ => n <= 5)\n        val vowel_consonant_pairs_with_n13 = vowel_consonant_pairs_with_n12.filter(_\
    \ => n >= 6)\n        val vowel_consonant_pairs_with_n14 = vowel_consonant_pairs_with_n13.filter(_\
    \ => n <= 6)\n        val vowel_consonant_pairs_with_n15 = vowel_consonant_pairs_with_n14.filter(_\
    \ => n >= 7)\n        val vowel_consonant_pairs_with_n16 = vowel_conson", "  \
    \      val list = s.split(\" \").toList\n        val list2 = list.filter(_ !=\
    \ \" \")\n        val list3 = list2.filter(_ != \" \")\n        val list4 = list3.filter(_\
    \ != \" \")\n        val list5 = list4.filter(_ != \" \")\n        val list6 =\
    \ list5.filter(_ != \" \")\n        val list7 = list6.filter(_ != \" \")\n   \
    \     val list8 = list7.filter(_ != \" \")\n        val list9 = list8.filter(_\
    \ != \" \")\n        val list10 = list9.filter(_ != \" \")\n        val list11\
    \ = list10.filter(_ != \" \")\n        val list12 = list11.filter(_ != \" \")\n\
    \        val list13 = list12.filter(_ != \" \")\n        val list14 = list13.filter(_\
    \ != \" \")\n        val list15 = list14.filter(_ != \" \")\n        val list16\
    \ = list15.filter(_ != \" \")\n        val list17 = list16.filter(_ != \" \")\n\
    \        val list18 = list17.filter(_ != \" \")\n        val list19 = list18.filter(_\
    \ != \" \")\n        val list20 = list19.filter(_ != \" \")\n        val list21\
    \ = list20.filter(_ != \" \")\n        val list22 = list21.filter(_ != \" \")\n\
    \        val list23 = list22.filter(_ != \" \")\n        val list24 = list23.filter(_\
    \ != \" \")\n        val list25 = list24.filter(_ != \" \")\n        val list26\
    \ = list25.filter(_ != \" \")\n        val list27 = list26.filter(_ != \" \")\n\
    \        val list28 = list27.filter(_ != \" \")\n        val list29 = list28.filter(_\
    \ != \" \")\n        val list30 = list29.filter(_ != \" \")\n        val list31\
    \ = list30.filter(_ != \" \")\n        val list32 = list31.filter(_ != \" \")\n\
    \        val list33 = list32.filter(_ != \" \")\n        val list34 = list33.filter(_\
    \ != \" \")\n        val list35 = list34.filter(_ != \" \")\n        val list36\
    \ = list35.filter(_ != \" \")\n        val list37 = list36.filter(_ != \" \")\n\
    \        val list38 = list37.filter(_ != \" \")\n        val list39 = list38.filter(_\
    \ != \" \")\n        val list40 = list39.filter(_ != \" \")\n        val list41\
    \ = list40.filter(_ != \" \")\n        val list42 = list41.filter(_ != \" \")\n\
    \        val list43 = list42.filter(_ != \" \")\n        val list44 = list43.filter",
  "        val list = s.split(\" \").map(_.toUpperCase).toList\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     val count = word.count(c => c.isLetter)\n            if (count == n) result\
    \ += word\n        }\n        return result.toList", "        val words = new\
    \ mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\n        val consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n        val consonants_count = consonants.length\n\
    \        val vowels_count = vowels.length\n        val consonant_count = n - consonants_count\n\
    \        val vowel_count =  n - vowels_count\n        val consonant_index = s.toCharArray.zipWithIndex.filter(_._2\
    \ == consonants_count).map(_._1).reverse\n        val vowel_index = s.toCharArray.zipWithIndex.filter(_._2\
    \ == vowels_count).map(_._1).reverse\n        val consonant_char = s.toCharArray.filter(x\
    \ => consonant_index.contains(x.toInt)).map(x => x.toChar).reverse\n        val\
    \ vowel_char = s.toCharArray.filter(x => vowel_index.contains(x.toInt)).map(x\
    \ => x.toChar).reverse\n        val consonant_str = consonant_char.mkString(\"\
    \")\n        val vowel_str = vowel_char.mkString(\"\")\n        val consonant_list\
    \ = consonant_str.split(\"\").filter(x => x != \" \")\n        val vowel_list\
    \ = vowel_str.split(\"\").filter(x => x != \" \")\n        vowel_list foreach\
    \ { x => words += x }\n        consonant_list foreach { x => words += x }\n  \
    \      words.toList", "        val wordsWithNConsonants = s.split(\" \").filter(_.length\
    \ == n).map(_.split(\"\").filter(_ => !_.isLetter).mkString(\"\"))\n        wordsWithNConsonants.toList",
  "        val list = s.split(\" \")\n        val list2 = list.map(x => x.toUpperCase)\n\
    \        val list3 = list2.filter(x => x.contains(\"A\"))\n        val list4 =\
    \ list3.filter(x => x.contains(\"E\"))\n        val list5 = list4.filter(x =>\
    \ x.contains(\"I\"))\n        val list6 = list5.filter(x => x.contains(\"O\"))\n\
    \        val list7 = list6.filter(x => x.contains(\"U\"))\n        val list8 =\
    \ list7.filter(x => x.contains(\"a\"))\n        val list9 = list8.filter(x =>\
    \ x.contains(\"e\"))\n        val list10 = list9.filter(x => x.contains(\"i\"\
    ))\n        val list11 = list10.filter(x => x.contains(\"o\"))\n        val list12\
    \ = list11.filter(x => x.contains(\"u\"))\n        val list13 = list12.filter(x\
    \ => x.contains(\"A\"))\n        val list14 = list13.filter(x => x.contains(\"\
    E\"))\n        val list15 = list14.filter(x => x.contains(\"I\"))\n        val\
    \ list16 = list15.filter(x => x.contains(\"O\"))\n        val list17 = list16.filter(x\
    \ => x.contains(\"U\"))\n        val list18 = list17.filter(x => x.contains(\"\
    a\"))\n        val list19 = list18.filter(x => x.contains(\"e\"))\n        val\
    \ list20 = list19.filter(x => x.contains(\"i\"))\n        val list21 = list20.filter(x\
    \ => x.contains(\"o\"))\n        val list22 = list21.filter(x => x.contains(\"\
    u\"))\n        val list23 = list22.filter(x => x.contains(\"A\"))\n        val\
    \ list24 = list23.filter(x => x.contains(\"E\"))\n        val list25 = list24.filter(x\
    \ => x.contains(\"I\"))\n        val list26 = list25.filter(x => x.contains(\"\
    O\"))\n        val list27 = list26.filter(x => x.contains(\"U\"))\n        val\
    \ list28 = list27.filter(x => x.contains(\"a\"))\n        val list29 = list28.filter(x\
    \ => x.contains(\"e\"))\n        val list30 = list29.filter(x => x.contains(\"\
    i\"))\n        val list31 = list30.filter(x => x.contains(\"o\"))\n        val\
    \ list32 = list31.filter(x => x.contains(\"u\"))\n        val list33 = list32.filter(x\
    \ => x.contains(\"A\"))\n        val list34 = list33.", "        val list = s.split(\"\
    \ \")\n        val result = new mutable.ListBuffer[String]()\n        list.foreach(x\
    \ => {\n            val words = x.split(\"[^aeiou]\".toRegex)\n            words.foreach(y\
    \ => {\n                if (y.length == n) {\n                    result += y\n\
    \                }\n            })\n        })\n        return result.toList",
  "        val words = s.split(\" \")\n        val result: List[String] = new mutable.ListBuffer[String]\n\
    \        for(word <- words) {\n            val letters = word.split(\"\")\n  \
    \          val consonants = letters.filter(letter => letter != \"a\" && letter\
    \ != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\")\n       \
    \     if(consonants.length == n) {\n                result += word\n         \
    \   }\n        }\n        return result.toList", "        val words = mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()", "        val wordsWithNConsonants\
    \ = mutable.ListBuffer[String]()\n        val wordsWithNConsonantsCount = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCountMax = mutable.ListBuffer[Int]()\n      \
    \  val wordsWithNConsonantsCountMin = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountSum\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProduct =\
    \ mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductMax =\
    \ mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductMin =\
    \ mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSum =\
    \ mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumMax\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumMin\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSum\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumMax\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumMin\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumSum\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumSumMax\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumSumMin\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumSumSum\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumSumMax\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumSumMin\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumSumSum\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumSumSumMax\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumSumSumMin\
    \ = mutable.ListBuffer[Int]()\n        val wordsWith", "        val list = s.split(\"\
    \ \")\n        val result = new mutable.ListBuffer[String]()\n        list.foreach\
    \ { word =>\n            val count = word.split(\"[^aeiou]\").length\n       \
    \     if (count == n) {\n                result += word\n            }\n     \
    \   }\n        return result.toList", "        val words = mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonantSet = consonants.toSet\n        val vowelSet = vowels.toSet\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val ", "        val words =\
    \ s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n    \
    \    for(word <- words) {\n            val count = word.count(c => c.isLetter)\n\
    \            if(count == n) {\n                result += (word + \" \")\n    \
    \        }\n        }\n        if(result.isEmpty) {\n            List()\n    \
    \    } else {\n            result.mkString(\"\")\n        }", "        val list\
    \ = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        })\n        return result.toList", "        val words: List[String]\
    \ = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).toList\n        val consonants:\
    \ List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(\"\
    a\")).toList\n        val vowels: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(\"\
    e\")).toList\n        val consonantCount: Map[String, Long] = consonants.groupBy(_.toLowerCase).mapValues(_.length)\n\
    \        val vowelCount: Map[String, Long] = vowels.groupBy(_.toLowerCase).mapValues(_.length)\n\
    \        val consonantWords: List[String] = words.filter(word => consonantCount.get(word).map(_\
    \ == n).forall(identity))\n        val vowelWords: List[String] = words.filter(word\
    \ => vowelCount.get(word).map(_ == n).forall(identity))\n        consonantWords.toList\
    \ ++ vowelWords.toList", "        val list = s.split(\" \")\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     val count = word.count(_ == 'a')\n            if (count == n) {\n      \
    \          result += word\n            }\n        }\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }", "        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += (word + \" \")\n        }\n        if (result.isEmpty)\
    \ List()\n        else result.toList", "        val words = mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()", "        val list\
    \ = s.split(\" \").toList\n        val list = list.filter(x => x.contains(\"a\"\
    ))\n        val list = list.filter(x => x.contains(\"e\"))\n        val list =\
    \ list.filter(x => x.contains(\"i\"))\n        val list = list.filter(x => x.contains(\"\
    o\"))\n        val list = list.filter(x => x.contains(\"u\"))\n        val list\
    \ = list.filter(x => x.contains(\"l\"))\n        val list = list.filter(x => x.contains(\"\
    s\"))\n        val list = list.filter(x => x.contains(\"m\"))\n        val list\
    \ = list.filter(x => x.contains(\"h\"))\n        val list = list.filter(x => x.contains(\"\
    w\"))\n        val list = list.filter(x => x.contains(\"d\"))\n        val list\
    \ = list.filter(x => x.contains(\"c\"))\n        val list = list.filter(x => x.contains(\"\
    b\"))\n        val list = list.filter(x => x.contains(\"g\"))\n        val list\
    \ = list.filter(x => x.contains(\"f\"))\n        val list = list.filter(x => x.contains(\"\
    e\"))\n        val list = list.filter(x => x.contains(\"j\"))\n        val list\
    \ = list.filter(x => x.contains(\"k\"))\n        val list = list.filter(x => x.contains(\"\
    q\"))\n        val list = list.filter(x => x.contains(\"p\"))\n        val list\
    \ = list.filter(x => x.contains(\"r\"))\n        val list = list.filter(x => x.contains(\"\
    t\"))\n        val list = list.filter(x => x.contains(\"n\"))\n        val list\
    \ = list.filter(x => x.contains(\"v\"))\n        val list = list.filter(x => x.contains(\"\
    x\"))\n        val list = list.filter(x => x.contains(\"z\"))\n        val list\
    \ = list.filter(x => x.contains(\"x\"))\n        val list = list.filter(x => x.contains(\"\
    z\"))\n        val list = list.filter(x => x.contains(\"y\"))\n        val list\
    \ = list.filter(x => x.contains(\"s\"))\n        val list = list.filter(x => x.contains(\"\
    m\"))\n        val list = list.filter(x => x.contains(\"l\"))\n        val list\
    \ = list.filter(x => x.contains(\"k\"))\n        val list = list.filter(x => x.contains(\"\
    j\"))\n        val list = list.filter(x => x.contains(\"q\"))\n        val list\
    \ = list.filter(x => x.contains(\"p\"))\n        val list = list.filter(x => x.contains(\"\
    r\"))\n        val list = list.filter(x => x.contains(\"t\"))\n        val list\
    \ = list.filter(x => x.contains(\"", "        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(_ == 'a')\n            if (count\
    \ == n) {\n                result += (word + \" \")\n            }\n        }\n\
    \        if (result.isEmpty) {\n            List()\n        } else {\n       \
    \     result.toList\n        }", "        val words = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet",
  "        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until list.size) {\n            val word = list(i)\n    \
    \        if (word.contains(\"a\") || word.contains(\"e\") || word.contains(\"\
    i\") || word.contains(\"o\") || word.contains(\"u\")) {\n                result.add(word)\n\
    \            }\n        }\n        return result.toList", "        val words =\
    \ s.split(\" \").toList\n        val consonants = Set(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowels = Set(\"a\"\
    , \"e\", \"i\", \"o\", \"u\")\n        val consonantCount = words.count(x => consonants.contains(x))\n\
    \        val vowelCount = words.count(x => vowels.contains(x))\n        val consonantWords\
    \ = words.filter(x => consonants.contains(x))\n        val vowelWords = words.filter(x\
    \ => vowels.contains(x))\n        val consonantWordCount = consonantWords.size\n\
    \        val vowelWordCount = vowelWords.size\n        if (consonantCount >= n\
    \ && vowelCount >= n && consonantWordCount >= n && vowelWordCount >= n) {\n  \
    \          consonantWords.toList\n        } else {\n            List()\n     \
    \   }", "        val words = new mutable.ListBuffer[String]()\n        val vowels\
    \ = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val\
    \ consonants_count = consonants.toSet.size\n        val vowels_count = vowels.toSet.size\n\
    \        val consonant_count = consonants.toSet.count(_ == \" \")\n        val\
    \ vowel_count = vowels.toSet.count(_ == \" \")\n        val consonant_vowel_count\
    \ = consonants.toSet.count(_ == vowel)\n        val vowel_consonant_count = vowels.toSet.count(_\
    \ == consonant)\n        val vowel_consonant_vowel_count = vowels.toSet.count(_\
    \ == vowel && _ == consonant)\n        val vowel_consonant_vowel_consonant_count\
    \ = vowels.toSet.count(_ == vowel && _ == consonant && _ == consonant)\n     \
    \   val vowel_consonant_vowel_consonant_vowel_count = vowels.toSet.count(_ ==\
    \ vowel && _ == consonant && _ == consonant && _ == vowel)\n        val vowel_consonant_vowel_consonant_vowel_consonant_count\
    \ = vowels.toSet.count(_ == vowel && _ == consonant && _ == consonant && _ ==\
    \ consonant && _ == vowel && _ == consonant)\n        val vowel_consonant_vowel_consonant_vowel_consonant_vowel_count\
    \ = vowels.toSet.count(_ == vowel && _ == consonant && _ == consonant && _ ==\
    \ consonant && _ == vowel && _ == consonant && _ == vowel)\n        val vowel_consonant_vowel_consonant_vowel_consonant_vowel_consonant_count\
    \ = vowels.toSet.count(_ == vowel && _ == consonant && _ == consonant && _ ==\
    \ consonant && _ == vowel && _ == consonant && _ == vowel && _ == consonant)\n\
    \        val vowel_consonant_vowel_consonant_vowel_consonant_vowel_consonant_vowel_count\
    \ = vowels.toSet.count(_ == vowel && _ == consonant && _ == consonant && _ ==\
    \ consonant && _ == vowel && _ == consonant && _ == vowel && _ == consonant &&\
    \ _ == vowel)\n        val vowel_consonant_vowel", "        val list = s.split(\"\
    \ \")\n        val result = new mutable.ListBuffer[String]()\n        list.foreach\
    \ { word =>\n            val count = word.count(c => c.isLetter)\n           \
    \ if (count == n) result += (word + \" \")\n        }\n        return result.toList",
  "        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val letters = word.split(\"\")\n\
    \            letters.foreach { letter =>\n                if (letters.count(_\
    \ == 'a') >= n && letters.count(_ == 'e') >= n && letters.count(_ == 'i') >= n\
    \ && letters.count(_ == 'o') >= n && letters.count(_ == 'u') >= n && letters.count(_\
    \ == 'y') >= n) {\n                    result += word\n                }\n   \
    \         }\n        }\n        if (result.isEmpty) {\n            List()\n  \
    \      } else {\n            result.toList\n        }", "        val words = s.split(\"\
    \ \").toList\n        val result = new mutable.ListBuffer[String]()\n        words.foreach(word\
    \ => {\n            if (word.count(_ == 'a') >= n && word.count(_ == 'e') >= n\
    \ && word.count(_ == 'i') >= n && word.count(_ == 'o') >= n && word.count(_ ==\
    \ 'u') >= n && word.count(_ == 'y') >= n) {\n                result += word\n\
    \            }\n        })\n        return result.toList", "        val list =\
    \ s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(x => {\n            val count = x.count(_ == 'a')\n    \
    \        if (count == n) {\n                result += x\n            }\n     \
    \   })\n        return result.toList", "        val result = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsIndex = vowels.toSet.toList.zipWithIndex.filter(_._1 == true).map(_._2)\n\
    \        val consonantsIndex = consonants.toSet.toList.zipWithIndex.filter(_._1\
    \ == true).map(_._2)\n        val vowelsIndexCount = vowelsIndex.size\n      \
    \  val consonantsIndexCount = consonantsIndex.size\n        val vowelsIndexList\
    \ = new mutable.ListBuffer[Int]()\n        val consonantsIndexList = new mutable.ListBuffer[Int]()\n\
    \        val vowelsIndexSet = new mutable.HashSet[Int]()\n        val consonantsIndexSet\
    \ = new mutable.HashSet[Int]()\n        val vowelsIndexSet2 = new mutable.HashSet[Int]()\n\
    \        val consonantsIndexSet2 = new mutable.HashSet[Int]()\n        val vowelsIndexSet3\
    \ = new mutable.HashSet[Int]()\n        val consonantsIndexSet3 = new mutable.HashSet[Int]()\n\
    \        val vowelsIndexSet4 = new mutable.HashSet[Int]()\n        val consonantsIndexSet4\
    \ = new mutable.HashSet[Int]()\n        val vowelsIndexSet5 = new mutable.HashSet[Int]()\n\
    \        val consonantsIndexSet5 = new mutable.HashSet[Int]()\n        val vowelsIndexSet6\
    \ = new mutable.HashSet[Int]()\n        val consonantsIndexSet6 = new mutable.HashSet[Int]()\n\
    \        val vowelsIndexSet7 = new mutable.HashSet[Int]()\n        val consonantsIndexSet7\
    \ = new mutable.HashSet[Int]()\n        val vowelsIndexSet8 = new mutable.HashSet[Int]()\n\
    \        val consonantsIndexSet8 = new mutable.HashSet[Int]()\n        val vowelsIndexSet9\
    \ = new mutable.HashSet[Int]()\n        val consonantsIndexSet9 = new mutable.HashSet[Int]()\n\
    \        val vowelsIndexSet10 = new mutable.HashSet[Int]()\n        val consonantsIndex",
  '        val words: List[String] = s.split(" ").filter(_.nonEmpty).map(_.toLowerCase).filter(_.length
    == n).map(word => word.split("[^aeiou]")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length
    == n).map(word => word.split("[^aeiou]")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length
    == n).map(word => word.split("[^aeiou]")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length
    == n).map(word => word.split("[^aeiou]")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length
    == n).map(word => word.split("[^aeiou]")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length
    == n).map(word => word.split("[^aeiou]")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length
    == n).map(word => word.split("[^aeiou]")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length
    == n).map(word => word.split("[^aeiou]")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length
    == n).map(word => word.split("[^aeiou]")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length
    == n).map(word => word.split("[^aeiou]")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length
    == n).map(word => word.split("[^aeiou]")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length
    == n).map(word => word.split("[^aeiou]")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length
    == n).map(word => word.split("[^aeiou]")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length
    == n).map(word => word.split("[^aeiou]")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length
    == n).map(word => word.split("[^aeiou]")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length
    == n).map(word => word.split("[^aeiou]")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length
    == n).map(word => word.split("[^aeiou]")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length
    == n).map(word => word.split("[^aeiou]")).', "        val list = s.split(\" \"\
    ).map(_.toUpperCase).toList\n        val result: List[String] = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(_ == 'A')\
    \ +\n                word.count(_ == 'E') +\n                word.count(_ == 'I')\
    \ +\n                word.count(_ == 'O') +\n                word.count(_ == 'U')\n\
    \            if (count == n) {\n                result ++= word\n            }\n\
    \        }\n        if (result.isEmpty) {\n            List()\n        } else\
    \ {\n            result.toList\n        }", "        val words = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n       \
    \         words += s.substring(0,i)\n            }\n        }\n        words.toList",
  "        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { x =>\n            val list = x.split(\"\\\\s\")\n    \
    \        list.foreach { y =>\n                if (y.length == n) {\n         \
    \           result += y\n                }\n            }\n        }\n       \
    \ return result.toList", "        val result = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonants_count = consonants.length\n        val vowels_count =\
    \ vowels.length\n        val consonant_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val consonant_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        ", "        val list = s.split(\" \").toList\n     \
    \   val result = new mutable.ListBuffer[String]()\n        list.foreach(word =>\
    \ {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) {\n                result += (word + \" \")\n            }\n        })\n\
    \        return result.toList", "        val words = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        val vowels = \"\
    AEIOU\".toList\n        val consonants = \"BCDFGHJKLMNPQRSTVWXYZ\".toList\n  \
    \      val consonantsCount = consonants.count(_ == \" \")\n        val vowelsCount\
    \ = vowels.count(_ == \" \")\n        val consonantsCountAndVowelsCount = consonantsCount\
    \ + vowelsCount\n        val consonantsCountAndVowelsCountAndWords = consonantsCountAndVowelsCount\
    \ + words.count(_ == \" \")\n        val consonantsCountAndVowelsCountAndWordsLessThanN\
    \ = consonantsCountAndVowelsCountAndWords - n\n        val consonantsCountAndVowelsCountAndWordsLessThanNAndNotVowel\
    \ = consonantsCountAndVowelsCountAndWordsLessThanN - vowelsCount\n        val\
    \ consonantsCountAndVowelsCountAndWordsLessThanNAndNotVowelAndNotConsonant = consonantsCountAndVowelsCountAndWordsLessThanNAndNotVowel\
    \ - consonantsCount\n        val consonantsCountAndVowelsCountAndWordsLessThanNAndNotVowelAndNotConsonantAndNotSpace\
    \ = consonantsCountAndVowelsCountAndWordsLessThanNAndNotVowelAndNotConsonant -\
    \ consonantsCount + words.count(_ == \" \")\n        val consonantsCountAndVowelsCountAndWordsLessThanNAndNotVowelAndNotConsonantAndNotSpaceLessThanN\
    \ = consonantsCountAndVowelsCountAndWordsLessThanNAndNotVowelAndNotConsonantAndNotSpace\
    \ - consonantsCountAndVowelsCountAndWordsLessThanN\n        val consonantsCountAndVowelsCountAndWordsLessThanNAndNotVowelAndNotConsonantAndNotSpaceLessThanNAndNotVowel\
    \ = consonantsCountAndVowelsCountAndWordsLessThanNAndNotVowelAndNotConsonantAndNotSpaceLessThanN\
    \ - vowelsCount\n        val consonantsCountAndVowel", "        val words = s.split(\"\
    \ \")\n        val result: List[String] = new mutable.ListBuffer[String]()\n \
    \       for (word <- words) {\n            if (word.length == n) {\n         \
    \       result.add(word)\n            }\n        }\n        return result.toList",
  "        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val wordList = word.split(\" \")\n\
    \            wordList.foreach { word =>\n                if (wordList.length ==\
    \ n) {\n                    result += word\n                }\n            }\n\
    \        }\n        if (result.isEmpty) {\n            List()\n        } else\
    \ {\n            result.toList\n        }", "        val list = s.split(\" \"\
    )\n        val result = new mutable.ListBuffer[String]()\n        for (i <- 0\
    \ until list.size) {\n            val word = list(i)\n            if (word.contains(\"\
    a\") || word.contains(\"e\") || word.contains(\"i\") || word.contains(\"o\") ||\
    \ word.contains(\"u\")) {\n                if (word.contains(\"a\") && word.contains(\"\
    e\") && word.contains(\"i\") && word.contains(\"o\") && word.contains(\"u\"))\
    \ {\n                    result.add(word)\n                }\n            }\n\
    \            if (word.contains(\"b\") || word.contains(\"c\") || word.contains(\"\
    d\") || word.contains(\"f\") || word.contains(\"g\") || word.contains(\"h\") ||\
    \ word.contains(\"j\") || word.contains(\"k\") || word.contains(\"l\") || word.contains(\"\
    m\") || word.contains(\"n\") || word.contains(\"p\") || word.contains(\"q\") ||\
    \ word.contains(\"r\") || word.contains(\"s\") || word.contains(\"t\") || word.contains(\"\
    v\") || word.contains(\"w\") || word.contains(\"x\") || word.contains(\"y\") ||\
    \ word.contains(\"z\")) {\n                if (word.contains(\"b\") && word.contains(\"\
    c\") && word.contains(\"d\") && word.contains(\"f\") && word.contains(\"g\") &&\
    \ word.contains(\"h\") && word.contains(\"j\") && word.contains(\"k\") && word.contains(\"\
    l\") && word.contains(\"m\") && word.contains(\"n\") && word.contains(\"p\") &&\
    \ word.contains(\"q\") && word.contains(\"r\") && word.contains(\"s\") && word.contains(\"\
    t\") && word.contains(\"v\") && word.contains(\"w\") && word.contains(\"x\") &&\
    \ word.contains(\"y\") && word.contains(\"z\")) {\n                    result.add(word)\n\
    \                }\n            }\n            if (word.contains(\"p\") || word.contains(\"\
    q\") || word.contains(\"r\") || word.contains(\"s\") || word.contains(\"t\") ||\
    \ word.contains(\"v\") || word.contains(\"w\") || word.contains(\"x\") || word.contains(\"\
    y\") || word.contains(\"z\")) {\n                if (word.contains(\"p\") && word.contains(\"\
    q\") && word.contains(\"r\") && word.contains(\"s\") && word.contains(\"t\") &&\
    \ word.contains(\"v\") && word.contains(\"w\") && word.contains(\"x\") && word.contains(\"\
    y\") && word.contains(\"z\")) {\n                    result.add(word)\n      \
    \          }\n            }\n            if (word.contains(\"s\") || word.contains(\"\
    t\") || word.contain", "        val list = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.toString.toUpperCase == \"\
    A\" || c.toString.toUpperCase == \"E\" || c.toString.toUpperCase == \"I\" || c.toString.toUpperCase\
    \ == \"O\" || c.toString.toUpperCase == \"U\")\n            if (count == n) {\n\
    \                result += (word + \" \")\n            }\n        }\n        return\
    \ result.toList", "        val list = s.split(\" \")\n        val result = new\
    \ mutable.ListBuffer[String]()\n        list.foreach(word => {\n            val\
    \ count = word.count(c => c.isLetter)\n            if (count == n) result += word\n\
    \        })\n        return result.toList", "        val words = s.split(\" \"\
    ).filter(_.isLetter).map(_.toUpperCase)\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        }\n        if (result.isEmpty) {\n            List()\n        } else\
    \ {\n            result.toList\n        }", "        val words = mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonantSet = consonants.toSet\n        val vowelSet = vowels.toSet\n\
    \        val vowelCount = vowels.toSet.size\n        val consonantCount = consonants.toSet.size\n\
    \        val vowelCounts = vowels.toList.map(vowelCount _)\n        val consonantCounts\
    \ = consonants.toList.map(consonantCount _)\n        val vowelCountPairs = vowelCounts.zip(consonantCounts)\n\
    \        val vowelCountPairsSorted = vowelCountPairs.sortWith((a, b) => a._1 <\
    \ b._1)\n        val vowelCountPairsSortedWithCount = vowelCountPairsSorted.map(pair\
    \ => pair._1 -> pair._2)\n        val vowelCountPairsSortedWithCountSorted = vowelCountPairsSortedWithCount.sortWith((a,\
    \ b) => a._1 < b._1)\n        val vowelCountPairsSortedWithCountSortedWithCount\
    \ = vowelCountPairsSortedWithCountSorted.map(pair => pair._1 -> pair._2)\n   \
    \     val vowelCountPairsSortedWithCountSortedWithCountSorted = vowelCountPairsSortedWithCountSortedWithCount.sortWith((a,\
    \ b) => a._1 < b._1)\n        val vowelCountPairsSortedWithCountSortedWithCountSortedWithCount\
    \ = vowelCountPairsSortedWithCountSortedWithCountSorted.map(pair => pair._1 ->\
    \ pair._2)\n        val vowelCountPairsSortedWithCountSortedWithCountSortedWithCountSorted\
    \ = vowelCountPairsSortedWithCountSortedWithCountSortedWithCount.sortWith((a,\
    \ b) => a._1 < b._1)\n        val vowelCountPairsSortedWithCountSortedWithCountSortedWithCountSortedWithCount\
    \ = vowelCountPairsSortedWithCountSortedWithCountSortedWithCountSorted.map(pair\
    \ => pair._1 -> pair._2)\n        val vowelCountPairsSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted\
    \ = vowelCountPairsSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted.sortWith((a,\
    \ b) => a._1 < b._1)\n        val vowelCountPairsSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCount\
    \ = vowelCountPairsSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted.map(pair\
    \ => pair._1 -> pair._2)", "        val list = s.split(\" \")\n        val list2\
    \ = list.filter(x => x.contains(\"a\"))\n        val list3 = list.filter(x =>\
    \ x.contains(\"e\"))\n        val list4 = list.filter(x => x.contains(\"i\"))\n\
    \        val list5 = list.filter(x => x.contains(\"o\"))\n        val list6 =\
    \ list.filter(x => x.contains(\"u\"))\n        val list7 = list.filter(x => x.contains(\"\
    y\"))\n        val list8 = list.filter(x => x.contains(\"h\"))\n        val list9\
    \ = list.filter(x => x.contains(\"l\"))\n        val list10 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list11 = list.filter(x => x.contains(\"a\"))\n\
    \        val list12 = list.filter(x => x.contains(\"e\"))\n        val list13\
    \ = list.filter(x => x.contains(\"i\"))\n        val list14 = list.filter(x =>\
    \ x.contains(\"o\"))\n        val list15 = list.filter(x => x.contains(\"u\"))\n\
    \        val list16 = list.filter(x => x.contains(\"y\"))\n        val list17\
    \ = list.filter(x => x.contains(\"h\"))\n        val list18 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list19 = list.filter(x => x.contains(\"l\"))\n\
    \        val list20 = list.filter(x => x.contains(\"a\"))\n        val list21\
    \ = list.filter(x => x.contains(\"e\"))\n        val list22 = list.filter(x =>\
    \ x.contains(\"i\"))\n        val list23 = list.filter(x => x.contains(\"o\"))\n\
    \        val list24 = list.filter(x => x.contains(\"u\"))\n        val list25\
    \ = list.filter(x => x.contains(\"y\"))\n        val list26 = list.filter(x =>\
    \ x.contains(\"h\"))\n        val list27 = list.filter(x => x.contains(\"l\"))\n\
    \        val list28 = list.filter(x => x.contains(\"l\"))\n        val list29\
    \ = list.filter(x => x.contains(\"a\"))\n        val list30 = list.filter(x =>\
    \ x.contains(\"e\"))\n        val list31 = list.filter(x => x.contains(\"i\"))\n\
    \        val list32 = list.filter(x => x.contains(\"o\"))\n        val list33\
    \ = list.filter(x => x.contains(\"u\"))\n        val list34 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list35 = list.filter(x => x.contains(\"h\"))\n\
    \        val list36 = list.filter(", "        val list = s.split(\" \")\n    \
    \    val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c >= 'a' && c <= 'z' || c >= 'A'\
    \ && c <= 'Z')\n            if (count == n) {\n                result += word\n\
    \            }\n        })\n        if (result.isEmpty) {\n            List()\n\
    \        } else {\n            result.toList\n        }", "        val words =\
    \ new mutable.ListBuffer[String]()\n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n        val vowels = \"aeiouAEIOU\"\n        val consonantCount = s.count(consonants.toChar)\n\
    \        val vowelCount = s.count(vowels.toChar)\n        val consonantCountMinusVowels\
    \ = consonantCount - vowelCount\n        val vowelCountMinusConsonants = vowelCount\
    \ - consonantCount\n        val consonantCountMinusConsonants2 = consonantCount\
    \ - consonantCountMinusVowels\n        val vowelCountMinusConsonants2 = vowelCount\
    \ - consonantCountMinusVowels\n        val consonantCountMinusVowels2 = consonantCount\
    \ - vowelCountMinusConsonants\n        val vowelCountMinusConsonants2 = vowelCount\
    \ - consonantCountMinusVowels\n        val consonantCountMinusVowels3 = consonantCount\
    \ - vowelCountMinusConsonants2\n        val vowelCountMinusConsonants3 = vowelCount\
    \ - consonantCountMinusVowels2\n        val consonantCountMinusVowels4 = consonantCount\
    \ - vowelCountMinusConsonants3\n        val vowelCountMinusConsonants4 = vowelCount\
    \ - consonantCountMinusVowels3\n        val consonantCountMinusVowels5 = consonantCount\
    \ - vowelCountMinusConsonants4\n        val vowelCountMinusConsonants5 = vowelCount\
    \ - consonantCountMinusVowels4\n        val consonantCountMinusVowels6 = consonantCount\
    \ - vowelCountMinusConsonants5\n        val vowelCountMinusConsonants6 = vowelCount\
    \ - consonantCountMinusVowels5\n        val consonantCountMinusVowels7 = consonantCount\
    \ - vowelCountMinusConsonants6\n        val vowelCountMinusConsonants7 = vowelCount\
    \ - consonantCountMinusVowels6\n        val consonantCountMinusVowels8 = consonantCount\
    \ - vowelCountMinusConsonants7\n        val vowelCountMinusCon", "        val\
    \ words = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        words.foreach(word => {\n            if (word.contains(\"a\") || word.contains(\"\
    e\") || word.contains(\"i\") || word.contains(\"o\") || word.contains(\"u\") ||\
    \ word.contains(\"y\")) {\n                result.add(word)\n            }\n \
    \       })\n        return result.toList", "        val words = s.split(\" \"\
    ).filter(_.nonEmpty)\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val count = word.count(_ == 'a')\n\
    \            if(count == n) {\n                result += word\n            }\n\
    \        }\n        if(result.isEmpty) {\n            List()\n        } else {\n\
    \            result.toList\n        }", "        val words = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        words.foreach(word\
    \ => {\n            val count = word.count(_ == 'a')\n            if (count ==\
    \ n) {\n                result += word\n            }\n        })\n        return\
    \ result.toList", "        val list = s.split(\" \").toList\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     val count = word.count(c => c.isLetter)\n            if (count == n) {\n\
    \                result += (word + \" \")\n            }\n        }\n        return\
    \ result.toList", "        val list = s.split(\" \")\n        val result = new\
    \ mutable.ListBuffer[String]()\n        for (word <- list) {\n            if (word.length\
    \ == n) {\n                result += (word + \" \")\n            }\n        }\n\
    \        return result.toList", "        val list = s.split(\" \").toList\n  \
    \      val result = new mutable.ListBuffer[String]\n        list.foreach { word\
    \ =>\n            val count = word.split(\"[^aeiou]\").length\n            if\
    \ (count == n) result += word\n        }\n        return result.toList", "   \
    \     val words = new mutable.ListBuffer[String]()\n        val consonants = \"\
    bcdfghjklmnpqrstvwxyz\"\n        val vowels = \"aeiou\"\n        val consonantCount\
    \ = s.count(consonants)\n        val vowelCount = s.count(vowels)\n        val\
    \ consonantCountInWord = consonantCount + n\n        val vowelCountInWord = vowelCount\
    \ + n\n        val consonantCountInWordInWord = consonantCountInWord * n\n   \
    \     val vowelCountInWordInWord = vowelCountInWord * n\n        val consonantCountInWordInWordInWord\
    \ = consonantCountInWordInWord * n\n        val vowelCountInWordInWordInWord =\
    \ vowelCountInWordInWord * n\n        val consonantCountInWordInWordInWordInWord\
    \ = consonantCountInWordInWordInWord * n\n        val vowelCountInWordInWordInWordInWord\
    \ = vowelCountInWordInWordInWord * n\n        val consonantCountInWordInWordInWordInWordInWord\
    \ = consonantCountInWordInWordInWordInWord * n\n        val vowelCountInWordInWordInWordInWordInWord\
    \ = vowelCountInWordInWordInWordInWord * n\n        val consonantCountInWordInWordInWordInWordInWord\
    \ = consonantCountInWordInWordInWordInWordInWord * n\n        val vowelCountInWordInWordInWordInWordInWord\
    \ = vowelCountInWordInWordInWordInWordInWord * n\n        val consonantCountInWordInWordInWordInWordInWordInWord\
    \ = consonantCountInWordInWordInWordInWordInWordInWord * n\n        val vowelCountInWordInWordInWordInWordInWordInWord\
    \ = vowelCountInWordInWordInWordInWordInWordInWord * n\n        val consonantCountInWordInWordInWordInWordInWordInWord\
    \ = consonantCountInWordInWordInWordInWordInWordInWord * n\n        val vowelCountInWordInWordInWordInWordInWordInWord\
    \ = vowelCountInWordInWordInWordInWordInWordInWordInWord * n\n        val consonantCountInWordInWordInWordInWordInWordInWord\
    \ = conson", "        val words = mutable.ListBuffer.empty[String]\n        val\
    \ vowels = mutable.ListBuffer.empty[String]\n        val consonants = mutable.ListBuffer.empty[String]\n\
    \        val vowelsCount = mutable.ListBuffer.empty[String]\n        val consonantsCount\
    \ = mutable.ListBuffer.empty[String]\n        val vowelsCountMap = mutable.HashMap[String,\
    \ Int]()\n        val consonantsCountMap = mutable.HashMap[String, Int]()\n  \
    \      val vowelsCountMap2 = mutable.HashMap[String, Int]()\n        val consonantsCountMap2\
    \ = mutable.HashMap[String, Int]()\n        val vowelsCountMap3 = mutable.HashMap[String,\
    \ Int]()\n        val consonantsCountMap3 = mutable.HashMap[String, Int]()\n \
    \       val vowelsCountMap4 = mutable.HashMap[String, Int]()\n        val consonantsCountMap4\
    \ = mutable.HashMap[String, Int]()\n        val vowelsCountMap5 = mutable.HashMap[String,\
    \ Int]()\n        val consonantsCountMap5 = mutable.HashMap[String, Int]()\n \
    \       val vowelsCountMap6 = mutable.HashMap[String, Int]()\n        val consonantsCountMap6\
    \ = mutable.HashMap[String, Int]()\n        val vowelsCountMap7 = mutable.HashMap[String,\
    \ Int]()\n        val consonantsCountMap7 = mutable.HashMap[String, Int]()\n \
    \       val vowelsCountMap8 = mutable.HashMap[String, Int]()\n        val consonantsCountMap8\
    \ = mutable.HashMap[String, Int]()\n        val vowelsCountMap9 = mutable.HashMap[String,\
    \ Int]()\n        val consonantsCountMap9 = mutable.HashMap[String, Int]()\n \
    \       val vowelsCountMap10 = mutable.HashMap[String, Int]()\n        val consonantsCountMap10\
    \ = mutable.HashMap[String, Int]()\n        val vowelsCountMap11 = mutable.HashMap[String,\
    \ Int]()\n        val consonantsCountMap11 = mutable.HashMap[String, Int]()\n\
    \        val vowelsCountMap12 = mutable.HashMap[String, Int]()\n        val consonantsCountMap12\
    \ = mutable.HashMap[String, Int]()\n        val vowelsCountMap13 = mutable.HashMap[String,\
    \ Int]()\n        val consonantsCountMap13 = mutable.HashMap[String, Int]()\n\
    \        val vowelsCountMap14 = mutable.HashMap[String, Int", "        val words\
    \ = s.split(\" \")\n        val result: List[String] = new ListBuffer[String]\n\
    \        for(word <- words) {\n            val letters = word.split(\"\")\n  \
    \          val count = new mutable.HashMap[String, Int]()\n            for(letter\
    \ <- letters) {\n                if(letter.toString.toUpperCase == \"A\" || letter.toString.toUpperCase\
    \ == \"E\" || letter.toString.toUpperCase == \"I\" || letter.toString.toUpperCase\
    \ == \"O\" || letter.toString.toUpperCase == \"U\") {\n                    count.put(letter,\
    \ count.getOrElse(letter, 0) + 1)\n                }\n            }\n        \
    \    if(count.size == n) {\n                result += (word + \" \")\n       \
    \     }\n        }\n        return result.toList", "        val list = s.split(\"\
    \ \")\n        val result = new mutable.ListBuffer[String]()\n        list.foreach\
    \ { word =>\n            val count = word.count(c => c.isLetter)\n           \
    \ if (count == n) result += (word + \" \")\n        }\n        if (result.isEmpty)\
    \ result else result.toList", "        val words = mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiouAEIOU\"\n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n        val consonants_count = consonants.toSet.size\n        val vowels_count\
    \ = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n    \
    \    val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val ", "        val words:\
    \ List[String] = s.split(\" \").filter(_.length == n).map(_.toLowerCase)\n   \
    \     val counts = words.map(word => word.count(_ == 'a')).toList\n        val\
    \ maxCount = counts.max\n        val maxIndex = counts.indexWhere(_ == maxCount)\n\
    \        val maxWord = words(maxIndex)\n        val maxCount = maxCount.toInt\n\
    \        val maxIndex = maxIndex.toInt\n        val maxWordCount = words.count(word\
    \ => word == maxWord)\n        val maxWordIndex = words.indexOf(maxWord)\n   \
    \     val maxWordCount = maxWordCount.toInt\n        val maxWordIndex = maxWordIndex.toInt\n\
    \        val maxWordCount = maxWordCount.toInt\n        if (maxWordCount == maxCount)\
    \ {\n            if (maxWordIndex == maxIndex) {\n                if (maxWordIndex\
    \ == maxWordIndex) {\n                    if (maxWordIndex == maxWordIndex + 1)\
    \ {\n                        words.take(maxWordIndex + 1).map(_.toLowerCase)\n\
    \                    } else {\n                        words.take(maxWordIndex).map(_.toLowerCase)\n\
    \                    }\n                } else {\n                    words.take(maxWordIndex).map(_.toLowerCase)\n\
    \                }\n            } else {\n                words.take(maxWordIndex).map(_.toLowerCase)\n\
    \            }\n        } else {\n            words.take(maxWordIndex).map(_.toLowerCase)\n\
    \        }", "        val words: List[String] = s.split(\" \").map(_.toLowerCase).toList\n\
    \        val consonants: List[String] = s.split(\" \").filter(_.isLetter).toList\n\
    \        val consonantsSet = consonants.toSet\n        val consonantsSetSize =\
    \ consonantsSet.size\n        val consonantsSetIterator = consonantsSet.iterator\n\
    \        val consonantsSetIteratorSize = consonantsSetIterator.size\n        val\
    \ consonantsSetIteratorIterator = consonantsSetIterator.iterator\n        val\
    \ consonantsSetIteratorIteratorSize = consonantsSetIteratorIterator.size\n   \
    \     val consonantsSetIteratorIteratorIterator = consonantsSetIteratorIterator.iterator\n\
    \        val consonantsSetIteratorIteratorIteratorSize = consonantsSetIteratorIteratorIterator.size\n\
    \        val consonantsSetIteratorIteratorIteratorIterator = consonantsSetIteratorIteratorIterator.iterator\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorSize = consonantsSetIteratorIteratorIteratorIterator.size\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIterator = consonantsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorSize = consonantsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIterator = consonantsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIteratorSize = consonantsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIteratorIterator = consonantsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIteratorSize = consonantsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIteratorIterator = consonantsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = consonants", "        val words = s.split(\" \").toList\n        val wordSet\
    \ = mutable.Set[String]()\n        words.foreach(word => {\n            val charSet\
    \ = word.split(\"\").toSet\n            if (charSet.size == n) {\n           \
    \     wordSet += word\n            }\n        })\n        wordSet.distinct", " \
    \       val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        return result.toList", "        val list = s.split(\"\
    \ \").toList\n        val list2 = list.filter(_ != \" \")\n        val list3 =\
    \ list2.filter(_ != \" \")\n        val list4 = list3.filter(_ != \" \")\n   \
    \     val list5 = list4.filter(_ != \" \")\n        val list6 = list5.filter(_\
    \ != \" \")\n        val list7 = list6.filter(_ != \" \")\n        val list8 =\
    \ list7.filter(_ != \" \")\n        val list9 = list8.filter(_ != \" \")\n   \
    \     val list10 = list9.filter(_ != \" \")\n        val list11 = list10.filter(_\
    \ != \" \")\n        val list12 = list11.filter(_ != \" \")\n        val list13\
    \ = list12.filter(_ != \" \")\n        val list14 = list13.filter(_ != \" \")\n\
    \        val list15 = list14.filter(_ != \" \")\n        val list16 = list15.filter(_\
    \ != \" \")\n        val list17 = list16.filter(_ != \" \")\n        val list18\
    \ = list17.filter(_ != \" \")\n        val list19 = list18.filter(_ != \" \")\n\
    \        val list20 = list19.filter(_ != \" \")\n        val list21 = list20.filter(_\
    \ != \" \")\n        val list22 = list21.filter(_ != \" \")\n        val list23\
    \ = list22.filter(_ != \" \")\n        val list24 = list23.filter(_ != \" \")\n\
    \        val list25 = list24.filter(_ != \" \")\n        val list26 = list25.filter(_\
    \ != \" \")\n        val list27 = list26.filter(_ != \" \")\n        val list28\
    \ = list27.filter(_ != \" \")\n        val list29 = list28.filter(_ != \" \")\n\
    \        val list30 = list29.filter(_ != \" \")\n        val list31 = list30.filter(_\
    \ != \" \")\n        val list32 = list31.filter(_ != \" \")\n        val list33\
    \ = list32.filter(_ != \" \")\n        val list34 = list33.filter(_ != \" \")\n\
    \        val list35 = list34.filter(_ != \" \")\n        val list36 = list35.filter(_\
    \ != \" \")\n        val list37 = list36.filter(_ != \" \")\n        val list38\
    \ = list37.filter(_ != \" \")\n        val list39 = list38.filter(_ != \" \")\n\
    \        val list40 = list39.filter(_ != \" \")\n        val list41 = list40.filter(_\
    \ != \" \")\n        val list42 = list41.filter(_ != \" \")\n        val list43\
    \ = list42.filter(_ != \" \")\n        val list44 = list43.filter", "        val\
    \ list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until list.size) {\n            val word = list(i)\n    \
    \        val count = word.count(c => c.isLetter)\n            if (count == n)\
    \ {\n                result += (word + \" \")\n            }\n        }\n    \
    \    return result.toList", "        val list = s.split(\" \")\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach(x => {\n          \
    \  val count = x.count(_ == 'a')\n            if (count == n) {\n            \
    \    result += x\n            }\n        })\n        return result.toList", " \
    \       val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            if (word.contains(\"a\") || word.contains(\"\
    e\") || word.contains(\"i\") || word.contains(\"o\") || word.contains(\"u\"))\
    \ {\n                result.add(word)\n            }\n        }\n        result.toList",
  "        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        return result.toList", "        val list = s.split(\"\
    \ \").toList\n        val result = new mutable.ListBuffer[String]()\n        list.foreach\
    \ { word =>\n            val count = word.split(\"[^aeiou]\").length\n       \
    \     if (count == n) result += (word + \" \")\n        }\n        return result.toList",
  "        val list = s.split(\" \").toList\n        val list2 = list.filter(_ =>\
    \ _.length == n)\n        list2.map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.nonEmpty).map(_.toLowerCase).toList", "        val list = s.split(\"\
    \ \").toList\n        val result = new mutable.ListBuffer[String]()\n        list.foreach\
    \ { x =>\n            val y = x.toUpperCase\n            val z = y.replaceAll(\"\
    [^A-Z]\", \"\")\n            val z = z.split(\" \").toList\n            z.foreach\
    \ { y =>\n                if (y.length == n) {\n                    result +=\
    \ (y + \"\\n\")\n                }\n            }\n        }\n        return result.toList",
  "        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        })\n        return result.toList", "        val list = s.split(\"\
    \ \").toList\n        val result = new mutable.ListBuffer[String]()\n        list.foreach\
    \ { word =>\n            val count = word.count(c => c.isLetter)\n           \
    \ if (count == n) {\n                result += (word + \" \")\n            }\n\
    \        }\n        return result.toList", "        val list = s.split(\" \")\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.split(\"[^aeiou]\").length\n         \
    \   if (count == n) result += (word + \" \")\n        }\n        return result.toList",
  "        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) result += (word + \" \")\n        }\n  \
    \      return result.toList", "        val words = s.split(\" \").filter(_.isLetter).map(_.toUpperCase)\n\
    \        val nConsonants = n - 1\n        val nConsonantsList = words.map(_.toUpperCase).filter(_\
    \ => _ == _).count(_ == _)\n        val nConsonantsList2 = words.map(_.toUpperCase).filter(_\
    \ => _ == _).count(_ != _)\n        val nConsonantsList3 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ == _)\n        val nConsonantsList4 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList5 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList6 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList7 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList8 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList9 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList10 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList11 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList12 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList13 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList14 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList15 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList16 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList17 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nCon", "        val list = s.split(\"\
    \ \")\n        val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            if (word.contains(n)) {\n                result += (word +\
    \ \" \")\n            }\n        })\n        if (result.isEmpty) {\n         \
    \   List()\n        } else {\n            result.toList\n        }", "       \
    \ val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(_ == 'a')\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        return result.toList", "        val list = s.split(\"\
    \ \").toList\n        val result = new mutable.ListBuffer[String]()\n        list.foreach\
    \ { word =>\n            val count = word.count(c => c.isLetter)\n           \
    \ if (count == n) {\n                result += (word + \" \")\n            }\n\
    \        }\n        return result.toList", "        val list = s.split(\" \")\n\
    \        val result = new mutable.ListBuffer[String]()\n        for (i <- 0 until\
    \ list.size) {\n            val word = list(i)\n            if (word.contains(\"\
    a\") || word.contains(\"e\") || word.contains(\"i\") || word.contains(\"o\") ||\
    \ word.contains(\"u\")) {\n                result.add(word)\n            }\n \
    \       }\n        return result.toList", "        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) {\n                result += (word + \" \")\n            }\n        })\n\
    \        if (result.isEmpty) {\n            List()\n        } else {\n       \
    \     result.toList\n        }", "        val list = s.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach(word => {\n\
    \            val count = word.count(c => c.isLetter)\n            if (count ==\
    \ n) {\n                result += (word + \" \")\n            }\n        })\n\
    \        return result.toList", "        val list = s.split(\" \").toList\n  \
    \      val result: List[String] = new mutable.ListBuffer[String]()\n        list.foreach\
    \ { word =>\n            val count = word.count(c => c.isLetter)\n           \
    \ if (count == n) {\n                result ::= word\n            }\n        }\n\
    \        if (result.isEmpty) {\n            List()\n        } else {\n       \
    \     result.toList\n        }", "        val list = s.split(\" \").toList\n \
    \       val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.isLetter)\n            if\
    \ (count == n) {\n                result += word\n            }\n        }\n \
    \       return result.toList", "        val wordList = s.split(\" \")\n      \
    \  val wordSet = mutable.Set[String]()\n        wordList.foreach(word => {\n \
    \           val wordSet = wordSet.toSet\n            val wordSetSize = wordSet.size\n\
    \            val consonantSet = wordSet.toSet\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet", "   \
    \     val words = s.split(\" \")\n        val wordList = mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val letters = word.split(\"\").map(_.toChar)\n\
    \            val consonants = letters.filter(letter => letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u')\n            if(consonants.length\
    \ == n) {\n                wordList += word\n            }\n        }\n      \
    \  wordList.mkString(\" \")", "        val words = s.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           if (word.length == n) {\n                result += (word + \" \")\n\
    \            }\n        }\n        return result.toList", "        val list =\
    \ s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- list) {\n            if (word.length == n) {\n         \
    \       result += (word + \" \")\n            }\n        }\n        return result.toList",
  "        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.split(\"[aeiou]\"\
    ).length\n            if (count == n) {\n                result += (word + \"\
    \ \")\n            }\n        }\n        return result.toList", '        val words:
    List[String] = s.split(" ").filter(_.nonEmpty).map(word => word.split("").filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).',
  "        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until list.size) {\n            if (list(i).length == n)\
    \ {\n                result += list(i)\n            }\n        }\n        return\
    \ result.toList", "        val wordList = s.split(\" \").toList\n        val wordSet\
    \ = wordList.map(x => x.toUpperCase).toSet\n        val result = new mutable.ListBuffer[String]()\n\
    \        wordList.foreach(x => {\n            val count = wordSet.count(y => y\
    \ == x.toUpperCase)\n            if (count == n) {\n                result +=\
    \ x\n            }\n        })\n        return result.toList", "        val list\
    \ = s.split(\" \")\n        val result: List[String] = new ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) result += word\n        })\n        return\
    \ result.toList", "        val list = s.split(\" \")\n        val result = new\
    \ mutable.ListBuffer[String]()\n        list.foreach(word => {\n            val\
    \ count = word.count(c => c.isLetter)\n            if (count == n) {\n       \
    \         result += word\n            }\n        })\n        return result.toList",
  "        val words = s.split(\" \")\n        val list = mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            if (word.length == n) {\n        \
    \        list += word\n            }\n        }\n        if (list.isEmpty) {\n\
    \            list\n        } else {\n            list.distinct\n        }", " \
    \       val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).toList\n\
    \        val consonants: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(\"\
    a\")).toList\n        val vowels: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(\"\
    e\")).toList\n        val consonantCounts = consonants.map(c => c.count(_ == 'a')).toList\n\
    \        val vowelCounts = vowels.map(v => v.count(_ == 'e')).toList\n       \
    \ val consonantAndVowelCounts = consonantCounts ++ vowelCounts\n        val consonantAndVowelCountSum\
    \ = consonantAndVowelCounts.sum\n        val consonantAndVowelCountSumInOrder\
    \ = consonantAndVowelCounts.sortWith(_ < _)\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVow", "        val list = s.split(\" \")\n        val result =\
    \ new mutable.ListBuffer[String]()\n        for (word <- list) {\n           \
    \ if (word.contains(\"a\") || word.contains(\"e\") || word.contains(\"i\") ||\
    \ word.contains(\"o\") || word.contains(\"u\")) {\n                result.add(word)\n\
    \            }\n        }\n        return result.toList", "        val list =\
    \ s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n    \
    \    list.foreach { word =>\n            val count = word.split(\"[^aeiou]\").length\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        }\n        if (result.isEmpty) {\n            List()\n        } else\
    \ {\n            result.toList\n        }", "        val words = mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size",
  "        val result = new mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowelCounts\
    \ = mutable.Map[String, Long]()\n        val consonantCounts = mutable.Map[String,\
    \ Long]()\n        val vowelCount = 0\n        val consonantCount = 0\n      \
    \  val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]", "        val list\
    \ = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += (word + \" \")\n        }\n        result.toList",
  "        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val list = word.split(\"\\\\W+\"\
    )\n            list.foreach { word =>\n                if (word.count(_ == 'a')\
    \ > n || word.count(_ == 'e') > n || word.count(_ == 'i') > n || word.count(_\
    \ == 'o') > n || word.count(_ == 'u') > n) {\n                    result.add(word)\n\
    \                }\n            }\n        }\n        return result.toList", " \
    \       val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { x =>\n            val list = x.split(\"\\\\W+\").toList\n\
    \            val count = list.count(_.isLetter)\n            if (count == n) {\n\
    \                result += x\n            }\n        }\n        return result.toList",
  "        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            if (word.count(_ == 'a') >= n &&\
    \ word.count(_ == 'e') >= n && word.count(_ == 'i') >= n && word.count(_ == 'o')\
    \ >= n && word.count(_ == 'u') >= n) {\n                result += word\n     \
    \       }\n        })\n        return result.toList", "        val list = s.split(\"\
    \ \").toList\n        val result = new mutable.ListBuffer[String]()\n        list.foreach\
    \ { word =>\n            val count = word.count(c => c.isLetter)\n           \
    \ if (count == n) {\n                result += (word + \" \")\n            }\n\
    \        }\n        if (result.isEmpty) {\n            List()\n        } else\
    \ {\n            result.mkString(\" \")\n        }", "        val words = new\
    \ mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\n        val consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n        val consonants_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val consonant_count = consonants.toSet.count(_\
    \ == \" \")\n        val vowel_count = vowels.toSet.count(_ == \" \")\n      \
    \  val consonant_vowel_count = consonants.toSet.count(vowels.contains)\n     \
    \   val vowel_consonant_count = vowels.toSet.count(consonants.contains)\n    \
    \    val vowel_consonant_vowel_count = vowels.toSet.count(consonants.contains.vowels)\n\
    \        val vowel_consonant_consonant_count = vowels.toSet.count(consonants.contains.consonants)\n\
    \        val vowel_consonant_consonant_vowel_count = vowels.toSet.count(consonants.contains.consonants.vowels)\n\
    \        val vowel_consonant_consonant_consonant_count = vowels.toSet.count(consonants.contains.consonants.consonants)\n\
    \        val vowel_consonant_consonant_consonant_vowel_count = vowels.toSet.count(consonants.contains.consonants.consonants.vowels)\n\
    \        val vowel_consonant_consonant_consonant_consonant_count = vowels.toSet.count(consonants.contains.consonants.consonants.consonants)\n\
    \        val vowel_consonant_consonant_consonant_consonant_vowel_count = vowels.toSet.count(consonants.contains.consonants.consonants.consonants.vowels)\n\
    \        val vowel_consonant_consonant_consonant_consonant_consonant_count = vowels.toSet.count(consonants.contains.consonants.consonants.consonants.consonants)\n\
    \        val vowel_consonant_consonant_consonant_consonant_consonant_vowel_count\
    \ = vowels.toSet.count(consonants.contains.consonants.consonants.consonants.consonants.vowels)\n\
    \        val vowel_consonant_consonant_consonant_consonant_consonant_consonant_count\
    \ = vowels.toSet.count(consonants.contains.conson", "        val wordsWithNConsonants\
    \ = \n            s.split(\" \").filter(_.length == n).map(word => \n        \
    \        word.split(\"\").filter(_.isLetter).filter(_.isUpper).mkString(\"\").toLowerCase)\n\
    \        wordsWithNConsonants.toList", "        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.isLetter)\n            if\
    \ (count == n) {\n                result += (word + \" \")\n            }\n  \
    \      }\n        if (result.isEmpty) {\n            List()\n        } else {\n\
    \            result.toList\n        }", "        val wordList = s.split(\" \"\
    ).toList\n        val result = new mutable.ListBuffer[String]()\n        wordList.foreach(word\
    \ => {\n            if (word.count(_ == 'a') >= n && word.count(_ == 'e') >= n\
    \ && word.count(_ == 'i') >= n && word.count(_ == 'o') >= n && word.count(_ ==\
    \ 'u') >= n) {\n                result += word\n            }\n        })\n  \
    \      return result.toList", "        val result = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonants_count = consonants.toSet.size // O(n)\n        val vowels_count\
    \ = vowels.toSet.size // O(n)\n        val vowels_index = vowels.toSet.indices.toList\
    \ // O(n)\n        val consonants_index = consonants.toSet.indices.toList // O(n)\n\
    \        val vowels_set = vowels.toSet // O(n)\n        val consonants_set = consonants.toSet\
    \ // O(n)\n        val vowels_count = vowels_set.size // O(1)\n        val consonants_count\
    \ = consonants_set.size // O(1)\n        val vowels_index = vowels_set.indices.toList\
    \ // O(n)\n        val consonants_index = consonants_set.indices.toList // O(n)\n\
    \        val vowels_set = vowels_set.toList // O(n)\n        val consonants_set\
    \ = consonants_set.toList // O(n)\n        val vowels_count = vowels_set.size\
    \ // O(1)\n        val consonants_count = consonants_set.size // O(1)\n      \
    \  val vowels_index = vowels_set.indices.toList // O(n)\n        val consonants_index\
    \ = consonants_set.indices.toList // O(n)\n        val vowels_set = vowels_set.toList\
    \ // O(n)\n        val consonants_set = consonants_set.toList // O(n)\n      \
    \  val vowels_count = vowels_set.size // O(1)\n        val consonants_count =\
    \ consonants_set.size // O(1)\n        val vowels_index = vowels_set.indices.toList\
    \ // O(n)\n        val consonants_index = consonants_set.indices.toList // O(n)\n\
    \        val vowels_set = vowels_set.toList // O(n)\n        val consonants_set\
    \ = consonants_set.toList // O(n)\n        val vowels_count = vowels_set.size\
    \ // O(1)\n        val consonants_count = consonants_set.size // O(1)\n      \
    \  val vowels_index = vowels_set.indices.toList // O(n)\n        val consonants_index\
    \ = consonants_set.indices.toList // O(n)\n        val vowels_set = vowels_set.toList\
    \ // O(n)\n        val consonants_set = conson", "        val list = s.split(\"\
    \ \")\n        val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) {\n                result += word\n            }\n        })\n       \
    \ if (result.isEmpty) {\n            List()\n        } else {\n            result.toList\n\
    \        }", "        val words: List[String] = s.split(\" \").filter(_.nonEmpty).toList\n\
    \        val consonants: List[String] = s.split(\" \").filter(_.nonEmpty).filter(_.contains(\"\
    a\")).toList\n        val vowels: List[String] = s.split(\" \").filter(_.nonEmpty).filter(_.contains(\"\
    e\")).toList\n        val consonantCount: Map[String, Long] = consonants.map(x\
    \ => (x, 1)).toMap\n        val vowelCount: Map[String, Long] = vowels.map(x =>\
    \ (x, 1)).toMap\n        val consonantCountList: List[(String, Long)] = consonantCount.values.toList\n\
    \        val vowelCountList: List[(String, Long)] = vowelCount.values.toList\n\
    \        val consonantCountListSorted: List[(String, Long)] = consonantCountList.sortBy(_._2).reverse\n\
    \        val vowelCountListSorted: List[(String, Long)] = vowelCountList.sortBy(_._2).reverse\n\
    \        val consonantCountListSortedWithVowel: List[(String, Long)] = consonantCountListSorted.filter(_._2\
    \ > vowelCountListSorted.head._2)\n        val vowelCountListSortedWithConsonant:\
    \ List[(String, Long)] = vowelCountListSorted.filter(_._2 > consonantCountListSorted.head._2)\n\
    \        val consonantCountListSortedWithVowelAndConsonant: List[(String, Long)]\
    \ = consonantCountListSortedWithVowel.filter(_._2 > vowelCountListSortedWithConsonant.head._2)\n\
    \        val vowelCountListSortedWithConsonantAndVowel: List[(String, Long)] =\
    \ vowelCountListSortedWithConsonant.filter(_._2 > consonantCountListSortedWithVowel.head._2)\n\
    \        consonantCountListSortedWithVowelAndConsonant.map(x => words).filter(_\
    \ == x._1).flatMap(x => x.split(\" \")).filter(x => x.size == n).toList", "  \
    \      val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        })\n        return result.toList", "        val list = s.split(\"\
    \ \").toList\n        val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val wordList = word.split(\"\").toList\n            wordList.foreach(letter\
    \ => {\n                if (letter == \"a\" || letter == \"e\" || letter == \"\
    i\" || letter == \"o\" || letter == \"u\") {\n                    if (wordList.count(_\
    \ == letter) == n) {\n                        result += (word + \" \")\n     \
    \               }\n                }\n            })\n        })\n        return\
    \ result.toList", "        val list = s.split(\" \")\n        val result = new\
    \ mutable.ListBuffer[String]()\n        list.foreach { word =>\n            val\
    \ count = word.count(c => c.isLetter)\n            if (count == n) {\n       \
    \         result += word\n            }\n        }\n        return result.toList",
  "        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val wordList = word.split(\"[^aeiou]\"\
    ).filter(_.nonEmpty)\n            if (wordList.length == n) {\n              \
    \  result ++= wordList\n            }\n        }\n        return result.toList",
  "        val list = s.split(\" \").map(_.toUpperCase).toList\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     val count = word.count(c => c.isLetter)\n            if (count == n) {\n\
    \                result += (word + \" \")\n            }\n        }\n        result\
    \ match {\n            case Nil => Nil\n            case _ => result.toList\n\
    \        }", "        val list = s.split(\" \").toList\n        val result = new\
    \ mutable.ListBuffer[String]\n        list.foreach { word =>\n            val\
    \ count = word.count(c => c.isLetter)\n            if (count == n) {\n       \
    \         result += (word + \" \")\n            }\n        }\n        return result.toList",
  "        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        return result.toList", "        val words = mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonantCount = consonants.count(_ == \" \")\n        val vowelCount\
    \ = vowels.count(_ == \" \")\n        val vowelCounts = vowels.map(x => vowels.count(_\
    \ == x))\n        val consonantCounts = consonants.map(x => consonants.count(_\
    \ == x))\n        val vowelCountPairs = vowelCounts.zip(consonantCounts)\n   \
    \     val vowelCountPairsSorted = vowelCountPairs.sortBy(_._1).reverse\n     \
    \   val vowelCountPairsSorted2 = vowelCountPairs.sortBy(_._2).reverse\n      \
    \  val vowelCountPairsSorted3 = vowelCountPairs.sortBy(_._3).reverse\n       \
    \ val vowelCountPairsSorted4 = vowelCountPairs.sortBy(_._4).reverse\n        val\
    \ vowelCountPairsSorted5 = vowelCountPairs.sortBy(_._5).reverse\n        val vowelCountPairsSorted6\
    \ = vowelCountPairs.sortBy(_._6).reverse\n        val vowelCountPairsSorted7 =\
    \ vowelCountPairs.sortBy(_._7).reverse\n        val vowelCountPairsSorted8 = vowelCountPairs.sortBy(_._8).reverse\n\
    \        val vowelCountPairsSorted9 = vowelCountPairs.sortBy(_._9).reverse\n \
    \       val vowelCountPairsSorted10 = vowelCountPairs.sortBy(_._10).reverse\n\
    \        val vowelCountPairsSorted11 = vowelCountPairs.sortBy(_._11).reverse\n\
    \        val vowelCountPairsSorted12 = vowelCountPairs.sortBy(_._12).reverse\n\
    \        val vowelCountPairsSorted13 = vowelCountPairs.sortBy(_._13).reverse\n\
    \        val vowelCountPairsSorted14 = vowelCountPairs.sortBy(_._14).reverse\n\
    \        val vowelCountPairsSorted15 = vowelCountPairs.sortBy(_._15).reverse\n\
    \        val vowelCountPairsSorted16 = vowelCountPairs.sortBy(_._16).reverse\n\
    \        val vowelCountPairsSorted17 = vowelCountPairs.sortBy(_._17).reverse\n\
    \        val vowelCountPairsSorted18 = vowelCountPairs.sortBy(_._18).reverse\n\
    \        val vowelCountPairsSorted19 = vowelCountPairs.sortBy(_._19).reverse\n\
    \        val vowelCountPairsSorted20", "        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach(x\
    \ => {\n            val count = x.count(_ == 'a')\n            if (count == n)\
    \ result += x\n        })\n        return result.toList", "        val words:\
    \ List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).toList\n\
    \        val consonants: List[String] = words.filter(_.contains(\"a\")).filter(_.contains(\"\
    e\")).filter(_.contains(\"i\")).filter(_.contains(\"o\")).filter(_.contains(\"\
    u\")).filter(_.contains(\"y\")).map(_.toLowerCase).toList\n        val vowels:\
    \ List[String] = words.filter(_.contains(\"a\")).filter(_.contains(\"e\")).filter(_.contains(\"\
    i\")).filter(_.contains(\"o\")).filter(_.contains(\"u\")).map(_.toLowerCase).toList\n\
    \        val consonantAndVowels: List[String] = consonants.filter(_.contains(\"\
    a\")).filter(_.contains(\"e\")).filter(_.contains(\"i\")).filter(_.contains(\"\
    o\")).filter(_.contains(\"u\")).map(_.toLowerCase).toList ++ vowels.filter(_.contains(\"\
    a\")).filter(_.contains(\"e\")).filter(_.contains(\"i\")).filter(_.contains(\"\
    o\")).filter(_.contains(\"u\")).map(_.toLowerCase).toList\n        val consonantAndVowelsAndConsonants:\
    \ List[String] = consonantAndVowels.filter(_.contains(\"a\")).filter(_.contains(\"\
    e\")).filter(_.contains(\"i\")).filter(_.contains(\"o\")).filter(_.contains(\"\
    u\")).map(_.toLowerCase).toList ++ consonantAndVowels.filter(_.contains(\"a\"\
    )).filter(_.contains(\"e\")).filter(_.contains(\"i\")).filter(_.contains(\"o\"\
    )).filter(_.contains(\"u\")).map(_.toLowerCase).toList ++ consonants.filter(_.contains(\"\
    a\")).filter(_.contains(\"e\")).filter(_.contains(\"i\")).filter(_.contains(\"\
    o\")).filter(_.contains(\"u\")).map(_.toLowerCase).toList\n        val consonantAndVowelsAndConsonantsAndVowelsAndConsonants:\
    \ List[String] = consonantAndVowelsAndConsonants.filter(_.contains(\"a\")).filter(_.contains(\"\
    e\")).filter(_.contains(\"i\")).filter(_.contains(\"o\")).filter(_.contains(\"\
    u\")).map(_.toLowerCase).toList ++ consonantAndVowelsAndConsonants.filter(_.contains(\"\
    a\")).filter(_.contains(\"e\")).filter(_.contains(\"i\")).filter(_.contains(\"\
    o\")).filter(_.contains(\"u\")).map(_.toLowerCase", "        val list = s.split(\"\
    \ \")\n        val result = new mutable.ListBuffer[String]()\n        list.foreach\
    \ { x =>\n            val count = x.count(_ == 'a')\n            if (count ==\
    \ n) {\n                result += x\n            }\n        }\n        return\
    \ result.toList", "        val wordList = s.split(\" \").toList\n        val wordSet\
    \ = wordList.map(x => x.toUpperCase).toSet\n        val result = wordList.filter(x\
    \ => wordSet.contains(x.toUpperCase)).sortBy(x => x).take(n)\n        result.map(x\
    \ => x.toUpperCase)", "        val words = s.split(\" \")\n        val list =\
    \ mutable.ListBuffer[String]()\n        for (word <- words) {\n            if\
    \ (word.contains(\"a\") || word.contains(\"e\") || word.contains(\"i\") || word.contains(\"\
    o\") || word.contains(\"u\") || word.contains(\"y\")) {\n                list\
    \ += word\n            }\n        }\n        if (list.size == 0) {\n         \
    \   list\n        } else {\n            list.take(n)\n        }", "        val\
    \ list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        })\n        return result.toList", "        val list = s.split(\" \"\
    ).map(_.toUpperCase).toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        })\n        return result.toList", "        val words: List[String] =\
    \ s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(n)).distinct\n\
    \        words.toList", "        val list = s.split(\" \").toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n\
    \            val count = word.count(_ == 'a')\n            if (count == n) {\n\
    \                result += word\n            }\n        }\n        return result.toList",
  "        val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toUpperCase).toList\n\
    \        val consonants: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toUpperCase).filter(_\
    \ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _\
    \ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"\
    U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_\
    \ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _\
    \ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"\
    U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_\
    \ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _\
    \ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"\
    U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_\
    \ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _\
    \ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"\
    U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_\
    \ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _\
    \ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"\
    U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_\
    \ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _\
    \ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"\
    U\").filter(_ => _ != \"U\").filter(_ => ", "        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val consonants = List(\"B\", \"C\", \"D\", \"F\"\
    , \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\"\
    , \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n        val vowels = List(\"A\",\
    \ \"E\", \"I\", \"O\", \"U\")\n        val consonantCount = words.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelCount = words.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n        val consonantWords = words.filter(_.toUpperCase.count(_\
    \ == _) == n)\n        val vowelWords = words.filter(_.toUpperCase.count(_ ==\
    \ _) == n)\n        val consonantWordsCount = consonantWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelWordsCount = vowelWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n        val consonantWordsVowels = consonantWords.filter(_.toUpperCase.count(_\
    \ == _) == n)\n        val vowelWordsVowels = vowelWords.filter(_.toUpperCase.count(_\
    \ == _) == n)\n        val consonantWordsVowelsCount = consonantWordsVowels.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelWordsVowelsCount = vowelWordsVowels.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n        val consonantWordsVowelsVowels = consonantWordsVowels.filter(_.toUpperCase.count(_\
    \ == _) == n)\n        val vowelWordsVowelsVowels = vowelWordsVowels.filter(_.toUpperCase.count(_\
    \ == _) == n)\n        val consonantWordsVowelsVowelsCount = consonantWordsVowelsVowels.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelWordsVowelsVowelsCount = vowelWordsVowelsVowels.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)", "        val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\")).filter(_.size == n).map(_.mkString(\"\")).filter(_.nonEmpty)\n\
    \        words.toList", "        val list = s.split(\" \")\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach(x => {\n          \
    \  val count = x.count(_ == 'a')\n            val count = x.count(_ == 'e')\n\
    \            val count = x.count(_ == 'i')\n            val count = x.count(_\
    \ == 'o')\n            val count = x.count(_ == 'u')\n            if (count ==\
    \ n) {\n                result += (x + \"\\n\")\n            }\n        })\n \
    \       return result.toList", "        val list = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val list = list.filter(_.length == n).map(_.split(\"\")).flatten\n  \
    \      list.filter(_.toString.toUpperCase.contains(\"CONSONANTS\")).sortBy(_.toString.toUpperCase).reverse.map(_.toString).toList",
  "        val list = s.split(\" \").map(_.toUpperCase).toList\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     val count = word.count(c => c.toString.toUpperCase.contains(c.toString.toUpperCase.take(n).mkString))\n\
    \            if (count == n) result += (word + \" \")\n        }\n        result.toList",
  "        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) result += word\n        }\n        return\
    \ result.toList", "        val list = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val result = list.filter(_ => n == 0 || _.count(_ == 'A') == n)\n   \
    \     result.map(_.split(\" \").map(_.toUpperCase))", "        val words: List[String]\
    \ = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).toList\n        val counts\
    \ = words.map(word => word -> word.length)\n        val maxCount = counts.maxBy(_._2)._1\n\
    \        val maxCountIndex = counts.indexWhere(_._2 == maxCount)\n        val\
    \ maxCountWord = words(maxCountIndex)\n        val maxCountWordIndex = words.indexOf(maxCountWord)\n\
    \        val maxCountWordLength = maxCountWord.length\n        val maxCountWordIndex\
    \ = words.indexOf(maxCountWord)\n        val maxCountWordLength = maxCountWord.length\n\
    \        val maxCountWordIndex = words.indexOf(maxCountWord)\n        val maxCountWordLength\
    \ = maxCountWord.length\n        val maxCountWordIndex = words.indexOf(maxCountWord)\n\
    \        val maxCountWordLength = maxCountWord.length\n        val maxCountWordIndex\
    \ = words.indexOf(maxCountWord)\n        val maxCountWordLength = maxCountWord.length\n\
    \        val maxCountWordIndex = words.indexOf(maxCountWord)\n        val maxCountWordLength\
    \ = maxCountWord.length\n        val maxCountWordIndex = words.indexOf(maxCountWord)\n\
    \        val maxCountWordLength = maxCountWord.length\n        val maxCountWordIndex\
    \ = words.indexOf(maxCountWord)\n        val maxCountWordLength = maxCountWord.length\n\
    \        val maxCountWordIndex = words.indexOf(maxCountWord)\n        val maxCountWordLength\
    \ = maxCountWord.length\n        val maxCountWordIndex = words.indexOf(maxCountWord)\n\
    \        val maxCountWordLength = maxCountWord.length\n        val maxCountWordIndex\
    \ = words.indexOf(maxCountWord)\n        val maxCountWordLength = maxCountWord.length\n\
    \        val maxCountWordIndex = words.indexOf(maxCountWord)\n        val maxCountWordLength\
    \ = maxCountWord.length\n        val maxCountWordIndex = words.indexOf(maxCountWord)\n\
    \        val maxCountWordLength = maxCountWord.length\n        val maxCountWordIndex\
    \ = words.indexOf(maxCountWord)\n        val maxCountWordLength = maxCountWord.length\n\
    \        val maxCountWordIndex = words.indexOf(maxCountWord)\n        val maxCountWordLength\
    \ = maxCountWord.length\n        val maxCountWordIndex = words.indexOf(maxCountWord)\n\
    \        val maxCountWordLength = maxCountWord.length\n        val maxCountWordIndex\
    \ = words.indexOf(maxCountWord)\n        val maxCountWordLength = maxCountWord.length\n\
    \        val maxCountWordIndex = words.indexOf(maxCountWord)\n        val maxCountWordLength\
    \ = maxCountWord.length\n        val maxCountWordIndex = words.", "        val\
    \ list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        if (result.isEmpty) {\n            List()\n  \
    \      } else {\n            result.toList\n        }", "        val words = s.split(\"\
    \ \").map(_.toUpperCase)\n        val list = words.filter(x => x.toUpperCase.count(_\
    \ == 'A') >= n).toList\n        list.filter(x => x.toUpperCase.count(_ == 'A')\
    \ == n).map(x => x.toUpperCase).mkString(\" \")", "        val list = s.split(\"\
    \ \")\n        val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.split(\"[^aeiou]\").length\n            if\
    \ (count == n) result += word\n        })\n        return result.toList", "  \
    \      val list = s.split(\" \").toList\n        val list = list.filter(x => x.contains(\"\
    a\"))\n        val list = list.filter(x => x.contains(\"e\"))\n        val list\
    \ = list.filter(x => x.contains(\"i\"))\n        val list = list.filter(x => x.contains(\"\
    o\"))\n        val list = list.filter(x => x.contains(\"u\"))\n        val list\
    \ = list.filter(x => x.contains(\"l\"))\n        val list = list.filter(x => x.contains(\"\
    l\"))\n        val list = list.filter(x => x.contains(\"a\"))\n        val list\
    \ = list.filter(x => x.contains(\"e\"))\n        val list = list.filter(x => x.contains(\"\
    i\"))\n        val list = list.filter(x => x.contains(\"o\"))\n        val list\
    \ = list.filter(x => x.contains(\"u\"))\n        val list = list.filter(x => x.contains(\"\
    l\"))\n        val list = list.filter(x => x.contains(\"l\"))\n        val list\
    \ = list.filter(x => x.contains(\"a\"))\n        val list = list.filter(x => x.contains(\"\
    e\"))\n        val list = list.filter(x => x.contains(\"i\"))\n        val list\
    \ = list.filter(x => x.contains(\"o\"))\n        val list = list.filter(x => x.contains(\"\
    u\"))\n        val list = list.filter(x => x.contains(\"l\"))\n        val list\
    \ = list.filter(x => x.contains(\"l\"))\n        val list = list.filter(x => x.contains(\"\
    a\"))\n        val list = list.filter(x => x.contains(\"e\"))\n        val list\
    \ = list.filter(x => x.contains(\"i\"))\n        val list = list.filter(x => x.contains(\"\
    o\"))\n        val list = list.filter(x => x.contains(\"u\"))\n        val list\
    \ = list.filter(x => x.contains(\"l\"))\n        val list = list.filter(x => x.contains(\"\
    l\"))\n        val list = list.filter(x => x.contains(\"a\"))\n        val list\
    \ = list.filter(x => x.contains(\"e\"))\n        val list = list.filter(x => x.contains(\"\
    i\"))\n        val list = list.filter(x => x.contains(\"o\"))\n        val list\
    \ = list.filter(x => x.contains(\"u\"))\n        val list = list.filter(x => x.contains(\"\
    l\"))\n        val list = list.filter(x => x.contains(\"l\"))\n        val list\
    \ = list.filter(x => x.contains(\"a\"))\n        val list = list.filter(x => x.contains(\"\
    e\"))\n        val list = list.filter(x => x.contains(\"i\"))\n        val list\
    \ = list.filter(x => x.contains(\"", "        val words = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowelCounts\
    \ = words.map(x => vowels.count(x.toUpperCase)).toList\n        val consonantCounts\
    \ = words.map(x => consonants.count(x.toUpperCase)).toList\n        val consonantCountSum\
    \ = consonantCounts.sum\n        val vowelCountSum = vowelCounts.sum\n       \
    \ val consonantCountDifference = consonantCountSum - vowelCountSum\n        val\
    \ vowelCountDifference = vowelCountSum - consonantCountSum\n        val consonantCountDifferencePercentage\
    \ = consonantCountDifference / consonantCountSum\n        val vowelCountDifferencePercentage\
    \ = vowelCountDifference / vowelCountSum\n        val consonantCountDifferencePercentagePercentage\
    \ = consonantCountDifferencePercentage * 100\n        val vowelCountDifferencePercentagePercentage\
    \ = vowelCountDifferencePercentage * 100\n        val consonantCountDifferencePercentagePercentagePercentage\
    \ = consonantCountDifferencePercentagePercentage * 100\n        val vowelCountDifferencePercentagePercentagePercentage\
    \ = vowelCountDifferencePercentagePercentage * 100\n        val consonantCountDifferencePercentagePercentagePercentage\
    \ = consonantCountDifferencePercentagePercentagePercentage * 100\n        val\
    \ vowelCountDifferencePercentagePercentagePercentage = vowelCountDifferencePercentagePercentagePercentage\
    \ * 100\n        val consonantCountDifferencePercentagePercentagePercentage =\
    \ consonantCountDifferencePercentagePercentagePercentage * 100\n        val vowelCountDifferencePercentagePercentagePercentage\
    \ = vowelCountDifferencePercentagePercentagePercentage * 100\n        val consonantCountDifferencePercentagePercentagePercentage\
    \ = consonantCountDifferencePercentagePercentagePercentage * 100\n        val\
    \ vowelCountDifferencePercentagePercentagePercentage = vowelCountDifferencePercentagePercentagePercentage\
    \ * 100\n        val consonantCountDifferencePercentagePercentagePercentage =\
    \ consonantCountDifferencePercentagePercentagePercentage * 100\n        val vowelCountDifferencePercentagePercentagePercentage\
    \ = vowelCountDifferencePercentagePercentagePercentage * 100\n        val consonantCountDifferencePercentagePercentagePercentage\
    \ = consonantCountDifferencePercentagePercentagePercentage * 100\n        val\
    \ vowelCountDifferencePercentagePercentagePercentage = vowelCountDifferencePercentagePercentagePercentage\
    \ * 100\n        val consonantCountDifferencePercentagePercentagePercentage =\
    \ consonantCountDifferencePercentagePercentagePercentage * 100\n        val vowelCountDifferencePercentagePercentagePercentage\
    \ = vowelCountDifferencePercentagePercentagePercentage ", "        val list =\
    \ s.split(\" \")\n        val list2 = list.filter(_ != \"\")\n        val list3\
    \ = list2.filter(_ != \" \")\n        val list4 = list3.filter(_ != \" \")\n \
    \       val list5 = list4.filter(_ != \" \")\n        val list6 = list5.filter(_\
    \ != \" \")\n        val list7 = list6.filter(_ != \" \")\n        val list8 =\
    \ list7.filter(_ != \" \")\n        val list9 = list8.filter(_ != \" \")\n   \
    \     val list10 = list9.filter(_ != \" \")\n        val list11 = list10.filter(_\
    \ != \" \")\n        val list12 = list11.filter(_ != \" \")\n        val list13\
    \ = list12.filter(_ != \" \")\n        val list14 = list13.filter(_ != \" \")\n\
    \        val list15 = list14.filter(_ != \" \")\n        val list16 = list15.filter(_\
    \ != \" \")\n        val list17 = list16.filter(_ != \" \")\n        val list18\
    \ = list17.filter(_ != \" \")\n        val list19 = list18.filter(_ != \" \")\n\
    \        val list20 = list19.filter(_ != \" \")\n        val list21 = list20.filter(_\
    \ != \" \")\n        val list22 = list21.filter(_ != \" \")\n        val list23\
    \ = list22.filter(_ != \" \")\n        val list24 = list23.filter(_ != \" \")\n\
    \        val list25 = list24.filter(_ != \" \")\n        val list26 = list25.filter(_\
    \ != \" \")\n        val list27 = list26.filter(_ != \" \")\n        val list28\
    \ = list27.filter(_ != \" \")\n        val list29 = list28.filter(_ != \" \")\n\
    \        val list30 = list29.filter(_ != \" \")\n        val list31 = list30.filter(_\
    \ != \" \")\n        val list32 = list31.filter(_ != \" \")\n        val list33\
    \ = list32.filter(_ != \" \")\n        val list34 = list33.filter(_ != \" \")\n\
    \        val list35 = list34.filter(_ != \" \")\n        val list36 = list35.filter(_\
    \ != \" \")\n        val list37 = list36.filter(_ != \" \")\n        val list38\
    \ = list37.filter(_ != \" \")\n        val list39 = list38.filter(_ != \" \")\n\
    \        val list40 = list39.filter(_ != \" \")\n        val list41 = list40.filter(_\
    \ != \" \")\n        val list42 = list41.filter(_ != \" \")\n        val list43\
    \ = list42.filter(_ != \" \")\n        val list44 = list43.filter(_ != ", "  \
    \      val list = s.split(\" \")\n        val list2 = list.map(x => x.toUpperCase)\n\
    \        val list3 = list2.filter(x => x.contains(\"A\") || x.contains(\"E\")\
    \ || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val\
    \ list4 = list3.filter(x => x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list5 = list4.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list6 = list5.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list7 = list6.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list8 = list7.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list9 = list8.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list10 = list9.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list11 = list10.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list12 = list11.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list13 = list12.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list14 = list13.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list15 = list14.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.", "        val list = s.split(\" \").map(_.toUpperCase).toList\n  \
    \      val result = list.filter(_ => s.count(_ == _) == n)\n        result.map(_.toUpperCase)",
  "        val words = s.split(\" \").toList\n        val wordsWithConsonants = words.filter(word\
    \ => word.forall(c => c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'\
    \ && c != 'y'))\n        val wordsWithConsonantsCount = wordsWithConsonants.map(word\
    \ => word.count(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || c == 'y'))\n        val wordsWithConsonantsCountSorted = wordsWithConsonantsCount.sortWith((x,\
    \ y) => x > y)\n        val wordsWithConsonantsCountSortedReversed = wordsWithConsonantsCountSorted.reverse\n\
    \        val wordsWithConsonantsCountSortedReversedCount = wordsWithConsonantsCountSortedReversed.count(x\
    \ => x == n)\n        val wordsWithConsonantsCountSortedReversedCountSorted =\
    \ wordsWithConsonantsCountSortedReversed.sortWith((x, y) => x > y)\n        val\
    \ wordsWithConsonantsCountSortedReversedCountSortedReversed = wordsWithConsonantsCountSortedReversedCountSorted.reverse\n\
    \        val wordsWithConsonantsCountSortedReversedCountSortedReversedCount =\
    \ wordsWithConsonantsCountSortedReversedCountSortedReversed.count(x => x == n)\n\
    \        val wordsWithConsonantsCountSortedReversedCountSortedReversedCountSorted\
    \ = wordsWithConsonantsCountSortedReversedCountSortedReversedCountSorted.sortWith((x,\
    \ y) => x > y)\n        val wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversed\
    \ = wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversed.reverse\n\
    \        val wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversedCount\
    \ = wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversed.count(x\
    \ => x == n)\n        val wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversedCountSorted\
    \ = wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversedCountSorted.sortWith((x,\
    \ y) => x > y)\n        val wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversedCountSortedReversed\
    \ = wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversedCountSortedReversed.reverse\n\
    \        val wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversedCountSortedReversedCount\
    \ = wordsWithConsonants", "        val wordList = s.split(\" \").toList\n    \
    \    val result = new mutable.ListBuffer[String]()\n        for(word <- wordList)\
    \ {\n            if(wordList.count(_ == word) == n) {\n                result\
    \ += word\n            }\n        }\n        return result.toList", "        val\
    \ list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until list.size) {\n            val word = list(i)\n    \
    \        if (word.contains(\"a\") || word.contains(\"e\") || word.contains(\"\
    i\") || word.contains(\"o\") || word.contains(\"u\")) {\n                result.add(word)\n\
    \            }\n        }\n        return result.toList", "        val words =\
    \ s.split(\" \").toList\n        val result: List[String] = new mutable.ListBuffer[String]()\n\
    \        words.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        })\n        return result.toList", "        val list = s.split(\"\
    \ \").toList\n        val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) {\n                result += (word + \" \")\n            }\n        })\n\
    \        if (result.isEmpty) {\n            List()\n        } else {\n       \
    \     result.mkString(\" \")\n        }", "        val result = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val vowel_consonant_pairs = vowels ++ consonants\n        val vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs.length\n        val consonant_pairs = consonants.toList\
    \ ++ vowel_consonant_pairs.toList\n        val consonant_pairs_count = consonant_pairs.length\n\
    \        val vowel_consonant_pairs_count = vowel_consonant_pairs_count\n     \
    \   val consonant_pairs_count = consonant_pairs_count\n        val vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs_count\n        val consonant_pairs_count = consonant_pairs_count\n\
    \        val vowel_consonant_pairs_count = vowel_consonant_pairs_count\n     \
    \   val consonant_pairs_count = consonant_pairs_count\n        val vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs_count\n        val consonant_pairs_count = consonant_pairs_count\n\
    \        val vowel_consonant_pairs_count = vowel_consonant_pairs_count\n     \
    \   val consonant_pairs_count = consonant_pairs_count\n        val vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs_count\n        val consonant_pairs_count = consonant_pairs_count\n\
    \        val vowel_consonant_pairs_count = vowel_consonant_pairs_count\n     \
    \   val consonant_pairs_count = consonant_pairs_count\n        val vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs_count\n        val consonant_pairs_count = consonant_pairs_count\n\
    \        val vowel_consonant_pairs_count = vowel_consonant_pairs_count\n     \
    \   val consonant_pairs_count = consonant_pairs_count\n        val vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs_count\n        val consonant_pairs_count = consonant_pairs_count\n\
    \        val vowel_consonant_pairs_count = vowel_consonant_pairs_count\n     \
    \   val consonant_pairs_count = consonant_pairs_count\n        val vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs_count\n        val consonant_pairs_count = consonant_pairs_count\n\
    \        val vowel_consonant_pairs_count = vowel_consonant_pairs_count\n     \
    \   val consonant_pairs_count = consonant_pairs_count\n        val vowel_consonant_pairs_count\
    \ = vowel_con", "        val words = mutable.ListBuffer[String]()\n        val\
    \ vowels = mutable.Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants\
    \ = mutable.Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\")\n        val consonants_count = consonants.size\n        val vowels_count\
    \ = vowels.size\n        val consonants_count_in_string = s.length / consonants_count_in_string\n\
    \        val vowels_count_in_string = s.length / vowels_count_in_string\n    \
    \    val consonants_in_string = s.length / consonants_count_in_string\n      \
    \  val vowels_in_string = s.length / vowels_count_in_string\n        val consonants_count_in_string\
    \ = s.length / consonants_count_in_string\n        val vowels_count_in_string\
    \ = s.length / vowels_count_in_string\n        val consonants_in_string = s.length\
    \ / consonants_count_in_string\n        val vowels_in_string = s.length / vowels_count_in_string\n\
    \        val consonants_count_in_string = s.length / consonants_count_in_string\n\
    \        val vowels_count_in_string = s.length / vowels_count_in_string\n    \
    \    val consonants_in_string = s.length / consonants_count_in_string\n      \
    \  val vowels_in_string = s.length / vowels_count_in_string\n        val consonants_count_in_string\
    \ = s.length / consonants_count_in_string\n        val vowels_count_in_string\
    \ = s.length / vowels_count_in_string\n        val consonants_in_string = s.length\
    \ / consonants_count_in_string\n        val vowels_in_string = s.length / vowels_count_in_string\n\
    \        val consonants_count_in_string = s.length / consonants_count_in_string\n\
    \        val vowels_count_in_string = s.length / vowels_count_in_string\n    \
    \    val consonants_in_string = s.length / consonants_count_in_string\n      \
    \  val vowels_in_string = s.length / vowels_count_in_string\n        val consonants_count_in_string\
    \ = s.length / consonants_count_in_string\n        val vowels_count_in_string\
    \ = s.length / vowels_count_in_string\n        val consonants_in_string = s.length\
    \ / consonants_count_in_string\n        val vowels_in_string = s.length / vowels_count_in_string\n\
    \        val consonants_count_in_string = s.length / consonants_count_in_string\n\
    \        val vowels_count_in_string = s.length / vowels_count_in_string", "  \
    \      val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += word\n        }\n        return result.toList",
  "        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- list) {\n            if (word.count(_ == 'a') >= n && word.count(_\
    \ == 'e') >= n && word.count(_ == 'i') >= n && word.count(_ == 'o') >= n && word.count(_\
    \ == 'u') >= n) {\n                result += word\n            }\n        }\n\
    \        return result.toList", "        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.length == n).map(word =>\
    \ word.split(\"\").filter(_.isLetter).mkString(\"\").toLowerCase).filter(_.nonEmpty)\n\
    \        words.toList", "        val words = s.split(\" \")\n        val result\
    \ = new mutable.ListBuffer[String]()\n        for (word <- words) {\n        \
    \    val count = word.count(c => c.isLetter)\n            if (count == n) {\n\
    \                result += word\n            }\n        }\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }", "        val result = new mutable.ListBuffer[String]()\n        val vowels\
    \ = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val\
    \ vowelsCount = vowels.toSet.count(_ == s)\n        val consonantsCount = consonants.toSet.count(_\
    \ == s)\n        if (vowelsCount == n && consonantsCount == n) {\n           \
    \ result ++= s.split(\" \")\n        }\n        return result.toList", "     \
    \   val list = s.split(\" \")\n        val list2 = list.map(x => x.toUpperCase)\n\
    \        val list3 = list2.filter(x => x.contains(\"A\") || x.contains(\"E\")\
    \ || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val\
    \ list4 = list3.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list5 = list4.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list6 = list5.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list7 = list6.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list8 = list7.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list9 = list8.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list10 = list9.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list11 = list10.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list12 = list11.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list13 = list12.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list14 = list13.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list15 = list14.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.", "        val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase)\n\
    \        val wordSet: mutable.Set[String] = mutable.Set()\n        words.foreach(word\
    \ => wordSet.add(word))\n        val result: List[String] = wordSet.filter(_ =>\
    \ wordSet.count(_ == n) == n).sortBy(_.toLowerCase)\n        result.filter(_.nonEmpty).map(_.toLowerCase)",
  "        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until list.length) {\n            if (list(i).length == n)\
    \ {\n                result += (list(i))\n            }\n        }\n        return\
    \ result.toList", "        val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\").filter(_.isLetter).toList).flatten.toList\n        words.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\").filter(_.isLetter).toList).flatten.toList", "      \
    \  val words = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        words.foreach(word => {\n            val wordList = word.split(\"[^aeiou]\"\
    ).map(_.toLowerCase).toList\n            val count = wordList.count(x => x.contains(n))\
    \ \n            if (count == n) {\n                result.add(word)\n        \
    \    }\n        })\n        return result.toList", "        val list = s.split(\"\
    \ \").toList\n        val result = new mutable.ListBuffer[String]()\n        list.foreach\
    \ { x =>\n            val count = x.count(_ == 'a')\n            if (count ==\
    \ n) {\n                result += x\n            }\n        }\n        return\
    \ result.toList", "        val words = mutable.ListBuffer[String]()\n        val\
    \ vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n   \
    \     val consonantCount = consonants.count(_ == \" \")\n        val vowelCount\
    \ = vowels.count(_ == \" \")\n        val consonantCounts = consonants.count(_\
    \ == _)\n        val vowelCounts = vowels.count(_ == _)\n        val consonantCountPairs\
    \ = consonants.count(_ == _)\n        val vowelCountPairs = vowels.count(_ ==\
    \ _)\n        val consonantCountPairsPairs = consonants.count(_ == _)\n      \
    \  val vowelCountPairsPairs = vowels.count(_ == _)\n        val consonantCountPairsPairsPairs\
    \ = consonants.count(_ == _)\n        val vowelCountPairsPairsPairs = vowels.count(_\
    \ == _)\n        val consonantCountPairsPairsPairsPairs = consonants.count(_ ==\
    \ _)\n        val vowelCountPairsPairsPairsPairs = vowels.count(_ == _)\n    \
    \    val consonantCountPairsPairsPairsPairsPairs = consonants.count(_ == _)\n\
    \        val vowelCountPairsPairsPairsPairsPairs = vowels.count(_ == _)\n    \
    \    val consonantCountPairsPairsPairsPairsPairsPairs = consonants.count(_ ==\
    \ _)\n        val vowelCountPairsPairsPairsPairsPairsPairsPairs = vowels.count(_\
    \ == _)\n        val consonantCountPairsPairsPairsPairsPairsPairsPairs = consonants.count(_\
    \ == _)\n        val vowelCountPairsPairsPairsPairsPairsPairsPairsPairs = vowels.count(_\
    \ == _)\n        val consonantCountPairsPairsPairsPairsPairsPairsPairsPairsPairs\
    \ = consonants.count(_ == _)\n        val vowelCountPairsPairsPairsPairsPairsPairsPairsPairsPairsPairs\
    \ = vowels.count(_ == _)\n        val consonantCountPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairs\
    \ = consonants.count(_ == _)\n        val ", "        val words: List[String]\
    \ = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\
    \").filter(_.isLetter).mkString(\"\").toLowerCase).distinct\n        words.toList",
  "        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(x => {\n            val count = x.count(_ == 'a')\n    \
    \        val count = x.count(_ == 'e')\n            val count = x.count(_ == 'i')\n\
    \            val count = x.count(_ == 'o')\n            val count = x.count(_\
    \ == 'u')\n            if (count == n) {\n                result += x\n      \
    \      }\n        })\n        return result.toList", "        val list = s.split(\"\
    \ \").toList\n        val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += (word + \" \")\n        })\n        return result.toList", " \
    \       val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val letters = word.split(\"\")\n\
    \            letters.foreach { letter =>\n                if (letters.count(_\
    \ == 'a') > n || letters.count(_ == 'e') > n || letters.count(_ == 'i') > n ||\
    \ letters.count(_ == 'o') > n || letters.count(_ == 'u') > n) {\n            \
    \        result.add(word)\n                }\n            }\n        }\n     \
    \   return result.toList", "        val words = s.split(\" \")\n        val result\
    \ = new mutable.ListBuffer[String]()\n        words.foreach(word => {\n      \
    \      val count = word.count(_ == 'a')\n            if (count == n) {\n     \
    \           result += word\n            }\n        })\n        return result.toList",
  "        val words = mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\
    \n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonants_count\
    \ = consonants.length\n        val vowels_count = vowels.length\n        val vowels_count\
    \ = consonants_count - vowels_count\n        val consonants_count = consonants.length\n\
    \        val vowels_count = consonants_count - vowels_count\n        val vowels_count\
    \ = consonants_count - vowels_count\n        val vowels_count = consonants_count\
    \ - vowels_count\n        val vowels_count = consonants_count - vowels_count\n\
    \        val vowels_count = consonants_count - vowels_count\n        val vowels_count\
    \ = consonants_count - vowels_count\n        val vowels_count = consonants_count\
    \ - vowels_count\n        val vowels_count = consonants_count - vowels_count\n\
    \        val vowels_count = consonants_count - vowels_count\n        val vowels_count\
    \ = consonants_count - vowels_count\n        val vowels_count = consonants_count\
    \ - vowels_count\n        val vowels_count = consonants_count - vowels_count\n\
    \        val vowels_count = consonants_count - vowels_count\n        val vowels_count\
    \ = consonants_count - vowels_count\n        val vowels_count = consonants_count\
    \ - vowels_count\n        val vowels_count = consonants_count - vowels_count\n\
    \        val vowels_count = consonants_count - vowels_count\n        val vowels_count\
    \ = consonants_count - vowels_count\n        val vowels_count = consonants_count\
    \ - vowels_count\n        val vowels_count = consonants_count - vowels_count\n\
    \        val vowels_count = consonants_count - vowels_count\n        val vowels_count\
    \ = consonants_count - vowels_count\n        val vowels_count = consonants_count\
    \ - vowels_count\n        val vowels_count = consonants_count - vowels_count\n\
    \        val vowels_count = consonants_count - vowels_count\n        val vowels_count\
    \ = consonants_count - vowels_count\n        val vowels_count = consonants_count\
    \ - vowels_count\n        val vowels_count = consonants_count - vowels_count\n\
    \        val vowels_count = consonants_count - vowels_count\n        val vowels_count\
    \ = consonants_count - vowels_count\n        val vowels_count = consonant", " \
    \       val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val list = word.split(\"\\\\W+\"\
    ).toList\n            list.foreach(word => {\n                val list = word.split(\"\
    \\\\W+\").toList\n                if (list.size == n) {\n                    result\
    \ += (word + \" \")\n                }\n            })\n        })\n        return\
    \ result.toList", "        val list = s.split(\" \").toList\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach(word => {\n       \
    \     val count = word.count(c => c.isLetter)\n            if (count == n) {\n\
    \                result += (word + \" \")\n            }\n        })\n       \
    \ return result.toList"]
stop_tokens:
- "\n    }\n"
