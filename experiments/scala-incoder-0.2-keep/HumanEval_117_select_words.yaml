name: HumanEval_117_select_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s and a natural number n, you have been tasked to implement\
  \ \n    // a function that returns a list of all words from string s that contain\
  \ exactly \n    // n consonants, in order these words appear in the string s.\n\
  \    // If the string s is empty then the function should return an empty list.\n\
  \    // Note: you may assume the input string contains only letters and spaces.\n\
  \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
  ]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
  \    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello\
  \ world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
  ]\n    def selectWords(s : String, n : Long) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
  \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
  Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
  \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
  \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
  ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
  ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
  a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n   \
  \ }\n\n}\n"
completions: ["        val result = new mutable.ListBuffer[String]()\n        val\
    \ vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n   \
    \     val consonantSet = consonants.toSet\n        val vowelSet = vowels.toSet\n\
    \        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val wordCounts = mutable.Map[String, Int]()\n\
    \        val wordList = s.split(\" \").toList\n        wordList.foreach(word =>\
    \ {\n            val wordArray = word.split(\"\")\n            wordArray.foreach(letter\
    \ => {\n                if (vowelSet.contains(letter)) {\n                   \
    \ vowelCounts(letter) = vowelCounts(letter) + 1\n                } else if (consonantSet.contains(letter))\
    \ {\n                    consonantCounts(letter) = consonantCounts(letter) + 1\n\
    \                }\n            })\n        })\n        vowelCounts.foreach {\
    \ case (letter, count) =>\n            if (count == n) {\n                result.add(word)\n\
    \            }\n        }\n        result.toList", "        val words: List[String]\
    \ = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).toList\n        val consonants:\
    \ List[String] = words.filter(_.matches(\"[aeiou]\"))\n        val consonantsCount:\
    \ Map[String, Long] = consonants.groupBy(_.toLowerCase).mapValues(_.length)\n\
    \        val consonantsCountSorted: Map[String, Long] = consonantsCount.sortBy(_._2).reverse\n\
    \        val consonantsCountSortedKeys: List[String] = consonantsCountSorted.keys.toList\n\
    \        val consonantsCountSortedValues: List[Long] = consonantsCountSorted.values.toList\n\
    \        val consonantsCountSortedKeysSorted: Map[String, Long] = consonantsCountSorted.sortBy(_._1).reverse\n\
    \        val consonantsCountSortedKeysSortedValues: List[Long] = consonantsCountSortedKeys.map(consonantsCountSortedKeysSorted.get(_)).toList\n\
    \        val consonantsCountSortedKeysSortedValuesSorted: Map[String, Long] =\
    \ consonantsCountSortedKeysSortedValues.sortBy(_._1).reverse\n        val consonantsCountSortedKeysSortedValuesSortedKeys:\
    \ List[String] = consonantsCountSortedKeysSortedValuesSorted.keys.toList\n   \
    \     val consonantsCountSortedKeysSortedValuesSortedValues: List[Long] = consonantsCountSortedKeysSortedValuesSorted.values.toList\n\
    \        val consonantsCountSortedKeysSortedValuesSortedKeysSorted: Map[String,\
    \ Long] = consonantsCountSortedKeysSortedValuesSortedKeys.map(consonantsCountSortedKeysSortedValuesSortedKeysSorted.get(_)).toList\n\
    \        val consonantsCountSortedKeysSortedValuesSortedKeysSortedValues: List[Long]\
    \ = consonantsCountSortedKeysSortedValuesSortedKeys.map(consonantsCountSortedKeysSortedValuesSortedKeysSortedValues.get(_)).toList\n\
    \        val consonantsCountSortedKeysSortedValuesSortedKeysSortedValuesSorted:\
    \ Map[String, Long] = consonantsCountSortedKeysSortedValuesSortedKeysSortedValues.map(consonantsCountSortedKeysSortedValuesSortedKeysSortedValuesSorted.get(_)).toList\n\
    \        val consonantsCountSortedKeysSortedValuesSortedKeysSortedValuesSortedKeys:\
    \ List[String] = consonantsCountSortedKeysSortedValuesSortedKeysSortedValuesSorted.keys.toList\n\
    \        val consonantsCountSortedKeysSortedValuesSortedKeysSortedValuesSorted",
  "        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        return result.toList", "        val words: List[String]\
    \ = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(n)).map(_.split(\"\
    \")).filter(_.size == n).map(_.mkString(\"\")).filter(_.nonEmpty)\n        words.toList",
  "        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.split(\"\\\\W\"\
    ).length\n            if (count == n) {\n                result += (word + \"\
    \ \")\n            }\n        })\n        return result.toList", "        val\
    \ words = s.split(\" \")\n        val list = mutable.ListBuffer[String]()\n  \
    \      for (word <- words) {\n            if (word.contains(\"a\") || word.contains(\"\
    e\") || word.contains(\"i\") || word.contains(\"o\") || word.contains(\"u\"))\
    \ {\n                list += word\n            }\n        }\n        if (list.size\
    \ < n) {\n            list\n        } else {\n            list.filter(_ => list.count(_\
    \ == word) == n)\n        }", "        val words = s.split(\" \").filter(_.isLetter).map(_.toUpperCase)\n\
    \        val list = words.toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\")\n        val consonantCount = new mutable.HashMap[String, Int]()\n  \
    \      val vowelCount = new mutable.HashMap[String, Int]()\n        val consonantCounts\
    \ = consonants.foldLeft(0)((acc, c) => acc + (consonantCount.getOrElse(c + \"\"\
    , 0)))\n        val vowelCounts = vowels.foldLeft(0)((acc, v) => acc + (vowelCount.getOrElse(v\
    \ + \"\", 0)))\n        list.foreach { word =>\n            val count = consonantCounts.get(word).orElse(vowelCounts.get(word).orElse(0))\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        result toList", "        val list = s.split(\"\
    \ \").toList\n        val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += (word + \" \")\n        })\n        if (result.isEmpty) result\
    \ else result.toList", "        val words = mutable.ListBuffer[String]()\n   \
    \     val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonants_count = consonants.count(_ == ' ')\n        val vowels_count\
    \ = vowels.count(_ == ' ')\n        val consonants_count = consonants.count(_\
    \ == ' ')\n        val vowels_count = vowels.count(_ == ' ')\n        val consonants_count\
    \ = consonants.count(_ == ' ')\n        val vowels_count = vowels.count(_ == '\
    \ ')\n        val consonants_count = consonants.count(_ == ' ')\n        val vowels_count\
    \ = vowels.count(_ == ' ')\n        val consonants_count = consonants.count(_\
    \ == ' ')\n        val vowels_count = vowels.count(_ == ' ')\n        val consonants_count\
    \ = consonants.count(_ == ' ')\n        val vowels_count = vowels.count(_ == '\
    \ ')\n        val consonants_count = consonants.count(_ == ' ')\n        val vowels_count\
    \ = vowels.count(_ == ' ')\n        val consonants_count = consonants.count(_\
    \ == ' ')\n        val vowels_count = vowels.count(_ == ' ')\n        val consonants_count\
    \ = consonants.count(_ == ' ')\n        val vowels_count = vowels.count(_ == '\
    \ ')\n        val consonants_count = consonants.count(_ == ' ')\n        val vowels_count\
    \ = vowels.count(_ == ' ')\n        val consonants_count = consonants.count(_\
    \ == ' ')\n        val vowels_count = vowels.count(_ == ' ')\n        val consonants_count\
    \ = consonants.count(_ == ' ')\n        val vowels_count = vowels.count(_ == '\
    \ ')\n        val consonants_count = consonants.count(_ == ' ')\n        val vowels_count\
    \ = vowels.count(_ == ' ')\n        val consonants_count = consonants.count(_\
    \ == ' ')\n        val vowels_count = vowels.count(_ == ' ')\n        val consonants_count\
    \ = consonants.count(_ == ' ')\n        val vowels_count = vowels.count(_ == '\
    \ ')\n        val consonants_count = consonants.count(_ == ' ')\n        val vowels_count\
    \ = vowels.count(_ == ' ')\n        val consonants_count = consonants.count(_\
    \ == ' ')\n        val vowels_count = vowels.count(_ == ", "        val list =\
    \ s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += word\n        }\n        if (result.isEmpty)\
    \ result else result.toList", "        val list = s.split(\" \")\n        val\
    \ list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x =>\
    \ x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"B\"))\n\
    \        val list5 = list4.filter(x => x.contains(\"C\"))\n        val list6 =\
    \ list5.filter(x => x.contains(\"D\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"E\"))\n        val list8 = list7.filter(x => x.contains(\"F\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"G\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"H\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"I\"))\n        val list12 = list11.filter(x => x.contains(\"\
    J\"))\n        val list13 = list12.filter(x => x.contains(\"K\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"L\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"M\"))\n        val list16 = list15.filter(x => x.contains(\"\
    N\"))\n        val list17 = list16.filter(x => x.contains(\"O\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"P\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"Q\"))\n        val list20 = list19.filter(x => x.contains(\"\
    R\"))\n        val list21 = list20.filter(x => x.contains(\"S\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"T\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"U\"))\n        val list24 = list23.filter(x => x.contains(\"\
    V\"))\n        val list25 = list24.filter(x => x.contains(\"W\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"X\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"Y\"))\n        val list28 = list27.filter(x => x.contains(\"\
    Z\"))\n        val list29 = list28.filter(x => x.contains(\"a\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"b\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"c\"))\n        val list32 = list31.filter(x => x.contains(\"\
    d\"))\n        val list33 = list32.filter(x => x.contains(\"e\"))\n        val\
    \ list34 = list33.", "        val list = s.split(\" \")\n        val list2 = list.map(x\
    \ => x.toUpperCase)\n        val list3 = list2.filter(x => x.contains(\"A\"))\n\
    \        val list4 = list3.filter(x => x.contains(\"E\"))\n        val list5 =\
    \ list4.filter(x => x.contains(\"I\"))\n        val list6 = list5.filter(x =>\
    \ x.contains(\"O\"))\n        val list7 = list6.filter(x => x.contains(\"U\"))\n\
    \        val list8 = list7.filter(x => x.contains(\"a\"))\n        val list9 =\
    \ list8.filter(x => x.contains(\"e\"))\n        val list10 = list9.filter(x =>\
    \ x.contains(\"i\"))\n        val list11 = list10.filter(x => x.contains(\"o\"\
    ))\n        val list12 = list11.filter(x => x.contains(\"u\"))\n        val list13\
    \ = list12.filter(x => x.contains(\"A\"))\n        val list14 = list13.filter(x\
    \ => x.contains(\"E\"))\n        val list15 = list14.filter(x => x.contains(\"\
    I\"))\n        val list16 = list15.filter(x => x.contains(\"O\"))\n        val\
    \ list17 = list16.filter(x => x.contains(\"U\"))\n        val list18 = list17.filter(x\
    \ => x.contains(\"a\"))\n        val list19 = list18.filter(x => x.contains(\"\
    e\"))\n        val list20 = list19.filter(x => x.contains(\"i\"))\n        val\
    \ list21 = list20.filter(x => x.contains(\"o\"))\n        val list22 = list21.filter(x\
    \ => x.contains(\"u\"))\n        val list23 = list22.filter(x => x.contains(\"\
    A\"))\n        val list24 = list23.filter(x => x.contains(\"E\"))\n        val\
    \ list25 = list24.filter(x => x.contains(\"I\"))\n        val list26 = list25.filter(x\
    \ => x.contains(\"O\"))\n        val list27 = list26.filter(x => x.contains(\"\
    U\"))\n        val list28 = list27.filter(x => x.contains(\"a\"))\n        val\
    \ list29 = list28.filter(x => x.contains(\"e\"))\n        val list30 = list29.filter(x\
    \ => x.contains(\"i\"))\n        val list31 = list30.filter(x => x.contains(\"\
    o\"))\n        val list32 = list31.filter(x => x.contains(\"u\"))\n        val\
    \ list33 = list32.filter(x => x.contains(\"A\"))\n        val list34 = list33.",
  "        val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) result += (word + \" \")\n        }\n  \
    \      return result.toList", "        val list = s.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        list.foreach(word => {\n\
    \            val count = word.count(c => c.isLetter)\n            if (count ==\
    \ n) {\n                result += word\n            }\n        })\n        if\
    \ (result.isEmpty) {\n            List()\n        } else {\n            result.toList\n\
    \        }", "        val list = s.split(\" \").toList\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isDigit)\n        val list = list.filterNot(_.isLetter)\n\
    \        val list = list.filterNot(_.isSpace)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isSpace)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filter", "        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase).toList\n        val consonants: List[String]\
    \ = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(\"\
    a\")).toList\n        val vowels: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(\"\
    e\")).toList\n        val consonantCounts = consonants.groupBy(c => c).mapValues(_.size).toList\n\
    \        val vowelCounts = vowels.groupBy(c => c).mapValues(_.size).toList\n \
    \       val consonantCountAndVowelCounts = consonantCounts ++ vowelCounts\n  \
    \      val consonantAndVowelCounts = consonantCountAndVowelCounts.filter(_._2\
    \ > n)\n        val consonantAndVowelCountPairs = consonantAndVowelCounts.map(_._1\
    \ -> _._2)\n        val consonantAndVowelCountPairsSorted = consonantAndVowelCountPairs.sortBy(_._1)\n\
    \        val consonantAndVowelCountPairsSortedByCount = consonantAndVowelCountPairsSorted.sortBy(_._2)\n\
    \        val consonantAndVowelCountPairsSortedByCountReversed = consonantAndVowelCountPairsSortedByCount.reverse\n\
    \        consonantAndVowelCountPairsSortedByCountReversed.map(_._1).filter(_._2\
    \ == n).map(_._1)", "        val list = s.split(\" \")\n        val list2 = list.filter(_\
    \ => _.length == n)\n        val list3 = list2.filter(_ => _.contains(\"a\"))\n\
    \        val list4 = list3.filter(_ => _.contains(\"e\"))\n        val list5 =\
    \ list4.filter(_ => _.contains(\"i\"))\n        val list6 = list5.filter(_ =>\
    \ _.contains(\"o\"))\n        val list7 = list6.filter(_ => _.contains(\"u\"))\n\
    \        list7", "        val list = s.split(\" \").toList\n        val result\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     val count = word.count(c => c.isLetter)\n            if (count == n) {\n\
    \                result += (word + \" \")\n            }\n        }\n        if\
    \ (result.isEmpty) {\n            List()\n        } else {\n            result.toList\n\
    \        }", "        val wordList = s.split(\" \").toList\n        val wordSet\
    \ = wordList.map(_.toUpperCase).toSet\n        val result = wordList.filter(word\
    \ => wordSet.toSet.size == n)\n        result.map(word => word.toUpperCase).mkString(\"\
    \ \")", "        val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        return result.toList"]
stop_tokens:
- "\n    }\n"
