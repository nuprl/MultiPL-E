name: HumanEval_78_hex_key
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You have been tasked to write a function that receives \n    // a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n    // digits that are\
  \ primes (prime number, or a prime, is a natural number \n    // greater than 1\
  \ that is not a product of two smaller natural numbers).\n    // Hexadecimal digits\
  \ are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are\
  \ 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following\
  \ digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you\
  \ may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F\
  \ are always uppercase.\n    // Examples:\n    // For num = \"AB\" the output should\
  \ be 1.\n    // For num = \"1077E\" the output should be 2.\n    // For num = \"\
  ABED1A33\" the output should be 4.\n    // For num = \"123456789ABCDEF0\" the output\
  \ should be 6.\n    // For num = \"2020\" the output should be 2.\n    def hexKey(num\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\"))\
  \ == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
  )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
  )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
  \    }\n\n}\n"
completions: ["        val hex = num.toCharArray.map(_.toInt)\n        val hexKey\
    \ = hex.map(x => math.pow(16, x)).sum\n        hexKey", "        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexKey = new mutable.HashMap[Char,\
    \ Long]()\n        for (i <- 0 until hexCount) {\n            val hexChar = hex(i)\n\
    \            val hexValue = hexKey.getOrElse(hexChar, 0)\n            hexKey.put(hexChar,\
    \ hexValue + 1)\n        }\n        hexKey.toSeq.filter(x => x._2 == 2).length",
  "        val hex = num.toCharArray\n        val hexKey = hex.map(x => if (x.isDigit)\
    \ x else x.toUpperCase).foldLeft(0)((x, y) => x * 16 + y)\n        hexKey", " \
    \       val hex = num.toCharArray\n        val hexLength = hex.length\n      \
    \  val hexKey = hexLength * hexLength\n        val hexKeySet = hexKey.toSet\n\
    \        val hexKeySetIterator = hexKeySet.iterator\n        val hexKeySetIteratorNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNext = hexKeySetIterator.next\n\
    \        val hexKeySetIteratorNextNextNext = hexKeySetIterator.next\n        val\
    \ hexKeySetIteratorNextNextNextNext = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n", "        val hex = num.toCharArray\n        val\
    \ hexKey = hex.foldLeft(0)((sum, digit) => {\n            val hexDigit = digit.toLong\n\
    \            val hexDigitSum = sum + hexDigit\n            val hexDigitSumDividedByTwo\
    \ = hexDigitSum / 2\n            val hexDigitSumDividedByThree = hexDigitSumDividedByTwo\
    \ / 3\n            val hexDigitSumDividedByFive = hexDigitSumDividedByThree /\
    \ 5\n            val hexDigitSumDividedBySeven = hexDigitSumDividedByFive / 7\n\
    \            val hexDigitSumDividedByNine = hexDigitSumDividedBySeven / 9\n  \
    \          val hexDigitSumDividedByTen = hexDigitSumDividedByNine / 10\n     \
    \       val hexDigitSumDividedByEleven = hexDigitSumDividedByTen / 11\n      \
    \      val hexDigitSumDividedByThirteen = hexDigitSumDividedByEleven / 13\n  \
    \          val hexDigitSumDividedByFifteen = hexDigitSumDividedByThirteen / 15\n\
    \            val hexDigitSumDividedBySixteen = hexDigitSumDividedByFifteen / 17\n\
    \            val hexDigitSumDividedBySeventeen = hexDigitSumDividedBySixteen /\
    \ 19\n            val hexDigitSumDividedByNineteen = hexDigitSumDividedBySeventeen\
    \ / 21\n            val hexDigitSumDividedByTwenty = hexDigitSumDividedByNineteen\
    \ / 23\n            val hexDigitSumDividedByTwentyThree = hexDigitSumDividedByTwenty\
    \ / 3\n            val hexDigitSumDividedByTwentyFive = hexDigitSumDividedByTwentyThree\
    \ / 5\n            val hexDigitSumDividedByTwentySeven = hexDigitSumDividedByTwentyFive\
    \ / 7\n            val hexDigitSumDividedByTwentyEight = hexDigitSumDividedByTwentySeven\
    \ / 9\n            val hexDigitSumDividedByTwentyNine = hexDigitSumDividedByTwentyEight\
    \ / 10\n            val hexDigit", "        val hex = num.toCharArray\n      \
    \  val hexCount = hex.length\n        val hexDigits = hex.map(_.toInt)\n     \
    \   val hexDigitsCount = hexDigits.length\n        val hexDigitsToCount = hexDigits.map(_.toInt)\n\
    \        val hexDigitsToCountCount = hexDigitsToCount.length\n        val hexDigitsToCountCountCount\
    \ = hexDigitsToCountCount.length\n        val hexDigitsToCountCountCountCount\
    \ = hexDigitsToCountCountCount.length\n        val hexDigitsToCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCount.length\n        val hexDigitsToCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCount.length\n        val hexDigitsToCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCount.length\n        val hexDigitsToCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCount.length\n        val\
    \ hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCount.length\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount.length\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount",
  "        val hex = num.toCharArray\n        val hexKey = hex.foldLeft(0)((acc, x)\
    \ => acc * 16 + x.toInt)\n        hexKey", "        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexMap = hex.map(x => (x % 10, 1)).toMap\n        val hexKeys = hex.map(x\
    \ => hexMap.getOrElse(x, 0)).sum\n        hexKeys", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => x % 16).sum\n        hexKey", "        val\
    \ hex = num.toCharArray.map(_.toInt)\n        val hexKey = hex.map(x => math.pow(16,x))\n\
    \        hexKey.sum", "        val hexDigits = num.toCharArray.map(_.toInt)\n\
    \        val hexKeys = hexDigits.map(hexDigitToKey)\n        hexKeys.count(_ >\
    \ 0)", "        val hex = num.toCharArray\n        val hexKey = hex.foldLeft(0)((sum,\
    \ digit) => {\n            val hexDigit = digit.toInt\n            val hexDigit2\
    \ = hexDigit * hexDigit\n            val hexDigit3 = hexDigit2 * hexDigit\n  \
    \          val hexDigit4 = hexDigit3 * hexDigit\n            val hexDigit5 = hexDigit4\
    \ * hexDigit\n            val hexDigit6 = hexDigit5 * hexDigit\n            val\
    \ hexDigit7 = hexDigit6 * hexDigit\n            val hexDigit8 = hexDigit7 * hexDigit\n\
    \            val hexDigit9 = hexDigit8 * hexDigit\n            val hexDigit10\
    \ = hexDigit9 * hexDigit\n            val hexDigit11 = hexDigit10 * hexDigit\n\
    \            val hexDigit12 = hexDigit11 * hexDigit\n            val hexDigit13\
    \ = hexDigit12 * hexDigit\n            val hexDigit14 = hexDigit13 * hexDigit\n\
    \            val hexDigit15 = hexDigit14 * hexDigit\n            val hexDigit16\
    \ = hexDigit15 * hexDigit\n            val hexDigit17 = hexDigit16 * hexDigit\n\
    \            val hexDigit18 = hexDigit17 * hexDigit\n            val hexDigit19\
    \ = hexDigit18 * hexDigit\n            val hexDigit20 = hexDigit19 * hexDigit\n\
    \            val hexDigit21 = hexDigit20 * hexDigit\n            val hexDigit22\
    \ = hexDigit21 * hexDigit\n            val hexDigit23 = hexDigit22 * hexDigit\n\
    \            val hexDigit24 = hexDigit23 * hexDigit\n            val hexDigit25\
    \ = hexDigit24 * hexDigit\n            val hexDigit26 = hexDigit25 * hexDigit\n\
    \            val hexDigit27 = hexDigit26 * hexDigit\n            val hexDigit28\
    \ = hexDigit27 * hexDigit\n            val hexDigit29 = hexDigit28 * hexDigit\n\
    \            val hexDigit30 = hexDigit29 * hexDigit\n            val hexDigit31\
    \ = hexDigit30 * hexDigit\n            val hexDigit32 = hexDigit31 * hexDigit\n\
    \            val hexDigit33 = hexDigit32 * hexDigit\n            val hexDigit34\
    \ = hexDigit33 * hexDigit\n            val hexDigit35 = hexDigit34 * hexDigit\n\
    \            val hexDigit36 = hexDigit35 * hexDigit\n            val hexDigit37\
    \ = hexDigit36 * hexDigit\n            val hexDigit38 = hexDigit37 * hexDigit\n\
    \            val hexDigit39 = hexDigit38 * hexDigit\n", "        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => if (x == 'A') 1 else 0).sum\n        hexKey",
  "        val hexDigits = num.toCharArray.map(_.toInt)\n        val hexKeys = hexDigits.map(hexKey\
    \ _)\n        hexKeys.sum", "        val hexDigits = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        hexDigits.foreach\
    \ { hexDigit =>\n            hexKey.put(hexDigit, hexKey.getOrElse(hexDigit, 0)\
    \ + 1)\n        }\n        hexKey.values.toList.filter(_ > 1).length", "     \
    \   val hexDigits = num.toCharArray\n        val hexKey = new mutable.HashMap[Char,\
    \ Long]()\n        hexDigits foreach { hexDigit =>\n            hexKey.put(hexDigit,\
    \ hexKey.getOrElse(hexDigit, 0L) + 1)\n        }\n        hexKey.filter(_._2 >\
    \ 1).size", "        val hex = num.toCharArray\n        val hexCount = hex.count\n\
    \        val hexDigits = hex.mkString(\",\")\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.split(\",\").map(_.toInt)\n        val hexDigitMapCount\
    \ = hexDigitMap.length\n        val hexDigitMapMap = new mutable.HashMap[Int,\
    \ Int]()\n        hexDigitMap.foreach(hexDigitMapMap += _)\n        val hexDigitMapMapCount\
    \ = hexDigitMapMap.length\n        val hexDigitMapMapMap = new mutable.HashMap[Int,\
    \ mutable.HashMap[Int, Int]]()\n        hexDigitMapMap.foreach(hexDigitMapMapMap\
    \ += _)\n        val hexDigitMapMapMapCount = hexDigitMapMapMap.length\n     \
    \   val hexDigitMapMapMapMap = new mutable.HashMap[Int, mutable.HashMap[Int, mutable.HashMap[Int,\
    \ Int]]]()\n        hexDigitMapMapMap.foreach(hexDigitMapMapMapMap += _)\n   \
    \     val hexDigitMapMapMapMapCount = hexDigitMapMapMapMap.length\n        val\
    \ hexDigitMapMapMapMapMap = new mutable.HashMap[Int, mutable.HashMap[Int, mutable.HashMap[Int,\
    \ mutable.HashMap[Int, Int]]]]()\n        hexDigitMapMapMapMap.foreach(hexDigitMapMapMapMapMap\
    \ += _)\n        val hexDigitMapMapMapMapMapCount = hexDigitMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMap = new mutable.HashMap[Int, mutable.HashMap[Int,\
    \ mutable.HashMap[Int, mutable.HashMap[Int, mutable.HashMap[Int, Int]]]]]()\n\
    \        hexDigitMapMapMapMapMap.foreach(hexDigitMapMapMapMapMap += _)\n     \
    \   val hexDigitMapMapMapMapMapCount = hexDigitMapMapMapMapMap.length\n      \
    \  val hexDigitMapMapMapMapMapMapMap = new mutable.HashMap[Int, mutable.HashMap[Int,\
    \ mutable.HashMap[Int, mutable.HashMap[Int, mutable.HashMap[Int, mutable.HashMap[Int,\
    \ Int]]]]]]()\n        hexDigitMapMapMapMapMapMap.foreach(hexDigitMapMapMapMapMapMap\
    \ += _)\n        val hexDigitMapMapMapMapMapMapCount = hexDigitMapMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMapMap = new mutable.HashMap[In", "   \
    \     val hex = num.toCharArray\n        val hexKey = hex.foldLeft(0)((sum, digit)\
    \ => {\n            val hexDigit = digit.toInt\n            val hexDigitSum =\
    \ sum + hexDigit\n            val hexDigitSumDivisor = hexDigitSum % 10\n    \
    \        val hexDigitSumDivisor2 = hexDigitSumDivisor % 10\n            val hexDigitSumDivisor3\
    \ = hexDigitSumDivisor2 % 10\n            val hexDigitSumDivisor4 = hexDigitSumDivisor3\
    \ % 10\n            val hexDigitSumDivisor5 = hexDigitSumDivisor4 % 10\n     \
    \       val hexDigitSumDivisor6 = hexDigitSumDivisor5 % 10\n            val hexDigitSumDivisor7\
    \ = hexDigitSumDivisor6 % 10\n            val hexDigitSumDivisor8 = hexDigitSumDivisor7\
    \ % 10\n            val hexDigitSumDivisor9 = hexDigitSumDivisor8 % 10\n     \
    \       val hexDigitSumDivisor10 = hexDigitSumDivisor9 % 10\n            val hexDigitSumDivisor11\
    \ = hexDigitSumDivisor10 % 10\n            val hexDigitSumDivisor12 = hexDigitSumDivisor11\
    \ % 10\n            val hexDigitSumDivisor13 = hexDigitSumDivisor12 % 10\n   \
    \         val hexDigitSumDivisor14 = hexDigitSumDivisor13 % 10\n            val\
    \ hexDigitSumDivisor15 = hexDigitSumDivisor14 % 10\n            val hexDigitSumDivisor16\
    \ = hexDigitSumDivisor15 % 10\n            val hexDigitSumDivisor17 = hexDigitSumDivisor16\
    \ % 10\n            val hexDigitSumDivisor18 = hexDigitSumDivisor17 % 10\n   \
    \         val hexDigitSumDivisor19 = hexDigitSumDivisor18 % 10\n            val\
    \ hexDigitSumDivisor20 = hexDigitSumDivisor19 % 10\n            val hexDigitSumDivisor21\
    \ = hexDigitSumDivisor20 % 10\n            val hexDigitSumDivisor22 = hexDigitSumDivisor21\
    \ % 10\n            val hexDigitSumDivisor23 = hexDigitSumDivisor22 % 10\n   \
    \         val hexDigitSumDivisor24 = hexDigitSumDivisor23 % 10\n            val\
    \ hexDigitSumDivisor25 = hexDigitSumDivisor24 % 10\n            val hexDigitSumDivisor26\
    \ = hexDigitSumDivisor25 % 10\n            val hexDigitSumDivisor27 = hexDigitSum",
  "        val hex = num.toCharArray.map(_.toInt)\n        val hexKey = hex.map(x\
    \ => x % 16).sum\n        hexKey", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.foldLeft(0)((acc, x) => acc * 16 + x)\n        hexKey",
  "        val hex = num.toCharArray\n        val hexKey = hex.foldLeft(0)((acc, c)\
    \ => \n            if (c.toInt > 9) acc else acc + c.toInt)\n        hexKey",
  "        val hex = num.toCharArray\n        val hexKey = hex.filter(_ >= '0' &&\
    \ _ <='9').count(_ == hex(0)) + hex.filter(_ >= 'A' && _ <='F').count(_ == hex(0))\
    \ + hex.filter(_ >= 'a' && _ <='f').count(_ == hex(0))\n        hexKey", "   \
    \     val hex = num.toCharArray\n        val hexCount = hex.count(x => x != '0')\n\
    \        val hexDigits = hex.count(x => x != 'A' && x != 'B' && x != 'C' && x\
    \ != 'D' && x != 'E' && x != 'F')\n        val hexPrimes = hex.count(x => x !=\
    \ 'A' && x != 'B' && x != 'C' && x != 'D' && x != 'E' && x != 'F' && x != '0'\
    \ && x != '1')\n        val hexPrime = hex.count(x => x != 'A' && x != 'B' &&\
    \ x != 'C' && x != 'D' && x != 'E' && x != 'F' && x != '0' && x != '1' && x !=\
    \ '2' && x != '3' && x != '4' && x != '5' && x != '6' && x != '7' && x != '8'\
    \ && x != '9')\n        val hexPrime2 = hex.count(x => x != 'A' && x != 'B' &&\
    \ x != 'C' && x != 'D' && x != 'E' && x != 'F' && x != '0' && x != '1' && x !=\
    \ '2' && x != '3' && x != '4' && x != '5' && x != '6' && x != '7' && x != '8'\
    \ && x != '9' && x != 'A' && x != 'B' && x != 'C' && x != 'D' && x != 'E' && x\
    \ != 'F')\n        val hexPrime3 = hex.count(x => x != 'A' && x != 'B' && x !=\
    \ 'C' && x != 'D' && x != 'E' && x != 'F' && x != '0' && x != '1' && x != '2'\
    \ && x != '3' && x != '4' && x != '5' && x != '6' && x != '7' && x != '8' && x\
    \ != '9' && x != 'A' && x != 'B' && x != 'C' && x != 'D' && x != 'E' && x != 'F'\
    \ && x != '0' && x != '1' && x != '2' && x != '3' && x != '4' && x != '5' && x\
    \ != '6' && x != '7' && x != '8' && x != '9')\n        val hexPrime4 = hex.count(x\
    \ => x != 'A' && x != 'B' && x != 'C' && x != 'D' && x != 'E' && x != 'F' && x\
    \ != '0' && x != '1' && x != '2' && x != '3' && x != '4' && x != '5' && x != '6'\
    \ && x != '7' && x != '8' && x != '9' && x != 'A' && x != 'B' && x != 'C' && x\
    \ != 'D' && x != 'E' && x ", "        val hex = num.toCharArray\n        val hexKey\
    \ = hex.foldLeft(0)((sum, digit) => {\n            val hexDigit = digit.toInt\n\
    \            val hexDigitInt = if (hexDigit == 0) 1 else hexDigit\n          \
    \  val hexDigitInt = if (hexDigit == 0) 0 else hexDigitInt\n            sum +\
    \ hexDigitInt\n        })\n        hexKey", "        val hexDigits = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        hexDigits.foreach(hexKey\
    \ += _)\n        hexKey.values.toList.count(_ > 1)", "        val hex = num.toCharArray\n\
    \        val hexLen = hex.length\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey2 = new mutable.HashMap[Int, Int]()\n        val hexKey3\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey4 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey5 = new mutable.HashMap[Int, Int]()\n        val hexKey6\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey7 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey8 = new mutable.HashMap[Int, Int]()\n        val hexKey9\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey10 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey11 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey12 = new mutable.HashMap[Int, Int]()\n        val hexKey13 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey14 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey15 = new mutable.HashMap[Int, Int]()\n        val hexKey16 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey17 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey18 = new mutable.HashMap[Int, Int]()\n        val hexKey19 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey20 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey21 = new mutable.HashMap[Int, Int]()\n        val hexKey22 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey23 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey24 = new mutable.HashMap[Int, Int]()\n        val hexKey25 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey26 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey27 = new mutable.HashMap[Int, Int]()\n        val hexKey28 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey29 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey30 = new mutable.HashMap[Int, Int]()\n        val hexKey31 = new mutable.HashMap[Int,\
    \ Int]", "        val hexDigits = num.toCharArray.map(_.toInt)\n        val hexKey\
    \ = new mutable.HashMap[Int, Int]()\n        hexDigits.foreach(hexKey += _)\n\
    \        hexKey.size", "        val hex = num.toCharArray\n        val hexKey\
    \ = new mutable.HashMap[Char, Long]()\n        for (i <- 0 until hex.length) {\n\
    \            hexKey.put(hex(i).toUpper, hexKey.getOrElse(hex(i).toUpper, 0L) +\
    \ 1)\n        }\n        hexKey.values.toList.max", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x =>\
    \ {\n            hexKey.getOrElse(x, 0)\n        })\n        hexKey.size", " \
    \       val hex = num.toCharArray\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        hex.foreach(x => {\n            hexKey.getOrElse(x, 0)\n   \
    \     })\n        hexKey.size", "        val hex = num.toCharArray\n        val\
    \ hexKey = hex.filter(_ >= '0' && _ <='9').count(_ % 2 == 0)\n        hexKey",
  "        val hex = num.toCharArray\n        val hexCount = hex.count(x => x != '0')\n\
    \        val hexDigits = hex.count(x => x != 'A' && x != 'B' && x != 'C' && x\
    \ != 'D' && x != 'E' && x != 'F')\n        val hexPrimes = hex.count(x => x !=\
    \ 'A' && x != 'B' && x != 'C' && x != 'D' && x != 'E' && x != 'F' && x != '0'\
    \ && x != '1')\n        val hexPrime = hex.count(x => x != 'A' && x != 'B' &&\
    \ x != 'C' && x != 'D' && x != 'E' && x != 'F' && x != '0' && x != '1' && x !=\
    \ '2' && x != '3' && x != '5' && x != '7' && x != 'B' && x != 'D' && x != 'E')\n\
    \        val hexPrime2 = hex.count(x => x != 'A' && x != 'B' && x != 'C' && x\
    \ != 'D' && x != 'E' && x != 'F' && x != '0' && x != '1' && x != '2' && x != '3'\
    \ && x != '5' && x != '7' && x != 'B' && x != 'D' && x != 'E' && x != 'F')\n \
    \       val hexPrime3 = hex.count(x => x != 'A' && x != 'B' && x != 'C' && x !=\
    \ 'D' && x != 'E' && x != 'F' && x != '0' && x != '1' && x != '2' && x != '3'\
    \ && x != '5' && x != '7' && x != 'B' && x != 'D' && x != 'E' && x != 'F' && x\
    \ != '0')\n        val hexPrime4 = hex.count(x => x != 'A' && x != 'B' && x !=\
    \ 'C' && x != 'D' && x != 'E' && x != 'F' && x != '0' && x != '1' && x != '2'\
    \ && x != '3' && x != '5' && x != '7' && x != 'B' && x != 'D' && x != 'E' && x\
    \ != 'F' && x != '0' && x != '1')\n        val hexPrime5 = hex.count(x => x !=\
    \ 'A' && x != 'B' && x != 'C' && x != 'D' && x != 'E' && x != 'F' && x != '0'\
    \ && x != '1' && x != '2' && x != '3' && x != '5' && x != '7' && x != 'B' && x\
    \ != 'D' && x != 'E' && x != 'F' && x != '0' && x != '1' && x != '2' && x != '3'\
    \ && x != '5' && x != '7' && x != 'B", "        val hex = num.toCharArray\n  \
    \      val hexKey = new mutable.HashMap[Char, Long]()\n        hex.foreach(c =>\
    \ {\n            hexKey.put(c.toInt, hexKey.getOrElse(c, 0L) + 1)\n        })\n\
    \        hexKey.getOrElse('F', 0)", "        val hex = num.toCharArray\n     \
    \   val hexCount = hex.length\n        val hexKey = new mutable.HashMap[Int, Int]()\n\
    \        var hexKeyCount = 0\n        for(i <- 0 until hexCount) {\n         \
    \   val hexDigit = hex(i)\n            hexKey.put(hexDigit, hexKeyCount)\n   \
    \         hexKeyCount += 1\n        }\n        hexKey.values.sum", "        val\
    \ hexDigits = num.toCharArray.map(_.toInt)\n        val hexKeys = hexDigits.map(hexDigitToKey)\n\
    \        hexKeys.count(_ > 0)", "        val hex = num.toCharArray\n        val\
    \ hexKey = hex.map(x => x match {\n            case 'A' => 0\n            case\
    \ 'B' => 1\n            case 'C' => 2\n            case 'D' => 3\n           \
    \ case 'E' => 4\n            case 'F' => 5\n            case _ => 0\n        }).sum\n\
    \        hexKey", "        val hex = num.toCharArray\n        val hexKey = new\
    \ mutable.HashMap[Char, Long]()\n        hex.foreach(x => {\n            hexKey.getOrElseUpdate(x,\
    \ 0)\n        })\n        hexKey.getOrElse(\"A\", 0)", "        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Char, Long]()\n        hex.foreach(c\
    \ => {\n            val hexKey = c.toLong\n            hexKey.toString.toCharArray.foreach(c\
    \ => hexKey.put(c, hexKey))\n        })\n        hexKey.get(\"2\").get + hexKey.get(\"\
    3\").get + hexKey.get(\"5\").get + hexKey.get(\"7\").get + hexKey.get(\"B\").get\
    \ + hexKey.get(\"D\").get + hexKey.get(\"E\").get + hexKey.get(\"F\").get + hexKey.get(\"\
    A\").get + hexKey.get(\"C\").get + hexKey.get(\"E\").get + hexKey.get(\"D\").get\
    \ + hexKey.get(\"A\").get + hexKey.get(\"3\").get + hexKey.get(\"1\").get + hexKey.get(\"\
    3\").get + hexKey.get(\"5\").get + hexKey.get(\"7\").get + hexKey.get(\"B\").get\
    \ + hexKey.get(\"D\").get + hexKey.get(\"E\").get + hexKey.get(\"F\").get + hexKey.get(\"\
    A\").get + hexKey.get(\"C\").get + hexKey.get(\"E\").get + hexKey.get(\"D\").get\
    \ + hexKey.get(\"A\").get + hexKey.get(\"3\").get + hexKey.get(\"1\").get + hexKey.get(\"\
    3\").get + hexKey.get(\"5\").get + hexKey.get(\"7\").get + hexKey.get(\"B\").get\
    \ + hexKey.get(\"D\").get + hexKey.get(\"E\").get + hexKey.get(\"F\").get + hexKey.get(\"\
    A\").get + hexKey.get(\"C\").get + hexKey.get(\"E\").get + hexKey.get(\"D\").get\
    \ + hexKey.get(\"A\").get + hexKey.get(\"3\").get + hexKey.get(\"1\").get + hexKey.get(\"\
    3\").get + hexKey.get(\"5\").get + hexKey.get(\"7\").get + hexKey.get(\"B\").get\
    \ + hexKey.get(\"D\").get + hexKey.get(\"E\").get + hexKey.get(\"F\").get + hexKey.get(\"\
    A\").get + hexKey.get(\"C\").get + hexKey.get(\"E\").get + hexKey.get(\"D\").get\
    \ + hexKey.get(\"A\").get + hexKey.get(\"3\").get + hexKey.get(\"1\").get + hexKey.get(\"\
    3\").get + hexKey.get(\"5\").get + hexKey.get(\"7\").get + hexKey.get(\"B\").get\
    \ + hexKey.get(\"D\").get + hexKey.get(\"E\").get + hexKey.get(\"F\").get + hex",
  "        val hexDigits = num.toCharArray.map(_.toInt)\n        val hexKeys = hexDigits.map(hexKey\
    \ _)\n        hexKeys.sum", "        val hexDigits = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        hexDigits foreach\
    \ { hexDigit =>\n            hexKey += hexDigit -> hexKey.getOrElse(hexDigit,\
    \ 0) + 1\n        }\n        hexKey.values.sum", "        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x =>\
    \ {\n            val hexDigit = x.toInt\n            val hexKey = hexKey.getOrElse(hexDigit,\
    \ 0)\n            hexKey.toSeq :+ hexKey\n        })\n        hexKey.toSeq.foldLeft(0)((x,\
    \ y) => x + y)", "        val hex = num.toCharArray\n        val hexKey = new\
    \ mutable.HashMap[Int, Int]()\n        hex.foreach(x => {\n            val hexDigit\
    \ = x.toInt\n            hexKey.getOrElseUpdate(hexDigit, hexKey.getOrElse(hexDigit,\
    \ 0) + 1)\n        })\n        hexKey.values.toList.sum", "        val hex = num.toCharArray\n\
    \        val hexKey = hex.foldLeft(0)((acc, c) => \n            acc + (if (c.toInt\
    \ > 9) c.toInt else c.toInt * 16 + acc.toInt))\n        hexKey", "        val\
    \ hex = num.toCharArray.map(_.toString.toInt)\n        val hexKey = hex.map(x\
    \ => (x % 16).asInstanceOf[Int]).sum\n        hexKey", "        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey.map(x => x % 10)\n        val hexKey4\
    \ = hexKey.map(x => x % 10)\n        val hexKey5 = hexKey.map(x => x % 10)\n \
    \       val hexKey6 = hexKey.map(x => x % 10)\n        val hexKey7 = hexKey.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey.map(x => x % 10)\n        val hexKey9\
    \ = hexKey.map(x => x % 10)\n        val hexKey10 = hexKey.map(x => x % 10)\n\
    \        val hexKey11 = hexKey.map(x => x % 10)\n        val hexKey12 = hexKey.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey.map(x => x % 10)\n        val hexKey14\
    \ = hexKey.map(x => x % 10)\n        val hexKey15 = hexKey.map(x => x % 10)\n\
    \        val hexKey16 = hexKey.map(x => x % 10)\n        val hexKey17 = hexKey.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey.map(x => x % 10)\n        val hexKey19\
    \ = hexKey.map(x => x % 10)\n        val hexKey20 = hexKey.map(x => x % 10)\n\
    \        val hexKey21 = hexKey.map(x => x % 10)\n        val hexKey22 = hexKey.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey.map(x => x % 10)\n        val hexKey24\
    \ = hexKey.map(x => x % 10)\n        val hexKey25 = hexKey.map(x => x % 10)\n\
    \        val hexKey26 = hexKey.map(x => x % 10)\n        val hexKey27 = hexKey.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey.map(x => x % 10)\n        val hexKey29\
    \ = hexKey.map(x => x % 10)\n        val hexKey30 = hexKey.map(x => x % 10)\n\
    \        val hexKey31 = hexKey.map(x => x % 10)\n        val hexKey32 = hexKey.map(x\
    \ => x % 10)\n        val hexKey33 = hexKey.map(x => x % 10)\n        val hexKey34\
    \ = hexKey.map(x => x % 10)\n        val hexKey35", "        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexDigitCount = hexCount / 2\n\
    \        val hexDigits = hex.take(hexDigitCount)\n        val hexDigitCount =\
    \ hexDigits.length\n        val hexDigits = hexDigits.toList\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitCount = hexDigits.length\n        val\
    \ hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val ", "        val hex = num.toCharArray.map(_.toString.toInt)\n   \
    \     val hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x => {\n\
    \            hexKey += (x -> hexKey.getOrElse(x, 0) + 1)\n        })\n       \
    \ hexKey.values.toList.sortWith(_ < _).last", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.foldLeft(0)((acc, x) => acc * 16 + x)\n        hexKey\
    \ % 10", "        val hex = num.toCharArray\n        val hexKey = hex.foldLeft(0)((sum,\
    \ digit) => {\n            val hexDigit = digit.toLong\n            val hexDigit2\
    \ = hexDigit * hexDigit\n            val hexDigit3 = hexDigit2 * hexDigit\n  \
    \          val hexDigit4 = hexDigit3 * hexDigit\n            val hexDigit5 = hexDigit4\
    \ * hexDigit\n            val hexDigit6 = hexDigit5 * hexDigit\n            val\
    \ hexDigit7 = hexDigit6 * hexDigit\n            val hexDigit8 = hexDigit7 * hexDigit\n\
    \            val hexDigit9 = hexDigit8 * hexDigit\n            val hexDigit10\
    \ = hexDigit9 * hexDigit\n            val hexDigit11 = hexDigit10 * hexDigit\n\
    \            val hexDigit12 = hexDigit11 * hexDigit\n            val hexDigit13\
    \ = hexDigit12 * hexDigit\n            val hexDigit14 = hexDigit13 * hexDigit\n\
    \            val hexDigit15 = hexDigit14 * hexDigit\n            val hexDigit16\
    \ = hexDigit15 * hexDigit\n            val hexDigit17 = hexDigit16 * hexDigit\n\
    \            val hexDigit18 = hexDigit17 * hexDigit\n            val hexDigit19\
    \ = hexDigit18 * hexDigit\n            val hexDigit20 = hexDigit19 * hexDigit\n\
    \            val hexDigit21 = hexDigit20 * hexDigit\n            val hexDigit22\
    \ = hexDigit21 * hexDigit\n            val hexDigit23 = hexDigit22 * hexDigit\n\
    \            val hexDigit24 = hexDigit23 * hexDigit\n            val hexDigit25\
    \ = hexDigit24 * hexDigit\n            val hexDigit26 = hexDigit25 * hexDigit\n\
    \            val hexDigit27 = hexDigit26 * hexDigit\n            val hexDigit28\
    \ = hexDigit27 * hexDigit\n            val hexDigit29 = hexDigit28 * hexDigit\n\
    \            val hexDigit30 = hexDigit29 * hexDigit\n            val hexDigit31\
    \ = hexDigit30 * hexDigit\n            val hexDigit32 = hexDigit31 * hexDigit\n\
    \            val hexDigit33 = hexDigit32 * hexDigit\n            val hexDigit34\
    \ = hexDigit33 * hexDigit\n            val hexDigit35 = hexDigit34 * hexDigit\n\
    \            val hexDigit36 = hexDigit35 * hexDigit\n            val hexDigit37\
    \ = hexDigit36 * hexDigit\n            val hexDigit38 = hexDigit37 * hexDigit\n\
    \            val hexDigit39 = hexDigit38 * hexDigit\n", "        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyList = hexKey.toList\n\
    \        val hexKeyListLength = hexKeyList.size\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n", "        val hex =\
    \ num.toCharArray.map(_.toInt)\n        val hexKey = hex.foldLeft(0)((sum, digit)\
    \ => sum + digit * digit)\n        hexKey", "        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x =>\
    \ {\n            val hexVal = x.toInt\n            hexKey.put(hexVal, hexKey.getOrElse(hexVal,\
    \ 0) + 1)\n        })\n        hexKey.toSeq.filter(x => x._2 > 1).size", "   \
    \     val hex = num.toCharArray\n        val hexKey = hex.map(x => if (x == 'A')\
    \ 1 else 0).sum\n        hexKey", "        val hex = num.toCharArray\n       \
    \ val hexKey = hex.map(x => x.toInt).filter(_ > 0).count(x => x % 2 == 0)\n  \
    \      hexKey", "        val hexDigits = num.toCharArray.map(_.toInt)\n      \
    \  val hexKeys = hexDigits.map(hexDigitToKey)\n        hexKeys.foldLeft(0)((sum,\
    \ key) => sum + key)", "        val hex = num.toCharArray\n        val hexCount\
    \ = hex.length\n        val hexDigits = hexCount / 2\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = mutable.Map[Int, Int]()\n    \
    \    val hexDigitMap2 = mutable.Map[Int, Int]()\n        val hexDigitMap3 = mutable.Map[Int,\
    \ Int]()\n        val hexDigitMap4 = mutable.Map[Int, Int]()\n        val hexDigitMap5\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap6 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap7 = mutable.Map[Int, Int]()\n        val hexDigitMap8\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap9 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap10 = mutable.Map[Int, Int]()\n        val hexDigitMap11\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap12 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap13 = mutable.Map[Int, Int]()\n        val hexDigitMap14\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap15 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap16 = mutable.Map[Int, Int]()\n        val hexDigitMap17\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap18 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap19 = mutable.Map[Int, Int]()\n        val hexDigitMap20\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap21 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap22 = mutable.Map[Int, Int]()\n        val hexDigitMap23\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap24 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap25 = mutable.Map[Int, Int]()\n        val hexDigitMap26\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap27 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap28 = mutable.Map[Int, Int]()\n        val hexDigitMap29\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap30 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap31 = mutable.Map[", "        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x =>\
    \ {\n            val hexDigit = x.toInt\n            hexKey.get(hexDigit) match\
    \ {\n                case Some(count) => hexKey.put(hexDigit, count + 1)\n   \
    \             case None => hexKey.put(hexDigit, 1)\n            }\n        })\n\
    \        hexKey.values.sum", "        val hex = num.toCharArray\n        val hexCount\
    \ = hex.length\n        val hexDigits = hex.map(x => x.toInt)\n        val hexPrimes\
    \ = hexDigits.filter(x => x % 2 == 0 && x != 0)\n        val hexPrimesCount =\
    \ hexPrimes.length\n        val hexPrimeDigits = hexPrimes.map(x => x.toInt)\n\
    \        val hexPrimePrimesCount = hexPrimeDigits.length\n        val hexPrimePrimeDigits\
    \ = hexPrimeDigits.filter(x => x % 2 == 0 && x != 0)\n        val hexPrimePrimePrimesCount\
    \ = hexPrimePrimeDigits.length\n        val hexPrimePrimePrimeDigits = hexPrimePrimeDigits.filter(x\
    \ => x % 2 == 0 && x != 0)\n        val hexPrimePrimePrimePrimesCount = hexPrimePrimePrimeDigits.length\n\
    \        val hexPrimePrimePrimePrimeDigits = hexPrimePrimePrimeDigits.filter(x\
    \ => x % 2 == 0 && x != 0)\n        val hexPrimePrimePrimePrimePrimesCount = hexPrimePrimePrimePrimeDigits.length\n\
    \        val hexPrimePrimePrimePrimePrimeDigits = hexPrimePrimePrimePrimeDigits.filter(x\
    \ => x % 2 == 0 && x != 0)\n        val hexPrimePrimePrimePrimePrimePrimesCount\
    \ = hexPrimePrimePrimePrimePrimeDigits.length\n        val hexPrimePrimePrimePrimePrimePrimeDigits\
    \ = hexPrimePrimePrimePrimePrimeDigits.filter(x => x % 2 == 0 && x != 0)\n   \
    \     val hexPrimePrimePrimePrimePrimePrimePrimesCount = hexPrimePrimePrimePrimePrimePrimeDigits.length\n\
    \        val hexPrimePrimePrimePrimePrimePrimePrimeDigits = hexPrimePrimePrimePrimePrimePrimeDigits.filter(x\
    \ => x % 2 == 0 && x != 0)\n        val hexPrimePrimePrimePrimePrimePrimePrimePrimesCount\
    \ = hexPrimePrimePrimePrimePrimePrimePrimeDigits.length\n        val hexPrimePrimePrimePrimePrimePrimePrimePrimeDigits\
    \ = hexPrimePrimePrimePrimePrimePrimePrimeDigits.filter(", "        val hex =\
    \ num.toCharArray\n        val hexCount = hex.length\n        val hexMap = new\
    \ mutable.HashMap[Char, Long]()\n        hex.foreach(x => {\n            hexMap\
    \ += x -> (hexMap.getOrElse(x, 0L) + 1)\n        })\n        hexMap.filter(_._2\
    \ > 1).size", "        val hex = num.toCharArray\n        val hexKey = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey2 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey3 = new mutable.HashMap[Char, Long]()\n        val hexKey4 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey5 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey6 = new mutable.HashMap[Char, Long]()\n        val hexKey7 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey8 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey9 = new mutable.HashMap[Char, Long]()\n        val hexKey10 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey11 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey12 = new mutable.HashMap[Char, Long]()\n        val hexKey13 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey14 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey15 = new mutable.HashMap[Char, Long]()\n        val hexKey16 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey17 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey18 = new mutable.HashMap[Char, Long]()\n        val hexKey19 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey20 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey21 = new mutable.HashMap[Char, Long]()\n        val hexKey22 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey23 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey24 = new mutable.HashMap[Char, Long]()\n        val hexKey25 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey26 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey27 = new mutable.HashMap[Char, Long]()\n        val hexKey28 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey29 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey30 = new mutable.HashMap[Char, Long]()\n        val hexKey31 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey32 = new ", "        val hex = num.toCharArray\n\
    \        val hexKey = hex.foldLeft(0)((sum, digit) => {\n            val hexDigit\
    \ = digit.toInt\n            val hexDigitSum = sum + hexDigit\n            if\
    \ (hexDigit == 0 || hexDigit == 1 || hexDigit == 2 || hexDigit == 3 || hexDigit\
    \ == 4 || hexDigit == 5 || hexDigit == 6 || hexDigit == 7 || hexDigit == 8 ||\
    \ hexDigit == 9 || hexDigit == 10 || hexDigit == 11 || hexDigit == 13 || hexDigit\
    \ == 17 || hexDigit == 19 || hexDigit == 21) hexDigitSum\n            else hexDigitSum\
    \ * 10 + hexDigit\n        })\n        hexKey", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => x % 16).sum\n        hexKey", "        val\
    \ hex = num.toCharArray.map(_.toInt)\n        val hexKey = hex.foldLeft(0)((sum,\
    \ digit) => sum + digit * digit)\n        hexKey", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => (x % 16).toLong)\n        hexKey.sum", "  \
    \      val hex = num.toCharArray.map(_.toInt)\n        val hexKey = hex.map(x\
    \ => x % 16).sum\n        hexKey", "        val hex = num.toCharArray\n      \
    \  val hexKey = hex.map(x => x.toInt)\n        hexKey.toList.count(x => x % 2\
    \ == 0)", "        val hex = num.toCharArray\n        val hexLength = hex.length\n\
    \        val hexKey = new mutable.HashMap[Char, Long]()\n        val hexKey2 =\
    \ new mutable.HashMap[Char, Long]()\n        val hexKey3 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey4 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey5 = new mutable.HashMap[Char, Long]()\n        val hexKey6 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey7 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey8 = new mutable.HashMap[Char, Long]()\n        val hexKey9 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey10 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey11 = new mutable.HashMap[Char, Long]()\n        val hexKey12 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey13 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey14 = new mutable.HashMap[Char, Long]()\n        val hexKey15 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey16 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey17 = new mutable.HashMap[Char, Long]()\n        val hexKey18 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey19 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey20 = new mutable.HashMap[Char, Long]()\n        val hexKey21 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey22 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey23 = new mutable.HashMap[Char, Long]()\n        val hexKey24 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey25 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey26 = new mutable.HashMap[Char, Long]()\n        val hexKey27 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey28 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey29 = new mutable.HashMap[Char, Long]()\n        val hexKey30 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey31 = new mutable.HashMap[Char, Long]()", "      \
    \  val hex = num.toCharArray\n        val hexKey = hex.map(x => x.toInt)\n   \
    \     val hexKeyList = hexKey.toList\n        val hexKeyListLength = hexKeyList.size\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n",
  "        val hex = num.toCharArray\n        val hexKey = new mutable.HashMap[Char,\
    \ Long]()\n        hex.foreach(x => {\n            hexKey.getOrElseUpdate(x, 0)\n\
    \        })\n        hexKey.getOrElse(\"A\", 0)", "        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Char, Long]()\n        hex.foreach(c\
    \ => {\n            hexKey.getOrElseUpdate(c, 0L)\n        })\n        hexKey.getOrElse(\"\
    A\", 0L)", "        val hex = num.toCharArray\n        val hexKey = hex.map(x\
    \ => x.toInt)\n        val hexKey2 = hexKey.map(x => x % 10)\n        val hexKey3\
    \ = hexKey.map(x => x % 10)\n        val hexKey4 = hexKey.map(x => x % 10)\n \
    \       val hexKey5 = hexKey.map(x => x % 10)\n        val hexKey6 = hexKey.map(x\
    \ => x % 10)\n        val hexKey7 = hexKey.map(x => x % 10)\n        val hexKey8\
    \ = hexKey.map(x => x % 10)\n        val hexKey9 = hexKey.map(x => x % 10)\n \
    \       val hexKey10 = hexKey.map(x => x % 10)\n        val hexKey11 = hexKey.map(x\
    \ => x % 10)\n        val hexKey12 = hexKey.map(x => x % 10)\n        val hexKey13\
    \ = hexKey.map(x => x % 10)\n        val hexKey14 = hexKey.map(x => x % 10)\n\
    \        val hexKey15 = hexKey.map(x => x % 10)\n        val hexKey16 = hexKey.map(x\
    \ => x % 10)\n        val hexKey17 = hexKey.map(x => x % 10)\n        val hexKey18\
    \ = hexKey.map(x => x % 10)\n        val hexKey19 = hexKey.map(x => x % 10)\n\
    \        val hexKey20 = hexKey.map(x => x % 10)\n        val hexKey21 = hexKey.map(x\
    \ => x % 10)\n        val hexKey22 = hexKey.map(x => x % 10)\n        val hexKey23\
    \ = hexKey.map(x => x % 10)\n        val hexKey24 = hexKey.map(x => x % 10)\n\
    \        val hexKey25 = hexKey.map(x => x % 10)\n        val hexKey26 = hexKey.map(x\
    \ => x % 10)\n        val hexKey27 = hexKey.map(x => x % 10)\n        val hexKey28\
    \ = hexKey.map(x => x % 10)\n        val hexKey29 = hexKey.map(x => x % 10)\n\
    \        val hexKey30 = hexKey.map(x => x % 10)\n        val hexKey31 = hexKey.map(x\
    \ => x % 10)\n        val hexKey32 = hexKey.map(x => x % 10)\n        val hexKey33\
    \ = hexKey.map(x => x % 10)\n        val hexKey34 = hexKey.map(x => x % 10)\n\
    \        val hexKey35", "        val hex = num.toCharArray\n        val hexKey\
    \ = hex.map(x => if (x == 'A') 1 else 0).sum\n        hexKey", "        val hex\
    \ = num.toCharArray\n        val hexKey = new mutable.HashMap[Char,Long]()\n \
    \       for(i <- 0 until hex.length) {\n            val hexDigit = hex(i)\n  \
    \          hexKey.put(hexDigit,hexKey.getOrElse(hexDigit,0L)+1L)\n        }\n\
    \        hexKey.filter(_._2 > 1).length", "        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => if (x == 'A') 1 else 0).sum\n        hexKey",
  "        val hexDigits = num.toCharArray.map(_.toInt)\n        val hexKey = new\
    \ mutable.HashMap[Int, Int]()\n        for (hexDigit <- hexDigits) {\n       \
    \     hexKey.put(hexDigit, hexKey.getOrElse(hexDigit, 0) + 1)\n        }\n   \
    \     hexKey.values.sum", "        val hex = num.toCharArray\n        val hexKey\
    \ = hex.foldLeft(0)((acc, c) => {\n            val hexDigit = hexToInt(c)\n  \
    \          val hexDigitCount = hexDigit / 16\n            val hexDigitRemainder\
    \ = hexDigit % 16\n            val hexDigitCount = hexDigitCount * 16\n      \
    \      val hexDigitRemainder = hexDigitRemainder * 16\n            acc + (hexDigitCount\
    \ + hexDigitRemainder)\n        })\n        hexKey", "        val hexDigits =\
    \ num.toCharArray.map(_.toInt)\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        hexDigits.foreach { hexDigit =>\n            hexKey += (hexDigit\
    \ -> hexKey.getOrElse(hexDigit, 0) + 1)\n        }\n        hexKey.values.toList.max",
  "        val hex = num.toCharArray\n        val hexCount = hex.length\n        val\
    \ hexKey = new mutable.HashMap[Char, Int]()\n        for (i <- 0 until hexCount)\
    \ {\n            val hexChar = hex(i)\n            hexKey.put(hexChar, hexKey.getOrElse(hexChar,\
    \ 0) + 1)\n        }\n        hexKey.filter(_._2 > 1).length", "        val hexDigits\
    \ = num.toCharArray.map(_.toInt)\n        val hexKeys = hexDigits.map(hexKey _)\n\
    \        hexKeys.reduceLeft(_ + _)", "        val hex = num.toCharArray\n    \
    \    val hexKey = hex.map(x => if (x == 'A') 1 else if (x == 'B') 2 else if (x\
    \ == 'C') 3 else if (x == 'D') 4 else if (x == 'E') 5 else if (x == 'F') 6 else\
    \ 0)\n        hexKey.sum", "        val hexDigits = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        hexDigits.foreach\
    \ { hexDigit =>\n            hexKey.put(hexDigit, hexKey.getOrElse(hexDigit, 0)\
    \ + 1)\n        }\n        hexKey.values.toList.filter(_ > 1).length", "     \
    \   val hex = num.toCharArray\n        val hexCount = hex.length\n        val\
    \ hexDigits = hex.map(x => x.toInt)\n        val hexPrimes = hexDigits.filter(x\
    \ => x % 2 == 0)\n        val hexPrimeCount = hexPrimes.length\n        val hexPrimeDigits\
    \ = hexPrimes.map(x => x.toInt)\n        val hexPrimePrimes = hexPrimeDigits.filter(x\
    \ => x % 3 == 0)\n        val hexPrimePrimeCount = hexPrimePrimes.length\n   \
    \     val hexPrimePrimeDigits = hexPrimePrimes.map(x => x.toInt)\n        val\
    \ hexPrimePrimePrimes = hexPrimePrimeDigits.filter(x => x % 5 == 0)\n        val\
    \ hexPrimePrimePrimeCount = hexPrimePrimePrimes.length\n        val hexPrimePrimePrimeDigits\
    \ = hexPrimePrimePrimes.map(x => x.toInt)\n        val hexPrimePrimePrimePrimes\
    \ = hexPrimePrimePrimeDigits.filter(x => x % 7 == 0)\n        val hexPrimePrimePrimePrimeCount\
    \ = hexPrimePrimePrimePrimes.length\n        val hexPrimePrimePrimePrimeDigits\
    \ = hexPrimePrimePrimePrimes.map(x => x.toInt)\n        val hexPrimePrimePrimePrimePrimes\
    \ = hexPrimePrimePrimePrimeDigits.filter(x => x % 11 == 0)\n        val hexPrimePrimePrimePrimeCount\
    \ = hexPrimePrimePrimePrimePrimes.length\n        val hexPrimePrimePrimePrimePrimeDigits\
    \ = hexPrimePrimePrimePrimePrimes.map(x => x.toInt)\n        val hexPrimePrimePrimePrimePrimePrimes\
    \ = hexPrimePrimePrimePrimePrimePrimeDigits.filter(x => x % 13 == 0)\n       \
    \ val hexPrimePrimePrimePrimePrimePrimeCount = hexPrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexPrimePrimePrimePrimePrimePrimePrimeDigits = hexPrimePrimePrimePrimePrimePrimePrimes.map(x\
    \ => x.toInt)\n        val hexPrimePrimePrime", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val hexPrimes\
    \ = primes.filter(x => hex.contains(x))\n        hexPrimes.count(x => hex.contains(x))",
  "        val hex = num.toCharArray\n        val hexKey = hex.filter(_ >= '0' &&\
    \ _ <='9').count(_ % 2 == 0)\n        val hexKey2 = hex.filter(_ >= '0' && _ <='9').count(_\
    \ % 3 == 0)\n        val hexKey3 = hex.filter(_ >= '0' && _ <='9').count(_ % 5\
    \ == 0)\n        val hexKey4 = hex.filter(_ >= '0' && _ <='9').count(_ % 7 ==\
    \ 0)\n        val hexKey5 = hex.filter(_ >= '0' && _ <='9').count(_ % 11 == 0)\n\
    \        val hexKey6 = hex.filter(_ >= '0' && _ <='9').count(_ % 13 == 0)\n  \
    \      val hexKey7 = hex.filter(_ >= '0' && _ <='9').count(_ % 17 == 0)\n    \
    \    val hexKey8 = hex.filter(_ >= '0' && _ <='9').count(_ % 19 == 0)\n      \
    \  val hexKey9 = hex.filter(_ >= '0' && _ <='9').count(_ % 23 == 0)\n        val\
    \ hexKey10 = hex.filter(_ >= '0' && _ <='9').count(_ % 29 == 0)\n        val hexKey11\
    \ = hex.filter(_ >= '0' && _ <='9').count(_ % 31 == 0)\n        val hexKey12 =\
    \ hex.filter(_ >= '0' && _ <='9').count(_ % 37 == 0)\n        val hexKey13 = hex.filter(_\
    \ >= '0' && _ <='9').count(_ % 41 == 0)\n        val hexKey14 = hex.filter(_ >=\
    \ '0' && _ <='9').count(_ % 43 == 0)\n        val hexKey15 = hex.filter(_ >= '0'\
    \ && _ <='9').count(_ % 47 == 0)\n        val hexKey16 = hex.filter(_ >= '0' &&\
    \ _ <='9').count(_ % 53 == 0)\n        val hexKey17 = hex.filter(_ >= '0' && _\
    \ <='9').count(_ % 59 == 0)\n        val hexKey18 = hex.filter(_ >= '0' && _ <='9').count(_\
    \ % 61 == 0)\n        val hexKey19 = hex.filter(_ >= '0' && _ <='9').count(_ %\
    \ 67 == 0)\n        val hexKey20 = hex.filter(_ >= '0' && _ <='9').count(_ % 71\
    \ == ", "        val hex = num.toCharArray.map(_.toInt)\n        val hexKey =\
    \ hex.map(x => x % 16).sum\n        hexKey", "        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        val hexKey2 = new\
    \ mutable.HashMap[Int, Int]()\n        val hexKey3 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey4 = new mutable.HashMap[Int, Int]()\n        val hexKey5\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey6 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey7 = new mutable.HashMap[Int, Int]()\n        val hexKey8\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey9 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey10 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey11 = new mutable.HashMap[Int, Int]()\n        val hexKey12 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey13 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey14 = new mutable.HashMap[Int, Int]()\n        val hexKey15 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey16 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey17 = new mutable.HashMap[Int, Int]()\n        val hexKey18 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey19 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey20 = new mutable.HashMap[Int, Int]()\n        val hexKey21 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey22 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey23 = new mutable.HashMap[Int, Int]()\n        val hexKey24 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey25 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey26 = new mutable.HashMap[Int, Int]()\n        val hexKey27 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey28 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey29 = new mutable.HashMap[Int, Int]()\n        val hexKey30 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey31 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey32 = new ", "        val hex = num.toCharArray\n        val hexLength\
    \ = hex.length\n        val hexKey = hexLength * hexLength\n        val hexKey2\
    \ = hexKey.toLong\n        val hexKey3 = hexKey2.toLong\n        val hexKey4 =\
    \ hexKey3.toLong\n        val hexKey5 = hexKey4.toLong\n        val hexKey6 =\
    \ hexKey5.toLong\n        val hexKey7 = hexKey6.toLong\n        val hexKey8 =\
    \ hexKey7.toLong\n        val hexKey9 = hexKey8.toLong\n        val hexKey10 =\
    \ hexKey9.toLong\n        val hexKey11 = hexKey10.toLong\n        val hexKey12\
    \ = hexKey11.toLong\n        val hexKey13 = hexKey12.toLong\n        val hexKey14\
    \ = hexKey13.toLong\n        val hexKey15 = hexKey14.toLong\n        val hexKey16\
    \ = hexKey15.toLong\n        val hexKey17 = hexKey16.toLong\n        val hexKey18\
    \ = hexKey17.toLong\n        val hexKey19 = hexKey18.toLong\n        val hexKey20\
    \ = hexKey19.toLong\n        val hexKey21 = hexKey20.toLong\n        val hexKey22\
    \ = hexKey21.toLong\n        val hexKey23 = hexKey22.toLong\n        val hexKey24\
    \ = hexKey23.toLong\n        val hexKey25 = hexKey24.toLong\n        val hexKey26\
    \ = hexKey25.toLong\n        val hexKey27 = hexKey26.toLong\n        val hexKey28\
    \ = hexKey27.toLong\n        val hexKey29 = hexKey28.toLong\n        val hexKey30\
    \ = hexKey29.toLong\n        val hexKey31 = hexKey30.toLong\n        val hexKey32\
    \ = hexKey31.toLong\n        val hexKey33 = hexKey32.toLong\n        val hexKey34\
    \ = hexKey33.toLong\n        val hexKey35 = hexKey34.toLong\n        val hexKey36\
    \ = hexKey35.toLong\n        val hexKey37 = hexKey36.toLong\n        val hexKey38\
    \ = hexKey37.toLong\n        val hexKey39 = hexKey38.toLong\n        val hexKey40\
    \ = hexKey39.toLong\n        val hexKey41 = hexKey40.toLong\n        val hexKey42\
    \ = hexKey41.toLong\n        val hexKey4", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => x % 16).sum\n        hexKey", "        val\
    \ hex = num.toCharArray\n        val hexKey = hex.foldLeft(0)((sum, digit) =>\
    \ sum + digit * 16 + hex.indexOf(digit))\n        hexKey", "        val hex =\
    \ num.toCharArray\n        val hexKey = hex.map(x => x.toInt)\n        val hexKeyList\
    \ = hexKey.toList\n        val hexKeyListLength = hexKeyList.length\n        val\
    \ hexKeyListLength = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n\
    \        val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength\
    \ = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n    \
    \    val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength =\
    \ hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n      \
    \  val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n\
    \        val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength\
    \ = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n    \
    \    val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength =\
    \ hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n      \
    \  val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n\
    \        val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength\
    \ = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n    \
    \    val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength =\
    \ hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n      \
    \  val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n\
    \        val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength\
    \ = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n    \
    \    val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength =\
    \ hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n      \
    \  val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n\
    \        val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength\
    \ = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n    \
    \    val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength =\
    \ hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n      \
    \  val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n\
    \        val hexKeyListLength = ", "        val hex = num.toCharArray\n      \
    \  val hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x => {\n\
    \            val hexDigit = x.toInt\n            hexKey.put(hexDigit, hexKey.getOrElse(hexDigit,\
    \ 0) + 1)\n        })\n        hexKey.values.sum", "        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt).filter(x => x % 2 == 0).count(x =>\
    \ x % 2 == 0)\n        hexKey", "        val hexDigits = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        hexDigits.foreach(hexKey\
    \ += _)\n        hexKey.size", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.foldLeft(0)((acc, x) => acc + (x % 10))\n        hexKey",
  "        val hex = num.toCharArray\n        val hexKey = hex.map(x => x match {\n\
    \            case 'A' => 2\n            case 'B' => 3\n            case 'C' =>\
    \ 5\n            case 'D' => 7\n            case 'E' => 11\n            case 'F'\
    \ => 13\n            case _ => x\n        }).sum\n        hexKey", "        val\
    \ hex = num.toCharArray.map(_.toInt)\n        val hexKey = hex.foldLeft(0)((sum,\
    \ digit) => sum + digit * digit)\n        hexKey", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => x % 16).sum\n        hexKey", "        val\
    \ hex = num.toCharArray\n        val hexKey = hex.foldLeft(0)((sum, digit) =>\
    \ {\n            val hexDigit = digit.toLong\n            val hexDigitToInt =\
    \ hexDigit - 48\n            val hexDigitToInt = hexDigitToInt * hexDigitToInt\n\
    \            val hexDigitToInt = hexDigitToInt * hexDigitToInt\n            val\
    \ hexDigitToInt = hexDigitToInt * hexDigitToInt\n            val hexDigitToInt\
    \ = hexDigitToInt * hexDigitToInt\n            val hexDigitToInt = hexDigitToInt\
    \ * hexDigitToInt\n            val hexDigitToInt = hexDigitToInt * hexDigitToInt\n\
    \            val hexDigitToInt = hexDigitToInt * hexDigitToInt\n            val\
    \ hexDigitToInt = hexDigitToInt * hexDigitToInt\n            val hexDigitToInt\
    \ = hexDigitToInt * hexDigitToInt\n            val hexDigitToInt = hexDigitToInt\
    \ * hexDigitToInt\n            val hexDigitToInt = hexDigitToInt * hexDigitToInt\n\
    \            val hexDigitToInt = hexDigitToInt * hexDigitToInt\n            val\
    \ hexDigitToInt = hexDigitToInt * hexDigitToInt\n            val hexDigitToInt\
    \ = hexDigitToInt * hexDigitToInt\n            val hexDigitToInt = hexDigitToInt\
    \ * hexDigitToInt\n            val hexDigitToInt = hexDigitToInt * hexDigitToInt\n\
    \            val hexDigitToInt = hexDigitToInt * hexDigitToInt\n            val\
    \ hexDigitToInt = hexDigitToInt * hexDigitToInt\n            val hexDigitToInt\
    \ = hexDigitToInt * hexDigitToInt\n            val hexDigitToInt = hexDigitToInt\
    \ * hexDigitToInt\n            val hexDigitToInt = hexDigitToInt * hexDigitToInt\n\
    \            val hexDigitToInt = hexDigitToInt * hexDigitToInt\n            val\
    \ hexDigitToInt = hexDigitToInt * hexDigitToInt\n            val hexDigitToInt\
    \ = hexDigitToInt * hexDigitToInt\n            val hexDigitToInt = hexDigitToInt\
    \ * hexDigitToInt\n            val hexDigitToInt = hexDigitToInt * hexDigitToInt\n\
    \            val hexDigitToInt = hexDigitToInt * hexDigitToInt\n            val\
    \ hexDigitTo", "        val hex = num.toCharArray.map(_.toString.toInt)\n    \
    \    val hexKey = hex.map(x => x % 10).sum\n        hexKey", "        val hex\
    \ = num.toCharArray\n        val hexKey = hex.map(x => if (x == 'A') 1 else if\
    \ (x == 'B') 2 else if (x == 'C') 3 else if (x == 'D') 4 else if (x == 'E') 5\
    \ else if (x == 'F') 6 else 0)\n        hexKey.sum", "        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n        val hexKey4\
    \ = hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x => x % 10)\n\
    \        val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7 = hexKey6.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n        val hexKey9\
    \ = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x => x % 10)\n\
    \        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12 = hexKey11.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n        val hexKey14\
    \ = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x => x % 10)\n\
    \        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17 = hexKey16.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n        val hexKey19\
    \ = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x => x % 10)\n\
    \        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22 = hexKey21.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n        val hexKey24\
    \ = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x => x % 10)\n\
    \        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27 = hexKey26.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n        val hexKey29\
    \ = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x => x % 10)\n\
    \        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32 = hexKey31.map(x\
    \ => x % 10)\n        val hexKey33", "        val hex = num.toCharArray\n    \
    \    val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x =>\
    \ x % 10)\n        val hexKey3 = hexKey.map(x => x % 10)\n        val hexKey4\
    \ = hexKey.map(x => x % 10)\n        val hexKey5 = hexKey.map(x => x % 10)\n \
    \       val hexKey6 = hexKey.map(x => x % 10)\n        val hexKey7 = hexKey.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey.map(x => x % 10)\n        val hexKey9\
    \ = hexKey.map(x => x % 10)\n        val hexKey10 = hexKey.map(x => x % 10)\n\
    \        val hexKey11 = hexKey.map(x => x % 10)\n        val hexKey12 = hexKey.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey.map(x => x % 10)\n        val hexKey14\
    \ = hexKey.map(x => x % 10)\n        val hexKey15 = hexKey.map(x => x % 10)\n\
    \        val hexKey16 = hexKey.map(x => x % 10)\n        val hexKey17 = hexKey.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey.map(x => x % 10)\n        val hexKey19\
    \ = hexKey.map(x => x % 10)\n        val hexKey20 = hexKey.map(x => x % 10)\n\
    \        val hexKey21 = hexKey.map(x => x % 10)\n        val hexKey22 = hexKey.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey.map(x => x % 10)\n        val hexKey24\
    \ = hexKey.map(x => x % 10)\n        val hexKey25 = hexKey.map(x => x % 10)\n\
    \        val hexKey26 = hexKey.map(x => x % 10)\n        val hexKey27 = hexKey.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey.map(x => x % 10)\n        val hexKey29\
    \ = hexKey.map(x => x % 10)\n        val hexKey30 = hexKey.map(x => x % 10)\n\
    \        val hexKey31 = hexKey.map(x => x % 10)\n        val hexKey32 = hexKey.map(x\
    \ => x % 10)\n        val hexKey33 = hexKey.map(x => x % 10)\n        val hexKey34\
    \ = hexKey.map(x => x % 10)\n        val hexKey35", "        val hexDigits = num.toCharArray.map(_.toInt)\n\
    \        val hexKeys = hexDigits.map(hexDigit => hexDigit * hexDigit)\n      \
    \  val hexKeysCount = hexKeys.count(hexKey => hexKey > 0)\n        val hexKeysCount2\
    \ = hexKeys.count(hexKey => hexKey > 1 && hexKey < hexKeysCount)\n        hexKeysCount2",
  "        val hexDigits = num.toCharArray.map(_.toInt)\n        val hexKeys = hexDigits.map(hexKey\
    \ _)\n        hexKeys.sum", "        val hex = num.toCharArray\n        val hexKey\
    \ = hex.map(x => if (x == 'A') 1 else 0).sum\n        hexKey", "        val hex\
    \ = num.toCharArray\n        val hexKey = hex.map(x => if (x.isDigit) x.toInt\
    \ else x.toLong).sum\n        hexKey", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => (x % 16).toInt)\n        hexKey.count(x =>\
    \ x == 2)", "        val hex = num.toCharArray\n        val hexKey = hex.map(x\
    \ => if (x == 'A') 1 else 0).sum\n        hexKey", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.foldLeft(0)((sum, digit) => sum + digit * digit)\n \
    \       hexKey", "        val hex = num.toCharArray\n        val hexKey = hex.map(x\
    \ => x match {\n            case 'A' => 2\n            case 'B' => 3\n       \
    \     case 'C' => 5\n            case 'D' => 7\n            case 'E' => 11\n \
    \           case 'F' => 13\n            case _ => 0\n        }).sum\n        hexKey",
  "        val hex = num.toCharArray.map(_.toInt)\n        val hexKey = hex.map(x\
    \ => x % 10).filter(_ > 0).count(_ == 2)\n        hexKey", "        val hex =\
    \ num.toCharArray.map(_.toString.toUpperCase)\n        val hexKey = hex.foldLeft(0)((acc,\
    \ x) => acc + (x.toLong % 10))\n        hexKey", "        val hex = num.toCharArray\n\
    \        val hexKey = hex.filter(_ >= '0' && _ <='9').count() - hex.filter(_ >=\
    \ 'A' && _ <='F').count()\n        hexKey", "        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n        val hexKey4\
    \ = hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x => x % 10)\n\
    \        val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7 = hexKey6.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n        val hexKey9\
    \ = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x => x % 10)\n\
    \        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12 = hexKey11.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n        val hexKey14\
    \ = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x => x % 10)\n\
    \        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17 = hexKey16.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n        val hexKey19\
    \ = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x => x % 10)\n\
    \        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22 = hexKey21.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n        val hexKey24\
    \ = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x => x % 10)\n\
    \        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27 = hexKey26.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n        val hexKey29\
    \ = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x => x % 10)\n\
    \        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32 = hexKey31.map(x\
    \ => x % 10)\n        val hexKey33", "        val hex = num.toCharArray\n    \
    \    val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x =>\
    \ x % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n        val hexKey4\
    \ = hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x => x % 10)\n\
    \        val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7 = hexKey6.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n        val hexKey9\
    \ = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x => x % 10)\n\
    \        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12 = hexKey11.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n        val hexKey14\
    \ = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x => x % 10)\n\
    \        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17 = hexKey16.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n        val hexKey19\
    \ = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x => x % 10)\n\
    \        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22 = hexKey21.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n        val hexKey24\
    \ = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x => x % 10)\n\
    \        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27 = hexKey26.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n        val hexKey29\
    \ = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x => x % 10)\n\
    \        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32 = hexKey31.map(x\
    \ => x % 10)\n        val hexKey33", "        val hex = num.toCharArray\n    \
    \    val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x =>\
    \ x % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n        val hexKey4\
    \ = hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x => x % 10)\n\
    \        val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7 = hexKey6.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n        val hexKey9\
    \ = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x => x % 10)\n\
    \        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12 = hexKey11.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n        val hexKey14\
    \ = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x => x % 10)\n\
    \        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17 = hexKey16.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n        val hexKey19\
    \ = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x => x % 10)\n\
    \        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22 = hexKey21.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n        val hexKey24\
    \ = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x => x % 10)\n\
    \        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27 = hexKey26.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n        val hexKey29\
    \ = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x => x % 10)\n\
    \        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32 = hexKey31.map(x\
    \ => x % 10)\n        val hexKey33", "        val hex = num.toCharArray\n    \
    \    val hexKey = hex.map(x => if (x == 'A') 1 else 0).sum\n        hexKey", " \
    \       val hexDigits = num.toCharArray.map(_.toInt)\n        val hexKeys = hexDigits.map(x\
    \ => (x % 16).asInstanceOf[Int])\n        val hexKeysCount = hexKeys.count(_ >\
    \ 0)\n        hexKeysCount", "        val hexDigits = num.toCharArray.map(_.toInt)\n\
    \        val hexKeys = hexDigits.map(hexKey _)\n        hexKeys.sum", "      \
    \  val hexDigits = num.toCharArray.map(_.toInt)\n        val primes = mutable.Set[Long]()\n\
    \        val hexKey = 0L\n        for (hexDigit <- hexDigits) {\n            val\
    \ hexDigitPrimes = hexDigit.primes\n            hexKey += hexDigitPrimes.toSet.size\
    \ * (hexDigit - hexDigitPrimes.toSet)\n            primes ++= hexDigitPrimes\n\
    \        }\n        hexKey", "        val hexDigits = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        hexDigits.foreach(hexKey\
    \ += _)\n        hexKey.values.sum", "        val hex = num.toCharArray\n    \
    \    val hexLength = hex.length\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey2 = new mutable.HashMap[Int, Int]()\n        var count\
    \ = 0\n        var count2 = 0\n        var count3 = 0\n        var count4 = 0\n\
    \        var count5 = 0\n        var count6 = 0\n        var count7 = 0\n    \
    \    var count8 = 0\n        var count9 = 0\n        var count10 = 0\n       \
    \ var count11 = 0\n        var count12 = 0\n        var count13 = 0\n        var\
    \ count14 = 0\n        var count15 = 0\n        var count16 = 0\n        var count17\
    \ = 0\n        var count18 = 0\n        var count19 = 0\n        var count20 =\
    \ 0\n        var count21 = 0\n        var count22 = 0\n        var count23 = 0\n\
    \        var count24 = 0\n        var count25 = 0\n        var count26 = 0\n \
    \       var count27 = 0\n        var count28 = 0\n        var count29 = 0\n  \
    \      var count30 = 0\n        var count31 = 0\n        var count32 = 0\n   \
    \     var count33 = 0\n        var count34 = 0\n        var count35 = 0\n    \
    \    var count36 = 0\n        var count37 = 0\n        var count38 = 0\n     \
    \   var count39 = 0\n        var count40 = 0\n        var count41 = 0\n      \
    \  var count42 = 0\n        var count43 = 0\n        var count44 = 0\n       \
    \ var count45 = 0\n        var count46 = 0\n        var count47 = 0\n        var\
    \ count48 = 0\n        var count49 = 0\n        var count50 = 0\n        var count51\
    \ = 0\n        var count52 = 0\n        var count53 = 0\n        var count54 =\
    \ 0\n        var count55 = 0\n        var count56 = 0\n        var count57 = 0\n\
    \        var count58 = 0\n        var count59 = 0\n        var count60 = 0\n \
    \       var count61 = 0\n        var count62 = 0\n        var count63 = 0\n  \
    \      var count64 = 0\n        var count65 = 0\n        var count66 = 0\n   \
    \     var count67 = 0\n        var count68 = 0\n        var count69 = 0\n    \
    \    var count70 = 0\n        var count71 = 0\n        var count72 = 0\n     \
    \   var count73 = 0\n        var count74 = 0\n        var count75 = 0\n      \
    \  var count76 = 0\n        var count77 = 0\n        var count78 = 0\n       \
    \ var count79 = 0\n        var count80 = 0\n        var count81 = 0\n        var\
    \ count82 = 0\n        var count83 = 0\n        var count84 = 0\n        var count85\
    \ = 0\n        var count86 = 0\n        var count87 = 0\n        var count88 =\
    \ 0\n        var count89 = 0\n        var count90 = 0\n        var count91 = 0\n\
    \        var count92 = 0\n        var count93 = 0\n        var count", "     \
    \   val hex = num.toCharArray\n        val hexCount = hex.count(_ == '0')\n  \
    \      val hexDigits = hex.count(_ >= '0' && _ <='9')\n        val hexDigitCount\
    \ = hexDigits.toLong\n        val hexDigitCount = hexDigitCount.toInt\n      \
    \  val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount =\
    \ hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n     \
    \   val hexDigitCount = hexDigitCount.toInt\n        val hexDigitCount = hexDigitCount.toInt\n\
    \        val hexDigitCount = hex", "        val hex = num.toCharArray\n      \
    \  val hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x => {\n\
    \            val hexVal = x.toInt\n            hexKey.getOrElse(hexVal, 0)\n \
    \           hexKey.put(hexVal, hexKey.get(hexVal) + 1)\n        })\n        hexKey.getOrElse(hexVal,\
    \ 0)", "        val hex = num.toCharArray.map(_.toInt)\n        val hexMap = hex.groupBy(x\
    \ => x % 10)\n        val hexMap2 = hexMap.filter(_._2 > 1).map(_._1)\n      \
    \  val hexMap3 = hexMap2.filter(_._2 > 1).map(_._1)\n        val hexMap4 = hexMap3.filter(_._2\
    \ > 1).map(_._1)\n        val hexMap5 = hexMap4.filter(_._2 > 1).map(_._1)\n \
    \       val hexMap6 = hexMap5.filter(_._2 > 1).map(_._1)\n        val hexMap7\
    \ = hexMap6.filter(_._2 > 1).map(_._1)\n        val hexMap8 = hexMap7.filter(_._2\
    \ > 1).map(_._1)\n        val hexMap9 = hexMap8.filter(_._2 > 1).map(_._1)\n \
    \       val hexMap10 = hexMap9.filter(_._2 > 1).map(_._1)\n        val hexMap11\
    \ = hexMap10.filter(_._2 > 1).map(_._1)\n        val hexMap12 = hexMap11.filter(_._2\
    \ > 1).map(_._1)\n        val hexMap13 = hexMap12.filter(_._2 > 1).map(_._1)\n\
    \        val hexMap14 = hexMap13.filter(_._2 > 1).map(_._1)\n        val hexMap15\
    \ = hexMap14.filter(_._2 > 1).map(_._1)\n        val hexMap16 = hexMap15.filter(_._2\
    \ > 1).map(_._1)\n        val hexMap17 = hexMap16.filter(_._2 > 1).map(_._1)\n\
    \        val hexMap18 = hexMap17.filter(_._2 > 1).map(_._1)\n        val hexMap19\
    \ = hexMap18.filter(_._2 > 1).map(_._1)\n        val hexMap20 = hexMap19.filter(_._2\
    \ > 1).map(_._1)\n        val hexMap21 = hexMap20.filter(_._2 > 1).map(_._1)\n\
    \        val hexMap22 = hexMap21.filter(_._2 > 1).map(_._1)\n        val hexMap23\
    \ = hexMap22.filter(_._2 > 1).map(_._1)\n        val hexMap24 = hexMap23.filter(_._2\
    \ > 1).map(_._1)\n        val hexMap25 = hexMap24.filter(_._2 > 1).map(_._1)\n\
    \        val hexMap26 = hexMap25.filter(_._2 > 1).map", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.foldLeft(0)((sum, digit) => sum + (digit * digit))\n\
    \        hexKey", "        val hexDigits = num.toCharArray\n        val hexKey\
    \ = new mutable.HashMap[Char, Long]()\n        hexDigits.foreach(hexKey += _ ->\
    \ 1)\n        hexKey.toSeq.filter(hexKey => hexKey._2 > 1).size", "        val\
    \ hex = num.toCharArray.map(_.toInt)\n        val hexKey = hex.foldLeft(0)((sum,\
    \ digit) => sum + digit * digit)\n        hexKey", "        val hex = num.toCharArray\n\
    \        val hexCount = hex.count\n        val hexDigits = hex.map(x => x.toInt)\n\
    \        val hexDigitsCount = hexDigits.length\n        val hexDigitsToCheck =\
    \ hexDigits.take(hexDigitsCount)\n        val hexDigitsToCheckCount = hexDigitsToCheck.length\n\
    \        val hexDigitsToCheckMap = hexDigitsToCheck.map(x => x.toInt)\n      \
    \  val hexDigitsToCheckMapCount = hexDigitsToCheckMap.length\n        val hexDigitsToCheckMapMap\
    \ = hexDigitsToCheckMap.map(x => x.toInt)\n        val hexDigitsToCheckMapMapCount\
    \ = hexDigitsToCheckMapMap.length\n        val hexDigitsToCheckMapMapMapCount\
    \ = hexDigitsToCheckMapMapMap.length\n        val hexDigitsToCheckMapMapMapMapCount\
    \ = hexDigitsToCheckMapMapMap.length\n        val hexDigitsToCheckMapMapMapMapCount\
    \ = hexDigitsToCheckMapMapMapMap.length\n        val hexDigitsToCheckMapMapMapMapMapCount\
    \ = hexDigitsToCheckMapMapMapMap.length\n        val hexDigitsToCheckMapMapMapMapMapCount\
    \ = hexDigitsToCheckMapMapMapMapMap.length\n        val hexDigitsToCheckMapMapMapMapMapMapCount\
    \ = hexDigitsToCheckMapMapMapMapMapMap.length\n        val hexDigitsToCheckMapMapMapMapMapMapCount\
    \ = hexDigitsToCheckMapMapMapMapMapMap.length\n        val hexDigitsToCheckMapMapMapMapMapMapCount\
    \ = hexDigitsToCheckMapMapMapMapMapMap.length\n        val hexDigitsToCheckMapMapMapMapMapMapMapCount\
    \ = hexDigitsToCheckMapMapMapMapMapMap.length\n        val hexDigitsToCheckMapMapMapMapMapMapMapCount\
    \ = hexDigitsToCheckMapMapMapMapMapMapMap.length\n        val hexDigitsToCheckMapMapMapMapMapMapMapMapCount\
    \ = hexDigitsToCheckMapMapMapMapMapMapMapMap.length\n        val hexDigitsToCheckMapMapMapMapMapMapMapMapCount\
    \ = hexDigitsToCheckMapMapMapMapMapMapMap.length\n        val hexDigitsToCheckMapMapMapMapMapMapMapMapCount\
    \ = hexDigitsToCheckMapMapMapMapMapMapMapMap.length\n        val hexDigitsToCheckMapMapMap",
  "        val hex = num.toCharArray\n        val hexKey = hex.map(x => if (x == 'A')\
    \ 1 else 0).sum\n        hexKey", "        val hex = num.toCharArray\n       \
    \ val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x => x\
    \ % 10)\n        val hexKey3 = hexKey.map(x => x % 10)\n        val hexKey4 =\
    \ hexKey.map(x => x % 10)\n        val hexKey5 = hexKey.map(x => x % 10)\n   \
    \     val hexKey6 = hexKey.map(x => x % 10)\n        val hexKey7 = hexKey.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey.map(x => x % 10)\n        val hexKey9\
    \ = hexKey.map(x => x % 10)\n        val hexKey10 = hexKey.map(x => x % 10)\n\
    \        val hexKey11 = hexKey.map(x => x % 10)\n        val hexKey12 = hexKey.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey.map(x => x % 10)\n        val hexKey14\
    \ = hexKey.map(x => x % 10)\n        val hexKey15 = hexKey.map(x => x % 10)\n\
    \        val hexKey16 = hexKey.map(x => x % 10)\n        val hexKey17 = hexKey.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey.map(x => x % 10)\n        val hexKey19\
    \ = hexKey.map(x => x % 10)\n        val hexKey20 = hexKey.map(x => x % 10)\n\
    \        val hexKey21 = hexKey.map(x => x % 10)\n        val hexKey22 = hexKey.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey.map(x => x % 10)\n        val hexKey24\
    \ = hexKey.map(x => x % 10)\n        val hexKey25 = hexKey.map(x => x % 10)\n\
    \        val hexKey26 = hexKey.map(x => x % 10)\n        val hexKey27 = hexKey.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey.map(x => x % 10)\n        val hexKey29\
    \ = hexKey.map(x => x % 10)\n        val hexKey30 = hexKey.map(x => x % 10)\n\
    \        val hexKey31 = hexKey.map(x => x % 10)\n        val hexKey32 = hexKey.map(x\
    \ => x % 10)\n        val hexKey33 = hexKey.map(x => x % 10)\n        val hexKey34\
    \ = hexKey.map(x => x % 10)\n        val hexKey35", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => x % 10).sum\n        hexKey", "        val\
    \ hex = num.toCharArray\n        val hexKey = new mutable.HashMap[Char, Long]()\n\
    \        hex.foreach(c => {\n            hexKey.getOrElseUpdate(c, 0L)\n     \
    \   })\n        hexKey.getOrElse(\"A\", 0L) + hexKey.getOrElse(\"B\", 0L) + hexKey.getOrElse(\"\
    C\", 0L) + hexKey.getOrElse(\"D\", 0L) + hexKey.getOrElse(\"E\", 0L) + hexKey.getOrElse(\"\
    F\", 0L)", "        val hex = num.toCharArray\n        val hexKey = hex.map(x\
    \ => if (x == 'A') 1 else 0).sum\n        hexKey", "        val hex = num.toCharArray\n\
    \        val hexKey = hex.foldLeft(0)((acc, c) => acc + (c.toInt * (c.toInt -\
    \ 48)))\n        hexKey", "        val hex = num.toCharArray.map(_.toInt)\n  \
    \      val hexKey = hex.foldLeft(0)((sum, digit) => sum + digit * digit)\n   \
    \     hexKey", "        val hex = num.toCharArray.map(_.toString.toInt)\n    \
    \    val hexKey = hex.map(x => math.pow(16, x))\n        hexKey.sum", "      \
    \  val hex = num.toCharArray\n        val hexKey = new mutable.HashMap[Char, Long]()\n\
    \        hex.foreach(x => {\n            hexKey.getOrElseUpdate(x, 0)\n      \
    \  })\n        hexKey.getOrElse(\"A\", 0)", "        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x =>\
    \ hexKey.put(x, hexKey.getOrElse(x, 0) + 1))\n        hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOrElse(hexKey.getOr",
  "        val hex = num.toCharArray\n        val hexKey = hex.foldLeft(0)((sum, digit)\
    \ => sum + digit * 16 + hex.indexOf(digit))\n        hexKey", "        val hex\
    \ = num.toCharArray.map(_.toInt)\n        val hexKey = hex.foldLeft(0)((sum, digit)\
    \ => sum + digit * digit)\n        hexKey", "        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Char, Long]()\n        for (i <- 0 until\
    \ hex.length) {\n            val hexDigit = hex(i)\n            val hexKey = hexKey.getOrElseUpdate(hexDigit,\
    \ 0)\n            hexKey.get += 1\n        }\n        hexKey.getOrElse(\"A\",\
    \ 0)", "        val hex = num.toCharArray\n        val hexCount = hex.count(_\
    \ == 'A')\n        val hexCount2 = hex.count(_ == 'B')\n        val hexCount3\
    \ = hex.count(_ == 'C')\n        val hexCount4 = hex.count(_ == 'D')\n       \
    \ val hexCount5 = hex.count(_ == 'E')\n        val hexCount6 = hex.count(_ ==\
    \ 'F')\n        val hexCount7 = hex.count(_ == 'A')\n        val hexCount8 = hex.count(_\
    \ == 'B')\n        val hexCount9 = hex.count(_ == 'C')\n        val hexCount10\
    \ = hex.count(_ == 'D')\n        val hexCount11 = hex.count(_ == 'E')\n      \
    \  val hexCount12 = hex.count(_ == 'F')\n        val hexCount13 = hex.count(_\
    \ == 'A')\n        val hexCount14 = hex.count(_ == 'B')\n        val hexCount15\
    \ = hex.count(_ == 'C')\n        val hexCount16 = hex.count(_ == 'D')\n      \
    \  val hexCount17 = hex.count(_ == 'E')\n        val hexCount18 = hex.count(_\
    \ == 'F')\n        val hexCount19 = hex.count(_ == 'A')\n        val hexCount20\
    \ = hex.count(_ == 'B')\n        val hexCount21 = hex.count(_ == 'C')\n      \
    \  val hexCount22 = hex.count(_ == 'D')\n        val hexCount23 = hex.count(_\
    \ == 'E')\n        val hexCount24 = hex.count(_ == 'F')\n        val hexCount25\
    \ = hex.count(_ == 'A')\n        val hexCount26 = hex.count(_ == 'B')\n      \
    \  val hexCount27 = hex.count(_ == 'C')\n        val hexCount28 = hex.count(_\
    \ == 'D')\n        val hexCount29 = hex.count(_ == 'E')\n        val hexCount30\
    \ = hex.count(_ == 'F')\n        val hexCount31 = hex.count(_ == 'A')\n      \
    \  val hexCount32 = hex.count(_ == 'B')\n        val hexCount33 = hex.count(_\
    \ == 'C')\n        val hexCount34 = hex.count(_ == 'D')\n        val hexCount35\
    \ = hex.count(_ == 'E')\n        val hexCount36 = hex.count(_ == 'F')\n      \
    \  val hexCount37 = hex.count(_ == 'A", "        val hex = num.toCharArray\n \
    \       val hexLength = hex.length\n        val hexKey = new mutable.HashMap[Char,\
    \ Long]()\n        for(i <- 0 until hexLength) {\n            val hexChar = hex(i)\n\
    \            val hexVal = hexKey.getOrElse(hexChar, 0)\n            hexKey.put(hexChar,\
    \ hexVal + 1)\n        }\n        hexKey.values.toList.sum", "        val hex\
    \ = num.toCharArray\n        val hexKey = hex.map(x => x.toInt).map(x => x % 16).sum\n\
    \        hexKey", "        val hex = num.toCharArray\n        val hexKey = hex.map(x\
    \ => x.toInt)\n        hexKey.filter(x => x % 2 == 0).length", "        val hex\
    \ = num.toCharArray.map(_.toString.toInt)\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        hex.foreach(x => {\n            hexKey.getOrElse(x, 0)\n   \
    \     })\n        hexKey.size", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.foldLeft(0)((sum, digit) => {\n            val digitValue\
    \ = digit % 16\n            val newSum = sum + digitValue\n            if (newSum\
    \ == 16) digitValue\n            else newSum\n        })\n        hexKey", " \
    \       val hexDigits = num.toCharArray\n        val hexKey = new mutable.HashMap[Char,Long]()\n\
    \        for(i <- 0 until hexDigits.length){\n            hexKey.put(hexDigits(i).toUpperCase\
    \ , i)\n        }\n        hexKey.filter(_._2 % 2 == 0).length", "        val\
    \ hex = num.toCharArray\n        val hexKey = hex.map(x => if (x == 'A') 1 else\
    \ 0).sum\n        hexKey", "        val hex = num.toCharArray\n        val hexKey\
    \ = new mutable.HashMap[Char, Long]()\n        hex.foreach(c => {\n          \
    \  hexKey.put(c.toUpperCase, hexKey.getOrElse(c.toUpperCase, 0L) + 1)\n      \
    \  })\n        hexKey.getOrElse(\"A\", 0L) + hexKey.getOrElse(\"B\", 0L) + hexKey.getOrElse(\"\
    C\", 0L) + hexKey.getOrElse(\"D\", 0L) + hexKey.getOrElse(\"E\", 0L) + hexKey.getOrElse(\"\
    F\", 0L)", "        val hex = num.toCharArray.map(_.toInt)\n        val primes\
    \ = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet = primes.toSet\n\
    \        val hexSet = hex.toSet\n        val hexKey = 0\n        hex.foreach {\
    \ x =>\n            if (primesSet.contains(x)) {\n                hexKey += primes.indexOf(x)\n\
    \            }\n        }\n        hexKey", "        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n        val hexKey4\
    \ = hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x => x % 10)\n\
    \        val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7 = hexKey6.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n        val hexKey9\
    \ = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x => x % 10)\n\
    \        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12 = hexKey11.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n        val hexKey14\
    \ = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x => x % 10)\n\
    \        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17 = hexKey16.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n        val hexKey19\
    \ = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x => x % 10)\n\
    \        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22 = hexKey21.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n        val hexKey24\
    \ = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x => x % 10)\n\
    \        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27 = hexKey26.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n        val hexKey29\
    \ = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x => x % 10)\n\
    \        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32 = hexKey31.map(x\
    \ => x % 10)\n        val hexKey33", "        val hex = num.toCharArray\n    \
    \    val hexKey = hex.map(x => if (x.isDigit) x.toInt else x.toLong).sum\n   \
    \     hexKey", "        val hexDigits = num.toCharArray.map(_.toInt)\n       \
    \ val hexKeys = hexDigits.map(hexKey _)\n        hexKeys.reduce((a, b) => a +\
    \ b)", "        val hex = num.toCharArray\n        val hexCount = hex.length\n\
    \        val hexDigitCount = hexCount / 2\n        val hexDigits = hex.grouped(hexDigitCount)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigits = hexDigits.toList\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitCount = hexDigits.length\n\
    \        ", "        val hex = num.toCharArray\n        val hexLen = hex.length\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyLen = hexKey.length\n\
    \        val hexKeyLen2 = hexKeyLen / 2\n        val hexKeyLen3 = hexKeyLen /\
    \ 3\n        val hexKeyLen4 = hexKeyLen / 4\n        val hexKeyLen5 = hexKeyLen\
    \ / 5\n        val hexKeyLen6 = hexKeyLen / 6\n        val hexKeyLen7 = hexKeyLen\
    \ / 7\n        val hexKeyLen8 = hexKeyLen / 8\n        val hexKeyLen9 = hexKeyLen\
    \ / 9\n        val hexKeyLen10 = hexKeyLen / 10\n        val hexKeyLen11 = hexKeyLen\
    \ / 11\n        val hexKeyLen12 = hexKeyLen / 12\n        val hexKeyLen13 = hexKeyLen\
    \ / 13\n        val hexKeyLen14 = hexKeyLen / 14\n        val hexKeyLen15 = hexKeyLen\
    \ / 15\n        val hexKeyLen16 = hexKeyLen / 16\n        val hexKeyLen17 = hexKeyLen\
    \ / 17\n        val hexKeyLen18 = hexKeyLen / 18\n        val hexKeyLen19 = hexKeyLen\
    \ / 19\n        val hexKeyLen20 = hexKeyLen / 20\n        val hexKeyLen21 = hexKeyLen\
    \ / 21\n        val hexKeyLen22 = hexKeyLen / 22\n        val hexKeyLen23 = hexKeyLen\
    \ / 23\n        val hexKeyLen24 = hexKeyLen / 24\n        val hexKeyLen25 = hexKeyLen\
    \ / 25\n        val hexKeyLen26 = hexKeyLen / 26\n        val hexKeyLen27 = hexKeyLen\
    \ / 27\n        val hexKeyLen28 = hexKeyLen / 28\n        val hexKeyLen29 = hexKeyLen\
    \ / 29\n        val hexKeyLen30 = hexKeyLen / 30\n        val hexKeyLen31 = hexKeyLen\
    \ / 31\n        val hexKeyLen32 = hexKeyLen / 32\n        val hexKeyLen33 = hexKeyLen\
    \ / 33\n        val hexKeyLen34 = hexKeyLen / 34\n        val hexKeyLen35 = hexKeyLen\
    \ / 35\n        val hexKeyLen36 = hexKeyLen / 36\n        val hexKeyLen37 = hexKeyLen\
    \ / 37\n        val hexKeyLen38 = hexKeyLen / 38\n        ", "        val hexDigits\
    \ = num.toCharArray.map(_.toInt)\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        hexDigits foreach { hexDigit =>\n            hexKey.put(hexDigit,\
    \ hexKey.getOrElse(hexDigit, 0) + 1L)\n        }\n        hexKey.values.toList.filter(x\
    \ => x > 1).size", "        val hex = num.toCharArray\n        val hexKey = hex.foldLeft(0)((acc,\
    \ x) => acc + (x.toInt % 10))\n        hexKey", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.foldLeft(0)((acc, x) => acc * 16 + x)\n        hexKey",
  "        val hexDigits = num.toCharArray.map(_.toInt)\n        val hexKey = new\
    \ mutable.HashMap[Int, Int]()\n        hexDigits foreach { hexDigit =>\n     \
    \       hexKey += hexDigit -> hexKey.getOrElse(hexDigit, 0) + 1\n        }\n \
    \       hexKey.values.toList.filter(_ > 1).size", "        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt).map(x => math.pow(x, 2)).sum\n   \
    \     hexKey", "        val hexDigits = num.toCharArray.map(_.toInt)\n       \
    \ val hexKey = new mutable.HashMap[Int, Int]()\n        hexDigits.foreach { hexDigit\
    \ =>\n            hexKey.put(hexDigit, hexKey.getOrElse(hexDigit, 0) + 1)\n  \
    \      }\n        hexKey.values.toList.filter(_ > 1).length", "        val hex\
    \ = num.toCharArray\n        val hexKey = hex.map(x => x.toInt)\n        val hexKey2\
    \ = hexKey.map(x => x % 10)\n        val hexKey3 = hexKey.map(x => x % 10)\n \
    \       val hexKey4 = hexKey.map(x => x % 10)\n        val hexKey5 = hexKey.map(x\
    \ => x % 10)\n        val hexKey6 = hexKey.map(x => x % 10)\n        val hexKey7\
    \ = hexKey.map(x => x % 10)\n        val hexKey8 = hexKey.map(x => x % 10)\n \
    \       val hexKey9 = hexKey.map(x => x % 10)\n        val hexKey10 = hexKey.map(x\
    \ => x % 10)\n        val hexKey11 = hexKey.map(x => x % 10)\n        val hexKey12\
    \ = hexKey.map(x => x % 10)\n        val hexKey13 = hexKey.map(x => x % 10)\n\
    \        val hexKey14 = hexKey.map(x => x % 10)\n        val hexKey15 = hexKey.map(x\
    \ => x % 10)\n        val hexKey16 = hexKey.map(x => x % 10)\n        val hexKey17\
    \ = hexKey.map(x => x % 10)\n        val hexKey18 = hexKey.map(x => x % 10)\n\
    \        val hexKey19 = hexKey.map(x => x % 10)\n        val hexKey20 = hexKey.map(x\
    \ => x % 10)\n        val hexKey21 = hexKey.map(x => x % 10)\n        val hexKey22\
    \ = hexKey.map(x => x % 10)\n        val hexKey23 = hexKey.map(x => x % 10)\n\
    \        val hexKey24 = hexKey.map(x => x % 10)\n        val hexKey25 = hexKey.map(x\
    \ => x % 10)\n        val hexKey26 = hexKey.map(x => x % 10)\n        val hexKey27\
    \ = hexKey.map(x => x % 10)\n        val hexKey28 = hexKey.map(x => x % 10)\n\
    \        val hexKey29 = hexKey.map(x => x % 10)\n        val hexKey30 = hexKey.map(x\
    \ => x % 10)\n        val hexKey31 = hexKey.map(x => x % 10)\n        val hexKey32\
    \ = hexKey.map(x => x % 10)\n        val hexKey33 = hexKey.map(x => x % 10)\n\
    \        val hexKey34 = hexKey.map(x => x % 10)\n        val hexKey35", "    \
    \    val hex = num.toCharArray.map(_.toInt)\n        val hexMap = hex.groupBy(x\
    \ => x % 10)\n        val hexMap2 = hexMap.filter(_._2 > 1).map(_._1)\n      \
    \  val hexMap3 = hexMap2.filter(_._2 > 1).map(_._1)\n        val hexMap4 = hexMap3.filter(_._2\
    \ > 1).map(_._1)\n        val hexMap5 = hexMap4.filter(_._2 > 1).map(_._1)\n \
    \       val hexMap6 = hexMap5.filter(_._2 > 1).map(_._1)\n        val hexMap7\
    \ = hexMap6.filter(_._2 > 1).map(_._1)\n        val hexMap8 = hexMap7.filter(_._2\
    \ > 1).map(_._1)\n        val hexMap9 = hexMap8.filter(_._2 > 1).map(_._1)\n \
    \       val hexMap10 = hexMap9.filter(_._2 > 1).map(_._1)\n        val hexMap11\
    \ = hexMap10.filter(_._2 > 1).map(_._1)\n        val hexMap12 = hexMap11.filter(_._2\
    \ > 1).map(_._1)\n        val hexMap13 = hexMap12.filter(_._2 > 1).map(_._1)\n\
    \        val hexMap14 = hexMap13.filter(_._2 > 1).map(_._1)\n        val hexMap15\
    \ = hexMap14.filter(_._2 > 1).map(_._1)\n        val hexMap16 = hexMap15.filter(_._2\
    \ > 1).map(_._1)\n        val hexMap17 = hexMap16.filter(_._2 > 1).map(_._1)\n\
    \        val hexMap18 = hexMap17.filter(_._2 > 1).map(_._1)\n        val hexMap19\
    \ = hexMap18.filter(_._2 > 1).map(_._1)\n        val hexMap20 = hexMap19.filter(_._2\
    \ > 1).map(_._1)\n        val hexMap21 = hexMap20.filter(_._2 > 1).map(_._1)\n\
    \        val hexMap22 = hexMap21.filter(_._2 > 1).map(_._1)\n        val hexMap23\
    \ = hexMap22.filter(_._2 > 1).map(_._1)\n        val hexMap24 = hexMap23.filter(_._2\
    \ > 1).map(_._1)\n        val hexMap25 = hexMap24.filter(_._2 > 1).map(_._1)\n\
    \        val hexMap26 = hexMap25.filter(_._2 > 1).map", "        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyArray = hexKey.toArray\n\
    \        val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArray",
  "        val hex = num.toCharArray.map(_.toInt)\n        val hexKey = hex.map(x\
    \ => math.pow(16, x))\n        hexKey.sum", "        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => if (x.toInt > 9) x.toInt else x.toInt + 10).toArray\n\
    \        hexKey.sum", "        val hex = num.toCharArray.map(_.toInt)\n      \
    \  val hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x => {\n\
    \            hexKey += (x -> hexKey.getOrElse(x, 0) + 1)\n        })\n       \
    \ hexKey.values.sum", "        val hex = num.toCharArray\n        val hexKey =\
    \ new mutable.HashMap[Int, Int]()\n        hex.foreach(x => {\n            val\
    \ hexVal = x.toInt\n            hexKey += hexVal -> hexVal\n        })\n     \
    \   hexKey.values.toList.map(x => x._2).sum", "        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        for (i <- 0 until\
    \ hex.length) {\n            hexKey(hex(i).toInt) += 1\n        }\n        hexKey.values.sum",
  "        val hex = num.toCharArray.map(_.toString.toInt)\n        val hexKey = hex.foldLeft(0)((sum,\
    \ digit) => sum + digit * digit)\n        hexKey", "        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexKey = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey2 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey3 = new mutable.HashMap[Char, Long]()\n        val hexKey4 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey5 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey6 = new mutable.HashMap[Char, Long]()\n        val hexKey7 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey8 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey9 = new mutable.HashMap[Char, Long]()\n        val hexKey10 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey11 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey12 = new mutable.HashMap[Char, Long]()\n        val hexKey13 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey14 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey15 = new mutable.HashMap[Char, Long]()\n        val hexKey16 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey17 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey18 = new mutable.HashMap[Char, Long]()\n        val hexKey19 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey20 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey21 = new mutable.HashMap[Char, Long]()\n        val hexKey22 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey23 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey24 = new mutable.HashMap[Char, Long]()\n        val hexKey25 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey26 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey27 = new mutable.HashMap[Char, Long]()\n        val hexKey28 = new mutable.HashMap[Char,\
    \ Long]()\n        val hexKey29 = new mutable.HashMap[Char, Long]()\n        val\
    \ hexKey30 = new mutable.HashMap[Char, Long]()\n        val hexKey31 = new mutable.HashMap[Char,\
    \ Long]()", "        val hexDigits = num.toCharArray.map(_.toInt)\n        val\
    \ hexKeys = hexDigits.map(hexKey _)\n        hexKeys.sum", "        val hex =\
    \ num.toCharArray\n        val hexKey = hex.map(x => x.toInt)\n        val hexKey2\
    \ = hexKey.map(x => x % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n\
    \        val hexKey4 = hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x\
    \ => x % 10)\n        val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7\
    \ = hexKey6.map(x => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n\
    \        val hexKey9 = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x\
    \ => x % 10)\n        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12\
    \ = hexKey11.map(x => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n\
    \        val hexKey14 = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x\
    \ => x % 10)\n        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17\
    \ = hexKey16.map(x => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n\
    \        val hexKey19 = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x\
    \ => x % 10)\n        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22\
    \ = hexKey21.map(x => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n\
    \        val hexKey24 = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x\
    \ => x % 10)\n        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27\
    \ = hexKey26.map(x => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n\
    \        val hexKey29 = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x\
    \ => x % 10)\n        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32\
    \ = hexKey31.map(x => x % 10)\n        val hexKey33", "        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        val hexKey2 = new\
    \ mutable.HashMap[Int, Int]()\n        val hexKey3 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey4 = new mutable.HashMap[Int, Int]()\n        val hexKey5\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey6 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey7 = new mutable.HashMap[Int, Int]()\n        val hexKey8\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey9 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey10 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey11 = new mutable.HashMap[Int, Int]()\n        val hexKey12 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey13 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey14 = new mutable.HashMap[Int, Int]()\n        val hexKey15 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey16 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey17 = new mutable.HashMap[Int, Int]()\n        val hexKey18 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey19 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey20 = new mutable.HashMap[Int, Int]()\n        val hexKey21 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey22 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey23 = new mutable.HashMap[Int, Int]()\n        val hexKey24 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey25 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey26 = new mutable.HashMap[Int, Int]()\n        val hexKey27 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey28 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey29 = new mutable.HashMap[Int, Int]()\n        val hexKey30 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey31 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey32 = new ", "        val hex = num.toCharArray\n        val hexKey = new\
    \ mutable.HashMap[Char, Long]()\n        hex.foreach(x => {\n            val hexDigit\
    \ = x.toInt\n            hexKey.put(x.toChar, hexKey.getOrElse(x.toChar, 0L) +\
    \ hexDigit)\n        })\n        hexKey.filter(_._2 % 2 == 0).length", "     \
    \   val hex = num.toCharArray\n        val hexCount = hex.count(_ == '0')\n  \
    \      val hexDigits = hexCount / 2\n        val hexPrimes = hex.count(_ == '2')\
    \ || hex.count(_ == '3') || hex.count(_ == '5') || hex.count(_ == '7') || hex.count(_\
    \ == 'B') || hex.count(_ == 'D')\n        val hexPrime = hexPrimes / hexDigits\n\
    \        val hexPrime2 = hexPrimes % hexDigits\n        val hexPrime3 = hexPrime2\
    \ % hexDigits\n        val hexPrime4 = hexPrime3 % hexDigits\n        val hexPrime5\
    \ = hexPrime4 % hexDigits\n        val hexPrime6 = hexPrime5 % hexDigits\n   \
    \     val hexPrime7 = hexPrime6 % hexDigits\n        val hexPrime8 = hexPrime7\
    \ % hexDigits\n        val hexPrime9 = hexPrime8 % hexDigits\n        val hexPrime10\
    \ = hexPrime9 % hexDigits\n        val hexPrime11 = hexPrime10 % hexDigits\n \
    \       val hexPrime12 = hexPrime11 % hexDigits\n        val hexPrime13 = hexPrime12\
    \ % hexDigits\n        val hexPrime14 = hexPrime13 % hexDigits\n        val hexPrime15\
    \ = hexPrime14 % hexDigits\n        val hexPrime16 = hexPrime15 % hexDigits\n\
    \        val hexPrime17 = hexPrime16 % hexDigits\n        val hexPrime18 = hexPrime17\
    \ % hexDigits\n        val hexPrime19 = hexPrime18 % hexDigits\n        val hexPrime20\
    \ = hexPrime19 % hexDigits\n        val hexPrime21 = hexPrime20 % hexDigits\n\
    \        val hexPrime22 = hexPrime21 % hexDigits\n        val hexPrime23 = hexPrime22\
    \ % hexDigits\n        val hexPrime24 = hexPrime23 % hexDigits\n        val hexPrime25\
    \ = hexPrime24 % hexDigits\n        val hexPrime26 = hexPrime25 % hexDigits\n\
    \        val hexPrime27 = hexPrime26 % hexDigits\n        val hexPrime28 = hexPrime27\
    \ % hexDig", "        val hex = num.toCharArray.map(_.toInt)\n        val hexKey\
    \ = new mutable.HashMap[Int, Int]()\n        hex.foreach(x => {\n            hexKey.getOrElse(x,\
    \ 0)\n        })\n        hexKey.size", "        val hex = num.toCharArray\n \
    \       val hexKey = hex.filter(_ >= '0' && _ <= '9').length\n        val hexKeyPrime\
    \ = hex.filter(_ >= '0' && _ <= '9' && _ != 'A' && _ != 'B' && _ != 'C' && _ !=\
    \ 'D' && _ != 'E' && _ != 'F').length\n        hexKeyPrime", "        val hex\
    \ = num.toCharArray\n        val hexKey = hex.map(x => if (x == 'A' || x == 'B'\
    \ || x == 'C' || x == 'D' || x == 'E' || x == 'F') x else 0).sum\n        hexKey",
  "        val hex = num.toCharArray\n        val hexKey = hex.map(x => if (x.toInt\
    \ > 9) x.toInt else x.toInt * 10 + x.toInt)\n        hexKey.sum", "        val\
    \ hex = num.toCharArray\n        val hexKey = hex.map(x => if (x == 'A' || x ==\
    \ 'B' || x == 'C' || x == 'D' || x == 'E' || x == 'F') x else 0).sum\n       \
    \ hexKey", "        val hex = num.toCharArray\n        val hexKey = new mutable.HashMap[Char,\
    \ Long]()\n        hex.foreach(c => {\n            hexKey.put(c.toUpperCase, hexKey.getOrElse(c.toUpperCase,\
    \ 0L) + 1)\n        })\n        hexKey.get(\"B\").toLong + hexKey.get(\"D\").toLong",
  "        val hex = num.toCharArray\n        val hexCount = hex.length\n        val\
    \ hexKey = hex.map(x => if (x == 'A') 1 else 0).sum\n        val hexKey2 = hex.map(x\
    \ => if (x == 'B') 11 else 0).sum\n        val hexKey3 = hex.map(x => if (x ==\
    \ 'C') 13 else 0).sum\n        val hexKey4 = hex.map(x => if (x == 'D') 17 else\
    \ 0).sum\n        val hexKey5 = hex.map(x => if (x == 'E') 19 else 0).sum\n  \
    \      val hexKey6 = hex.map(x => if (x == 'F') 23 else 0).sum\n        val hexKey7\
    \ = hex.map(x => if (x == 'G') 29 else 0).sum\n        val hexKey8 = hex.map(x\
    \ => if (x == 'H') 31 else 0).sum\n        val hexKey9 = hex.map(x => if (x ==\
    \ 'I') 37 else 0).sum\n        val hexKey10 = hex.map(x => if (x == 'J') 41 else\
    \ 0).sum\n        val hexKey11 = hex.map(x => if (x == 'K') 43 else 0).sum\n \
    \       val hexKey12 = hex.map(x => if (x == 'L') 47 else 0).sum\n        val\
    \ hexKey13 = hex.map(x => if (x == 'M') 53 else 0).sum\n        val hexKey14 =\
    \ hex.map(x => if (x == 'N') 59 else 0).sum\n        val hexKey15 = hex.map(x\
    \ => if (x == 'O') 61 else 0).sum\n        val hexKey16 = hex.map(x => if (x ==\
    \ 'P') 67 else 0).sum\n        val hexKey17 = hex.map(x => if (x == 'Q') 73 else\
    \ 0).sum\n        val hexKey18 = hex.map(x => if (x == 'R') 79 else 0).sum\n \
    \       val hexKey19 = hex.map(x => if (x == 'S') 83 else 0).sum\n        val\
    \ hexKey20 = hex.map(x => if (x == 'T') 89 else 0).sum\n        val hexKey21 =\
    \ hex.map(x => if (x == 'U') 97 else 0).sum\n        val hexKey22 = hex.map(x\
    \ => if (x == 'V') 101 else 0).sum\n        val hexKey23 = hex.map(x => if (x\
    \ == 'W') 107 else 0).sum\n        val hexKey24 = hex.map(x => if (x == 'X') 113\
    \ else 0).sum", "        val hex = num.toCharArray\n        val hexKey = hex.filter(_\
    \ >= '0' && _ <='9').count(_ == hex(0)) + hex.filter(_ >= 'A' && _ <='F').count(_\
    \ == hex(0)) + hex.filter(_ >= 'a' && _ <='f').count(_ == hex(0))\n        hexKey",
  "        val hex = num.toCharArray.map(_.toInt)\n        val hexKey = hex.map(x\
    \ => math.pow(16, x))\n        val hexKeyList = hexKey.toList\n        val hexKeyList2\
    \ = hexKeyList.filter(x => x % 2 == 0)\n        val hexKeyList3 = hexKeyList2.filter(x\
    \ => x % 3 == 0)\n        val hexKeyList4 = hexKeyList3.filter(x => x % 5 == 0)\n\
    \        val hexKeyList5 = hexKeyList4.filter(x => x % 7 == 0)\n        val hexKeyList6\
    \ = hexKeyList5.filter(x => x % 11 == 0)\n        val hexKeyList7 = hexKeyList6.filter(x\
    \ => x % 13 == 0)\n        val hexKeyList8 = hexKeyList7.filter(x => x % 17 ==\
    \ 0)\n        val hexKeyList9 = hexKeyList8.filter(x => x % 19 == 0)\n       \
    \ val hexKeyList10 = hexKeyList9.filter(x => x % 23 == 0)\n        val hexKeyList11\
    \ = hexKeyList10.filter(x => x % 29 == 0)\n        val hexKeyList12 = hexKeyList11.filter(x\
    \ => x % 31 == 0)\n        val hexKeyList13 = hexKeyList12.filter(x => x % 37\
    \ == 0)\n        val hexKeyList14 = hexKeyList13.filter(x => x % 41 == 0)\n  \
    \      val hexKeyList15 = hexKeyList14.filter(x => x % 43 == 0)\n        val hexKeyList16\
    \ = hexKeyList15.filter(x => x % 47 == 0)\n        val hexKeyList17 = hexKeyList16.filter(x\
    \ => x % 53 == 0)\n        val hexKeyList18 = hexKeyList17.filter(x => x % 59\
    \ == 0)\n        val hexKeyList19 = hexKeyList18.filter(x => x % 61 == 0)\n  \
    \      val hexKeyList20 = hexKeyList19.filter(x => x % 67 == 0)\n        val hexKeyList21\
    \ = hexKeyList20.filter(x => x % 71 == 0)\n        val hexKeyList22 = hexKeyList21.filter(x\
    \ => x % 73 == 0)\n        val hexKeyList23 = hexKeyList22.filter(x => x % 79\
    \ == 0)\n        val hexKeyList24 = hexKeyList23.filter(x => x % 83 == 0)\n  \
    \      val hexKeyList25 = hexKeyList24.filter(x => x % 89 == 0)\n        val hexKeyList26\
    \ = hex", "        val hex = num.toCharArray\n        val hexKey = hex.map(x =>\
    \ x.toInt)\n        val hexKey2 = hexKey.map(x => x % 10)\n        val hexKey3\
    \ = hexKey.map(x => x % 10)\n        val hexKey4 = hexKey.map(x => x % 10)\n \
    \       val hexKey5 = hexKey.map(x => x % 10)\n        val hexKey6 = hexKey.map(x\
    \ => x % 10)\n        val hexKey7 = hexKey.map(x => x % 10)\n        val hexKey8\
    \ = hexKey.map(x => x % 10)\n        val hexKey9 = hexKey.map(x => x % 10)\n \
    \       val hexKey10 = hexKey.map(x => x % 10)\n        val hexKey11 = hexKey.map(x\
    \ => x % 10)\n        val hexKey12 = hexKey.map(x => x % 10)\n        val hexKey13\
    \ = hexKey.map(x => x % 10)\n        val hexKey14 = hexKey.map(x => x % 10)\n\
    \        val hexKey15 = hexKey.map(x => x % 10)\n        val hexKey16 = hexKey.map(x\
    \ => x % 10)\n        val hexKey17 = hexKey.map(x => x % 10)\n        val hexKey18\
    \ = hexKey.map(x => x % 10)\n        val hexKey19 = hexKey.map(x => x % 10)\n\
    \        val hexKey20 = hexKey.map(x => x % 10)\n        val hexKey21 = hexKey.map(x\
    \ => x % 10)\n        val hexKey22 = hexKey.map(x => x % 10)\n        val hexKey23\
    \ = hexKey.map(x => x % 10)\n        val hexKey24 = hexKey.map(x => x % 10)\n\
    \        val hexKey25 = hexKey.map(x => x % 10)\n        val hexKey26 = hexKey.map(x\
    \ => x % 10)\n        val hexKey27 = hexKey.map(x => x % 10)\n        val hexKey28\
    \ = hexKey.map(x => x % 10)\n        val hexKey29 = hexKey.map(x => x % 10)\n\
    \        val hexKey30 = hexKey.map(x => x % 10)\n        val hexKey31 = hexKey.map(x\
    \ => x % 10)\n        val hexKey32 = hexKey.map(x => x % 10)\n        val hexKey33\
    \ = hexKey.map(x => x % 10)\n        val hexKey34 = hexKey.map(x => x % 10)\n\
    \        val hexKey35", "        val hex = num.toCharArray\n        val hexKey\
    \ = hex.foldLeft(0)((sum, digit) => {\n            val hexDigit = digit.toInt\n\
    \            val hexDigitPrime = hexDigit % 16 == 0 \n            val hexDigitPrime2\
    \ = hexDigit % 8 == 0 \n            val hexDigitPrime3 = hexDigit % 4 == 0 \n\
    \            val hexDigitPrime4 = hexDigit % 2 == 0 \n            val hexDigitPrime5\
    \ = hexDigit % 1 == 0 \n            val hexDigitPrime6 = hexDigit % 6 == 0 \n\
    \            val hexDigitPrime7 = hexDigit % 7 == 0 \n            val hexDigitPrime8\
    \ = hexDigit % 8 == 0 \n            val hexDigitPrime9 = hexDigit % 9 == 0 \n\
    \            val hexDigitPrime10 = hexDigit % 10 == 0 \n            val hexDigitPrime11\
    \ = hexDigit % 11 == 0 \n            val hexDigitPrime12 = hexDigit % 12 == 0\
    \ \n            val hexDigitPrime13 = hexDigit % 13 == 0 \n            val hexDigitPrime14\
    \ = hexDigit % 14 == 0 \n            val hexDigitPrime15 = hexDigit % 15 == 0\
    \ \n            val hexDigitPrime16 = hexDigit % 16 == 0 \n            val hexDigitPrime17\
    \ = hexDigit % 17 == 0 \n            val hexDigitPrime18 = hexDigit % 18 == 0\
    \ \n            val hexDigitPrime19 = hexDigit % 19 == 0 \n            val hexDigitPrime20\
    \ = hexDigit % 20 == 0 \n            val hexDigitPrime21 = hexDigit % 21 == 0\
    \ \n            val hexDigitPrime22 = hexDigit % 22 == 0 \n            val hexDigitPrime23\
    \ = hexDigit % 23 == 0 \n            val hexDigitPrime24 = hexDigit % 24 == 0\
    \ \n            val hexDigitPrime25 = hexDigit % 25 == 0 \n            val hexDigitPrime26\
    \ = hexDigit % 26 == 0 \n            val hexDigitPrime27 = hexDigit % 27 == 0\
    \ \n            val hexDigitPrime28 = hexDigit % 28 == 0 \n            val hexDigitPrime29\
    \ = hexDigit % 29 == 0 \n            val hexDigitPrime30 = hexDigit % 30 == 0\
    \ \n            val hexDigitPrime31 = hexDigit ", "        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey.map(x => x % 10)\n        val hexKey4\
    \ = hexKey.map(x => x % 10)\n        val hexKey5 = hexKey.map(x => x % 10)\n \
    \       val hexKey6 = hexKey.map(x => x % 10)\n        val hexKey7 = hexKey.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey.map(x => x % 10)\n        val hexKey9\
    \ = hexKey.map(x => x % 10)\n        val hexKey10 = hexKey.map(x => x % 10)\n\
    \        val hexKey11 = hexKey.map(x => x % 10)\n        val hexKey12 = hexKey.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey.map(x => x % 10)\n        val hexKey14\
    \ = hexKey.map(x => x % 10)\n        val hexKey15 = hexKey.map(x => x % 10)\n\
    \        val hexKey16 = hexKey.map(x => x % 10)\n        val hexKey17 = hexKey.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey.map(x => x % 10)\n        val hexKey19\
    \ = hexKey.map(x => x % 10)\n        val hexKey20 = hexKey.map(x => x % 10)\n\
    \        val hexKey21 = hexKey.map(x => x % 10)\n        val hexKey22 = hexKey.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey.map(x => x % 10)\n        val hexKey24\
    \ = hexKey.map(x => x % 10)\n        val hexKey25 = hexKey.map(x => x % 10)\n\
    \        val hexKey26 = hexKey.map(x => x % 10)\n        val hexKey27 = hexKey.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey.map(x => x % 10)\n        val hexKey29\
    \ = hexKey.map(x => x % 10)\n        val hexKey30 = hexKey.map(x => x % 10)\n\
    \        val hexKey31 = hexKey.map(x => x % 10)\n        val hexKey32 = hexKey.map(x\
    \ => x % 10)\n        val hexKey33 = hexKey.map(x => x % 10)\n        val hexKey34\
    \ = hexKey.map(x => x % 10)\n        val hexKey35", "        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = hex.foldLeft(0)((sum, digit) => sum + digit * digit)\n \
    \       hexKey", "        val hex = num.toCharArray\n        val hexCount = hex.count\n\
    \        val hexDigits = hex.map(_.toInt)\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.toMap\n        val ", "        val hex =\
    \ num.toCharArray\n        val hexKey = hex.map(x => x.toInt)\n        val hexKey2\
    \ = hexKey.map(x => math.pow(16, x))\n        val hexKey3 = hexKey2.map(x => math.pow(16,\
    \ x))\n        val hexKey4 = hexKey3.map(x => math.pow(16, x))\n        val hexKey5\
    \ = hexKey4.map(x => math.pow(16, x))\n        val hexKey6 = hexKey5.map(x =>\
    \ math.pow(16, x))\n        val hexKey7 = hexKey6.map(x => math.pow(16, x))\n\
    \        val hexKey8 = hexKey7.map(x => math.pow(16, x))\n        val hexKey9\
    \ = hexKey8.map(x => math.pow(16, x))\n        val hexKey10 = hexKey9.map(x =>\
    \ math.pow(16, x))\n        val hexKey11 = hexKey10.map(x => math.pow(16, x))\n\
    \        val hexKey12 = hexKey11.map(x => math.pow(16, x))\n        val hexKey13\
    \ = hexKey12.map(x => math.pow(16, x))\n        val hexKey14 = hexKey13.map(x\
    \ => math.pow(16, x))\n        val hexKey15 = hexKey14.map(x => math.pow(16, x))\n\
    \        val hexKey16 = hexKey15.map(x => math.pow(16, x))\n        val hexKey17\
    \ = hexKey16.map(x => math.pow(16, x))\n        val hexKey18 = hexKey17.map(x\
    \ => math.pow(16, x))\n        val hexKey19 = hexKey18.map(x => math.pow(16, x))\n\
    \        val hexKey20 = hexKey19.map(x => math.pow(16, x))\n        val hexKey21\
    \ = hexKey20.map(x => math.pow(16, x))\n        val hexKey22 = hexKey21.map(x\
    \ => math.pow(16, x))\n        val hexKey23 = hexKey22.map(x => math.pow(16, x))\n\
    \        val hexKey24 = hexKey23.map(x => math.pow(16, x))\n        val hexKey25\
    \ = hexKey24.map(x => math.pow(16, x))\n        val hexKey26 = hexKey25.map(x\
    \ => math.pow(16, x))\n        val hexKey27 = hexKey26.map(x => math.pow(16, x))\n\
    \        val hexKey28 = hexKey27.map(x => math.pow(16, x))\n        val hexKey29\
    \ = hexKey28.map(x => math.pow(16, x))\n        val hexKey30 = hexKey29.map(x\
    \ => math.pow(16, x))\n        val hexKey31 = hexKey", "        val hex = num.toCharArray\n\
    \        val hexKey = hex.foldLeft(0)((sum, digit) => {\n            val hexDigit\
    \ = digit.toLong\n            val hexDigitSum = sum + hexDigit\n            val\
    \ hexDigitSumInt = hexDigitSum.toInt\n            val hexDigitSumInt = hexDigitSumInt\
    \ * hexDigitSumInt\n            val hexDigitSumInt = hexDigitSumInt * hexDigitSumInt\n\
    \            val hexDigitSumInt = hexDigitSumInt * hexDigitSumInt\n          \
    \  val hexDigitSumInt = hexDigitSumInt * hexDigitSumInt\n            val hexDigitSumInt\
    \ = hexDigitSumInt * hexDigitSumInt\n            val hexDigitSumInt = hexDigitSumInt\
    \ * hexDigitSumInt\n            val hexDigitSumInt = hexDigitSumInt * hexDigitSumInt\n\
    \            val hexDigitSumInt = hexDigitSumInt * hexDigitSumInt\n          \
    \  val hexDigitSumInt = hexDigitSumInt * hexDigitSumInt\n            val hexDigitSumInt\
    \ = hexDigitSumInt * hexDigitSumInt\n            val hexDigitSumInt = hexDigitSumInt\
    \ * hexDigitSumInt\n            val hexDigitSumInt = hexDigitSumInt * hexDigitSumInt\n\
    \            val hexDigitSumInt = hexDigitSumInt * hexDigitSumInt\n          \
    \  val hexDigitSumInt = hexDigitSumInt * hexDigitSumInt\n            val hexDigitSumInt\
    \ = hexDigitSumInt * hexDigitSumInt\n            val hexDigitSumInt = hexDigitSumInt\
    \ * hexDigitSumInt\n            val hexDigitSumInt = hexDigitSumInt * hexDigitSumInt\n\
    \            val hexDigitSumInt = hexDigitSumInt * hexDigitSumInt\n          \
    \  val hexDigitSumInt = hexDigitSumInt * hexDigitSumInt\n            val hexDigitSumInt\
    \ = hexDigitSumInt * hexDigitSumInt\n            val hexDigitSumInt = hexDigitSumInt\
    \ * hexDigitSumInt\n            val hexDigitSumInt = hexDigitSumInt * hexDigitSumInt\n\
    \            val hexDigitSumInt = hexDigitSumInt * hexDigitSumInt\n          \
    \  val hexDigitSumInt = hexDigitSumInt * hexDigitSumInt\n            val hexDigitSumInt\
    \ = hexDigitSumInt * hexDigitSumInt\n            val hexDigitSumInt = hexDigitSumInt\
    \ * hexDigitSumInt\n            val hexDigitSumInt = hexDigitSumIn", "       \
    \ val hex = num.toCharArray\n        val hexLength = hex.length\n        val hexKey\
    \ = new mutable.HashMap[Char, Long]()\n        var hexKeyCount = 0\n        for\
    \ (i <- 0 until hexLength) {\n            val hexDigit = hex(i)\n            val\
    \ hexDigitValue = hexKey.getOrElse(hexDigit, 0L)\n            hexKey.put(hexDigit,\
    \ hexDigitValue + 1)\n            hexKeyCount += 1\n        }\n        hexKeyCount",
  "        val hex = num.toCharArray\n        val hexCount = hex.length\n        val\
    \ hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x => {\n     \
    \       val hexDigit = x.toInt\n            if (hexKey.contains(hexDigit)) {\n\
    \                hexKey.get(hexDigit) += 1\n            } else {\n           \
    \     hexKey.put(hexDigit, 1)\n            }\n        })\n        hexKey.values.sum",
  "        val hex = num.toCharArray\n        val hexCount = hex.length\n        val\
    \ hexKey = new mutable.HashMap[Char, Long]()\n        hex.foreach(c => {\n   \
    \         val hexKey = hexKey.getOrElseUpdate(c, 0L)\n            hexKey += 1\n\
    \        })\n        hexKey.filter(_._2 > 0).size", "        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => if (x == 'A') 1 else 0).sum\n        hexKey",
  "        val hex = num.toCharArray\n        val hexCount = hex.length\n        val\
    \ hexMap = new mutable.HashMap[Int, Int]()\n        val hexMap2 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap3 = new mutable.HashMap[Int, Int]()\n        val hexMap4\
    \ = new mutable.HashMap[Int, Int]()\n        val hexMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap6 = new mutable.HashMap[Int, Int]()\n        val hexMap7\
    \ = new mutable.HashMap[Int, Int]()\n        val hexMap8 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap9 = new mutable.HashMap[Int, Int]()\n        val hexMap10\
    \ = new mutable.HashMap[Int, Int]()\n        val hexMap11 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap12 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexMap13 = new mutable.HashMap[Int, Int]()\n        val hexMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap15 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexMap16 = new mutable.HashMap[Int, Int]()\n        val hexMap17 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap18 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexMap19 = new mutable.HashMap[Int, Int]()\n        val hexMap20 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap21 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexMap22 = new mutable.HashMap[Int, Int]()\n        val hexMap23 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap24 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexMap25 = new mutable.HashMap[Int, Int]()\n        val hexMap26 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap27 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexMap28 = new mutable.HashMap[Int, Int]()\n        val hexMap29 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap30 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexMap31 = new mutable.HashMap[Int, Int]()", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x =>\
    \ {\n            hexKey.getOrElse(x, 0)\n        })\n        hexKey.size"]
stop_tokens:
- "\n    }\n"
