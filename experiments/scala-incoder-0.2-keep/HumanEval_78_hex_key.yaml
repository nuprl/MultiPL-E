name: HumanEval_78_hex_key
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You have been tasked to write a function that receives \n    // a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n    // digits that are\
  \ primes (prime number, or a prime, is a natural number \n    // greater than 1\
  \ that is not a product of two smaller natural numbers).\n    // Hexadecimal digits\
  \ are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are\
  \ 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following\
  \ digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you\
  \ may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F\
  \ are always uppercase.\n    // Examples:\n    // For num = \"AB\" the output should\
  \ be 1.\n    // For num = \"1077E\" the output should be 2.\n    // For num = \"\
  ABED1A33\" the output should be 4.\n    // For num = \"123456789ABCDEF0\" the output\
  \ should be 6.\n    // For num = \"2020\" the output should be 2.\n    def hexKey(num\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\"))\
  \ == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
  )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
  )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
  \    }\n\n}\n"
completions: ["        val hex = num.toCharArray.map(_.toInt)\n        val hexKey\
    \ = hex.map(x => math.pow(16, x)).sum\n        hexKey", "        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexKey = new mutable.HashMap[Char,\
    \ Long]()\n        for (i <- 0 until hexCount) {\n            val hexChar = hex(i)\n\
    \            val hexValue = hexKey.getOrElse(hexChar, 0)\n            hexKey.put(hexChar,\
    \ hexValue + 1)\n        }\n        hexKey.toSeq.filter(x => x._2 == 2).length",
  "        val hex = num.toCharArray\n        val hexKey = hex.map(x => if (x.isDigit)\
    \ x else x.toUpperCase).foldLeft(0)((x, y) => x * 16 + y)\n        hexKey", " \
    \       val hex = num.toCharArray\n        val hexLength = hex.length\n      \
    \  val hexKey = hexLength * hexLength\n        val hexKeySet = hexKey.toSet\n\
    \        val hexKeySetIterator = hexKeySet.iterator\n        val hexKeySetIteratorNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNext = hexKeySetIterator.next\n\
    \        val hexKeySetIteratorNextNextNext = hexKeySetIterator.next\n        val\
    \ hexKeySetIteratorNextNextNextNext = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n        val hexKeySetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = hexKeySetIterator.next\n", "        val hex = num.toCharArray\n        val\
    \ hexKey = hex.foldLeft(0)((sum, digit) => {\n            val hexDigit = digit.toLong\n\
    \            val hexDigitSum = sum + hexDigit\n            val hexDigitSumDividedByTwo\
    \ = hexDigitSum / 2\n            val hexDigitSumDividedByThree = hexDigitSumDividedByTwo\
    \ / 3\n            val hexDigitSumDividedByFive = hexDigitSumDividedByThree /\
    \ 5\n            val hexDigitSumDividedBySeven = hexDigitSumDividedByFive / 7\n\
    \            val hexDigitSumDividedByNine = hexDigitSumDividedBySeven / 9\n  \
    \          val hexDigitSumDividedByTen = hexDigitSumDividedByNine / 10\n     \
    \       val hexDigitSumDividedByEleven = hexDigitSumDividedByTen / 11\n      \
    \      val hexDigitSumDividedByThirteen = hexDigitSumDividedByEleven / 13\n  \
    \          val hexDigitSumDividedByFifteen = hexDigitSumDividedByThirteen / 15\n\
    \            val hexDigitSumDividedBySixteen = hexDigitSumDividedByFifteen / 17\n\
    \            val hexDigitSumDividedBySeventeen = hexDigitSumDividedBySixteen /\
    \ 19\n            val hexDigitSumDividedByNineteen = hexDigitSumDividedBySeventeen\
    \ / 21\n            val hexDigitSumDividedByTwenty = hexDigitSumDividedByNineteen\
    \ / 23\n            val hexDigitSumDividedByTwentyThree = hexDigitSumDividedByTwenty\
    \ / 3\n            val hexDigitSumDividedByTwentyFive = hexDigitSumDividedByTwentyThree\
    \ / 5\n            val hexDigitSumDividedByTwentySeven = hexDigitSumDividedByTwentyFive\
    \ / 7\n            val hexDigitSumDividedByTwentyEight = hexDigitSumDividedByTwentySeven\
    \ / 9\n            val hexDigitSumDividedByTwentyNine = hexDigitSumDividedByTwentyEight\
    \ / 10\n            val hexDigit", "        val hex = num.toCharArray\n      \
    \  val hexCount = hex.length\n        val hexDigits = hex.map(_.toInt)\n     \
    \   val hexDigitsCount = hexDigits.length\n        val hexDigitsToCount = hexDigits.map(_.toInt)\n\
    \        val hexDigitsToCountCount = hexDigitsToCount.length\n        val hexDigitsToCountCountCount\
    \ = hexDigitsToCountCount.length\n        val hexDigitsToCountCountCountCount\
    \ = hexDigitsToCountCountCount.length\n        val hexDigitsToCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCount.length\n        val hexDigitsToCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCount.length\n        val hexDigitsToCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCount.length\n        val hexDigitsToCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCount.length\n        val\
    \ hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCount.length\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount.length\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount",
  "        val hex = num.toCharArray\n        val hexKey = hex.foldLeft(0)((acc, x)\
    \ => acc * 16 + x.toInt)\n        hexKey", "        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexMap = hex.map(x => (x % 10, 1)).toMap\n        val hexKeys = hex.map(x\
    \ => hexMap.getOrElse(x, 0)).sum\n        hexKeys", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => x % 16).sum\n        hexKey", "        val\
    \ hex = num.toCharArray.map(_.toInt)\n        val hexKey = hex.map(x => math.pow(16,x))\n\
    \        hexKey.sum", "        val hexDigits = num.toCharArray.map(_.toInt)\n\
    \        val hexKeys = hexDigits.map(hexDigitToKey)\n        hexKeys.count(_ >\
    \ 0)", "        val hex = num.toCharArray\n        val hexKey = hex.foldLeft(0)((sum,\
    \ digit) => {\n            val hexDigit = digit.toInt\n            val hexDigit2\
    \ = hexDigit * hexDigit\n            val hexDigit3 = hexDigit2 * hexDigit\n  \
    \          val hexDigit4 = hexDigit3 * hexDigit\n            val hexDigit5 = hexDigit4\
    \ * hexDigit\n            val hexDigit6 = hexDigit5 * hexDigit\n            val\
    \ hexDigit7 = hexDigit6 * hexDigit\n            val hexDigit8 = hexDigit7 * hexDigit\n\
    \            val hexDigit9 = hexDigit8 * hexDigit\n            val hexDigit10\
    \ = hexDigit9 * hexDigit\n            val hexDigit11 = hexDigit10 * hexDigit\n\
    \            val hexDigit12 = hexDigit11 * hexDigit\n            val hexDigit13\
    \ = hexDigit12 * hexDigit\n            val hexDigit14 = hexDigit13 * hexDigit\n\
    \            val hexDigit15 = hexDigit14 * hexDigit\n            val hexDigit16\
    \ = hexDigit15 * hexDigit\n            val hexDigit17 = hexDigit16 * hexDigit\n\
    \            val hexDigit18 = hexDigit17 * hexDigit\n            val hexDigit19\
    \ = hexDigit18 * hexDigit\n            val hexDigit20 = hexDigit19 * hexDigit\n\
    \            val hexDigit21 = hexDigit20 * hexDigit\n            val hexDigit22\
    \ = hexDigit21 * hexDigit\n            val hexDigit23 = hexDigit22 * hexDigit\n\
    \            val hexDigit24 = hexDigit23 * hexDigit\n            val hexDigit25\
    \ = hexDigit24 * hexDigit\n            val hexDigit26 = hexDigit25 * hexDigit\n\
    \            val hexDigit27 = hexDigit26 * hexDigit\n            val hexDigit28\
    \ = hexDigit27 * hexDigit\n            val hexDigit29 = hexDigit28 * hexDigit\n\
    \            val hexDigit30 = hexDigit29 * hexDigit\n            val hexDigit31\
    \ = hexDigit30 * hexDigit\n            val hexDigit32 = hexDigit31 * hexDigit\n\
    \            val hexDigit33 = hexDigit32 * hexDigit\n            val hexDigit34\
    \ = hexDigit33 * hexDigit\n            val hexDigit35 = hexDigit34 * hexDigit\n\
    \            val hexDigit36 = hexDigit35 * hexDigit\n            val hexDigit37\
    \ = hexDigit36 * hexDigit\n            val hexDigit38 = hexDigit37 * hexDigit\n\
    \            val hexDigit39 = hexDigit38 * hexDigit\n", "        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => if (x == 'A') 1 else 0).sum\n        hexKey",
  "        val hexDigits = num.toCharArray.map(_.toInt)\n        val hexKeys = hexDigits.map(hexKey\
    \ _)\n        hexKeys.sum", "        val hexDigits = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        hexDigits.foreach\
    \ { hexDigit =>\n            hexKey.put(hexDigit, hexKey.getOrElse(hexDigit, 0)\
    \ + 1)\n        }\n        hexKey.values.toList.filter(_ > 1).length", "     \
    \   val hexDigits = num.toCharArray\n        val hexKey = new mutable.HashMap[Char,\
    \ Long]()\n        hexDigits foreach { hexDigit =>\n            hexKey.put(hexDigit,\
    \ hexKey.getOrElse(hexDigit, 0L) + 1)\n        }\n        hexKey.filter(_._2 >\
    \ 1).size", "        val hex = num.toCharArray\n        val hexCount = hex.count\n\
    \        val hexDigits = hex.mkString(\",\")\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitMap = hexDigits.split(\",\").map(_.toInt)\n        val hexDigitMapCount\
    \ = hexDigitMap.length\n        val hexDigitMapMap = new mutable.HashMap[Int,\
    \ Int]()\n        hexDigitMap.foreach(hexDigitMapMap += _)\n        val hexDigitMapMapCount\
    \ = hexDigitMapMap.length\n        val hexDigitMapMapMap = new mutable.HashMap[Int,\
    \ mutable.HashMap[Int, Int]]()\n        hexDigitMapMap.foreach(hexDigitMapMapMap\
    \ += _)\n        val hexDigitMapMapMapCount = hexDigitMapMapMap.length\n     \
    \   val hexDigitMapMapMapMap = new mutable.HashMap[Int, mutable.HashMap[Int, mutable.HashMap[Int,\
    \ Int]]]()\n        hexDigitMapMapMap.foreach(hexDigitMapMapMapMap += _)\n   \
    \     val hexDigitMapMapMapMapCount = hexDigitMapMapMapMap.length\n        val\
    \ hexDigitMapMapMapMapMap = new mutable.HashMap[Int, mutable.HashMap[Int, mutable.HashMap[Int,\
    \ mutable.HashMap[Int, Int]]]]()\n        hexDigitMapMapMapMap.foreach(hexDigitMapMapMapMapMap\
    \ += _)\n        val hexDigitMapMapMapMapMapCount = hexDigitMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMap = new mutable.HashMap[Int, mutable.HashMap[Int,\
    \ mutable.HashMap[Int, mutable.HashMap[Int, mutable.HashMap[Int, Int]]]]]()\n\
    \        hexDigitMapMapMapMapMap.foreach(hexDigitMapMapMapMapMap += _)\n     \
    \   val hexDigitMapMapMapMapMapCount = hexDigitMapMapMapMapMap.length\n      \
    \  val hexDigitMapMapMapMapMapMapMap = new mutable.HashMap[Int, mutable.HashMap[Int,\
    \ mutable.HashMap[Int, mutable.HashMap[Int, mutable.HashMap[Int, mutable.HashMap[Int,\
    \ Int]]]]]]()\n        hexDigitMapMapMapMapMapMap.foreach(hexDigitMapMapMapMapMapMap\
    \ += _)\n        val hexDigitMapMapMapMapMapMapCount = hexDigitMapMapMapMapMapMap.length\n\
    \        val hexDigitMapMapMapMapMapMapMapMap = new mutable.HashMap[In", "   \
    \     val hex = num.toCharArray\n        val hexKey = hex.foldLeft(0)((sum, digit)\
    \ => {\n            val hexDigit = digit.toInt\n            val hexDigitSum =\
    \ sum + hexDigit\n            val hexDigitSumDivisor = hexDigitSum % 10\n    \
    \        val hexDigitSumDivisor2 = hexDigitSumDivisor % 10\n            val hexDigitSumDivisor3\
    \ = hexDigitSumDivisor2 % 10\n            val hexDigitSumDivisor4 = hexDigitSumDivisor3\
    \ % 10\n            val hexDigitSumDivisor5 = hexDigitSumDivisor4 % 10\n     \
    \       val hexDigitSumDivisor6 = hexDigitSumDivisor5 % 10\n            val hexDigitSumDivisor7\
    \ = hexDigitSumDivisor6 % 10\n            val hexDigitSumDivisor8 = hexDigitSumDivisor7\
    \ % 10\n            val hexDigitSumDivisor9 = hexDigitSumDivisor8 % 10\n     \
    \       val hexDigitSumDivisor10 = hexDigitSumDivisor9 % 10\n            val hexDigitSumDivisor11\
    \ = hexDigitSumDivisor10 % 10\n            val hexDigitSumDivisor12 = hexDigitSumDivisor11\
    \ % 10\n            val hexDigitSumDivisor13 = hexDigitSumDivisor12 % 10\n   \
    \         val hexDigitSumDivisor14 = hexDigitSumDivisor13 % 10\n            val\
    \ hexDigitSumDivisor15 = hexDigitSumDivisor14 % 10\n            val hexDigitSumDivisor16\
    \ = hexDigitSumDivisor15 % 10\n            val hexDigitSumDivisor17 = hexDigitSumDivisor16\
    \ % 10\n            val hexDigitSumDivisor18 = hexDigitSumDivisor17 % 10\n   \
    \         val hexDigitSumDivisor19 = hexDigitSumDivisor18 % 10\n            val\
    \ hexDigitSumDivisor20 = hexDigitSumDivisor19 % 10\n            val hexDigitSumDivisor21\
    \ = hexDigitSumDivisor20 % 10\n            val hexDigitSumDivisor22 = hexDigitSumDivisor21\
    \ % 10\n            val hexDigitSumDivisor23 = hexDigitSumDivisor22 % 10\n   \
    \         val hexDigitSumDivisor24 = hexDigitSumDivisor23 % 10\n            val\
    \ hexDigitSumDivisor25 = hexDigitSumDivisor24 % 10\n            val hexDigitSumDivisor26\
    \ = hexDigitSumDivisor25 % 10\n            val hexDigitSumDivisor27 = hexDigitSum",
  "        val hex = num.toCharArray.map(_.toInt)\n        val hexKey = hex.map(x\
    \ => x % 16).sum\n        hexKey", "        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.foldLeft(0)((acc, x) => acc * 16 + x)\n        hexKey"]
stop_tokens:
- "\n    }\n"
