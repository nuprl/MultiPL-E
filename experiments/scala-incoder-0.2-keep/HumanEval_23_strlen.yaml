name: HumanEval_23_strlen
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return length of given string\n    // >>> strlen('')\n    // 0\n    // >>>\
  \ strlen('abc')\n    // 3\n    def strlen(string : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) ==\
  \ (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
  )) == (9l));\n    }\n\n}\n"
completions: ["        var length = 0\n        for(i <- 0 until string.length)\n \
    \           length += string.charAt(i).toChar\n        length", '        string.foldLeft(0)(_
    + _.length)', "        var len = 0\n        for(i <- 0 until string.length)\n\
    \            len += string.charAt(i).toChar\n        len", "        val charArray\
    \ = string.toCharArray\n        val length = 0\n        for (i <- 0 until charArray.length)\n\
    \            length += charArray(i).length\n        length", "        var len\
    \ = 0\n        for(i <- 0 until string.length)\n            len += string.charAt(i).toChar\n\
    \        len", "        val chars = string.chars\n        val len = chars.length\n\
    \        len", "        val chars = string.chars\n        val len = chars.length\n\
    \        len", "        var len = 0\n        for(i <- 0 until string.length)\n\
    \            len += string.charAt(i).toChar\n        len", "        val length\
    \ = 0L\n        for(i <- 0 until string.length)\n            length += 1L\n  \
    \      length", "        val chars = string.chars\n        val len = chars.length\n\
    \        len", "        val charArray = string.toCharArray\n        val length\
    \ = charArray.length\n        charArray.length", "        val length = string.length\n\
    \        val result = new mutable.HashMap[String, Long]()\n        for(i <- 0\
    \ until length){\n            val char = string.charAt(i)\n            val count\
    \ = result.getOrElse(char, 0)\n            result.put(char, count + 1)\n     \
    \   }\n        val maxCount = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val maxKey = result.keys.max\n\
    \        val maxValue = result.values.max\n        val max", "        val length\
    \ : Long = 0\n        for(i <- 0 until string.length)\n            length += 1\n\
    \        length", "        val chars = string.chars\n        val length = chars.length\n\
    \        val result = new mutable.HashMap[Char, Long]()\n        for(i <- 0 until\
    \ length) {\n            val c = chars(i)\n            val count = result.getOrElse(c,\
    \ 0L)\n            val newCount = count + 1\n            result.put(c, newCount)\n\
    \        }\n        val sum = 0L\n        for(i <- 0 until result.size) {\n  \
    \          val count = result.get(i)\n            sum += count\n        }\n  \
    \      sum", '        string.foldLeft(0)((acc, c) => acc + c.length)', "     \
    \   val length = string.length\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until length) {\n            val char = string.charAt(i)\n\
    \            val count = result.getOrElse(char, 0)\n            result.put(char,\
    \ count + 1)\n        }\n        result.values.sum", "        val len = string.length\n\
    \        if (len > 0) len else 0", "        var len = 0\n        for (i <- 0 until\
    \ string.length)\n            len += string.charAt(i).toInt + 1\n        len",
  "        val chars = string.chars\n        val len = chars.length\n        len",
  "        val length = 0\n        for(i <- 0 until string.length)\n            length\
    \ += 1\n        length"]
stop_tokens:
- "\n    }\n"
