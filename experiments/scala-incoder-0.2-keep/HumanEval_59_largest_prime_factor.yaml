name: HumanEval_59_largest_prime_factor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
  \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
  \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
  \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
  \ == (29l));\n    }\n\n}\n"
completions: ["        var maxFactor = n / 2\n        var maxFactorPrime = 0\n   \
    \     var maxFactorPrimePrime = 0\n        var maxFactorPrimePrimePrime = 0\n\
    \        while (maxFactor != 1) {\n            var isPrime = true\n          \
    \  var isPrimePrime = true\n            var isPrimePrimePrime = true\n       \
    \     var isPrimePrimePrimePrime = true\n            var isPrimePrimePrimePrimePrime\
    \ = true\n            var isPrimePrimePrimePrimePrimePrime = true\n          \
    \  var isPrimePrimePrimePrimePrimePrimePrime = true\n            var isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n            var isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n\
    \            var isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n    \
    \        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n   \
    \         var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n\
    \            var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n            var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n            var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n            var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n            var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n            var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n            var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n            var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime",
  "        val primes = mutable.ArrayBuffer.empty[Long]\n        val largestPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactor = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor2 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor3 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor4\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor5 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor6 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor7 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor8\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor9 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor10 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor11 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor12\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor13 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor14 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor15 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor16\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor17 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor18 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor19 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor20\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor21 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor22 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor23 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor24\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor25 = mutable.ArrayBuffer.empty[",
  "        val primes = mutable.ArrayBuffer(2)\n        val factors = mutable.ArrayBuffer(2)\n\
    \        val isPrime = mutable.ArrayBuffer(true)\n        val isPrimeIter = Iterator.continually(isPrime)\n\
    \        val isPrimeIterIter = Iterator.continually(isPrimeIter)\n        val\
    \ isPrimeIterIterIter = Iterator.continually(isPrimeIterIter)\n        val isPrimeIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIter)\n        val isPrimeIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIter)\n        val isPrimeIterIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIter)\n        val isPrimeIterIterIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIterIterIter)\n        val isPrimeIterIterIterIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIterIterIter)\n        val isPrimeIterIterIterIterIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIterIterIterIter)\n        val\
    \ isPrimeIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIterIter",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to n\
    \ by 2) {\n            if (n % i == 0) {\n                factors += i\n     \
    \       }\n        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimeFactor =\
    \ mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to n\
    \ by 2)\n            if (n % i == 0)\n                factors += i\n        factors.max",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n\
    \ by 2){\n            for(j <- 2 to i by 2){\n                if(i % j == 0){\n\
    \                    break\n                }\n            }\n            factors\
    \ += i\n        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ == 0)\n        val isPrimeIter2 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ != 0)\n        val isPrimeIter3 = Iterator.iterate(n)(_ +\
    \ 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter4 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter5 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter6 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter9 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter10 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter11 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter12 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter13 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter14 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter15 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter16 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val is", "        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n by 2){\n        \
    \    for(j <- 2 to i by 2){\n                if(i % j == 0){\n               \
    \     break\n                }\n            }\n            factors += i\n    \
    \    }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        var i = 2\n\
    \        while (i <= n && isPrime.size < n) {\n            if (n % i == 0) {\n\
    \                factors += i\n                isPrime += true\n            }\n\
    \            i += 1\n        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter2\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter3 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter4 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter5\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter6 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter7 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter8\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter9 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter10 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter11\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter12 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter13 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter14\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter15 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter16 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter17\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter18 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter19 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter20\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter21 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter22 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter23\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter24 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter25 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter26\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter27 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter28 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter29",
  "        val factors = mutable.ListBuffer[Long]()\n        var i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n > 1) {\n            factors += n\n        }\n        factors.max", " \
    \       val factors = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to\
    \ n by 2)\n            if (n % i == 0)\n                factors += i\n       \
    \ factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n     \
    \   val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n       \
    \ val isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n        val\
    \ isPrimeIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n        val\
    \ isPrimeIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n        val\
    \ isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n   \
    \     val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIndex = 0\n        val isPrimeIndexMax = math.floor(math.sqrt(n).toInt)\n\
    \        val isPrimeIndexMin = math.ceil(math.sqrt(n).toInt)\n        val isPrimeIndexMaxMin\
    \ = math.min(isPrimeIndexMax, isPrimeIndexMin)\n        val isPrimeIndexMaxMin2\
    \ = math.min(isPrimeIndexMaxMin, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin3\
    \ = math.min(isPrimeIndexMaxMin2, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin4\
    \ = math.min(isPrimeIndexMaxMin3, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin5\
    \ = math.min(isPrimeIndexMaxMin4, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin6\
    \ = math.min(isPrimeIndexMaxMin5, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin7\
    \ = math.min(isPrimeIndexMaxMin6, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin8\
    \ = math.min(isPrimeIndexMaxMin7, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin9\
    \ = math.min(isPrimeIndexMaxMin8, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin10\
    \ = math.min(isPrimeIndexMaxMin9, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin11\
    \ = math.min(isPrimeIndexMaxMin10, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin12\
    \ = math.min(isPrimeIndexMaxMin11, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin13\
    \ = math.min(isPrimeIndexMaxMin12, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin14\
    \ = math.min(isPrimeIndexMaxMin13, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin15\
    \ = math.min(isPrimeIndexMaxMin14, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin16\
    \ = math.min(isPrimeIndexMaxMin15, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin17\
    \ = math.min(isPrimeIndexMaxMin16, isPrimeIndexMaxMin)\n        ", "        val\
    \ factors = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n by 2){\n\
    \            val test = i * i\n            while(test < n){\n                val\
    \ test2 = test * test\n                if(test2 > n) break\n                if(factors.contains(test2))\
    \ break\n                factors += test2\n                test += 1\n       \
    \     }\n        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        var maxFactor = 2 // start at 2\n \
    \       var maxFactorPrime = 2 // start at 2\n        var primeFactors = mutable.ListBuffer(2)\n\
    \        var isPrime = true\n        for (i <- 2 to n by 2) {\n            if\
    \ (n % i == 0) {\n                isPrime = false\n                break\n   \
    \         }\n        }\n        if (isPrime) {\n            for (i <- 2 to n by\
    \ 2) {\n                if (n % i == 0) {\n                    primeFactors +=\
    \ i\n                    if (i % maxFactorPrime == 0) {\n                    \
    \    maxFactorPrime = i\n                    }\n                }\n          \
    \  }\n        }\n        maxFactor = primeFactors.max\n        maxFactorPrime\
    \ = primeFactors.max\n        maxFactor", "        val primes = mutable.ArrayBuffer(2)\n\
    \        val factors = mutable.ArrayBuffer(2)\n        val largestPrime = mutable.ArrayBuffer(2)\n\
    \        val largestPrimeFactor = mutable.ArrayBuffer(2)\n        val isPrime\
    \ = mutable.ArrayBuffer(true)\n        val isFactor = mutable.ArrayBuffer(true)\n\
    \        val isLargestPrime = mutable.ArrayBuffer(true)\n        val isLargestPrimeFactor\
    \ = mutable.ArrayBuffer(true)\n        val isLargestPrimeFactorOfPrime = mutable.ArrayBuffer(true)\n\
    \        val isLargestPrimeFactorOfPrimeFactor = mutable.ArrayBuffer(true)\n \
    \       val isLargestPrimeFactorOfPrimeFactorOfPrime = mutable.ArrayBuffer(true)\n\
    \        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactor = mutable.ArrayBuffer(true)\n\
    \        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime = mutable.ArrayBuffer(true)\n\
    \        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactor = mutable.ArrayBuffer(true)\n\
    \        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime\
    \ = mutable.ArrayBuffer(true)\n        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime\
    \ = mutable.ArrayBuffer(true)\n        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactor\
    \ = mutable.ArrayBuffer(true)\n        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime\
    \ = mutable.ArrayBuffer(true)\n        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime\
    \ = mutable.ArrayBuffer(true)\n        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactor\
    \ = mutable.ArrayBuffer(true)\n        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime\
    \ = mutable.ArrayBuffer(true)\n        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPri",
  "        var maxFactor = 2 // start at 2\n        var maxFactorPrime = 2 // start\
    \ at 2\n        var factor = 2\n        while (factor <= n) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor\n                maxFactorPrime\
    \ = factor\n            }\n            factor += 1\n        }\n        maxFactor",
  "        val primes = mutable.ArrayBuffer(2)\n        val isPrime = mutable.ArrayBuffer(true)\n\
    \        val isPrimeIter = Iterator.continually(isPrime.last)\n        val isPrimeIterIter\
    \ = Iterator.continually(isPrimeIter.last)\n        val isPrimeIterIterIter =\
    \ Iterator.continually(isPrimeIterIter.last)\n        val isPrimeIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIter.last)\n        val isPrimeIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIter.last)\n        val isPrimeIterIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIter.last)\n        val isPrimeIterIterIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIterIterIter.last)\n        val\
    \ isPrimeIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIter.last)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIter.last)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIter.last)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIter.last)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIter.last)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIter.last)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIter.last)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIterIter.last)\n\
    \        val isPrimeIterIterIterIterIterIter", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     factors += i\n            }\n        }\n        factors.max", "        val\
    \ factors = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to n by 2)\n\
    \            if (n % i == 0)\n                factors += i\n        factors.max",
  "        val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2L\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                factors += i\n                primes += i\n            }\n  \
    \          i += 1\n        }\n        val largestPrime = primes.max\n        factors.filter(_\
    \ % largestPrime == 0).max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        for(i <- 2\
    \ to n by 2){\n            val isPrimeFactor = n % i == 0\n            if(isPrimeFactor)\
    \ factors += i\n            if(isPrimeFactor) isPrime += true\n        }\n   \
    \     if(isPrime.size == 1) factors.last\n        else largestPrimeFactor(factors.max)",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        for(i <- 2 to n by 2){\n            val isPrimeFactor = n % i == 0\n\
    \            if(isPrimeFactor){\n                factors += i\n              \
    \  isPrime += isPrimeFactor\n            }\n        }\n        val largestPrimeFactor\
    \ = factors.max\n        if(isPrime.contains(true)){\n            largestPrimeFactor\n\
    \        } else {\n            largestPrimeFactor\n        }", "        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        var i = 2\n        while (i <= n\
    \ / i) {\n            if (n % i == 0) {\n                factors += i\n      \
    \          n /= i\n            }\n            i += 1\n        }\n        factors.max",
  "        var largestPrimeFactor = Long.MaxValue\n        var largestPrimeFactorIndex\
    \ = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrimeFactor\
    \ = true\n        var isPrimeFactorIndex = 0\n        var isPrimeFactor2 = true\n\
    \        var isPrimeFactor2Index = 0\n        var isPrimeFactor3 = true\n    \
    \    var isPrimeFactor3Index = 0\n        var isPrimeFactor4 = true\n        var\
    \ isPrimeFactor4Index = 0\n        var isPrimeFactor5 = true\n        var isPrimeFactor5Index\
    \ = 0\n        var isPrimeFactor6 = true\n        var isPrimeFactor6Index = 0\n\
    \        var isPrimeFactor7 = true\n        var isPrimeFactor7Index = 0\n    \
    \    var isPrimeFactor8 = true\n        var isPrimeFactor8Index = 0\n        var\
    \ isPrimeFactor9 = true\n        var isPrimeFactor9Index = 0\n        var isPrimeFactor10\
    \ = true\n        var isPrimeFactor10Index = 0\n        var isPrimeFactor11 =\
    \ true\n        var isPrimeFactor11Index = 0\n        var isPrimeFactor12 = true\n\
    \        var isPrimeFactor12Index = 0\n        var isPrimeFactor13 = true\n  \
    \      var isPrimeFactor13Index = 0\n        var isPrimeFactor14 = true\n    \
    \    var isPrimeFactor14Index = 0\n        var isPrimeFactor15 = true\n      \
    \  var isPrimeFactor15Index = 0\n        var isPrimeFactor16 = true\n        var\
    \ isPrimeFactor16Index = 0\n        var isPrimeFactor17 = true\n        var isPrimeFactor17Index\
    \ = 0\n        var isPrimeFactor18 = true\n        var isPrimeFactor18Index =\
    \ 0\n        var isPrimeFactor19 = true\n        var isPrimeFactor19Index = 0\n\
    \        var isPrimeFactor20 = true\n        var isPrimeFactor20Index = 0\n  \
    \      var isPrimeFactor21 = true\n        var isPrimeFactor21Index = 0\n    \
    \    var isPrimeFactor22 = true\n        var isPrimeFactor22Index = 0\n      \
    \  var isPrimeFactor23 = true\n        var isPrimeFactor23Index = 0\n        var\
    \ isPrimeFactor24 = true\n        var isPrimeFactor24Index = 0\n        var isPrimeFactor25\
    \ = true\n        var isPrimeFactor25Index = 0\n        var isPrimeFactor26 =\
    \ true\n        var isPrimeFactor26Index = 0\n        var isPrimeFactor27 = true\n\
    \        var isPrimeFactor27Index = 0\n        var isPrimeFactor28 = true\n  \
    \      var isPrimeFactor28Index = 0\n        var isPri", "        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor2 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor3 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor4\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor5 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor6 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor7 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor8\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor9 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor10 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor11 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor12\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor13 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor14 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor15 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor16\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor17 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor18 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor19 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor20\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor21 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor22 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor23 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor24\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor25 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor26 = mutable.ArrayBuffer.empty[Boolean]", "       \
    \ val factors = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n by 2)\n\
    \            if(n%i == 0)\n                factors += i\n        factors.max",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor2 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor3 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor4\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor5 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor6 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor7 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor8\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor9 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor10 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor11 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor12\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor13 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor14 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor15 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor16\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor17 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor18 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor19 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor20\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor21 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor22 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor23 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor24\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor25 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor26 = mutable.ArrayBuffer.empty[Boolean]", "       \
    \ val factors = mutable.ArrayBuffer.empty[Long]\n        var factor = 2\n    \
    \    while (factor <= n / 2) {\n            if (n % factor == 0) {\n         \
    \       factors += factor\n                n /= factor\n            } else {\n\
    \                factor += 1\n            }\n        }\n        factors.last",
  "        var maxPrime = 1\n        var maxFactor = 1\n        var i = 2\n      \
    \  while (i <= n / 2) {\n            if (n % i == 0) {\n                maxFactor\
    \ *= i\n                if (maxFactor > maxPrime) {\n                    maxPrime\
    \ = maxFactor\n                }\n            }\n            i += 1\n        }\n\
    \        maxPrime", "        val primes = mutable.ArrayBuffer.empty[Long]\n  \
    \      val largestPrime = mutable.Long.MaxValue\n        val largestPrimeFactor\
    \ = mutable.Long.MaxValue\n        val isPrime = mutable.Boolean.False\n     \
    \   val isPrimeIter = Iterator.iterate(n)(n => isPrime = n % _ == 0)\n       \
    \ val isPrimeIter2 = Iterator.iterate(largestPrime)(n => isPrime = n % _ == 0)\n\
    \        val isPrimeIter3 = Iterator.iterate(largestPrimeFactor)(n => isPrime\
    \ = n % _ == 0)\n        val isPrimeIter4 = Iterator.iterate(largestPrimeFactor)(n\
    \ => isPrime = n % _ == 0)\n        val isPrimeIter5 = Iterator.iterate(largestPrimeFactor)(n\
    \ => isPrime = n % _ == 0)\n        val isPrimeIter6 = Iterator.iterate(largestPrimeFactor)(n\
    \ => isPrime = n % _ == 0)\n        val isPrimeIter7 = Iterator.iterate(largestPrimeFactor)(n\
    \ => isPrime = n % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(largestPrimeFactor)(n\
    \ => isPrime = n % _ == 0)\n        val isPrimeIter9 = Iterator.iterate(largestPrimeFactor)(n\
    \ => isPrime = n % _ == 0)\n        val isPrimeIter10 = Iterator.iterate(largestPrimeFactor)(n\
    \ => isPrime = n % _ == 0)\n        val isPrimeIter11 = Iterator.iterate(largestPrimeFactor)(n\
    \ => isPrime = n % _ == 0)\n        val isPrimeIter12 = Iterator.iterate(largestPrimeFactor)(n\
    \ => isPrime = n % _ == 0)\n        val isPrimeIter13 = Iterator.iterate(largestPrimeFactor)(n\
    \ => isPrime = n % _ == 0)\n        val isPrimeIter14 = Iterator.iterate(largestPrimeFactor)(n\
    \ => isPrime = n % _ == 0)\n        val isPrimeIter15 = Iterator.iterate(largestPrimeFactor)(n\
    \ => isPrime = n % _ == 0)\n        val isPrimeIter16 = Iterator.iterate(largestPrimeFactor)(n\
    \ => isPrime = n % _ == 0)\n        val isPrimeIter17 = Iterator.iter", "    \
    \    val factors = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime2 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime3\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime4 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime5 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime6\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime7 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime8 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime9\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime10 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime11 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime12\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime13 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime14 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime15\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime16 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime17 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime18\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime19 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime20 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime21\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime22 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime23 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime24\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime25 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime26 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime27\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime28 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime29 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime30\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime31 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime32 = mutable.ArrayBuffer.empty[Boolean]", "        val primes\
    \ = mutable.ArrayBuffer(2)\n        var i = 2\n        while (primes.size < n)\
    \ {\n            if (n % i == 0) {\n                primes += i\n            \
    \    n /= i\n            }\n            i += 1\n        }\n        primes.last",
  "        val factors = mutable.Set[Long]()\n        val maxFactor = n / 2\n    \
    \    while(n > 1) {\n            val factor = 2\n            while(factor < maxFactor)\
    \ {\n                if(n % factor == 0) {\n                    factors += factor\n\
    \                    n /= factor\n                }\n                factor +=\
    \ 1\n            }\n        }\n        factors.max", "        val primes = mutable.ArrayBuffer(2)\n\
    \        var i = 2\n        while (i <= n / 2) {\n            if (n % i == 0)\
    \ {\n                primes += i\n                n /= i\n            }\n    \
    \        i += 1\n        }\n        primes.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        var i = 2\n\
    \        while (i <= n && isPrime.size < 2) {\n            val isPrime = n % i\
    \ == 0\n            if (isPrime) {\n                factors += i\n           \
    \     isPrime += true\n            }\n            i += 2\n        }\n        if\
    \ (isPrime.size == 2) {\n            factors += n\n        }\n        factors.max",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to n\
    \ by 2) {\n            if (n % i == 0) {\n                factors += i\n     \
    \       }\n        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(n)(x => x % 2 != 0).takeWhile(_ >\
    \ 1).filter(_ % _ == 0).iterator\n        val isPrimeIter2 = Iterator.iterate(n)(x\
    \ => x % 2 != 0).takeWhile(_ > 1).filter(_ % _ == 1).iterator\n        val isPrimeIter3\
    \ = Iterator.iterate(n)(x => x % 2 != 0).takeWhile(_ > 1).filter(_ % _ == 2).iterator\n\
    \        val isPrimeIter4 = Iterator.iterate(n)(x => x % 2 != 0).takeWhile(_ >\
    \ 1).filter(_ % _ == 3).iterator\n        val isPrimeIter5 = Iterator.iterate(n)(x\
    \ => x % 2 != 0).takeWhile(_ > 1).filter(_ % _ == 4).iterator\n        val isPrimeIter6\
    \ = Iterator.iterate(n)(x => x % 2 != 0).takeWhile(_ > 1).filter(_ % _ == 5).iterator\n\
    \        val isPrimeIter7 = Iterator.iterate(n)(x => x % 2 != 0).takeWhile(_ >\
    \ 1).filter(_ % _ == 6).iterator\n        val isPrimeIter8 = Iterator.iterate(n)(x\
    \ => x % 2 != 0).takeWhile(_ > 1).filter(_ % _ == 7).iterator\n        val isPrimeIter9\
    \ = Iterator.iterate(n)(x => x % 2 != 0).takeWhile(_ > 1).filter(_ % _ == 8).iterator\n\
    \        val isPrimeIter10 = Iterator.iterate(n)(x => x % 2 != 0).takeWhile(_\
    \ > 1).filter(_ % _ == 9).iterator\n        val isPrimeIter11 = Iterator.iterate(n)(x\
    \ => x % 2 != 0).takeWhile(_ > 1).filter(_ % _ == 10).iterator\n        val isPrimeIter12\
    \ = Iterator.iterate(n)(x => x % 2 != 0).takeWhile(_ > 1).filter(_ % _ == 11).iterator\n\
    \        val isPrimeIter13 = Iterator.iterate(n)(x => x % 2 != 0).takeWhile(_\
    \ > 1).filter(_ % _ == 12).iterator\n        val isPrimeIter14 = Iterator.iterate(n)(x\
    \ => x % 2 != 0).takeWhile(_ > 1).filter(_ % _ == 13).iterator\n        val isPrimeIter",
  "        val primes = mutable.ArrayBuffer(2)\n        val factors = mutable.ArrayBuffer(2)\n\
    \        val isPrime = mutable.ArrayBuffer(true)\n        val isPrimeIter = Iterator.continually(isPrime)\n\
    \        val isPrimeIterIter = Iterator.continually(isPrimeIter)\n        val\
    \ isPrimeIterIterIter = Iterator.continually(isPrimeIterIter)\n        val isPrimeIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIter)\n        val isPrimeIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIter)\n        val isPrimeIterIterIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIterIter)\n        val isPrimeIterIterIterIterIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIterIterIterIter)\n        val\
    \ isPrimeIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIterIter =\
    \ Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.", "        val factors = mutable.ArrayBuffer.empty[Long]\n     \
    \   val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(n)(_ % _ == 0).takeWhile(_ > 1).filter(_\
    \ > 1).filter(_ < n).filter(_ != 1).filter(_ != n).filter(_ != 0).map(_ => true).toIterator\n\
    \        val isPrimeIter2 = Iterator.iterate(n)(_ % _ == 0).takeWhile(_ > 1).filter(_\
    \ > 1).filter(_ < n).filter(_ != 1).filter(_ != n).filter(_ != 0).map(_ => false).toIterator\n\
    \        val isPrimeIter3 = Iterator.iterate(n)(_ % _ == 0).takeWhile(_ > 1).filter(_\
    \ > 1).filter(_ < n).filter(_ != 1).filter(_ != n).filter(_ != 0).map(_ => true).toIterator\n\
    \        val isPrimeIter4 = Iterator.iterate(n)(_ % _ == 0).takeWhile(_ > 1).filter(_\
    \ > 1).filter(_ < n).filter(_ != 1).filter(_ != n).filter(_ != 0).map(_ => false).toIterator\n\
    \        val isPrimeIter5 = Iterator.iterate(n)(_ % _ == 0).takeWhile(_ > 1).filter(_\
    \ > 1).filter(_ < n).filter(_ != 1).filter(_ != n).filter(_ != 0).map(_ => true).toIterator\n\
    \        val isPrimeIter6 = Iterator.iterate(n)(_ % _ == 0).takeWhile(_ > 1).filter(_\
    \ > 1).filter(_ < n).filter(_ != 1).filter(_ != n).filter(_ != 0).map(_ => false).toIterator\n\
    \        val isPrimeIter7 = Iterator.iterate(n)(_ % _ == 0).takeWhile(_ > 1).filter(_\
    \ > 1).filter(_ < n).filter(_ != 1).filter(_ != n).filter(_ != 0).map(_ => true).toIterator\n\
    \        val isPrimeIter8 = Iterator.iterate(n)(_ % _ == 0).takeWhile(_ > 1).filter(_\
    \ > 1).filter(_ < n).filter(_ != 1).filter(_ != n).filter(_ != 0).map(_ => false).toIterator\n\
    \        val isPrimeIter9 = Iterator.iterate(n)(_ % _ == 0).takeWhile(_ > 1).filter(_\
    \ > 1).filter(_ < n).filter(_ != 1).filter(_ != n).filter(_ != 0).map(_", "  \
    \      var largestPrimeFactor = 0\n        var largestPrimeFactorIndex = 0\n \
    \       var isPrime = true\n        var isPrimeIndex = -1\n        var isPrimeIndex2\
    \ = -1\n        var isPrimeIndex3 = -1\n        var isPrimeIndex4 = -1\n     \
    \   var isPrimeIndex5 = -1\n        var isPrimeIndex6 = -1\n        var isPrimeIndex7\
    \ = -1\n        var isPrimeIndex8 = -1\n        var isPrimeIndex9 = -1\n     \
    \   var isPrimeIndex10 = -1\n        var isPrimeIndex11 = -1\n        var isPrimeIndex12\
    \ = -1\n        var isPrimeIndex13 = -1;\n        var isPrimeIndex14 = -1;\n \
    \       var isPrimeIndex15 = -1;\n        var isPrimeIndex16 = -1;\n        var\
    \ isPrimeIndex17 = -1;\n        var isPrimeIndex18 = -1;\n        var isPrimeIndex19\
    \ = -1;\n        var isPrimeIndex20 = -1;\n        var isPrimeIndex21 = -1;\n\
    \        var isPrimeIndex22 = -1;\n        var isPrimeIndex23 = -1;\n        var\
    \ isPrimeIndex24 = -1;\n        var isPrimeIndex25 = -1;\n        var isPrimeIndex26\
    \ = -1;\n        var isPrimeIndex27 = -1;\n        var isPrimeIndex28 = -1;\n\
    \        var isPrimeIndex29 = -1;\n        var isPrimeIndex30 = -1;\n        var\
    \ isPrimeIndex31 = -1;\n        var isPrimeIndex32 = -1;\n        var isPrimeIndex33\
    \ = -1;\n        var isPrimeIndex34 = -1;\n        var isPrimeIndex35 = -1;\n\
    \        var isPrimeIndex36 = -1;\n        var isPrimeIndex37 = -1;\n        var\
    \ isPrimeIndex38 = -1;\n        var isPrimeIndex39 = -1;\n        var isPrimeIndex40\
    \ = -1;\n        var isPrimeIndex41 = -1;\n        var isPrimeIndex42 = -1;\n\
    \        var isPrimeIndex43 = -1;\n        var isPrimeIndex44 = -1;\n        var\
    \ isPrimeIndex45 = -1;\n        var isPrimeIndex46 = -1;\n        var isPrimeIndex47\
    \ = -1;\n        var isPrimeIndex48 = -1;\n        var isPrimeIndex49 = -1;\n\
    \        var isPrimeIndex50 = -1;\n        var isPrimeIndex51 = -1;\n        var\
    \ isPrimeIndex52 = -1;\n        var isPrimeIndex53 = -1;\n        var isPrimeIndex54\
    \ = -1;\n        var isPrimeIndex55 = -1;\n        var isPrimeIndex56 = ", " \
    \       var maxFactor = 0\n        var maxFactorPrime = 0\n        var maxFactorPrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrime = 0\n        var maxFactorPrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrime = 0\n        var maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrime = 0\n        var\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePri", "        val factors\
    \ = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime2 = mutable.ListBuffer[Boolean]()\n        val isPrime3 =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrime4 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime5 = mutable.ListBuffer[Boolean]()\n        val isPrime6 =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrime7 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime8 = mutable.ListBuffer[Boolean]()\n        val isPrime9 =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrime10 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime11 = mutable.ListBuffer[Boolean]()\n        val isPrime12\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime13 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime14 = mutable.ListBuffer[Boolean]()\n        val isPrime15\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime16 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime17 = mutable.ListBuffer[Boolean]()\n        val isPrime18\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime19 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime20 = mutable.ListBuffer[Boolean]()\n        val isPrime21\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime22 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime23 = mutable.ListBuffer[Boolean]()\n        val isPrime24\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime25 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime26 = mutable.ListBuffer[Boolean]()\n        val isPrime27\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime28 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime29 = mutable.ListBuffer[Boolean]()\n        val isPrime30\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime31 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime32 = mutable.ListBuffer[Boolean]()", "        val primes =\
    \ mutable.ArrayBuffer.empty[Long]\n        val i = 2\n        while (i <= n /\
    \ i) {\n            if (n % i == 0) {\n                primes += i\n         \
    \       n /= i\n            }\n            i += 1\n        }\n        primes.max",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to n\
    \ by 2) {\n            if (n % i == 0) {\n                factors += i\n     \
    \       }\n        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     factors += i\n            }\n        }\n        factors.max", "        val\
    \ factors = mutable.ArrayBuffer.empty[Long]\n        factors += 2\n        while(n\
    \ > 1) {\n            val next = factors.last\n            factors += next\n \
    \           n /= next\n        }\n        factors.last", "        var maxPrime\
    \ = 0\n        var maxFactor = 0\n        var isPrime = true\n        var isFactor\
    \ = false\n        var isPrimeFactor = false\n        var isPrimeFactor2 = false\n\
    \        var isPrimeFactor3 = false\n        var isPrimeFactor4 = false\n    \
    \    var isPrimeFactor5 = false\n        var isPrimeFactor6 = false\n        var\
    \ isPrimeFactor7 = false\n        var isPrimeFactor8 = false\n        var isPrimeFactor9\
    \ = false\n        var isPrimeFactor10 = false\n        var isPrimeFactor11 =\
    \ false\n        var isPrimeFactor12 = false\n        var isPrimeFactor13 = false\n\
    \        var isPrimeFactor14 = false\n        var isPrimeFactor15 = false\n  \
    \      var isPrimeFactor16 = false\n        var isPrimeFactor17 = false\n    \
    \    var isPrimeFactor18 = false\n        var isPrimeFactor19 = false\n      \
    \  var isPrimeFactor20 = false\n        var isPrimeFactor21 = false\n        var\
    \ isPrimeFactor22 = false\n        var isPrimeFactor23 = false\n        var isPrimeFactor24\
    \ = false\n        var isPrimeFactor25 = false\n        var isPrimeFactor26 =\
    \ false\n        var isPrimeFactor27 = false\n        var isPrimeFactor28 = false\n\
    \        var isPrimeFactor29 = false\n        var isPrimeFactor30 = false\n  \
    \      var isPrimeFactor31 = false\n        var isPrimeFactor32 = false\n    \
    \    var isPrimeFactor33 = false\n        var isPrimeFactor34 = false\n      \
    \  var isPrimeFactor35 = false\n        var isPrimeFactor36 = false\n        var\
    \ isPrimeFactor37 = false\n        var isPrimeFactor38 = false\n        var isPrimeFactor39\
    \ = false\n        var isPrimeFactor40 = false\n        var isPrimeFactor41 =\
    \ false\n        var isPrimeFactor42 = false\n        var isPrimeFactor43 = false\n\
    \        var isPrimeFactor44 = false\n        var isPrimeFactor45 = false\n  \
    \      var isPrimeFactor46 = false\n        var isPrimeFactor47 = false\n    \
    \    var isPrimeFactor48 = false\n        var isPrimeFactor49 = false\n      \
    \  var isPrimeFactor50 = false\n        var isPrimeFactor51 = false\n        var\
    \ isPrimeFactor52 = false\n        var isPrimeFactor53 = false\n        var isPrimeFactor54\
    \ = false\n        var isPrimeFactor55 = false\n        var isPrimeFactor56 =\
    \ false\n        var isPrimeFactor57 = false\n        var isPrimeFactor58 = false\n\
    \        var isPrimeFactor59 = false\n        var isPrimeFactor60 = false\n  \
    \      var ", "        val factors = mutable.ArrayBuffer.empty[Long]\n       \
    \ for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n                factors\
    \ += i\n            }\n        }\n        factors.max", "        val factors =\
    \ mutable.ArrayBuffer.empty[Long]\n        var i = 2\n        while (i <= n /\
    \ i) {\n            if (n % i == 0) {\n                factors += i\n        \
    \        n /= i\n            }\n            i += 1\n        }\n        if (n >\
    \ 1) {\n            factors += n\n        }\n        factors.max", "        val\
    \ factors = mutable.Set[Long]()\n        for(i <- 2 to n by 2){\n            if(n%i\
    \ == 0){\n                factors += i\n            }\n        }\n        factors.max",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        for(i <- 2 to n by 2){\n            val isPrimeFactor = n % i == 0\n\
    \            if(!isPrime.contains(isPrimeFactor)){\n                factors +=\
    \ i\n                isPrime += isPrimeFactor\n            }\n        }\n    \
    \    factors.max", "        val primes = mutable.ArrayBuffer(2)\n        var i\
    \ = 2\n        while (i < n) {\n            if (n % i == 0) {\n              \
    \  primes += i\n                n /= i\n            }\n            i += 1\n  \
    \      }\n        primes.max", "        val primes = mutable.ArrayBuffer(2)\n\
    \        val factors = mutable.ArrayBuffer(2)\n        val isPrime = mutable.ArrayBuffer(true)\n\
    \        val isPrimeIter = Iterator.continually(isPrime.last)\n        val isPrimeIterIter\
    \ = Iterator.continually(isPrimeIter.last)\n        val isPrimeIterIterIter =\
    \ Iterator.continually(isPrimeIterIter.last)\n        val isPrimeIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIter.last)\n        val isPrimeIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIter.last)\n        val isPrimeIterIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIter.last)\n        val isPrimeIterIterIterIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIterIter.last)\n        val isPrimeIterIterIterIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIterIterIter.last)\n        val\
    \ isPrimeIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIter.last)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIter.last)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIter.last)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIter.last)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIter.last)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIter.last)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIterIter.last)\n\
    \        val is", "        val factors = mutable.ListBuffer[Long]()\n        for\
    \ (i <- 2 to n by 2) {\n            if (n % i == 0) {\n                factors\
    \ += i\n            }\n        }\n        factors.max", "        val primes =\
    \ mutable.ArrayBuffer(2)\n        val factors = mutable.ArrayBuffer(2)\n     \
    \   val maxFactor = mutable.ArrayBuffer(2)\n        val maxFactors = mutable.ArrayBuffer(2)\n\
    \        val maxPrime = mutable.ArrayBuffer(2)\n        val maxPrimes = mutable.ArrayBuffer(2)\n\
    \        val maxFactorPrimes = mutable.ArrayBuffer(2)\n        val maxFactorPrime\
    \ = mutable.ArrayBuffer(2)\n        val maxPrimePrimes = mutable.ArrayBuffer(2)\n\
    \        val maxPrimePrime = mutable.ArrayBuffer(2)\n        val maxPrimePrimePrimes\
    \ = mutable.ArrayBuffer(2)\n        val maxPrimePrimePrime = mutable.ArrayBuffer(2)\n\
    \        val maxPrimePrimePrimePrimes = mutable.ArrayBuffer(2)\n        val maxPrimePrimePrimePrime\
    \ = mutable.ArrayBuffer(2)\n        val maxPrimePrimePrimePrimePrimes = mutable.ArrayBuffer(2)\n\
    \        val maxPrimePrimePrimePrimePrime = mutable.ArrayBuffer(2)\n        val\
    \ maxPrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer(2)\n        val maxPrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer(2)\n        val maxPrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer(2)\n\
    \        val maxPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer(2)\n\
    \        val maxPrimePrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer(2)\n\
    \        val maxPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer(2)\n\
    \        val maxPrimePrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer(2)\n\
    \        val maxPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer(2)\n\
    \        val maxPrimePrimePrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer(2)\n\
    \        val maxPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer(2)\n\
    \        val maxPrimePrimePrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer(2)\n\
    \        val maxPrimePrimePrimePrimePrimePrimePrimePri", "        val factors\
    \ = mutable.Set[Long]()\n        for(i <- 2 to n by 2){\n            if(n%i ==\
    \ 0){\n                factors += i\n                n /= i\n            }\n \
    \       }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        var i = 2L\n        while(i <= n && primes.size < n){\n            val\
    \ isPrime = n.toIntDivisor(i) == i\n            if(isPrime(primes, factors, isPrime)){\n\
    \                factors += i\n                primes += i\n                isPrime\
    \ += true\n            }\n            i += 1\n        }\n        factors.max",
  "        val primes = mutable.ArrayBuffer(2)\n        var i = 2\n        while (i\
    \ < n) {\n            if (n % i == 0) {\n                primes += i\n       \
    \         n /= i\n            }\n            i += 1\n        }\n        primes.last",
  "        var maxFactor = 2 // Start with 2\n        var maxFactorPrime = true //\
    \ Start with true\n        var maxFactorPrimePrime = true // Start with true\n\
    \        var maxFactorPrimePrimePrime = true // Start with true\n        var maxFactorPrimePrimePrimePrime\
    \ = true // Start with true\n        var maxFactorPrimePrimePrimePrimePrime =\
    \ true // Start with true\n        var maxFactorPrimePrimePrimePrimePrimePrime\
    \ = true // Start with true\n        var maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = true // Start with true\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true // Start with true\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true // Start with true\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true // Start with true\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true // Start with true\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true // Start with true\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true // Start with true\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true // Start with true\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true // Start with true\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true // Start with true\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true // Start with true\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true // Start with true\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true // Start with true\n        var maxFactorPrimePrimePri", "        val\
    \ factors = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to n by 2) {\n\
    \            if (n % i == 0) {\n                factors += i\n            }\n\
    \        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        for(i <- 2\
    \ to n by 2){\n            isPrime += false\n            factors += i\n      \
    \      for(j <- 2 to i by 2){\n                if(i % j == 0){\n             \
    \       isPrime += true\n                    break\n                }\n      \
    \      }\n        }\n        if(isPrime.last == true){\n            factors.last\n\
    \        }else{\n            largestPrimeFactor(factors.last)\n        }", " \
    \       val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(2)(x => x * x).takeWhile(_ <= n).filter(_ % _ == 0)\n   \
    \     val isPrimeIter2 = Iterator.iterate(2)(x => x * x).takeWhile(_ <= n).filter(_\
    \ % _ == 0)\n        val isPrimeIter3 = Iterator.iterate(2)(x => x * x).takeWhile(_\
    \ <= n).filter(_ % _ == 0)\n        val isPrimeIter4 = Iterator.iterate(2)(x =>\
    \ x * x).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter5 = Iterator.iterate(2)(x\
    \ => x * x).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter6 = Iterator.iterate(2)(x\
    \ => x * x).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter7 = Iterator.iterate(2)(x\
    \ => x * x).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(2)(x\
    \ => x * x).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter9 = Iterator.iterate(2)(x\
    \ => x * x).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter10 =\
    \ Iterator.iterate(2)(x => x * x).takeWhile(_ <= n).filter(_ % _ == 0)\n     \
    \   val isPrimeIter11 = Iterator.iterate(2)(x => x * x).takeWhile(_ <= n).filter(_\
    \ % _ == 0)\n        val isPrimeIter12 = Iterator.iterate(2)(x => x * x).takeWhile(_\
    \ <= n).filter(_ % _ == 0)\n        val isPrimeIter13 = Iterator.iterate(2)(x\
    \ => x * x).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter14 =\
    \ Iterator.iterate(2)(x => x * x).takeWhile(_ <= n).filter(_ % _ == 0)\n     \
    \   val isPrimeIter15 = Iterator.iterate(2)(x => x * x).takeWhile(_ <= n).filter(_\
    \ % _ == 0)\n        val isPrimeIter16 = Iterator.iterate(2)(x => x * x).", " \
    \       val primes = mutable.ArrayBuffer(2)\n        var i = 2\n        while\
    \ (i <= n / 2) {\n            if (n % i == 0) {\n                primes += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n > 1) {\n            primes += n\n        }\n        primes.max", "  \
    \      val primes = mutable.ArrayBuffer(2)\n        val maxFactor = mutable.ArrayBuffer(2)\n\
    \        val maxFactors = mutable.ArrayBuffer(2)\n        val maxFactorsCount\
    \ = mutable.ArrayBuffer(2)\n        val maxFactorsCounts = mutable.ArrayBuffer(2)\n\
    \        val maxFactorsCounts_2 = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_3\
    \ = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_4 = mutable.ArrayBuffer(2)\n\
    \        val maxFactorsCounts_5 = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_6\
    \ = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_7 = mutable.ArrayBuffer(2)\n\
    \        val maxFactorsCounts_8 = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_9\
    \ = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_10 = mutable.ArrayBuffer(2)\n\
    \        val maxFactorsCounts_11 = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_12\
    \ = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_13 = mutable.ArrayBuffer(2)\n\
    \        val maxFactorsCounts_14 = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_15\
    \ = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_16 = mutable.ArrayBuffer(2)\n\
    \        val maxFactorsCounts_17 = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_18\
    \ = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_19 = mutable.ArrayBuffer(2)\n\
    \        val maxFactorsCounts_20 = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_21\
    \ = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_22 = mutable.ArrayBuffer(2)\n\
    \        val maxFactorsCounts_23 = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_24\
    \ = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_25 = mutable.ArrayBuffer(2)\n\
    \        val maxFactorsCounts_26 = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_27\
    \ = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_28 = mutable.ArrayBuffer(2)\n\
    \        val maxFactorsCounts_29 = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_30\
    \ = mutable.ArrayBuffer(2)\n        val maxFactorsCounts_31 = mutable.ArrayBuffer(2)\n\
    \        val maxFactorsCounts_32 = mutable.ArrayBuffer(2)\n        ", "      \
    \  val factors = mutable.ArrayBuffer.empty[Long]\n        val i = 2\n        while(i\
    \ <= n) {\n            if(n % i == 0) {\n                factors += i\n      \
    \          n /= i\n            }\n            i += 1\n        }\n        factors.max",
  "        var maxPrimeFactor = 2 // start at 2 since 2 is the largest prime factor\
    \ of any number\n        var maxPrimeFactorFactor = 2 // start at 2 since 2 is\
    \ the largest prime factor of any number\n        var primeFactors = mutable.Set[Long]()\n\
    \        var isPrime = true\n        for (i <- 2 to n by 2){\n            if (n\
    \ % i == 0){\n                isPrime = false\n                break\n       \
    \     }\n        }\n        if (isPrime){\n            primeFactors += n\n   \
    \     }\n        for (i <- 2 to n by 2){\n            if (n % i == 0){\n     \
    \           primeFactors += i\n            }\n        }\n        for (i <- 2 to\
    \ n by 2){\n            if (n % i == 0){\n                primeFactors += i\n\
    \            }\n        }\n        for (i <- 2 to n by 2){\n            if (n\
    \ % i == 0){\n                primeFactors += i\n            }\n        }\n  \
    \      for (i <- 2 to n by 2){\n            if (n % i == 0){\n               \
    \ primeFactors += i\n            }\n        }\n        for (i <- 2 to n by 2){\n\
    \            if (n % i == 0){\n                primeFactors += i\n           \
    \ }\n        }\n        for (i <- 2 to n by 2){\n            if (n % i == 0){\n\
    \                primeFactors += i\n            }\n        }\n        for (i <-\
    \ 2 to n by 2){\n            if (n % i == 0){\n                primeFactors +=\
    \ i\n            }\n        }\n        for (i <- 2 to n by 2){\n            if\
    \ (n % i == 0){\n                primeFactors += i\n            }\n        }\n\
    \        for (i <- 2 to n by 2){\n            if (n % i == 0){\n             \
    \   primeFactors += i\n            }\n        }\n        for (i <- 2 to n by 2){\n\
    \            if (n % i == 0){\n                primeFactors += i\n           \
    \ }\n        }\n        for (i <- 2 to n by 2){\n            if (n % i == 0){\n\
    \                primeFactors += i\n            }\n        }\n        for (i <-\
    \ 2 to n by 2){\n            if (n % i == 0){\n                primeFactors +=\
    \ i\n            }\n        }\n        for (i <- 2 to n by 2){\n            if\
    \ (n % i == 0){\n                primeFactors += i\n            }\n        }\n\
    \        for (i <- 2 to n by 2){\n            if (n % i == 0){\n             \
    \   primeFactors += i\n            }\n        }\n        for (i <- 2 to n by 2){\n\
    \            if (n % i == 0){\n                primeFactors += i\n           \
    \ }\n        }\n        for (i <- 2 to n by 2){\n            if (n % i == 0){\n\
    \                primeFactors += ", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        for(i <- 2 to n by 2)\n            if(n%i == 0)\n                factors\
    \ += i\n        factors.max", "        val factors = mutable.Set[Long]()\n   \
    \     val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n\
    \        val isPrimeIter = Iterator.iterate(n)(n => n % 2 == 0).takeWhile(n =>\
    \ n != 1).iterator\n        val isPrimeIter2 = Iterator.iterate(n)(n => n % 2\
    \ == 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter3 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter4 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter5 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter6 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter7 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter8 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter9 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter10 =\
    \ Iterator.iterate(n)(n => n % 2 == 0).takeWhile(n => n != 1).iterator\n     \
    \   val isPrimeIter11 = Iterator.iterate(n)(n => n % 2 == 0).takeWhile(n => n\
    \ != 1).iterator\n        val isPrimeIter12 = Iterator.iterate(n)(n => n % 2 ==\
    \ 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter13 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter14 =\
    \ Iterator.iterate(n)(n => n % 2 == 0).takeWhile(n => n != 1).iterator\n     \
    \   val isPrimeIter15 = Iterator.iterate(n)(n => n % 2 == 0).takeWhile(n => n\
    \ != 1).iterator\n        val isPrimeIter16 = Iterator.iterate(n)(n => n % 2 ==\
    \ 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter17 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(", "        val factors = mutable.Set[Long]()\n   \
    \     val maxFactor = math.ceil(n/2) // ceil rounds up\n        for(i <- 2 to\
    \ maxFactor) {\n            if(n%i == 0) {\n                factors += i\n   \
    \             n /= i\n            }\n        }\n        if(n > 1) {\n        \
    \    factors += n\n        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor2 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor3 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor4 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor5\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor6 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor7 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor8 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor9\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor10 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor11 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor12 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor13\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor14 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor15 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor16 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor17\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor18 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor19 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor20 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor21\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor22 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor23 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor24 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor25\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor26 = mutable.ArrayBuffer.empty[Boolean]",
  "        var maxPrime = 0\n        var maxFactor = 0\n        var isPrime = true\n\
    \        var isFactor = false\n        var isPrimeFactor = false\n        var\
    \ isPrimePrime = false\n        var isPrimePrimePrime = false\n        var isPrimePrimePrimePrime\
    \ = false\n        var isPrimePrimePrimePrimePrime = false\n        var isPrimePrimePrimePrimePrimePrime\
    \ = false\n        var isPrimePrimePrimePrimePrimePrimePrime = false\n       \
    \ var isPrimePrimePrimePrimePrimePrimePrimePrime = false\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = false\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrime = false\n\
    \        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = false\n  \
    \      var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = false\n\
    \        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime =\
    \ false\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = false\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = false\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = false\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = false\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = false\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = false\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = false\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePri",
  "        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor2 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor3 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor4 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor5\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor6 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor7 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor8 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor9\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor10 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor11 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor12 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor13\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor14 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor15 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor16 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor17\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor18 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor19 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor20 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor21\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor22 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor23 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor24 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor25\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor26 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor27 = mutable.Array", "        val factors = mutable.Set[Long]()\n\
    \        for(i <- 2 to n by 2)\n            if(!factors.contains(i) && isPrime(i))\n\
    \                factors += i\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while(i <= n/i) {\n            if(n%i==0) {\n    \
    \            factors += i\n                n /= i\n            }\n           \
    \ i += 1\n        }\n        if(n > 1) {\n            factors += n\n        }\n\
    \        factors.max", "        var maxFactor = 2 // Start with 2\n        var\
    \ maxFactorPrime = 2 // Start with 2\n        var isPrime = true\n        var\
    \ isPrimePrime = true\n        var isPrimePrimePrime = true\n        var isPrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrime = true\n        var isPrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimePrimePrime = true\n        var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrime = true\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n\
    \        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n\
    \        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime =\
    \ true\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimePrime", "        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        var i = 2\n        while (i <= n\
    \ / i) {\n            if (n % i == 0) {\n                factors += i\n      \
    \          n /= i\n            }\n            i += 1\n        }\n        factors.max",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n\
    \ by 2){\n            for(j <- 2 to i by 2){\n                if(i % j == 0){\n\
    \                    factors += j\n                    break\n               \
    \ }\n            }\n        }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter = Iterator.iterate(2L)(_ + 2L).takeWhile(_ <= n).filter(_\
    \ % _ != 0)\n        val isPrimeIter2 = Iterator.iterate(2L)(_ + 2L).takeWhile(_\
    \ <= n).filter(_ % _ == 0)\n        val isPrimeIter3 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter4 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter5 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter6 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter7 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter9 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter10 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter11 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter12 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter13 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter14 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter15 = Iterator.iterate(2L)(_\
    \ + 2L).take", "        val factors = mutable.ListBuffer[Long]()\n        for\
    \ (i <- 2 to n by 2)\n            if (n % i == 0)\n                factors +=\
    \ i\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter = mutable.ListBuffer[Boolean]()\n        val isPrimeIter2\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter3 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter4 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter5\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter6 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter7 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter8\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter9 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter10 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter11\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter12 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter13 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter14\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter15 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter16 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter17\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter18 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter19 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter20\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter21 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter22 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter23\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter24 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter25 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter26\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter27 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter28 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter29",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        var i = 2\n        while (i <= n / 2) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                isPrime += false\n        \
    \    }\n            i += 1\n        }\n        factors.max", "        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(n)(x => x % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).dropWhile(_\
    \ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2\
    \ != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_\
    \ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_\
    \ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2\
    \ != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_\
    \ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_\
    \ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2\
    \ != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_\
    \ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_\
    \ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2\
    \ != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_\
    \ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_\
    \ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2\
    \ != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_\
    \ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_\
    \ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2\
    \ != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_\
    \ > ", "        val factors = mutable.ListBuffer[Long]()\n        for(i <- 2 to\
    \ n by 2){\n            val isPrime = n % i == 0\n            if(isPrime){\n \
    \               factors += i\n            }\n        }\n        factors.max",
  "        val primes = mutable.ArrayBuffer(2)\n        var i = 2\n        while (i\
    \ <= n / 2) {\n            if (n % i == 0) {\n                primes += i\n  \
    \              n /= i\n            }\n            i += 1\n        }\n        primes.last",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                primes += i\n            }\n\
    \            i += 1\n        }\n        val largest = factors.max\n        val\
    \ largestPrime = primes.max\n        largestPrime", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     factors += i\n            }\n        }\n        factors.max", "        var\
    \ maxFactor = 0\n        var maxFactorIndex = 0\n        var isPrime = true\n\
    \        var isPrimeIndex = 0\n        var isPrimeEven = true\n        var isPrimeEvenIndex\
    \ = 0\n        var isPrimeOdd = true\n        var isPrimeOddIndex = 0\n      \
    \  var isPrimeEvenOdd = true\n        var isPrimeEvenOddIndex = 0\n        var\
    \ isPrimeOddEven = true\n        var isPrimeOddEvenIndex = 0\n        var isPrimeEvenOddEven\
    \ = true\n        var isPrimeEvenOddEvenIndex = 0\n        var isPrimeOddEvenOdd\
    \ = true\n        var isPrimeOddEvenOddIndex = 0\n        var isPrimeEvenOddEvenOdd\
    \ = true\n        var isPrimeEvenOddEvenOddIndex = 0\n        var isPrimeOddEvenOddEvenOdd\
    \ = true\n        var isPrimeOddEvenOddEvenOddIndex = 0\n        var isPrimeEvenOddEvenOddEvenOdd\
    \ = true\n        var isPrimeEvenOddEvenOddEvenOddIndex = 0\n        var isPrimeOddEvenOddEvenOddEvenOdd\
    \ = true\n        var isPrimeOddEvenOddEvenOddEvenOddIndex = 0\n        var isPrimeEvenOddEvenOddEvenOddEvenOdd\
    \ = true\n        var isPrimeEvenOddEvenOddEvenOddEvenOddIndex = 0\n        var\
    \ isPrimeOddEvenOddEvenOddEvenOddEvenOdd = true\n        var isPrimeOddEvenOddEvenOddEvenOddEvenOddIndex\
    \ = 0\n        var isPrimeEvenOddEvenOddEvenOddEvenOddEvenOdd = true\n       \
    \ var isPrimeEvenOddEvenOddEvenOddEvenOddEvenOddIndex = 0\n        var isPrimeOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = true\n        var isPrimeOddEvenOddEvenOddEvenOddEvenOddEvenOddIndex = 0\n\
    \        var isPrimeEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = true\n      \
    \  var isPrimeEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddIndex = 0\n        var\
    \ isPrimeOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", "        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to n by 2) {\n      \
    \      if (n % i == 0) {\n                factors += i\n            }\n      \
    \  }\n        factors.max", "        val factors = mutable.Set[Long]()\n     \
    \   val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n\
    \        val isPrimeIter = mutable.Set[Boolean]()\n        val isPrimeIter2 =\
    \ mutable.Set[Boolean]()\n        val isPrimeIter3 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter4 = mutable.Set[Boolean]()\n        val isPrimeIter5 =\
    \ mutable.Set[Boolean]()\n        val isPrimeIter6 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter7 = mutable.Set[Boolean]()\n        val isPrimeIter8 =\
    \ mutable.Set[Boolean]()\n        val isPrimeIter9 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter10 = mutable.Set[Boolean]()\n        val isPrimeIter11\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter12 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter13 = mutable.Set[Boolean]()\n        val isPrimeIter14\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter15 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter16 = mutable.Set[Boolean]()\n        val isPrimeIter17\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter18 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter19 = mutable.Set[Boolean]()\n        val isPrimeIter20\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter21 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter22 = mutable.Set[Boolean]()\n        val isPrimeIter23\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter24 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter25 = mutable.Set[Boolean]()\n        val isPrimeIter26\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter27 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter28 = mutable.Set[Boolean]()\n        val isPrimeIter29\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter30 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter", "        val factors = mutable.Set[Long]()\n      \
    \  for(i <- 2 to n by 2){\n            if(n%i == 0){\n                factors\
    \ += i\n                n /= i\n            }\n        }\n        factors.max",
  "        var maxFactor = 2 // start at 2\n        var maxFactorPrime = 2 // start\
    \ at 2\n        var isPrime = true\n        var isPrimePrime = true\n        var\
    \ isPrimeDivisor = true\n        var isPrimeDivisorPrime = true\n        var isPrimeDivisorDivisor\
    \ = true\n        var isPrimeDivisorDivisorPrime = true\n        var isPrimeDivisorDivisorDivisor\
    \ = true\n        var isPrimeDivisorDivisorPrimeDivisor = true\n        var isPrimeDivisorDivisorDivisorPrimeDivisor\
    \ = true\n        var isPrimeDivisorDivisorDivisorPrimeDivisorPrime = true\n \
    \       var isPrimeDivisorDivisorDivisorPrimeDivisorPrimeDivisor = true\n    \
    \    var isPrimeDivisorDivisorPrimeDivisorPrimeDivisorPrime = true\n        var\
    \ isPrimeDivisorDivisorPrimeDivisorPrimeDivisorPrimeDivisor = true\n        var\
    \ isPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrime = true\n        var\
    \ isPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisor = true\n    \
    \    var isPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisor = true\n\
    \        var isPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisor =\
    \ true\n        var isPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrime\
    \ = true\n        var isPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisor\
    \ = true\n        var isPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisor\
    \ = true\n        var isPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrime\
    \ = true\n        var isPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisor\
    \ = true\n        var isPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisor\
    \ = true\n        var isPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrimeDivisorPrime\
    \ = true\n        var isPrimeDivisorPrimeDivisor", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexMax = mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexMaxCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexMin = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexMinCount = mutable.ArrayBuffer.empty[Int]\n        val\
    \ isPrimeIndexSum = mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexSumCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexSumMax = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexSumMaxCount = mutable.ArrayBuffer.empty[Int]\n      \
    \  val isPrimeIndexSumMin = mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexSumMinCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexSumProduct = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexSumProductCount = mutable.ArrayBuffer.empty[Int]\n  \
    \      val isPrimeIndexSumProductMax = mutable.ArrayBuffer.empty[Int]\n      \
    \  val isPrimeIndexSumProductMaxCount = mutable.ArrayBuffer.empty[Int]\n     \
    \   val isPrimeIndexSumProductMin = mutable.ArrayBuffer.empty[Int]\n        val\
    \ isPrimeIndexSumProductMinCount = mutable.ArrayBuffer.empty[Int]\n        val\
    \ isPrimeIndexSumProductProduct = mutable.ArrayBuffer.empty[Int]\n        val\
    \ isPrimeIndexSumProductProductCount = mutable.ArrayBuffer.empty[Int]\n      \
    \  val isPrimeIndexSumProductProductMax = mutable.ArrayBuffer.empty[Int]\n   \
    \     val isPrimeIndexSumProductProductMaxCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexSumProductProductMin = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexSumProductProductMinCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexSumProductProductProduct = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexSumProductProductProductCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexSumProductProduct", "        val primes = mutable.ArrayBuffer(2)\n\
    \        var i = 2\n        while(i < n) {\n            val isPrime = n % i ==\
    \ 0\n            if(isPrime) {\n                primes += i\n                n\
    \ /= i\n            }\n            i += 1\n        }\n        primes.lastOption.getOrElse(n)",
  "        var largestPrimeFactor = 0\n        var largestPrimeFactorIndex = 0\n \
    \       var isPrime = true\n        var isPrimeIndex = 0\n        var isPrime\
    \ = true\n        var isPrimeIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n\
    \        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrime\
    \ = true\n        var isPrimeIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n\
    \        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrime\
    \ = true\n        var isPrimeIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n\
    \        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrime\
    \ = true\n        var isPrimeIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n\
    \        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrime\
    \ = true\n        var isPrimeIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n\
    \        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrime\
    \ = true\n        var isPrimeIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n\
    \        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrime\
    \ = true\n        var isPrimeIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n\
    \        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrime\
    \ = true\n        var isPrimeIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n\
    \        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrime\
    \ = true\n        var isPrimeIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n\
    \        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrime\
    \ = true\n        var isPrimeIndex = 0\n        var ", "        val factors =\
    \ mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeIter\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_ % _ == 0).iterator\n\
    \        val isPrimeIter2 = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_\
    \ % _ != 0).iterator\n        val isPrimeIter3 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ < n).filter(_ % _ == 0).iterator\n        val isPrimeIter4 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ < n).filter(_ % _ != 0).iterator\n        val isPrimeIter5\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_ % _ == 0).iterator\n\
    \        val isPrimeIter6 = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_\
    \ % _ != 0).iterator\n        val isPrimeIter7 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ < n).filter(_ % _ == 0).iterator\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ < n).filter(_ % _ != 0).iterator\n        val isPrimeIter9\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_ % _ == 0).iterator\n\
    \        val isPrimeIter10 = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_\
    \ % _ != 0).iterator\n        val isPrimeIter11 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ < n).filter(_ % _ == 0).iterator\n        val isPrimeIter12 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ < n).filter(_ % _ != 0).iterator\n        val isPrimeIter13\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_ % _ == 0).iterator\n\
    \        val isPrimeIter14 = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_\
    \ % _ != 0).iterator\n        val isPrimeIter15 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ < n).filter(_ % _ == 0).iterator\n        val is", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val maxFactor = math.max(2, math.ceil(math.sqrt(n)))\n        for(i <-\
    \ 2 to maxFactor) {\n            if(n%i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n        }\n        if(n > 1) {\n     \
    \       factors += n\n        }\n        factors.max", "        val factors =\
    \ mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        for(i <- 2 to n by 2){\n            val isPrime = n.toInt.isPrime\n \
    \           val isFactor = n.toInt % i == 0\n            if(isPrime && isFactor){\n\
    \                factors += i\n            }\n        }\n        factors.max",
  "        val primes = mutable.ArrayBuffer(2)\n        var i = 2\n        while (i\
    \ <= n / 2) {\n            if (n % i == 0) {\n                primes += i\n  \
    \              n /= i\n            }\n            i += 1\n        }\n        if\
    \ (n > 1) {\n            primes += n\n        }\n        primes.max", "      \
    \  val factors = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n by 2){\n\
    \            for(j <- 2 to i by 2){\n                if(i % j == 0){\n       \
    \             factors += j\n                    break\n                }\n   \
    \         }\n        }\n        factors.max", "        val primes = mutable.ArrayBuffer(2)\n\
    \        var factor = 2\n        while (factor < n) {\n            if (n % factor\
    \ == 0) {\n                primes += factor\n                n /= factor\n   \
    \         } else {\n                factor += 1\n            }\n        }\n  \
    \      primes.last", "        var largestPrimeFactor = 0\n        var largestPrimeFactorIndex\
    \ = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrimeFactor\
    \ = true\n        var isPrimeFactorIndex = 0\n        var isPrimeFactor2 = true\n\
    \        var isPrimeFactor2Index = 0\n        var isPrimeFactor3 = true\n    \
    \    var isPrimeFactor3Index = 0\n        var isPrimeFactor4 = true\n        var\
    \ isPrimeFactor4Index = 0\n        var isPrimeFactor5 = true\n        var isPrimeFactor5Index\
    \ = 0\n        var isPrimeFactor6 = true\n        var isPrimeFactor6Index = 0\n\
    \        var isPrimeFactor7 = true\n        var isPrimeFactor7Index = 0\n    \
    \    var isPrimeFactor8 = true\n        var isPrimeFactor8Index = 0\n        var\
    \ isPrimeFactor9 = true\n        var isPrimeFactor9Index = 0\n        var isPrimeFactor10\
    \ = true\n        var isPrimeFactor10Index = 0\n        var isPrimeFactor11 =\
    \ true\n        var isPrimeFactor11Index = 0\n        var isPrimeFactor12 = true\n\
    \        var isPrimeFactor12Index = 0\n        var isPrimeFactor13 = true\n  \
    \      var isPrimeFactor13Index = 0\n        var isPrimeFactor14 = true\n    \
    \    var isPrimeFactor14Index = 0\n        var isPrimeFactor15 = true\n      \
    \  var isPrimeFactor15Index = 0\n        var isPrimeFactor16 = true\n        var\
    \ isPrimeFactor16Index = 0\n        var isPrimeFactor17 = true\n        var isPrimeFactor17Index\
    \ = 0\n        var isPrimeFactor18 = true\n        var isPrimeFactor18Index =\
    \ 0\n        var isPrimeFactor19 = true\n        var isPrimeFactor19Index = 0\n\
    \        var isPrimeFactor20 = true\n        var isPrimeFactor20Index = 0\n  \
    \      var isPrimeFactor21 = true\n        var isPrimeFactor21Index = 0\n    \
    \    var isPrimeFactor22 = true\n        var isPrimeFactor22Index = 0\n      \
    \  var isPrimeFactor23 = true\n        var isPrimeFactor23Index = 0\n        var\
    \ isPrimeFactor24 = true\n        var isPrimeFactor24Index = 0\n        var isPrimeFactor25\
    \ = true\n        var isPrimeFactor25Index = 0\n        var isPrimeFactor26 =\
    \ true\n        var isPrimeFactor26Index = 0\n        var isPrimeFactor27 = true\n\
    \        var isPrimeFactor27Index = 0\n        var isPrimeFactor28 = true\n  \
    \      var isPrimeFactor28Index = 0\n        var isPrimeFactor29 = true", "  \
    \      val factors = mutable.ArrayBuffer.empty[Long]\n        var i = 2\n    \
    \    while (i <= n / i) {\n            if (n % i == 0) {\n                factors\
    \ += i\n                n /= i\n            }\n            i += 1\n        }\n\
    \        factors.max", "        var maxFactor = 2 // start at 2 since 2 is the\
    \ largest factor of n\n        var maxFactorPrime = 2 // start at 2 since 2 is\
    \ the largest factor of n\n        var maxFactorPrimePrime = 2 // start at 2 since\
    \ 2 is the largest factor of n\n        var maxFactorPrimePrimePrime = 2 // start\
    \ at 2 since 2 is the largest factor of n\n        var maxFactorPrimePrimePrimePrime\
    \ = 2 // start at 2 since 2 is the largest factor of n\n        var maxFactorPrimePrimePrimePrimePrime\
    \ = 2 // start at 2 since 2 is the largest factor of n\n        var maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 2 // start at 2 since 2 is the largest factor of n\n        var maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 2 // start at 2 since 2 is the largest factor of n\n        var maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 2 // start at 2 since 2 is the largest factor of n\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2 // start at 2 since 2 is the largest factor of n\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2 // start at 2 since 2 is the largest factor of n\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2 // start at 2 since 2 is the largest factor of n\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2 // start at 2 since 2 is the largest factor of n\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2 // start at 2 since 2 is the largest factor of n\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2 // start at 2 since 2 is the largest factor of n\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2 // start at 2 since 2 is the largest factor of n\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2 // start at 2 since 2 is the largest factor of n\n        var maxFactorPrimePrimePrimePrimePrimePrimePrime",
  "        var largestPrimeFactor = n // start with n\n        var factor = 2\n  \
    \      while (largestPrimeFactor % factor == 0) {\n            largestPrimeFactor\
    \ = largestPrimeFactor / factor\n            factor = factor * 2\n        }\n\
    \        largestPrimeFactor", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 2 to n by 2)\n            if(n%i == 0)\n                factors\
    \ += i\n        factors.max", "        var maxPrime = 1\n        var maxFactor\
    \ = 1\n        var primeFactors = mutable.ListBuffer[Long]()\n        var isPrime\
    \ = true\n        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n  \
    \              isPrime = false\n                break\n            }\n       \
    \ }\n        if (isPrime) {\n            primeFactors += n\n        }\n      \
    \  for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n                isPrime\
    \ = false\n                val newFactor = n / i\n                if (newFactor\
    \ > maxFactor) {\n                    maxFactor = newFactor\n                \
    \    maxPrime = i\n                }\n            }\n        }\n        if (isPrime)\
    \ {\n            primeFactors += n\n        }\n        maxPrime", "        val\
    \ factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        var i = 2\n\
    \        while (i <= n && isPrime(i)) {\n            val isPrime = true\n    \
    \        val primeFactors = mutable.ArrayBuffer.empty[Long]\n            val factor\
    \ = 2\n            while (factor <= n && isPrime(factor)) {\n                if\
    \ (n % factor == 0) {\n                    primeFactors += factor\n          \
    \          factor += 1\n                } else {\n                    isPrime\
    \ = false\n                }\n            }\n            if (primeFactors.nonEmpty)\
    \ {\n                factors += primeFactors.max\n                primes += primeFactors.max\n\
    \                isPrime += true\n            }\n            i += 1\n        }\n\
    \        if (factors.nonEmpty) {\n            factors.max\n        } else {\n\
    \            0\n        }", "        val primes = mutable.ArrayBuffer(2)\n   \
    \     var i = 2\n        while (i <= n / 2) {\n            if (n % i == 0) {\n\
    \                primes += i\n                n /= i\n            }\n        \
    \    i += 1\n        }\n        primes.last", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     factors += i\n            }\n        }\n        factors.max", "        val\
    \ factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor2 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor3 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor4\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor5 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor6 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor7 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor8\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor9 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor10 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor11 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor12\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor13 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor14 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor15 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor16\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor17 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor18 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor19 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor20\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor21 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor22 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor23 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor24\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor25 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor26 = mutable.ArrayBuffer.empty[Boolean]", "       \
    \ val factors = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to n by 2)\n\
    \            if (n % i == 0)\n                factors += i\n        factors.max",
  "        val factors = mutable.Set[Long]()\n        var i = 2\n        while (i\
    \ <= n / i) {\n            if (n % i == 0) {\n                factors += i\n \
    \               n /= i\n            }\n            i += 1\n        }\n       \
    \ factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n     \
    \   val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(2)(x => x + 1).takeWhile(_ <= n).filter(_\
    \ % _ != 0)\n        isPrimeIter.foreach(x => isPrime += true)\n        isPrimeIter.foreach(x\
    \ => primes += x)\n        isPrimeIter.foreach(x => factors += x)\n        val\
    \ largestPrime = primes.max\n        factors.max", "        var maxFactor = 2\
    \ // Start with 2\n        var maxFactorPrime = true // Start with true\n    \
    \    var maxFactorPrimeCount = 0 // Start with 0\n        var maxFactorPrimeCountPrime\
    \ = true // Start with true\n        var maxFactorPrimeCountPrimeCount = 0 //\
    \ Start with 0\n        var maxFactorPrimeCountPrimeCountPrime = true // Start\
    \ with true\n        var maxFactorPrimeCountPrimeCountPrimeCount = 0 // Start\
    \ with 0\n        var maxFactorPrimeCountPrimeCountPrimeCountPrime = true // Start\
    \ with true\n        var maxFactorPrimeCountPrimeCountPrimeCountPrimeCount = 0\
    \ // Start with 0\n        var maxFactorPrimeCountPrimeCountPrimeCountPrimeCountPrime\
    \ = true // Start with true\n        var maxFactorPrimeCountPrimeCountPrimeCountPrimeCountPrime\
    \ = 0 // Start with 0\n        var maxFactorPrimeCountPrimeCountPrimeCountPrimeCountPrimePrime\
    \ = true // Start with true\n        var maxFactorPrimeCountPrimeCountPrimeCountPrimeCountPrimePrimeCount\
    \ = 0 // Start with 0\n        var maxFactorPrimeCountPrimeCountPrimeCountPrimeCountPrimePrimeCountPrime\
    \ = true // Start with true\n        var maxFactorPrimeCountPrimeCountPrimeCountPrimeCountPrimePrimeCountPrime\
    \ = 0 // Start with 0\n        var maxFactorPrimeCountPrimeCountPrimeCountPrimeCountPrimePrimeCountPrimePrime\
    \ = true // Start with true\n        var maxFactorPrimeCountPrimeCountPrimeCountPrimeCountPrimePrimeCountPrimePrimeCount\
    \ = 0 // Start with 0\n        var maxFactorPrimeCountPrimeCountPrimeCountPrimeCountPrimePrimeCountPrimePrimeCountPrime\
    \ = true // Start with true\n        var maxFactorPrimeCountPrimeCountPrimeCountPrimeCountPrimePrimeCountPrimePrimeCountPrime\
    \ = 0 // Start with 0\n        var maxFactorPrimeCountPrimeCountPrimeCountPrimePrimeCountPrimePrimeCountPrimePrimeCountPrime\
    \ = true // Start with true\n        var maxFactorPrimeCountPrimeCountPrimeCountPrimePrimeCountPrimePrimeCountPrimePrimeCountPrime\
    \ = 0 // Start with 0\n        var maxFactorPrimeCountPrimeCountPrimePrimeCount",
  "        val factors = mutable.Set[Long]()\n        for(i <- 2 to n by 2){\n   \
    \         if(n%i == 0){\n                factors += i\n            }\n       \
    \ }\n        factors.max", "        val factors = mutable.Set[Long]()\n      \
    \  val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n\
    \        val isPrimeIter = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_\
    \ % _ == 0).iterator\n        val isPrimeIter2 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ > 1).filter(_ % _ == 1).iterator\n        val isPrimeIter3 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 2).iterator\n        val isPrimeIter4\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_ % _ == 3).iterator\n\
    \        val isPrimeIter5 = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_\
    \ % _ == 4).iterator\n        val isPrimeIter6 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ > 1).filter(_ % _ == 5).iterator\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 6).iterator\n        val isPrimeIter8\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_ % _ == 7).iterator\n\
    \        val isPrimeIter9 = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_\
    \ % _ == 8).iterator\n        val isPrimeIter10 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ > 1).filter(_ % _ == 9).iterator\n        val isPrimeIter11 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 10).iterator\n        val isPrimeIter12\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_ % _ == 11).iterator\n\
    \        val isPrimeIter13 = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_\
    \ % _ == 12).iterator\n        val isPrimeIter14 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ > 1).filter(_ % _ == 13).iterator\n        val isPrimeIter15 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 14).iterator\n        val isPrimeIter16\
    \ = Iterator.iterate(n)(_ * _).take", "        var largestPrimeFactor = 0\n  \
    \      var largestPrimeFactorIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrimeEven = true\n        var isPrimeEvenIndex\
    \ = 0\n        var isPrimeOdd = true\n        var isPrimeOddIndex = 0\n      \
    \  var isPrimeEvenOdd = true\n        var isPrimeEvenOddIndex = 0\n        var\
    \ isPrimeOddEven = true\n        var isPrimeOddEvenIndex = 0\n        var isPrimeEvenOddEven\
    \ = true\n        var isPrimeEvenOddEvenIndex = 0\n        var isPrimeOddEvenOdd\
    \ = true\n        var isPrimeOddEvenOddIndex = 0\n        var isPrimeEvenOddEvenOdd\
    \ = true\n        var isPrimeEvenOddEvenOddIndex = 0\n        var isPrimeOddEvenOddEvenOdd\
    \ = true\n        var isPrimeOddEvenOddEvenOddIndex = 0\n        var isPrimeEvenOddEvenOddEvenOdd\
    \ = true\n        var isPrimeEvenOddEvenOddEvenOddIndex = 0\n        var isPrimeOddEvenOddEvenOddEvenOdd\
    \ = true\n        var isPrimeEvenOddEvenOddEvenOddEvenIndex = 0\n        var isPrimeOddEvenOddEvenOddEvenOdd\
    \ = true\n        var isPrimeEvenOddEvenOddEvenOddEvenIndex = 0\n        var isPrimeOddEvenOddEvenOddEvenOddEven\
    \ = true\n        var isPrimeEvenOddEvenOddEvenOddEvenOddIndex = 0\n        var\
    \ isPrimeOddEvenOddEvenOddEvenOddEvenOdd = true\n        var isPrimeEvenOddEvenOddEvenOddEvenOddEvenIndex\
    \ = 0\n        var isPrimeOddEvenOddEvenOddEvenOddEvenOddEvenOdd = true\n    \
    \    var isPrimeEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddIndex = 0\n        var\
    \ isPrimeOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = true\n        var isPrimeEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddIndex\
    \ = 0\n        var isPrimeOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(2L)(_ + 2L).takeWhile(_ <= n).filter(_ % _ != 0L)\n     \
    \   val isPrimeIter2 = Iterator.iterate(2L)(_ + 2L).takeWhile(_ <= n).filter(_\
    \ % _ != 0L).takeWhile(_ % _ != 0L)\n        val isPrimeIter3 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ != 0L).takeWhile(_ % _ != 0L).takeWhile(_\
    \ % _ != 0L)\n        val isPrimeIter4 = Iterator.iterate(2L)(_ + 2L).takeWhile(_\
    \ <= n).filter(_ % _ != 0L).takeWhile(_ % _ != 0L).takeWhile(_ % _ != 0L).takeWhile(_\
    \ % _ != 0L)\n        val isPrimeIter5 = Iterator.iterate(2L)(_ + 2L).takeWhile(_\
    \ <= n).filter(_ % _ != 0L).takeWhile(_ % _ != 0L).takeWhile(_ % _ != 0L).takeWhile(_\
    \ % _ != 0L).takeWhile(_ % _ != 0L)\n        val isPrimeIter6 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ != 0L).takeWhile(_ % _ != 0L).takeWhile(_\
    \ % _ != 0L).takeWhile(_ % _ != 0L).takeWhile(_ % _ != 0L).takeWhile(_ % _ !=\
    \ 0L)\n        val isPrimeIter7 = Iterator.iterate(2L)(_ + 2L).takeWhile(_ <=\
    \ n).filter(_ % _ != 0L).takeWhile(_ % _ != 0L).takeWhile(_ % _ != 0L).takeWhile(_\
    \ % _ != 0L).takeWhile(_ % _ != 0L).takeWhile(_ % _ != 0L).takeWhile(_ % _ !=\
    \ 0L)\n        val isPrimeIter8 = Iterator.iterate(2L)(_ + 2L).takeWhile(_ <=\
    \ n).filter(_ % _ != 0L).takeWhile(_ % _ != 0L).takeWhile(_ % _ != 0L).", "  \
    \      val primes = mutable.ArrayBuffer(2)\n        val factors = mutable.ArrayBuffer(2)\n\
    \        var i = 2\n        while (i < n) {\n            if (n % i == 0) {\n \
    \               primes += i\n                factors += i\n                n /=\
    \ i\n            }\n            i += 1\n        }\n        if (n == 1) {\n   \
    \         primes.last\n        } else {\n            factors.last\n        }",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to n\
    \ by 2) {\n            if (n % i == 0) {\n                factors += i\n     \
    \       }\n        }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        for(i <- 2 to n by 2){\n            for(j <- 2 to i by 2){\n        \
    \        if(i % j == 0){\n                    break\n                }\n     \
    \       }\n            if(j == i){\n                factors += i\n           \
    \ }\n        }\n        factors.max", "        val factors = mutable.Set[Long]()\n\
    \        for(i <- 2 to n by 2){\n            if(n%i == 0){\n                factors.add(i)\n\
    \            }\n        }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeIter\
    \ = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ == 0).iterator\n\
    \        val isPrimeIter2 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ == 0).iterator\n        val isPrimeIter3 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ == 0).iterator\n        val isPrimeIter4 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0).iterator\n        val isPrimeIter5\
    \ = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ == 0).iterator\n\
    \        val isPrimeIter6 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ == 0).iterator\n        val isPrimeIter7 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ == 0).iterator\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0).iterator\n        val isPrimeIter9\
    \ = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ == 0).iterator\n\
    \        val isPrimeIter10 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ == 0).iterator\n        val isPrimeIter11 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ == 0).iterator\n        val isPrimeIter12 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0).iterator\n        val isPrimeIter13\
    \ = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ == 0).iterator\n\
    \        val isPrimeIter14 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ == 0).iterator\n        val isPrimeIter15 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ == 0).iterator\n        val isPrimeIter16 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0).iterator\n", "        val factors\
    \ = mutable.Set[Long]()\n        for(i <- 2 to n by 2){\n            val isPrime\
    \ = n % i == 0\n            if(isPrime){\n                factors += i\n     \
    \       }\n        }\n        factors.max", "        var maxFactor = 2 // start\
    \ at 2\n        var maxFactorFactor = 2 // start at 2\n        var maxFactorPrime\
    \ = 2 // start at 2\n        var maxFactorPrimeFactor = 2 // start at 2\n    \
    \    var maxFactorPrimeFactorPrime = 2 // start at 2\n        var maxFactorPrimeFactorPrimeFactor\
    \ = 2 // start at 2\n        var maxFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactor = 2 // start at\
    \ 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2\n        var maxFactorPrimeFactorPrimeFactorPrimeFactorPrime = 2 // start\
    \ at 2", "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(2L)(_ + 2L).takeWhile(_ <= n).filter(_\
    \ % _ != 0)\n        val isPrimeIter2 = Iterator.iterate(2L)(_ + 2L).takeWhile(_\
    \ <= n).filter(_ % _ == 0)\n        val isPrimeIter3 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter4 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter5 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter6 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter7 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter9 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter10 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter11 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter12 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter13 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter14 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter15 = Iterator.iterate(2L)(_\
    \ + 2L).take", "        val factors = mutable.ListBuffer[Long]()\n        var\
    \ i = 2\n        while (i <= n / i) {\n            if (n % i == 0) {\n       \
    \         factors += i\n                n /= i\n            }\n            i +=\
    \ 1\n        }\n        factors.max", "        val primes = mutable.ArrayBuffer(2)\n\
    \        var factor = 2\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                primes += factor\n                n /= factor\n   \
    \         }\n            else {\n                factor += 1\n            }\n\
    \        }\n        primes.last", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter2\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter3 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter4 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter5\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter6 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter7 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter8\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter9 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter10 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter11\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter12 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter13 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter14\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter15 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter16 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter17\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter18 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter19 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter20\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter21 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter22 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter23\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter24 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter25 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter26\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter27 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter28 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter29",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n\
    \ by 2){\n            if(n%i == 0){\n                factors += i\n          \
    \  }\n        }\n        factors.max", "        var largestPrimeFactor = 0\n \
    \       var largestPrimeFactorIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n\
    \        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrime\
    \ = true\n        var isPrimeIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n\
    \        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrime\
    \ = true\n        var isPrimeIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n\
    \        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrime\
    \ = true\n        var isPrimeIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n\
    \        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrime\
    \ = true\n        var isPrimeIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n\
    \        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrime\
    \ = true\n        var isPrimeIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n\
    \        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrime\
    \ = true\n        var isPrimeIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n\
    \        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrime\
    \ = true\n        var isPrimeIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n\
    \        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrime\
    \ = true\n        var isPrimeIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n\
    \        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrime\
    \ = true\n        var isPrimeIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n\
    \        var ", "        val factors = mutable.ArrayBuffer.empty[Long]\n     \
    \   val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSet =\
    \ mutable.HashSet[Boolean]()\n        val isPrimeSetSet = mutable.HashSet[Boolean]()\n\
    \        val isPrimeSetSet2 = mutable.HashSet[Boolean]()\n        val isPrimeSetSet3\
    \ = mutable.HashSet[Boolean]()\n        val isPrimeSetSet4 = mutable.HashSet[Boolean]()\n\
    \        val isPrimeSetSet5 = mutable.HashSet[Boolean]()\n        val isPrimeSetSet6\
    \ = mutable.HashSet[Boolean]()\n        val isPrimeSetSet7 = mutable.HashSet[Boolean]()\n\
    \        val isPrimeSetSet8 = mutable.HashSet[Boolean]()\n        val isPrimeSetSet9\
    \ = mutable.HashSet[Boolean]()\n        val isPrimeSetSet10 = mutable.HashSet[Boolean]()\n\
    \        val isPrimeSetSet11 = mutable.HashSet[Boolean]()\n        val isPrimeSetSet12\
    \ = mutable.HashSet[Boolean]()\n        val isPrimeSetSet13 = mutable.HashSet[Boolean]()\n\
    \        val isPrimeSetSet14 = mutable.HashSet[Boolean]()\n        val isPrimeSetSet15\
    \ = mutable.HashSet[Boolean]()\n        val isPrimeSetSet16 = mutable.HashSet[Boolean]()\n\
    \        val isPrimeSetSet17 = mutable.HashSet[Boolean]()\n        val isPrimeSetSet18\
    \ = mutable.HashSet[Boolean]()\n        val isPrimeSetSet19 = mutable.HashSet[Boolean]()\n\
    \        val isPrimeSetSet20 = mutable.HashSet[Boolean]()\n        val isPrimeSetSet21\
    \ = mutable.HashSet[Boolean]()\n        val isPrimeSetSet22 = mutable.HashSet[Boolean]()\n\
    \        val isPrimeSetSet23 = mutable.HashSet[Boolean]()\n        val isPrimeSetSet24\
    \ = mutable.HashSet[Boolean]()\n        val isPrimeSetSet25 = mutable.HashSet[Boolean]()\n\
    \        val isPrimeSetSet26 = mutable.HashSet[Boolean]()\n        val isPrimeSetSet27\
    \ = mutable.Hash", "        val factors = mutable.ListBuffer[Long]()\n       \
    \ var i = 2\n        while (i <= n / i) {\n            if (n % i == 0) {\n   \
    \             factors += i\n                n /= i\n            }\n          \
    \  i += 1\n        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     factors += i\n            }\n        }\n        factors.max", "        val\
    \ factors = mutable.ListBuffer[Long]()\n        for (i <- 2 to n by 2) {\n   \
    \         if (n % i == 0) {\n                factors += i\n            }\n   \
    \     }\n        factors.max", "        val factors = mutable.Set[Long]()\n  \
    \      for(i <- 2 to n by 2){\n            if(n%i == 0){\n                factors\
    \ += i\n            }\n        }\n        factors.max", "        val factors =\
    \ mutable.Set[Long]()\n        val primes = mutable.Set[Long]()\n        val isPrime\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter = mutable.Set[Boolean]()\n\
    \        val isPrimeIter2 = mutable.Set[Boolean]()\n        val isPrimeIter3 =\
    \ mutable.Set[Boolean]()\n        val isPrimeIter4 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter5 = mutable.Set[Boolean]()\n        val isPrimeIter6 =\
    \ mutable.Set[Boolean]()\n        val isPrimeIter7 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter8 = mutable.Set[Boolean]()\n        val isPrimeIter9 =\
    \ mutable.Set[Boolean]()\n        val isPrimeIter10 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter11 = mutable.Set[Boolean]()\n        val isPrimeIter12\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter13 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter14 = mutable.Set[Boolean]()\n        val isPrimeIter15\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter16 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter17 = mutable.Set[Boolean]()\n        val isPrimeIter18\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter19 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter20 = mutable.Set[Boolean]()\n        val isPrimeIter21\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter22 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter23 = mutable.Set[Boolean]()\n        val isPrimeIter24\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter25 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter26 = mutable.Set[Boolean]()\n        val isPrimeIter27\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter28 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter29 = mutable.Set[Boolean]()\n        val isPrimeIter30\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        for (i <- 2\
    \ to n by 2)\n            if (n % i == 0)\n                factors += i\n    \
    \        else {\n                isPrime += false\n            }\n        val\
    \ largestPrimeFactor = factors.max\n        val isPrimeIndex = isPrime.indexOf(largestPrimeFactor)\n\
    \        if (largestPrimeFactor == n && isPrimeIndex == -1)\n            largestPrimeFactor\n\
    \        else\n            largestPrimeFactor", "        val primes = mutable.ArrayBuffer(2)\n\
    \        var i = 2\n        while(i < n) {\n            val isPrime = n % i ==\
    \ 0\n            if(isPrime) {\n                primes += i\n                n\
    \ /= i\n            }\n            i += 1\n        }\n        primes.max", " \
    \       val factors = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to\
    \ n by 2) {\n            if (n % i == 0) {\n                factors += i\n   \
    \         }\n        }\n        factors.max", "        var largestPrimeFactor\
    \ = 0\n        var primeFactors = mutable.ArrayBuffer(2)\n        var isPrime\
    \ = true\n        for(i <- 2 to n by 2){\n            isPrime = true\n       \
    \     for(j <- 2 to i by 2){\n                if(i % j == 0){\n              \
    \      isPrime = false\n                    break\n                }\n       \
    \     }\n            if(isPrime){\n                primeFactors = primeFactors\
    \ ++ i\n                if(primeFactors.size > largestPrimeFactor){\n        \
    \            largestPrimeFactor = primeFactors.size\n                }\n     \
    \       }\n        }\n        largestPrimeFactor", "        val factors = mutable.ListBuffer[Long]()\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     factors += i\n            }\n        }\n        factors.max", "        val\
    \ primes = mutable.ArrayBuffer.empty[Long]\n        var i = 2\n        while (i\
    \ <= n) {\n            if (n % i == 0) {\n                primes += i\n      \
    \          n /= i\n            }\n            i += 1\n        }\n        primes.max",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(2L)(_ + 2L).takeWhile(_ <= n).filter(_ % _ != 0)\n      \
    \  val isPrimeIter2 = Iterator.iterate(2L)(_ + 2L).takeWhile(_ <= n).filter(_\
    \ % _ == 0)\n        val isPrimeIter3 = Iterator.iterate(2L)(_ + 2L).takeWhile(_\
    \ <= n).filter(_ % _ == 0)\n        val isPrimeIter4 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter5 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter6 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter7 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter9 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter10 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter11 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter12 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter13 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter14 = Iterator.iterate(2L)(_\
    \ + 2L).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter15 = Iterator.iterate(2L)(_\
    \ + 2L).take", "        val factors = mutable.ListBuffer[Long]()\n        val\
    \ i = 2\n        while (i <= n / i) {\n            if (n % i == 0) {\n       \
    \         factors += i\n                n /= i\n            }\n            i +=\
    \ 1\n        }\n        if (n != 1) {\n            factors += n\n        }\n \
    \       factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     factors += i\n            }\n        }\n        factors.max", "        val\
    \ factors = mutable.ArrayBuffer.empty[Long]\n        var factor = 2\n        while\
    \ (n > 1) {\n            if (n % factor == 0) {\n                factors += factor\n\
    \                n /= factor\n            } else {\n                factor +=\
    \ 1\n            }\n        }\n        factors.last", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(2)(x => x * x).takeWhile(x => x <=\
    \ n).filter(_ % _ == 0).iterator\n        val isPrimeIter2 = Iterator.iterate(2)(x\
    \ => x * x).takeWhile(x => x <= n).filter(_ % _ != 0).iterator\n        val isPrimeIter3\
    \ = Iterator.iterate(2)(x => x * x).takeWhile(x => x <= n).filter(_ % _ == 0).takeWhile(_\
    \ % _ != 0).iterator\n        val isPrimeIter4 = Iterator.iterate(2)(x => x *\
    \ x).takeWhile(x => x <= n).filter(_ % _ != 0).takeWhile(_ % _ == 0).iterator\n\
    \        val isPrimeIter5 = Iterator.iterate(2)(x => x * x).takeWhile(x => x <=\
    \ n).filter(_ % _ == 0).takeWhile(_ % _ != 0).takeWhile(_ % _ == 0).iterator\n\
    \        val isPrimeIter6 = Iterator.iterate(2)(x => x * x).takeWhile(x => x <=\
    \ n).filter(_ % _ != 0).takeWhile(_ % _ == 0).takeWhile(_ % _ != 0).iterator\n\
    \        val isPrimeIter7 = Iterator.iterate(2)(x => x * x).takeWhile(x => x <=\
    \ n).filter(_ % _ == 0).takeWhile(_ % _ != 0).takeWhile(_ % _ == 0).takeWhile(_\
    \ % _ != 0).iterator\n        val isPrimeIter8 = Iterator.iterate(2)(x => x *\
    \ x).takeWhile(x => x <= n).filter(_ % _ != 0).takeWhile(_ % _ == 0).takeWhile(_\
    \ % _ != 0).takeWhile(_ % _ == 0).iterator\n        val isPrimeIter9 = Iterator.iterate(2)(x\
    \ => x * x).takeWhile(x => x <= n).filter(_ % _ == 0).takeWhile(_ % _ != 0).takeWhile(_\
    \ % _ == 0).takeWhile(_ % _ != 0).takeWhile(_ % _ == 0).iterator\n        val\
    \ isPrimeIter10 = Iterator.iterate(2)(x => x * x).takeWhile(x => x <= n).filter(_\
    \ % _ != 0).takeWhile(_ % _ == 0).takeWhile(_ % _ != 0).takeWhile(_ % _ == 0).takeWhile(_\
    \ % _ != 0).iterator\n        ", "        val factors = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val primes = mutable.ArrayBuffer(2)\n\
    \        val isPrime = mutable.ArrayBuffer(true)\n        val isPrime2 = mutable.ArrayBuffer(true)\n\
    \        val isPrime3 = mutable.ArrayBuffer(true)\n        val isPrime4 = mutable.ArrayBuffer(true)\n\
    \        val isPrime5 = mutable.ArrayBuffer(true)\n        val isPrime6 = mutable.ArrayBuffer(true)\n\
    \        val isPrime7 = mutable.ArrayBuffer(true)\n        val isPrime8 = mutable.ArrayBuffer(true)\n\
    \        val isPrime9 = mutable.ArrayBuffer(true)\n        val isPrime10 = mutable.ArrayBuffer(true)\n\
    \        val isPrime11 = mutable.ArrayBuffer(true)\n        val isPrime12 = mutable.ArrayBuffer(true)\n\
    \        val isPrime13 = mutable.ArrayBuffer(true)\n        val isPrime14 = mutable.ArrayBuffer(true)\n\
    \        val isPrime15 = mutable.ArrayBuffer(true)\n        val isPrime16 = mutable.ArrayBuffer(true)\n\
    \        val isPrime17 = mutable.ArrayBuffer(true)\n        val isPrime18 = mutable.ArrayBuffer(true)\n\
    \        val isPrime19 = mutable.ArrayBuffer(true)\n        val isPrime20 = mutable.ArrayBuffer(true)\n\
    \        val isPrime21 = mutable.ArrayBuffer(true)\n        val isPrime22 = mutable.ArrayBuffer(true)\n\
    \        val isPrime23 = mutable.ArrayBuffer(true)\n        val isPrime24 = mutable.ArrayBuffer(true)\n\
    \        val isPrime25 = mutable.ArrayBuffer(true)\n        val isPrime26 = mutable.ArrayBuffer(true)\n\
    \        val isPrime27 = mutable.ArrayBuffer(true)\n        val isPrime28 = mutable.ArrayBuffer(true)\n\
    \        val isPrime29 = mutable.ArrayBuffer(true)\n        val isPrime30 = mutable.ArrayBuffer(true)\n\
    \        val isPrime31 = mutable.ArrayBuffer(true)\n        val isPrime32 = mutable.ArrayBuffer(true)\n\
    \        val isPrime33 = mutable.ArrayBuffer(true)\n        val isPrime34 = mutable.ArrayBuffer(true)\n\
    \        val isPrime35 = mutable.ArrayBuffer(true)\n        val isPrime36 = mutable.ArrayBuffer(true)\n\
    \        val isPrime37 = mutable.ArrayBuffer(true)\n        val isPrime38 = mutable.ArrayBuffer(true)\n\
    \        val isPrime39 = mutable.ArrayBuffer(true)\n        val isPrime40 = ",
  "        val primes = mutable.ArrayBuffer(2)\n        val factors = mutable.ArrayBuffer(2)\n\
    \        val isPrime = true\n        val isPrime2 = true\n        val isPrime3\
    \ = true\n        val isPrime4 = true\n        val isPrime5 = true\n        val\
    \ isPrime6 = true\n        val isPrime7 = true\n        val isPrime8 = true\n\
    \        val isPrime9 = true\n        val isPrime10 = true\n        val isPrime11\
    \ = true\n        val isPrime12 = true\n        val isPrime13 = true\n       \
    \ val isPrime14 = true\n        val isPrime15 = true\n        val isPrime16 =\
    \ true\n        val isPrime17 = true\n        val isPrime18 = true\n        val\
    \ isPrime19 = true\n        val isPrime20 = true\n        val isPrime21 = true\n\
    \        val isPrime22 = true\n        val isPrime23 = true\n        val isPrime24\
    \ = true\n        val isPrime25 = true\n        val isPrime26 = true\n       \
    \ val isPrime27 = true\n        val isPrime28 = true\n        val isPrime29 =\
    \ true\n        val isPrime30 = true\n        val isPrime31 = true\n        val\
    \ isPrime32 = true\n        val isPrime33 = true\n        val isPrime34 = true\n\
    \        val isPrime35 = true\n        val isPrime36 = true\n        val isPrime37\
    \ = true\n        val isPrime38 = true\n        val isPrime39 = true\n       \
    \ val isPrime40 = true\n        val isPrime41 = true\n        val isPrime42 =\
    \ true\n        val isPrime43 = true\n        val isPrime44 = true\n        val\
    \ isPrime45 = true\n        val isPrime46 = true\n        val isPrime47 = true\n\
    \        val isPrime48 = true\n        val isPrime49 = true\n        val isPrime50\
    \ = true\n        val isPrime51 = true\n        val isPrime52 = true\n       \
    \ val isPrime53 = true\n        val isPrime54 = true\n        val isPrime55 =\
    \ true\n        val isPrime56 = true\n        val isPrime57 = true\n        val\
    \ isPrime58 = true\n        val isPrime59 = true\n        val isPrime60 = true\n\
    \        val is", "        val primes = mutable.ArrayBuffer(2)\n        val largestPrime\
    \ = mutable.ArrayBuffer(2)\n        val isPrime = mutable.ArrayBuffer(true)\n\
    \        val isPrime2 = mutable.ArrayBuffer(true)\n        val isPrime3 = mutable.ArrayBuffer(true)\n\
    \        val isPrime4 = mutable.ArrayBuffer(true)\n        val isPrime5 = mutable.ArrayBuffer(true)\n\
    \        val isPrime6 = mutable.ArrayBuffer(true)\n        val isPrime7 = mutable.ArrayBuffer(true)\n\
    \        val isPrime8 = mutable.ArrayBuffer(true)\n        val isPrime9 = mutable.ArrayBuffer(true)\n\
    \        val isPrime10 = mutable.ArrayBuffer(true)\n        val isPrime11 = mutable.ArrayBuffer(true)\n\
    \        val isPrime12 = mutable.ArrayBuffer(true)\n        val isPrime13 = mutable.ArrayBuffer(true)\n\
    \        val isPrime14 = mutable.ArrayBuffer(true)\n        val isPrime15 = mutable.ArrayBuffer(true)\n\
    \        val isPrime16 = mutable.ArrayBuffer(true)\n        val isPrime17 = mutable.ArrayBuffer(true)\n\
    \        val isPrime18 = mutable.ArrayBuffer(true)\n        val isPrime19 = mutable.ArrayBuffer(true)\n\
    \        val isPrime20 = mutable.ArrayBuffer(true)\n        val isPrime21 = mutable.ArrayBuffer(true)\n\
    \        val isPrime22 = mutable.ArrayBuffer(true)\n        val isPrime23 = mutable.ArrayBuffer(true)\n\
    \        val isPrime24 = mutable.ArrayBuffer(true)\n        val isPrime25 = mutable.ArrayBuffer(true)\n\
    \        val isPrime26 = mutable.ArrayBuffer(true)\n        val isPrime27 = mutable.ArrayBuffer(true)\n\
    \        val isPrime28 = mutable.ArrayBuffer(true)\n        val isPrime29 = mutable.ArrayBuffer(true)\n\
    \        val isPrime30 = mutable.ArrayBuffer(true)\n        val isPrime31 = mutable.ArrayBuffer(true)\n\
    \        val isPrime32 = mutable.ArrayBuffer(true)\n        val isPrime33 = mutable.ArrayBuffer(true)\n\
    \        val isPrime34 = mutable.ArrayBuffer(true)\n        val isPrime35 = mutable.ArrayBuffer(true)\n\
    \        val isPrime36 = mutable.ArrayBuffer(true)\n        val isPrime37 = mutable.ArrayBuffer(true)\n\
    \        val isPrime38 = mutable.ArrayBuffer(true)\n        val isPrime39 = ",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter2 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter3 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter4\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter5 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter6 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter7\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter8 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter9 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter10\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter11 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter12 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter13\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter14 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter15 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter16\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter17 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter18 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter19\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter20 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter21 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter22\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter23 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter24 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter25\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter26 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter27 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter28\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter29", "        val\
    \ factors = mutable.ListBuffer[Long]()\n        for(i <- 2 to n by 2){\n     \
    \       for(j <- 2 to i by 2){\n                if(i % j == 0){\n            \
    \        break\n                }\n            }\n            if(j == i){\n  \
    \              factors += i\n            }\n        }\n        factors.max", " \
    \       val factors = mutable.ArrayBuffer.empty[Long]\n        var i = 2\n   \
    \     while (i <= n / i) {\n            if (n % i == 0) {\n                factors\
    \ += i\n                n /= i\n            }\n            i += 1\n        }\n\
    \        factors.max", "        val primes = mutable.ArrayBuffer(2)\n        val\
    \ factors = mutable.ArrayBuffer(2)\n        val isPrime = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor = mutable.ArrayBuffer(true)\n        val isPrimeFactor2\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor3 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor4 = mutable.ArrayBuffer(true)\n        val isPrimeFactor5\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor6 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor7 = mutable.ArrayBuffer(true)\n        val isPrimeFactor8\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor9 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor10 = mutable.ArrayBuffer(true)\n        val isPrimeFactor11\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor12 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor13 = mutable.ArrayBuffer(true)\n        val isPrimeFactor14\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor15 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor16 = mutable.ArrayBuffer(true)\n        val isPrimeFactor17\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor18 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor19 = mutable.ArrayBuffer(true)\n        val isPrimeFactor20\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor21 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor22 = mutable.ArrayBuffer(true)\n        val isPrimeFactor23\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor24 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor25 = mutable.ArrayBuffer(true)\n        val isPrimeFactor26\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor27 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor28 = mutable.ArrayBuffer(true)\n        val isPrimeFactor29\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor30 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor31 = mutable.ArrayBuffer(true)\n        val isPrimeFactor32\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor33 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor34 = mutable.ArrayBuffer(true)\n        val isPrimeFactor35\
    \ = mutable.ArrayBuffer(true)\n        val ", "        val primes = mutable.ArrayBuffer(2)\n\
    \        var factor = 2\n        while(factor < n) {\n            primes += factor\n\
    \            factor += 2\n        }\n        primes.last", "        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(n)(x => x % 2 != 0).takeWhile(x => x <= n).filter(_ > 1).dropWhile(x\
    \ => x <= n).filter(_ == 1).iterator\n        val isPrimeIter2 = Iterator.iterate(n)(x\
    \ => x % 2 != 0).takeWhile(x => x <= n).filter(_ > 1).dropWhile(x => x <= n).filter(_\
    \ == 1).iterator\n        val isPrimeIter3 = Iterator.iterate(n)(x => x % 2 !=\
    \ 0).takeWhile(x => x <= n).filter(_ > 1).dropWhile(x => x <= n).filter(_ == 1).iterator\n\
    \        val isPrimeIter4 = Iterator.iterate(n)(x => x % 2 != 0).takeWhile(x =>\
    \ x <= n).filter(_ > 1).dropWhile(x => x <= n).filter(_ == 1).iterator\n     \
    \   val isPrimeIter5 = Iterator.iterate(n)(x => x % 2 != 0).takeWhile(x => x <=\
    \ n).filter(_ > 1).dropWhile(x => x <= n).filter(_ == 1).iterator\n        val\
    \ isPrimeIter6 = Iterator.iterate(n)(x => x % 2 != 0).takeWhile(x => x <= n).filter(_\
    \ > 1).dropWhile(x => x <= n).filter(_ == 1).iterator\n        val isPrimeIter7\
    \ = Iterator.iterate(n)(x => x % 2 != 0).takeWhile(x => x <= n).filter(_ > 1).dropWhile(x\
    \ => x <= n).filter(_ == 1).iterator\n        val isPrimeIter8 = Iterator.iterate(n)(x\
    \ => x % 2 != 0).takeWhile(x => x <= n).filter(_ > 1).dropWhile(x => x <= n).filter(_\
    \ == 1).iterator\n        val isPrimeIter9 = Iterator.iterate(n)(x => x % 2 !=\
    \ 0).takeWhile(x => x <= n).filter(_ > 1).dropWhile(x => x <= n).filter(_ == 1).iterator\n\
    \        val isPrimeIter10 = Iterator.iterate(n)(x => x % 2 != 0).takeWhile(x\
    \ => x <= n).filter(_ > 1).dropWhile(x => x <= n).filter(_ == 1).iterator\n  \
    \      val isPrimeIter11 = Iterator.iterate(", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeDivisor2 = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor3\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor4 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeDivisor5 = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor6\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor7 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeDivisor8 = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor9\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor10 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeDivisor11 = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor12\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor13 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeDivisor14 = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor15\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor16 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeDivisor17 = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor18\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor19 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeDivisor20 = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor21\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor22 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeDivisor23 = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor24\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor25 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeDivisor26 = mutable.ListBuffer[Boolean]()\n        val isPrimeDivisor27\
    \ = mutable.List", "        val factors = mutable.ArrayBuffer.empty[Long]\n  \
    \      for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n             \
    \   factors += i\n            }\n        }\n        factors.max", "        val\
    \ factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeIter\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter2 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter3 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter4\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter5 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter6 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter7\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter8 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter9 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter10\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter11 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter12 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter13\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter14 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter15 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter16\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter17 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter18 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter19\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter20 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter21 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter22\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter23 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter24 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter25\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter26 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter27 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter28\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter29", "        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to n by 2) {\n      \
    \      if (n % i == 0) {\n                factors += i\n            }\n      \
    \  }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(n)(_ => true).takeWhile(_ <= n).iterator\n\
    \        val isPrimeIter2 = Iterator.iterate(n)(_ => true).takeWhile(_ <= n).iterator\n\
    \        val isPrimeIter3 = Iterator.iterate(n)(_ => true).takeWhile(_ <= n).iterator\n\
    \        val isPrimeIter4 = Iterator.iterate(n)(_ => true).takeWhile(_ <= n).iterator\n\
    \        val isPrimeIter5 = Iterator.iterate(n)(_ => true).takeWhile(_ <= n).iterator\n\
    \        val isPrimeIter6 = Iterator.iterate(n)(_ => true).takeWhile(_ <= n).iterator\n\
    \        val isPrimeIter7 = Iterator.iterate(n)(_ => true).takeWhile(_ <= n).iterator\n\
    \        val isPrimeIter8 = Iterator.iterate(n)(_ => true).takeWhile(_ <= n).iterator\n\
    \        val isPrimeIter9 = Iterator.iterate(n)(_ => true).takeWhile(_ <= n).iterator\n\
    \        val isPrimeIter10 = Iterator.iterate(n)(_ => true).takeWhile(_ <= n).iterator\n\
    \        val isPrimeIter11 = Iterator.iterate(n)(_ => true).takeWhile(_ <= n).iterator\n\
    \        val isPrimeIter12 = Iterator.iterate(n)(_ => true).takeWhile(_ <= n).iterator\n\
    \        val isPrimeIter13 = Iterator.iterate(n)(_ => true).takeWhile(_ <= n).iterator\n\
    \        val isPrimeIter14 = Iterator.iterate(n)(_ => true).takeWhile(_ <= n).iterator\n\
    \        val isPrimeIter15 = Iterator.iterate(n)(_ => true).takeWhile(_ <= n).iterator\n\
    \        val isPrimeIter16 = Iterator.iterate(n)(_ => true).takeWhile(_ <= n).iterator\n\
    \        val isPrimeIter17 = Iterator.iterate(n)(_ => true).takeWhile(_ <= n).iterator\n\
    \        val isPrimeIter18 = Iterator.iterate(n)(_ => true).takeWhile(_ <= n).iterator\n\
    \        val isPrimeIter19 = Iterator.iterate(n)(_ ", "        val primes = mutable.ArrayBuffer(2)\n\
    \        var i = 2\n        while (i <= n / 2) {\n            if (n % i == 0)\
    \ {\n                primes += i\n                n /= i\n            }\n    \
    \        i += 1\n        }\n        primes.last", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val maxFactor = math.max(2, math.ceil(math.sqrt(n)))\n        for(i <-\
    \ 2 to maxFactor) {\n            val factor = (n / i).toInt\n            if(factor\
    \ > 1) {\n                factors += factor\n            }\n        }\n      \
    \  factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n    \
    \    val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrimePrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.Array", "        val factors = mutable.ArrayBuffer.empty[Long]\n \
    \       var i = 2\n        while (i <= n / i) {\n            if (n % i == 0) {\n\
    \                factors += i\n                n /= i\n            }\n       \
    \     i += 1\n        }\n        factors.max", "        val factors = mutable.Set[Long]()\n\
    \        var maxFactor = 0\n        var maxFactorIndex = 0\n        for(i <- 2\
    \ to n){\n            for(j <- 2 to i){\n                if(i % j == 0){\n   \
    \                 factors += j\n                    if(factors.size > maxFactor){\n\
    \                        maxFactor = factors.size\n                        maxFactorIndex\
    \ = i\n                    }\n                }\n            }\n        }\n  \
    \      factors.size - maxFactorIndex", "        val factors = mutable.Set[Long]()\n\
    \        for(i <- 2 to n by 2){\n            if(n%i == 0){\n                factors\
    \ += i\n            }\n        }\n        factors.max", "        var largestPrimeFactor\
    \ = 0\n        var largestPrimeFactorIndex = 0\n        var isPrime = true\n \
    \       var isPrimeIndex = 0\n        var isPrimePrime = true\n        var isPrimePrimeIndex\
    \ = 0\n        var isPrimePrimePrime = true\n        var isPrimePrimePrimeIndex\
    \ = 0\n        var isPrimePrimePrimePrime = true\n        var isPrimePrimePrimePrimeIndex\
    \ = 0\n        var isPrimePrimePrimePrimePrime = true\n        var isPrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var isPrimePrimePrimePrimePrimePrime = true\n        var isPrimePrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var isPrimePrimePrimePrimePrimePrimePrime = true\n        var isPrimePrimePrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n  \
    \      var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n     \
    \   var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n   \
    \     var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n\
    \        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime",
  "        val factors = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        for (i <- 2 to n by 2)\n            if (n % i == 0)\n               \
    \ factors += i\n            else\n                isPrime += false\n        val\
    \ largestPrime = factors.max\n        val largestPrimeIsPrime = isPrime.exists(_\
    \ == true)\n        if (largestPrimeIsPrime)\n            largestPrime\n     \
    \   else\n            largestPrimeFactor(largestPrime)", "        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        var i = 2L\n        while (i <= n && isPrime.nonEmpty) {\n          \
    \  if (n % i == 0) {\n                factors += i\n                isPrime +=\
    \ false\n            }\n            else {\n                isPrime += true\n\
    \            }\n            i += 1\n        }\n        factors.max", "       \
    \ val primes = mutable.ArrayBuffer(2)\n        val factors = mutable.ArrayBuffer(2)\n\
    \        val isPrime = mutable.ArrayBuffer(true)\n        val isPrimeFactor =\
    \ mutable.ArrayBuffer(true)\n        val isPrimeFactor2 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor3 = mutable.ArrayBuffer(true)\n        val isPrimeFactor4\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor5 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor6 = mutable.ArrayBuffer(true)\n        val isPrimeFactor7\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor8 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor9 = mutable.ArrayBuffer(true)\n        val isPrimeFactor10\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor11 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor12 = mutable.ArrayBuffer(true)\n        val isPrimeFactor13\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor14 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor15 = mutable.ArrayBuffer(true)\n        val isPrimeFactor16\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor17 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor18 = mutable.ArrayBuffer(true)\n        val isPrimeFactor19\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor20 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor21 = mutable.ArrayBuffer(true)\n        val isPrimeFactor22\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor23 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor24 = mutable.ArrayBuffer(true)\n        val isPrimeFactor25\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor26 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor27 = mutable.ArrayBuffer(true)\n        val isPrimeFactor28\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor29 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor30 = mutable.ArrayBuffer(true)\n        val isPrimeFactor31\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor32 = mutable.ArrayBuffer(true)\n\
    \        val isPrimeFactor33 = mutable.ArrayBuffer(true)\n        val isPrimeFactor34\
    \ = mutable.ArrayBuffer(true)\n        val isPrimeFactor35 = mutable.ArrayBuffer(true)\n\
    \        val ", "        val factors = mutable.ArrayBuffer.empty[Long]\n     \
    \   var i = 2\n        while (i <= n / i) {\n            if (n % i == 0) {\n \
    \               factors += i\n                n /= i\n            }\n        \
    \    i += 1\n        }\n        if (n > 1) {\n            factors += n\n     \
    \   }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        factors.max", "        val primes = mutable.ArrayBuffer(2)\n\
    \        val factors = mutable.ArrayBuffer(2)\n        val isPrime = mutable.ArrayBuffer(true)\n\
    \        val isPrimeIter = Iterator.continually(isPrime)\n        val isPrimeIterIter\
    \ = Iterator.continually(isPrimeIter)\n        val isPrimeIterIterIter = Iterator.continually(isPrimeIterIter)\n\
    \        val isPrimeIterIterIterIter = Iterator.continually(isPrimeIterIterIter)\n\
    \        val isPrimeIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIterIter =\
    \ Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.", "        var maxPrimeFactor = Long.MaxValue\n        var maxPrimeFactorIndex\
    \ = 0\n        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrimeEven\
    \ = true\n        var isPrimeEvenIndex = 0\n        var isPrimeOdd = true\n  \
    \      var isPrimeOddIndex = 0\n        var isPrimeOddEven = true\n        var\
    \ isPrimeOddEvenIndex = 0\n        var isPrimeOddOdd = true\n        var isPrimeOddOddIndex\
    \ = 0\n        var isPrimeOddEvenOdd = true\n        var isPrimeOddEvenOddIndex\
    \ = 0\n        var isPrimeOddOddEvenOdd = true\n        var isPrimeOddOddEvenOddIndex\
    \ = 0\n        var isPrimeOddOddOddEvenOdd = true\n        var isPrimeOddOddOddEvenOddIndex\
    \ = 0\n        var isPrimeOddOddOddOddEvenOdd = true\n        var isPrimeOddOddOddOddEvenOddIndex\
    \ = 0\n        var isPrimeOddOddOddOddOddEvenOddIndex = 0\n        var isPrimeOddOddOddOddOddEvenOddIndex\
    \ = 0\n        var isPrimeOddOddOddOddOddEvenOddIndex = 0\n        var isPrimeOddOddOddOddOddEvenOddIndex\
    \ = 0\n        var isPrimeOddOddOddOddOddOddEvenOddIndex = 0\n        var isPrimeOddOddOddOddOddOddEvenOddIndex\
    \ = 0\n        var isPrimeOddOddOddOddOddOddEvenOddIndex = 0\n        var isPrimeOddOddOddOddOddOddEvenOddIndex\
    \ = 0\n        var isPrimeOddOddOddOddOddOddEvenOddIndex = 0\n        var isPrimeOddOddOddOddOddOddEvenOddIndex\
    \ = 0\n        var isPrimeOddOddOddOddOddOddEvenOddIndex = 0\n        var isPrimeOddOddOddOddOddOddEvenOddIndex\
    \ = 0\n        var isPrimeOddOddOddOddOddOddEvenOddIndex = 0\n        var isPrimeOddOdd",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        var i = 2\n    \
    \    while (i <= n / i) {\n            if (n % i == 0) {\n                factors\
    \ += i\n                n /= i\n            }\n            i += 1\n        }\n\
    \        if (n > 1) {\n            factors += n\n        }\n        factors.max",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        factors += 2\n \
    \       factors += 3\n        factors += 5\n        factors += 7\n        factors\
    \ += 11\n        factors += 13\n        factors += 17\n        factors += 19\n\
    \        factors += 23\n        factors += 29\n        factors += 31\n       \
    \ factors += 37\n        factors += 41\n        factors += 43\n        factors\
    \ += 47\n        factors += 53\n        factors += 59\n        factors += 61\n\
    \        factors += 67\n        factors += 71\n        factors += 73\n       \
    \ factors += 79\n        factors += 83\n        factors += 89\n        factors\
    \ += 97\n        factors += 101\n        factors += 103\n        factors += 107\n\
    \        factors += 109\n        factors += 113\n        factors += 127\n    \
    \    factors += 131\n        factors += 137\n        factors += 139\n        factors\
    \ += 147\n        factors += 151\n        factors += 157\n        factors += 163\n\
    \        factors += 167\n        factors += 173\n        factors += 179\n    \
    \    factors += 181\n        factors += 191\n        factors += 193\n        factors\
    \ += 197\n        factors += 199\n        factors += 211\n        factors += 223\n\
    \        factors += 227\n        factors += 229\n        factors += 233\n    \
    \    factors += 239\n        factors += 241\n        factors += 247\n        factors\
    \ += 249\n        factors += 251\n        factors += 257\n        factors += 263\n\
    \        factors += 269\n        factors += 271\n        factors += 277\n    \
    \    factors += 281\n        factors += 283\n        factors += 293\n        factors\
    \ += 307\n        factors += 311\n        factors += 313\n        factors += 317\n\
    \        factors += 331\n        factors += 337\n        factors += 347\n    \
    \    factors += 349\n        factors += 353\n        factors += 359\n        factors\
    \ += 367\n        factors += 373\n        factors += 379\n        factors += 383\n\
    \        factors += 389\n        factors += 397\n        factors += 401\n    \
    \    factors += 409\n        factors += 419\n        factors += 421\n        factors\
    \ += 431\n        factors += 433\n        factors += 439\n        factors += 443\n\
    \        factors += 449\n        factors += 457\n        factors += 461\n    \
    \    factors += 463\n        factors += 467\n        factors += 479\n", "    \
    \    val factors = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(n)(_ + 1).takeWhile(_ < n).filter(_\
    \ % _ == 0)\n        val isPrimeIter2 = Iterator.iterate(n)(_ + 1).takeWhile(_\
    \ < n).filter(_ % _ != 0)\n        val isPrimeIter3 = Iterator.iterate(n)(_ +\
    \ 1).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter4 = Iterator.iterate(n)(_\
    \ + 1).takeWhile(_ < n).filter(_ % _ != 0)\n        val isPrimeIter5 = Iterator.iterate(n)(_\
    \ + 1).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter6 = Iterator.iterate(n)(_\
    \ + 1).takeWhile(_ < n).filter(_ % _ != 0)\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ + 1).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ + 1).takeWhile(_ < n).filter(_ % _ != 0)\n        val isPrimeIter9 = Iterator.iterate(n)(_\
    \ + 1).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter10 = Iterator.iterate(n)(_\
    \ + 1).takeWhile(_ < n).filter(_ % _ != 0)\n        val isPrimeIter11 = Iterator.iterate(n)(_\
    \ + 1).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter12 = Iterator.iterate(n)(_\
    \ + 1).takeWhile(_ < n).filter(_ % _ != 0)\n        val isPrimeIter13 = Iterator.iterate(n)(_\
    \ + 1).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter14 = Iterator.iterate(n)(_\
    \ + 1).takeWhile(_ < n).filter(_ % _ != 0)\n        val isPrimeIter15 = Iterator.iterate(n)(_\
    \ + 1).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter16 = Iterator.iterate(n)(_\
    \ + 1).takeWhile(_ < n).filter(_ % _ != 0)\n        val isPrimeIter17 = Iterator.iterate(n)(_\
    \ + ", "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes\
    \ = mutable.ArrayBuffer.empty[Long]\n        var i = 2\n        while (i <= n\
    \ / i) {\n            if (n % i == 0) {\n                factors += i\n      \
    \          primes += i\n            }\n            i += 1\n        }\n       \
    \ val largest = factors.max\n        val largestPrime = primes.max\n        if\
    \ (largest == largestPrime) {\n            return largest\n        }\n       \
    \ return largestPrime", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(n)(n => n % 2 == 0).takeWhile(_ %\
    \ 2 != 0).takeWhile(_ % 3 != 0).takeWhile(_ % 5 != 0).takeWhile(_ % 7 != 0).takeWhile(_\
    \ % 11 != 0).takeWhile(_ % 13 != 0).takeWhile(_ % 17 != 0).takeWhile(_ % 19 !=\
    \ 0).takeWhile(_ % 23 != 0).takeWhile(_ % 29 != 0).takeWhile(_ % 31 != 0).takeWhile(_\
    \ % 37 != 0).takeWhile(_ % 41 != 0).takeWhile(_ % 43 != 0).takeWhile(_ % 47 !=\
    \ 0).takeWhile(_ % 51 != 0).takeWhile(_ % 55 != 0).takeWhile(_ % 59 != 0).takeWhile(_\
    \ % 63 != 0).takeWhile(_ % 67 != 0).takeWhile(_ % 71 != 0).takeWhile(_ % 73 !=\
    \ 0).takeWhile(_ % 79 != 0).takeWhile(_ % 83 != 0).takeWhile(_ % 89 != 0).takeWhile(_\
    \ % 97 != 0).takeWhile(_ % 101 != 0).takeWhile(_ % 103 != 0).takeWhile(_ % 105\
    \ != 0).takeWhile(_ % 107 != 0).takeWhile(_ % 109 != 0).takeWhile(_ % 113 != 0).takeWhile(_\
    \ % 117 != 0).takeWhile(_ % 121 != 0).takeWhile(_ % 123 != 0).takeWhile(_ % 125\
    \ != 0).takeWhile(_ % 127 != 0).takeWhile(_ % 129 != 0).takeWhile(_ % 131 != 0).takeWhile(_\
    \ % 133 != 0).takeWhile(_ % 135 != 0).takeWhile(_ % 137 != 0).takeWhile(_ % 139\
    \ !=0).takeWhile(_ % 141 != 0).takeWhile(_ % 143 != 0).takeWhile(_ % 145 != 0).takeWhile(_\
    \ % 147 !=0).takeWhile(_ % 149 != 0).takeWhile(_ % 151 != 0).takeWhile(_ % 153\
    \ != 0).takeWhile(_ % 155 != 0).takeWhile(_ % 157 !=0).takeWhile(_ % 159 != 0).takeWhile(_\
    \ % 161 != 0).takeWhile(_ % 163 != 0).takeWhile(_ % 165 != 0).takeWhile(_ % 167\
    \ !=0).takeWhile(_ % 169 != 0).takeWhile(_ % 171 != 0).takeWhile(_ % 173 != 0).takeWhile(_\
    \ % 175 != 0).", "        var maxFactor = 2 // Start with 2\n        var maxFactorPrime\
    \ = true // Start with true\n        for (i <- 2 until n by 2) {\n           \
    \ if (n % i == 0) {\n                if (maxFactorPrime) {\n                 \
    \   maxFactor = i\n                    maxFactorPrime = false\n              \
    \  } else {\n                    maxFactor = i\n                    maxFactorPrime\
    \ = true\n                }\n            }\n        }\n        maxFactor", " \
    \       var largestPrimeFactor = 0\n        var largestPrimeFactorIndex = 0\n\
    \        var isPrime = true\n        var isPrimeIndex = 0\n        var isPrimePrime\
    \ = true\n        var isPrimePrimeIndex = 0\n        var isPrimePrimePrime = true\n\
    \        var isPrimePrimePrimeIndex = 0\n        var isPrimePrimePrimePrime =\
    \ true\n        var isPrimePrimePrimePrimeIndex = 0\n        var isPrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimeIndex = 0\n        var isPrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimePrimeIndex = 0\n        var isPrimePrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimePrimePrimeIndex = 0\n       \
    \ var isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n\
    \        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimeIndex = 0\n      \
    \  var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n    \
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeIndex =\
    \ 0\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n        var isPrimePri", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor2 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor3 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor4 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor5\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor6 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor7 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor8 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor9\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor10 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor11 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor12 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor13\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor14 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor15 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor16 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor17\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor18 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor19 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor20 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor21\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor22 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor23 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor24 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor25\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor26 = mutable.ArrayBuffer.empty[Boolean]",
  "        val primes = mutable.ArrayBuffer(2)\n        var i = 2\n        while (i\
    \ <= n / 2) {\n            if (n % i == 0) {\n                primes += i\n  \
    \              n /= i\n            }\n            i += 1\n        }\n        primes.last",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(n)(x => x % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_\
    \ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_\
    \ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2\
    \ != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_\
    \ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_\
    \ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2\
    \ != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_\
    \ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_\
    \ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2\
    \ != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_\
    \ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_\
    \ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2\
    \ != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_\
    \ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_\
    \ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2\
    \ != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_\
    \ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_\
    \ % 2 != 0).takeWhile(_ > 1).filter(_ % 2 != 0).takeWhile(_ > 1).filter(_ % 2\
    \ != 0).", "        val primes = mutable.ArrayBuffer(2)\n        var i = 2\n \
    \       while (i <= n / 2) {\n            if (n % i == 0) {\n                primes\
    \ += i\n                n /= i\n            }\n            i += 1\n        }\n\
    \        primes.last"]
stop_tokens:
- "\n    }\n"
