name: HumanEval_59_largest_prime_factor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
  \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
  \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
  \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
  \ == (29l));\n    }\n\n}\n"
completions: ["        var maxFactor = n / 2\n        var maxFactorPrime = 0\n   \
    \     var maxFactorPrimePrime = 0\n        var maxFactorPrimePrimePrime = 0\n\
    \        while (maxFactor != 1) {\n            var isPrime = true\n          \
    \  var isPrimePrime = true\n            var isPrimePrimePrime = true\n       \
    \     var isPrimePrimePrimePrime = true\n            var isPrimePrimePrimePrimePrime\
    \ = true\n            var isPrimePrimePrimePrimePrimePrime = true\n          \
    \  var isPrimePrimePrimePrimePrimePrimePrime = true\n            var isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n            var isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n\
    \            var isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n    \
    \        var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n   \
    \         var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n\
    \            var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n            var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n            var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n            var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n            var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n            var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n            var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n            var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime",
  "        val primes = mutable.ArrayBuffer.empty[Long]\n        val largestPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactor = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor2 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor3 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor4\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor5 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor6 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor7 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor8\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor9 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor10 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor11 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor12\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor13 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor14 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor15 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor16\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor17 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor18 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor19 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor20\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor21 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor22 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor23 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor24\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor25 = mutable.ArrayBuffer.empty[",
  "        val primes = mutable.ArrayBuffer(2)\n        val factors = mutable.ArrayBuffer(2)\n\
    \        val isPrime = mutable.ArrayBuffer(true)\n        val isPrimeIter = Iterator.continually(isPrime)\n\
    \        val isPrimeIterIter = Iterator.continually(isPrimeIter)\n        val\
    \ isPrimeIterIterIter = Iterator.continually(isPrimeIterIter)\n        val isPrimeIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIter)\n        val isPrimeIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIter)\n        val isPrimeIterIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIter)\n        val isPrimeIterIterIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIterIterIter)\n        val isPrimeIterIterIterIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIterIterIter)\n        val isPrimeIterIterIterIterIterIterIterIterIter\
    \ = Iterator.continually(isPrimeIterIterIterIterIterIterIterIter)\n        val\
    \ isPrimeIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIterIter",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to n\
    \ by 2) {\n            if (n % i == 0) {\n                factors += i\n     \
    \       }\n        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimeFactor =\
    \ mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to n\
    \ by 2)\n            if (n % i == 0)\n                factors += i\n        factors.max",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n\
    \ by 2){\n            for(j <- 2 to i by 2){\n                if(i % j == 0){\n\
    \                    break\n                }\n            }\n            factors\
    \ += i\n        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ == 0)\n        val isPrimeIter2 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ != 0)\n        val isPrimeIter3 = Iterator.iterate(n)(_ +\
    \ 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter4 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter5 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter6 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter9 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter10 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter11 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter12 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter13 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter14 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter15 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter16 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val is", "        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n by 2){\n        \
    \    for(j <- 2 to i by 2){\n                if(i % j == 0){\n               \
    \     break\n                }\n            }\n            factors += i\n    \
    \    }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        var i = 2\n\
    \        while (i <= n && isPrime.size < n) {\n            if (n % i == 0) {\n\
    \                factors += i\n                isPrime += true\n            }\n\
    \            i += 1\n        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter2\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter3 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter4 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter5\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter6 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter7 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter8\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter9 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter10 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter11\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter12 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter13 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter14\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter15 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter16 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter17\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter18 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter19 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter20\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter21 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter22 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter23\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter24 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter25 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter26\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter27 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter28 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter29",
  "        val factors = mutable.ListBuffer[Long]()\n        var i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n > 1) {\n            factors += n\n        }\n        factors.max", " \
    \       val factors = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to\
    \ n by 2)\n            if (n % i == 0)\n                factors += i\n       \
    \ factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n     \
    \   val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n       \
    \ val isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n        val\
    \ isPrimeIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n        val\
    \ isPrimeIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n        val\
    \ isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n   \
    \     val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIndex = 0\n        val isPrimeIndexMax = math.floor(math.sqrt(n).toInt)\n\
    \        val isPrimeIndexMin = math.ceil(math.sqrt(n).toInt)\n        val isPrimeIndexMaxMin\
    \ = math.min(isPrimeIndexMax, isPrimeIndexMin)\n        val isPrimeIndexMaxMin2\
    \ = math.min(isPrimeIndexMaxMin, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin3\
    \ = math.min(isPrimeIndexMaxMin2, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin4\
    \ = math.min(isPrimeIndexMaxMin3, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin5\
    \ = math.min(isPrimeIndexMaxMin4, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin6\
    \ = math.min(isPrimeIndexMaxMin5, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin7\
    \ = math.min(isPrimeIndexMaxMin6, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin8\
    \ = math.min(isPrimeIndexMaxMin7, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin9\
    \ = math.min(isPrimeIndexMaxMin8, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin10\
    \ = math.min(isPrimeIndexMaxMin9, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin11\
    \ = math.min(isPrimeIndexMaxMin10, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin12\
    \ = math.min(isPrimeIndexMaxMin11, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin13\
    \ = math.min(isPrimeIndexMaxMin12, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin14\
    \ = math.min(isPrimeIndexMaxMin13, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin15\
    \ = math.min(isPrimeIndexMaxMin14, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin16\
    \ = math.min(isPrimeIndexMaxMin15, isPrimeIndexMaxMin)\n        val isPrimeIndexMaxMin17\
    \ = math.min(isPrimeIndexMaxMin16, isPrimeIndexMaxMin)\n        ", "        val\
    \ factors = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n by 2){\n\
    \            val test = i * i\n            while(test < n){\n                val\
    \ test2 = test * test\n                if(test2 > n) break\n                if(factors.contains(test2))\
    \ break\n                factors += test2\n                test += 1\n       \
    \     }\n        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        var maxFactor = 2 // start at 2\n \
    \       var maxFactorPrime = 2 // start at 2\n        var primeFactors = mutable.ListBuffer(2)\n\
    \        var isPrime = true\n        for (i <- 2 to n by 2) {\n            if\
    \ (n % i == 0) {\n                isPrime = false\n                break\n   \
    \         }\n        }\n        if (isPrime) {\n            for (i <- 2 to n by\
    \ 2) {\n                if (n % i == 0) {\n                    primeFactors +=\
    \ i\n                    if (i % maxFactorPrime == 0) {\n                    \
    \    maxFactorPrime = i\n                    }\n                }\n          \
    \  }\n        }\n        maxFactor = primeFactors.max\n        maxFactorPrime\
    \ = primeFactors.max\n        maxFactor", "        val primes = mutable.ArrayBuffer(2)\n\
    \        val factors = mutable.ArrayBuffer(2)\n        val largestPrime = mutable.ArrayBuffer(2)\n\
    \        val largestPrimeFactor = mutable.ArrayBuffer(2)\n        val isPrime\
    \ = mutable.ArrayBuffer(true)\n        val isFactor = mutable.ArrayBuffer(true)\n\
    \        val isLargestPrime = mutable.ArrayBuffer(true)\n        val isLargestPrimeFactor\
    \ = mutable.ArrayBuffer(true)\n        val isLargestPrimeFactorOfPrime = mutable.ArrayBuffer(true)\n\
    \        val isLargestPrimeFactorOfPrimeFactor = mutable.ArrayBuffer(true)\n \
    \       val isLargestPrimeFactorOfPrimeFactorOfPrime = mutable.ArrayBuffer(true)\n\
    \        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactor = mutable.ArrayBuffer(true)\n\
    \        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime = mutable.ArrayBuffer(true)\n\
    \        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactor = mutable.ArrayBuffer(true)\n\
    \        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime\
    \ = mutable.ArrayBuffer(true)\n        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime\
    \ = mutable.ArrayBuffer(true)\n        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactor\
    \ = mutable.ArrayBuffer(true)\n        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime\
    \ = mutable.ArrayBuffer(true)\n        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime\
    \ = mutable.ArrayBuffer(true)\n        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactor\
    \ = mutable.ArrayBuffer(true)\n        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrime\
    \ = mutable.ArrayBuffer(true)\n        val isLargestPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPri"]
stop_tokens:
- "\n    }\n"
